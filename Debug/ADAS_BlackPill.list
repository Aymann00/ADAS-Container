
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d4  0800a0d4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0dc  0800a0dc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a0e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056e4  20000088  0800a16c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000576c  0800a16c  0002576c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd9f  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d36  00000000  00000000  0003be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  0003fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a6  00000000  00000000  00041520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192f8  00000000  00000000  000428c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c26e  00000000  00000000  0005bbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba30  00000000  00000000  00077e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cb0  00000000  00000000  0011385c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011a50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d2c 	.word	0x08009d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009d2c 	.word	0x08009d2c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050c:	f001 fe14 	bl	8002138 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000510:	f000 f8b0 	bl	8000674 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000514:	f000 f9e6 	bl	80008e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000518:	f000 f9c4 	bl	80008a4 <MX_DMA_Init>
	MX_SPI1_Init();
 800051c:	f000 f912 	bl	8000744 <MX_SPI1_Init>
	MX_TIM3_Init();
 8000520:	f000 f946 	bl	80007b0 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000524:	f000 f994 	bl	8000850 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000528:	f005 fcd8 	bl	8005edc <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 800052c:	482f      	ldr	r0, [pc, #188]	; (80005ec <main+0xe4>)
 800052e:	f005 fee3 	bl	80062f8 <osMutexNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a2e      	ldr	r2, [pc, #184]	; (80005f0 <main+0xe8>)
 8000536:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <main+0xec>)
 800053a:	2100      	movs	r1, #0
 800053c:	482e      	ldr	r0, [pc, #184]	; (80005f8 <main+0xf0>)
 800053e:	f005 fd17 	bl	8005f70 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <main+0xf4>)
 8000546:	6013      	str	r3, [r2, #0]

	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 8000548:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <main+0xf8>)
 800054a:	2100      	movs	r1, #0
 800054c:	482d      	ldr	r0, [pc, #180]	; (8000604 <main+0xfc>)
 800054e:	f005 fd0f 	bl	8005f70 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a2c      	ldr	r2, [pc, #176]	; (8000608 <main+0x100>)
 8000556:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 8000558:	4a2c      	ldr	r2, [pc, #176]	; (800060c <main+0x104>)
 800055a:	2100      	movs	r1, #0
 800055c:	482c      	ldr	r0, [pc, #176]	; (8000610 <main+0x108>)
 800055e:	f005 fd07 	bl	8005f70 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <main+0x10c>)
 8000566:	6013      	str	r3, [r2, #0]

	/* creation of Local_Task */
	Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 8000568:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <main+0x110>)
 800056a:	2100      	movs	r1, #0
 800056c:	482b      	ldr	r0, [pc, #172]	; (800061c <main+0x114>)
 800056e:	f005 fcff 	bl	8005f70 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a2a      	ldr	r2, [pc, #168]	; (8000620 <main+0x118>)
 8000576:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 8000578:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <main+0x11c>)
 800057a:	2100      	movs	r1, #0
 800057c:	482a      	ldr	r0, [pc, #168]	; (8000628 <main+0x120>)
 800057e:	f005 fcf7 	bl	8005f70 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a29      	ldr	r2, [pc, #164]	; (800062c <main+0x124>)
 8000586:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <main+0x128>)
 800058a:	2100      	movs	r1, #0
 800058c:	4829      	ldr	r0, [pc, #164]	; (8000634 <main+0x12c>)
 800058e:	f005 fcef 	bl	8005f70 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <main+0x130>)
 8000596:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <main+0x134>)
 800059a:	2100      	movs	r1, #0
 800059c:	4828      	ldr	r0, [pc, #160]	; (8000640 <main+0x138>)
 800059e:	f005 fce7 	bl	8005f70 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <main+0x13c>)
 80005a6:	6013      	str	r3, [r2, #0]

	/* creation of Receiveing */
	ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <main+0x140>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4827      	ldr	r0, [pc, #156]	; (800064c <main+0x144>)
 80005ae:	f005 fcdf 	bl	8005f70 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <main+0x148>)
 80005b6:	6013      	str	r3, [r2, #0]

	/* creation of FCW_Algo */
	FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <main+0x14c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <main+0x150>)
 80005be:	f005 fcd7 	bl	8005f70 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <main+0x154>)
 80005c6:	6013      	str	r3, [r2, #0]

	/* creation of EEBL_Algo */
	EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005c8:	4a25      	ldr	r2, [pc, #148]	; (8000660 <main+0x158>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4825      	ldr	r0, [pc, #148]	; (8000664 <main+0x15c>)
 80005ce:	f005 fccf 	bl	8005f70 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <main+0x160>)
 80005d6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005d8:	4824      	ldr	r0, [pc, #144]	; (800066c <main+0x164>)
 80005da:	f005 fda3 	bl	8006124 <osEventFlagsNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <main+0x168>)
 80005e2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005e4:	f005 fc9e 	bl	8005f24 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0xe0>
 80005ea:	bf00      	nop
 80005ec:	08009f80 	.word	0x08009f80
 80005f0:	20000214 	.word	0x20000214
 80005f4:	08009e18 	.word	0x08009e18
 80005f8:	08000aa5 	.word	0x08000aa5
 80005fc:	200001ec 	.word	0x200001ec
 8000600:	08009e3c 	.word	0x08009e3c
 8000604:	08000ab5 	.word	0x08000ab5
 8000608:	200001f0 	.word	0x200001f0
 800060c:	08009e60 	.word	0x08009e60
 8000610:	08000b65 	.word	0x08000b65
 8000614:	200001f4 	.word	0x200001f4
 8000618:	08009e84 	.word	0x08009e84
 800061c:	08000bd9 	.word	0x08000bd9
 8000620:	200001f8 	.word	0x200001f8
 8000624:	08009ea8 	.word	0x08009ea8
 8000628:	08000c85 	.word	0x08000c85
 800062c:	200001fc 	.word	0x200001fc
 8000630:	08009ecc 	.word	0x08009ecc
 8000634:	08000cf5 	.word	0x08000cf5
 8000638:	20000200 	.word	0x20000200
 800063c:	08009ef0 	.word	0x08009ef0
 8000640:	08000db5 	.word	0x08000db5
 8000644:	20000204 	.word	0x20000204
 8000648:	08009f14 	.word	0x08009f14
 800064c:	08000e79 	.word	0x08000e79
 8000650:	20000208 	.word	0x20000208
 8000654:	08009f38 	.word	0x08009f38
 8000658:	080010a9 	.word	0x080010a9
 800065c:	2000020c 	.word	0x2000020c
 8000660:	08009f5c 	.word	0x08009f5c
 8000664:	080010c9 	.word	0x080010c9
 8000668:	20000210 	.word	0x20000210
 800066c:	08009f90 	.word	0x08009f90
 8000670:	20000218 	.word	0x20000218

08000674 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fb12 	bl	8009cac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80006e4:	2319      	movs	r3, #25
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fc1d 	bl	8002f38 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000704:	f000 fd02 	bl	800110c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fe7f 	bl	8003428 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000730:	f000 fcec 	bl	800110c <Error_Handler>
	}
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2220      	movs	r2, #32
 800077a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 f859 	bl	800384c <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007a0:	f000 fcb4 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM3_Init+0x98>)
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_TIM3_Init+0x9c>)
 80007d2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_TIM3_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM3_Init+0x98>)
 80007e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_TIM3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_TIM3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f4:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_TIM3_Init+0x98>)
 80007f6:	f003 fdff 	bl	80043f8 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000800:	f000 fc84 	bl	800110c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_TIM3_Init+0x98>)
 8000814:	f003 ff92 	bl	800473c <HAL_TIM_SlaveConfigSynchro>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 800081e:	f000 fc75 	bl	800110c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM3_Init+0x98>)
 8000830:	f004 f98a 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 800083a:	f000 fc67 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000fc 	.word	0x200000fc
 800084c:	40000400 	.word	0x40000400

08000850 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f004 f9e0 	bl	8004c4c <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000892:	f000 fc3b 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000144 	.word	0x20000144
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	203a      	movs	r0, #58	; 0x3a
 80008cc:	f001 fd52 	bl	8002374 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d0:	203a      	movs	r0, #58	; 0x3a
 80008d2:	f001 fd6b 	bl	80023ac <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0xa8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_GPIO_Init+0xa8>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xa8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_GPIO_Init+0xa8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_GPIO_Init+0xa8>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_GPIO_Init+0xa8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2118      	movs	r1, #24
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <MX_GPIO_Init+0xac>)
 8000938:	f002 facc 	bl	8002ed4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800093c:	2304      	movs	r3, #4
 800093e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000944:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_GPIO_Init+0xac>)
 8000952:	f002 f93b 	bl	8002bcc <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000956:	2318      	movs	r3, #24
 8000958:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_GPIO_Init+0xac>)
 800096e:	f002 f92d 	bl	8002bcc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2008      	movs	r0, #8
 8000978:	f001 fcfc 	bl	8002374 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800097c:	2008      	movs	r0, #8
 800097e:	f001 fd15 	bl	80023ac <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxCpltCallback+0x1c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fbf2 	bl	80061a4 <osEventFlagsSet>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000218 	.word	0x20000218

080009cc <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 80009d4:	2300      	movs	r3, #0
 80009d6:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	82bb      	strh	r3, [r7, #20]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	82fb      	strh	r3, [r7, #22]
 80009e0:	e04f      	b.n	8000a82 <_CalcAvgDistance+0xb6>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 80009e6:	8afb      	ldrh	r3, [r7, #22]
 80009e8:	461a      	mov	r2, r3
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	461a      	mov	r2, r3
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3b03      	subs	r3, #3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	461a      	mov	r2, r3
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	82bb      	strh	r3, [r7, #20]
 8000a14:	e020      	b.n	8000a58 <_CalcAvgDistance+0x8c>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000a16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <_CalcAvgDistance+0xcc>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	441a      	add	r2, r3
 8000a26:	1211      	asrs	r1, r2, #8
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	1a8a      	subs	r2, r1, r2
 8000a2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000a30:	fb01 f202 	mul.w	r2, r1, r2
 8000a34:	1a9a      	subs	r2, r3, r2
 8000a36:	4613      	mov	r3, r2
 8000a38:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000a3a:	897b      	ldrh	r3, [r7, #10]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4413      	add	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	82bb      	strh	r3, [r7, #20]
 8000a58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a5c:	89bb      	ldrh	r3, [r7, #12]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	ddd9      	ble.n	8000a16 <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <_CalcAvgDistance+0xd0>)
 8000a66:	fba3 1302 	umull	r1, r3, r3, r2
 8000a6a:	1ad2      	subs	r2, r2, r3
 8000a6c:	0852      	lsrs	r2, r2, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	089a      	lsrs	r2, r3, #2
 8000a72:	8afb      	ldrh	r3, [r7, #22]
 8000a74:	b291      	uxth	r1, r2
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <_CalcAvgDistance+0xd4>)
 8000a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	82fb      	strh	r3, [r7, #22]
 8000a82:	8afb      	ldrh	r3, [r7, #22]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d9ac      	bls.n	80009e2 <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_CalcAvgDistance+0xd4>)
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	b60b60b7 	.word	0xb60b60b7
 8000a9c:	24924925 	.word	0x24924925
 8000aa0:	20000c00 	.word	0x20000c00

08000aa4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f005 fb1e 	bl	80060ee <osDelay>
 8000ab2:	e7fb      	b.n	8000aac <StartDefaultTask+0x8>

08000ab4 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b095      	sub	sp, #84	; 0x54
 8000ab8:	af12      	add	r7, sp, #72	; 0x48
 8000aba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Init_Task */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000abc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000ac0:	4921      	ldr	r1, [pc, #132]	; (8000b48 <Init_Task+0x94>)
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <Init_Task+0x98>)
 8000ac4:	f004 f912 	bl	8004cec <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <Init_Task+0x9c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 fc97 	bl	8006404 <osMutexAcquire>

	NRF24_begin(hspi1);
 8000ad6:	4c1f      	ldr	r4, [pc, #124]	; (8000b54 <Init_Task+0xa0>)
 8000ad8:	4668      	mov	r0, sp
 8000ada:	f104 0310 	add.w	r3, r4, #16
 8000ade:	2248      	movs	r2, #72	; 0x48
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f009 f915 	bl	8009d10 <memcpy>
 8000ae6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aea:	f000 fe9f 	bl	800182c <NRF24_begin>
	NRF24_setAutoAck(true);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f001 f964 	bl	8001dbc <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f001 f8bd 	bl	8001c74 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000afa:	f001 f915 	bl	8001d28 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000afe:	f001 f8e5 	bl	8001ccc <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <Init_Task+0xa4>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f001 f835 	bl	8001b78 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <Init_Task+0xa4>)
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	4610      	mov	r0, r2
 8000b16:	4619      	mov	r1, r3
 8000b18:	f001 f80a 	bl	8001b30 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	490f      	ldr	r1, [pc, #60]	; (8000b5c <Init_Task+0xa8>)
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 fa8a 	bl	800203a <NRF24_writeAckPayload>
	NRF24_startListening();
 8000b26:	f000 ff5d 	bl	80019e4 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <Init_Task+0x9c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fcb3 	bl	800649a <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Init_Task+0xac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 faab 	bl	8006094 <osThreadTerminate>

	/* USER CODE END Init_Task */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000021c 	.word	0x2000021c
 8000b4c:	20000144 	.word	0x20000144
 8000b50:	20000214 	.word	0x20000214
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200001f0 	.word	0x200001f0

08000b64 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <Distance_Calc+0x64>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	f005 fb58 	bl	800622c <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81fb      	strh	r3, [r7, #14]
 8000b80:	e011      	b.n	8000ba6 <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <Distance_Calc+0x68>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fffc 	bl	8009b8c <atoi>
 8000b94:	4602      	mov	r2, r0
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	b291      	uxth	r1, r2
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <Distance_Calc+0x6c>)
 8000b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	81fb      	strh	r3, [r7, #14]
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000bac:	d3e9      	bcc.n	8000b82 <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <Distance_Calc+0x6c>)
 8000bb0:	f7ff ff0c 	bl	80009cc <_CalcAvgDistance>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <Distance_Calc+0x70>)
 8000bb8:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <Distance_Calc+0x64>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f005 faef 	bl	80061a4 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000bc6:	e7d1      	b.n	8000b6c <Distance_Calc+0x8>
 8000bc8:	20000218 	.word	0x20000218
 8000bcc:	2000021c 	.word	0x2000021c
 8000bd0:	20000924 	.word	0x20000924
 8000bd4:	20000bf8 	.word	0x20000bf8

08000bd8 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000be0:	2311      	movs	r3, #17
 8000be2:	733b      	strb	r3, [r7, #12]
 8000be4:	2301      	movs	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <Localization+0xa4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	330c      	adds	r3, #12
 8000bee:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <Localization+0xa4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	330a      	adds	r3, #10
 8000bfa:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <Localization+0xa4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3308      	adds	r3, #8
 8000c06:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <Localization+0xa4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3306      	adds	r3, #6
 8000c12:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <Localization+0xa4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <Localization+0xa4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <Localization+0xa4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <Localization+0xa4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	330e      	adds	r3, #14
 8000c40:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <Localization+0xa8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f005 fbd8 	bl	8006404 <osMutexAcquire>

		NRF24_stopListening();
 8000c54:	f000 feec 	bl	8001a30 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	210a      	movs	r1, #10
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fef2 	bl	8001a48 <NRF24_write>
		NRF24_startListening();
 8000c64:	f000 febe 	bl	80019e4 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <Localization+0xa8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fc14 	bl	800649a <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(3000);
 8000c72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c76:	f005 fa3a 	bl	80060ee <osDelay>
	{
 8000c7a:	e7b1      	b.n	8000be0 <Localization+0x8>
 8000c7c:	20000bf8 	.word	0x20000bf8
 8000c80:	20000214 	.word	0x20000214

08000c84 <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <Check_Algorithm+0x60>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	f005 fac8 	bl	800622c <osEventFlagsWait>

		/* Checking on Front Threshold */
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <Check_Algorithm+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	2b64      	cmp	r3, #100	; 0x64
 8000ca6:	d8f1      	bhi.n	8000c8c <Check_Algorithm+0x8>
		{
			/* Frame to Sent to the Front Car to Ask For It's Direction */
			uint8_t ASK_Direction_Frame[3] ={CAR_ID,
 8000ca8:	2311      	movs	r3, #17
 8000caa:	733b      	strb	r3, [r7, #12]
 8000cac:	2302      	movs	r3, #2
 8000cae:	737b      	strb	r3, [r7, #13]
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <Check_Algorithm+0x68>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	73bb      	strb	r3, [r7, #14]
					ASK_DIRECTION_OPERATION_ID,Front_Car_ID};

			/* Protecting Shared Resource -> NRF Module
			 * */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <Check_Algorithm+0x6c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 fba0 	bl	8006404 <osMutexAcquire>

			NRF24_stopListening();
 8000cc4:	f000 feb4 	bl	8001a30 <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2103      	movs	r1, #3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 feba 	bl	8001a48 <NRF24_write>
			NRF24_startListening();
 8000cd4:	f000 fe86 	bl	80019e4 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <Check_Algorithm+0x6c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 fbdc 	bl	800649a <osMutexRelease>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000ce2:	e7d3      	b.n	8000c8c <Check_Algorithm+0x8>
 8000ce4:	20000218 	.word	0x20000218
 8000ce8:	20000bf8 	.word	0x20000bf8
 8000cec:	20000bfc 	.word	0x20000bfc
 8000cf0:	20000214 	.word	0x20000214

08000cf4 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Algorithm */
	bool Local_BSWLeft = false ;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <BSW_Algorithm+0xb8>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	f005 fa88 	bl	800622c <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000d24:	2387      	movs	r3, #135	; 0x87
 8000d26:	737b      	strb	r3, [r7, #13]
 8000d28:	e012      	b.n	8000d50 <BSW_Algorithm+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d009      	beq.n	8000d4a <BSW_Algorithm+0x56>
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d42:	d802      	bhi.n	8000d4a <BSW_Algorithm+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
				break;
 8000d48:	e005      	b.n	8000d56 <BSW_Algorithm+0x62>
				Angle_Iterator--)
 8000d4a:	7b7b      	ldrb	r3, [r7, #13]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8000d50:	7b7b      	ldrb	r3, [r7, #13]
 8000d52:	2b59      	cmp	r3, #89	; 0x59
 8000d54:	d8e9      	bhi.n	8000d2a <BSW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8000d56:	23e1      	movs	r3, #225	; 0xe1
 8000d58:	817b      	strh	r3, [r7, #10]
 8000d5a:	e012      	b.n	8000d82 <BSW_Algorithm+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8000d5c:	897b      	ldrh	r3, [r7, #10]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <BSW_Algorithm+0x88>
 8000d68:	897b      	ldrh	r3, [r7, #10]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d74:	d802      	bhi.n	8000d7c <BSW_Algorithm+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73bb      	strb	r3, [r7, #14]
				break;
 8000d7a:	e006      	b.n	8000d8a <BSW_Algorithm+0x96>
				Angle_Iterator++)
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d88:	d9e8      	bls.n	8000d5c <BSW_Algorithm+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <BSW_Algorithm+0xa6>
 8000d90:	7a7b      	ldrb	r3, [r7, #9]
 8000d92:	f083 0301 	eor.w	r3, r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0b5      	beq.n	8000d0c <BSW_Algorithm+0x18>
 8000da0:	7a3b      	ldrb	r3, [r7, #8]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000daa:	e7af      	b.n	8000d0c <BSW_Algorithm+0x18>
 8000dac:	20000218 	.word	0x20000218
 8000db0:	20000924 	.word	0x20000924

08000db4 <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Algorithm */
	bool Local_DPWLeft = false ;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
	bool Local_DPWRight= false ;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
	bool Local_DPWL_LastState = false ;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	727b      	strb	r3, [r7, #9]
	bool Local_DPWR_LastState = false ;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	723b      	strb	r3, [r7, #8]


	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	727b      	strb	r3, [r7, #9]
		Local_DPWR_LastState = Local_DPWRight;
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	723b      	strb	r3, [r7, #8]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <DPW_Algorithm+0xbc>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	f005 fa24 	bl	800622c <osEventFlagsWait>

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 8000de4:	232d      	movs	r3, #45	; 0x2d
 8000de6:	737b      	strb	r3, [r7, #13]
 8000de8:	e012      	b.n	8000e10 <DPW_Algorithm+0x5c>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <DPW_Algorithm+0x56>
 8000df6:	7b7b      	ldrb	r3, [r7, #13]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e02:	d802      	bhi.n	8000e0a <DPW_Algorithm+0x56>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWLeft = true;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
				break;
 8000e08:	e005      	b.n	8000e16 <DPW_Algorithm+0x62>
				Angle_Iterator--)
 8000e0a:	7b7b      	ldrb	r3, [r7, #13]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	2b0e      	cmp	r3, #14
 8000e14:	d8e9      	bhi.n	8000dea <DPW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8000e16:	f240 133b 	movw	r3, #315	; 0x13b
 8000e1a:	817b      	strh	r3, [r7, #10]
 8000e1c:	e012      	b.n	8000e44 <DPW_Algorithm+0x90>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8000e1e:	897b      	ldrh	r3, [r7, #10]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d009      	beq.n	8000e3e <DPW_Algorithm+0x8a>
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e36:	d802      	bhi.n	8000e3e <DPW_Algorithm+0x8a>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWRight = true;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73bb      	strb	r3, [r7, #14]
				break;
 8000e3c:	e006      	b.n	8000e4c <DPW_Algorithm+0x98>
				Angle_Iterator++)
 8000e3e:	897b      	ldrh	r3, [r7, #10]
 8000e40:	3301      	adds	r3, #1
 8000e42:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8000e4a:	d3e8      	bcc.n	8000e1e <DPW_Algorithm+0x6a>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <DPW_Algorithm+0xa8>
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0b4      	beq.n	8000dcc <DPW_Algorithm+0x18>
 8000e62:	7a3b      	ldrb	r3, [r7, #8]
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
		Local_DPWL_LastState = Local_DPWLeft ;
 8000e6c:	e7ae      	b.n	8000dcc <DPW_Algorithm+0x18>
 8000e6e:	bf00      	nop
 8000e70:	20000218 	.word	0x20000218
 8000e74:	20000924 	.word	0x20000924

08000e78 <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 8000e80:	f000 fe2e 	bl	8001ae0 <NRF24_available>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80fd 	beq.w	8001086 <Wireless_Receiving+0x20e>
			uint8_t Received_Data[32] = {0};
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ea4:	4b7a      	ldr	r3, [pc, #488]	; (8001090 <Wireless_Receiving+0x218>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 faa9 	bl	8006404 <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fe19 	bl	8001af0 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 8000ebe:	4b74      	ldr	r3, [pc, #464]	; (8001090 <Wireless_Receiving+0x218>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 fae9 	bl	800649a <osMutexRelease>

			switch(Received_Data[1])
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d002      	beq.n	8000ed4 <Wireless_Receiving+0x5c>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d07e      	beq.n	8000fd0 <Wireless_Receiving+0x158>
					/*
					 * Stop immediately
					 */
				}
			default:
				break;
 8000ed2:	e0d7      	b.n	8001084 <Wireless_Receiving+0x20c>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000ed4:	7c3b      	ldrb	r3, [r7, #16]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <Wireless_Receiving+0x21c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	330c      	adds	r3, #12
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	3b64      	subs	r3, #100	; 0x64
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	db08      	blt.n	8000ef8 <Wireless_Receiving+0x80>
 8000ee6:	7c3b      	ldrb	r3, [r7, #16]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <Wireless_Receiving+0x21c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	330c      	adds	r3, #12
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	3364      	adds	r3, #100	; 0x64
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dd11      	ble.n	8000f1c <Wireless_Receiving+0xa4>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b65      	ldr	r3, [pc, #404]	; (8001094 <Wireless_Receiving+0x21c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	330a      	adds	r3, #10
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3b64      	subs	r3, #100	; 0x64
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f06:	429a      	cmp	r2, r3
 8000f08:	db0a      	blt.n	8000f20 <Wireless_Receiving+0xa8>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 8000f0a:	7c7b      	ldrb	r3, [r7, #17]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b61      	ldr	r3, [pc, #388]	; (8001094 <Wireless_Receiving+0x21c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	330e      	adds	r3, #14
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	3364      	adds	r3, #100	; 0x64
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dc01      	bgt.n	8000f20 <Wireless_Receiving+0xa8>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <Wireless_Receiving+0xaa>
 8000f20:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000f26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f32:	7d3b      	ldrb	r3, [r7, #20]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <Wireless_Receiving+0x21c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	3b64      	subs	r3, #100	; 0x64
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f40:	429a      	cmp	r2, r3
 8000f42:	db08      	blt.n	8000f56 <Wireless_Receiving+0xde>
 8000f44:	7d3b      	ldrb	r3, [r7, #20]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <Wireless_Receiving+0x21c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	3364      	adds	r3, #100	; 0x64
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dd11      	ble.n	8000f7a <Wireless_Receiving+0x102>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b4e      	ldr	r3, [pc, #312]	; (8001094 <Wireless_Receiving+0x21c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	330a      	adds	r3, #10
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	3b64      	subs	r3, #100	; 0x64
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f64:	429a      	cmp	r2, r3
 8000f66:	db0a      	blt.n	8000f7e <Wireless_Receiving+0x106>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 8000f68:	7c7b      	ldrb	r3, [r7, #17]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <Wireless_Receiving+0x21c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	330e      	adds	r3, #14
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	3364      	adds	r3, #100	; 0x64
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dc01      	bgt.n	8000f7e <Wireless_Receiving+0x106>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <Wireless_Receiving+0x108>
 8000f7e:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(Is_Front){
 8000f90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <Wireless_Receiving+0x138>
					Front_Car_ID = Received_Data[0];
 8000f98:	7b3a      	ldrb	r2, [r7, #12]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <Wireless_Receiving+0x220>)
 8000f9c:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Back_Car_ID )
 8000f9e:	7b3a      	ldrb	r2, [r7, #12]
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <Wireless_Receiving+0x224>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d16b      	bne.n	8001080 <Wireless_Receiving+0x208>
						Back_Car_ID = 0;
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <Wireless_Receiving+0x224>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
				break;
 8000fae:	e067      	b.n	8001080 <Wireless_Receiving+0x208>
				else if(Is_Back){
 8000fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d063      	beq.n	8001080 <Wireless_Receiving+0x208>
					Back_Car_ID = Received_Data[0];
 8000fb8:	7b3a      	ldrb	r2, [r7, #12]
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <Wireless_Receiving+0x224>)
 8000fbc:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Front_Car_ID )
 8000fbe:	7b3a      	ldrb	r2, [r7, #12]
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <Wireless_Receiving+0x220>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d15b      	bne.n	8001080 <Wireless_Receiving+0x208>
						Front_Car_ID = 0;
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <Wireless_Receiving+0x220>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
				break;
 8000fce:	e057      	b.n	8001080 <Wireless_Receiving+0x208>
				bool TX_Flag =0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				bool RX_Flag =0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				bool TX_Fail = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d12c      	bne.n	8001042 <Wireless_Receiving+0x1ca>
 8000fe8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d028      	beq.n	8001042 <Wireless_Receiving+0x1ca>
					uint8_t ASK_Direction_Frame[4] ={0};
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[0] = CAR_ID ;
 8000ff4:	2311      	movs	r3, #17
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ASK_Direction_Frame[2] = Front_Car_ID ;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <Wireless_Receiving+0x220>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					ASK_Direction_Frame[3] = My_Direction ;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <Wireless_Receiving+0x228>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <Wireless_Receiving+0x218>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f9f3 	bl	8006404 <osMutexAcquire>
					NRF24_stopListening();
 800101e:	f000 fd07 	bl	8001a30 <NRF24_stopListening>
					NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	2204      	movs	r2, #4
 8001028:	4619      	mov	r1, r3
 800102a:	2001      	movs	r0, #1
 800102c:	f001 f805 	bl	800203a <NRF24_writeAckPayload>
					NRF24_startListening();
 8001030:	f000 fcd8 	bl	80019e4 <NRF24_startListening>
					osMutexRelease(NRF_MutexHandle) ;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <Wireless_Receiving+0x218>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f005 fa2e 	bl	800649a <osMutexRelease>
				{
 800103e:	bf00      	nop
				break;
 8001040:	e020      	b.n	8001084 <Wireless_Receiving+0x20c>
				else if ((CAR_ID == Received_Data[2] && TX_Flag))
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b11      	cmp	r3, #17
 8001046:	d11d      	bne.n	8001084 <Wireless_Receiving+0x20c>
 8001048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <Wireless_Receiving+0x20c>
					if (	Received_Data[3]==	My_Direction)
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <Wireless_Receiving+0x228>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d106      	bne.n	8001068 <Wireless_Receiving+0x1f0>
						osEventFlagsSet(EventGroupHandle, EEBL_ASSERTED ) ;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <Wireless_Receiving+0x22c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f89f 	bl	80061a4 <osEventFlagsSet>
				break;
 8001066:	e00d      	b.n	8001084 <Wireless_Receiving+0x20c>
					else if(Received_Data[3]	!=	My_Direction)
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <Wireless_Receiving+0x228>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d008      	beq.n	8001084 <Wireless_Receiving+0x20c>
						osEventFlagsSet(EventGroupHandle, FCW_ASSERTED ) ;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <Wireless_Receiving+0x22c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2103      	movs	r1, #3
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f893 	bl	80061a4 <osEventFlagsSet>
				break;
 800107e:	e001      	b.n	8001084 <Wireless_Receiving+0x20c>
				break;
 8001080:	bf00      	nop
 8001082:	e000      	b.n	8001086 <Wireless_Receiving+0x20e>
				break;
 8001084:	bf00      	nop
			}

		}
		osDelay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 f831 	bl	80060ee <osDelay>
		if(NRF24_available()){
 800108c:	e6f8      	b.n	8000e80 <Wireless_Receiving+0x8>
 800108e:	bf00      	nop
 8001090:	20000214 	.word	0x20000214
 8001094:	20000bf8 	.word	0x20000bf8
 8001098:	20000bfc 	.word	0x20000bfc
 800109c:	20000bfd 	.word	0x20000bfd
 80010a0:	20000bf4 	.word	0x20000bf4
 80010a4:	20000218 	.word	0x20000218

080010a8 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <FCW_Algorithm+0x1c>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2200      	movs	r2, #0
 80010ba:	2103      	movs	r1, #3
 80010bc:	f005 f8b6 	bl	800622c <osEventFlagsWait>
 80010c0:	e7f6      	b.n	80010b0 <FCW_Algorithm+0x8>
 80010c2:	bf00      	nop
 80010c4:	20000218 	.word	0x20000218

080010c8 <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <EEBL_Algorithm+0x1c>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	f005 f8a6 	bl	800622c <osEventFlagsWait>
 80010e0:	e7f6      	b.n	80010d0 <EEBL_Algorithm+0x8>
 80010e2:	bf00      	nop
 80010e4:	20000218 	.word	0x20000218

080010e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80010fa:	f001 f83f 	bl	800217c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000800 	.word	0x40000800

0800110c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_MspInit+0x54>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_MspInit+0x54>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x54>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_MspInit+0x54>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_MspInit+0x54>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_MspInit+0x54>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	210f      	movs	r1, #15
 800115a:	f06f 0001 	mvn.w	r0, #1
 800115e:	f001 f909 	bl	8002374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_SPI_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 800119c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_SPI_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23e0      	movs	r3, #224	; 0xe0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011da:	2305      	movs	r3, #5
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_SPI_MspInit+0x8c>)
 80011e6:	f001 fcf1 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d115      	bne.n	800123e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_Base_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	201d      	movs	r0, #29
 8001234:	f001 f89e 	bl	8002374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001238:	201d      	movs	r0, #29
 800123a:	f001 f8b7 	bl	80023ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40000400 	.word	0x40000400
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a35      	ldr	r2, [pc, #212]	; (8001344 <HAL_UART_MspInit+0xf4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d163      	bne.n	800133a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_UART_MspInit+0xf8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_UART_MspInit+0xf8>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_UART_MspInit+0xf8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_UART_MspInit+0xf8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_UART_MspInit+0xf8>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_UART_MspInit+0xf8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <HAL_UART_MspInit+0xfc>)
 80012c8:	f001 fc80 	bl	8002bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_UART_MspInit+0x104>)
 80012d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_UART_MspInit+0x100>)
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_UART_MspInit+0x100>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_MspInit+0x100>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800130e:	4810      	ldr	r0, [pc, #64]	; (8001350 <HAL_UART_MspInit+0x100>)
 8001310:	f001 f85a 	bl	80023c8 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800131a:	f7ff fef7 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_UART_MspInit+0x100>)
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_UART_MspInit+0x100>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2025      	movs	r0, #37	; 0x25
 8001330:	f001 f820 	bl	8002374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001334:	2025      	movs	r0, #37	; 0x25
 8001336:	f001 f839 	bl	80023ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000
 8001350:	2000018c 	.word	0x2000018c
 8001354:	40026440 	.word	0x40026440

08001358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <HAL_InitTick+0xe4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a32      	ldr	r2, [pc, #200]	; (800143c <HAL_InitTick+0xe4>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_InitTick+0xe4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001384:	f107 0210 	add.w	r2, r7, #16
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fa2a 	bl	80037e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800139e:	f002 f9fb 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80013a2:	6378      	str	r0, [r7, #52]	; 0x34
 80013a4:	e004      	b.n	80013b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013a6:	f002 f9f7 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80013aa:	4603      	mov	r3, r0
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_InitTick+0xe8>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9b      	lsrs	r3, r3, #18
 80013ba:	3b01      	subs	r3, #1
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_InitTick+0xec>)
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_InitTick+0xf0>)
 80013c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_InitTick+0xec>)
 80013c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80013cc:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_InitTick+0xec>)
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_InitTick+0xec>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_InitTick+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_InitTick+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <HAL_InitTick+0xec>)
 80013e6:	f003 f807 	bl	80043f8 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11b      	bne.n	8001430 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <HAL_InitTick+0xec>)
 80013fa:	f003 f84d 	bl	8004498 <HAL_TIM_Base_Start_IT>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001404:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001408:	2b00      	cmp	r3, #0
 800140a:	d111      	bne.n	8001430 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800140c:	201e      	movs	r0, #30
 800140e:	f000 ffcd 	bl	80023ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d808      	bhi.n	800142a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	201e      	movs	r0, #30
 800141e:	f000 ffa9 	bl	8002374 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_InitTick+0xf4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e002      	b.n	8001430 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001434:	4618      	mov	r0, r3
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	431bde83 	.word	0x431bde83
 8001444:	20000c10 	.word	0x20000c10
 8001448:	40000800 	.word	0x40000800
 800144c:	2000002c 	.word	0x2000002c

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001480:	2004      	movs	r0, #4
 8001482:	f001 fd41 	bl	8002f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM3_IRQHandler+0x10>)
 8001492:	f003 f863 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000fc 	.word	0x200000fc

080014a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM4_IRQHandler+0x10>)
 80014a6:	f003 f859 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000c10 	.word	0x20000c10

080014b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <USART1_IRQHandler+0x10>)
 80014ba:	f003 fc3d 	bl	8004d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000144 	.word	0x20000144

080014c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA2_Stream2_IRQHandler+0x10>)
 80014ce:	f001 f913 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000018c 	.word	0x2000018c

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f008 fbcb 	bl	8009cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7fe ffe9 	bl	8000508 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001544:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 8001548:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800154c:	2000576c 	.word	0x2000576c

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <NRF24_DelayMicroSeconds+0x3c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <NRF24_DelayMicroSeconds+0x40>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9a      	lsrs	r2, r3, #18
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001574:	bf00      	nop
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	60fa      	str	r2, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1fa      	bne.n	8001576 <NRF24_DelayMicroSeconds+0x22>
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000028 	.word	0x20000028
 8001594:	165e9f81 	.word	0x165e9f81

08001598 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <NRF24_csn+0x20>
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <NRF24_csn+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <NRF24_csn+0x3c>)
 80015ac:	8811      	ldrh	r1, [r2, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fc8f 	bl	8002ed4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80015b6:	e007      	b.n	80015c8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <NRF24_csn+0x38>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <NRF24_csn+0x3c>)
 80015be:	8811      	ldrh	r1, [r2, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fc86 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000c68 	.word	0x20000c68
 80015d4:	20000c6c 	.word	0x20000c6c

080015d8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <NRF24_ce+0x20>
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <NRF24_ce+0x38>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <NRF24_ce+0x3c>)
 80015ec:	8811      	ldrh	r1, [r2, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4618      	mov	r0, r3
 80015f2:	f001 fc6f 	bl	8002ed4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80015f6:	e007      	b.n	8001608 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <NRF24_ce+0x38>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <NRF24_ce+0x3c>)
 80015fe:	8811      	ldrh	r1, [r2, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fc66 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000c68 	.word	0x20000c68
 8001614:	20000c6e 	.word	0x20000c6e

08001618 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ffb8 	bl	8001598 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001632:	f107 010c 	add.w	r1, r7, #12
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	2201      	movs	r2, #1
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <NRF24_read_register+0x4c>)
 800163c:	f002 f98f 	bl	800395e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	1c59      	adds	r1, r3, #1
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <NRF24_read_register+0x4c>)
 800164c:	f002 faca 	bl	8003be4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff ff9f 	bl	8001598 <NRF24_csn>
	return retData;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000c70 	.word	0x20000c70

08001668 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ff8d 	bl	8001598 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	b2db      	uxtb	r3, r3
 8001686:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001688:	f107 010c 	add.w	r1, r7, #12
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	2201      	movs	r2, #1
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <NRF24_read_registerN+0x4c>)
 8001692:	f002 f964 	bl	800395e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <NRF24_read_registerN+0x4c>)
 80016a0:	f002 faa0 	bl	8003be4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff ff77 	bl	8001598 <NRF24_csn>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000c70 	.word	0x20000c70

080016b8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ff65 	bl	8001598 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80016dc:	f107 010c 	add.w	r1, r7, #12
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	2202      	movs	r2, #2
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <NRF24_write_register+0x40>)
 80016e6:	f002 f93a 	bl	800395e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff ff54 	bl	8001598 <NRF24_csn>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000c70 	.word	0x20000c70

080016fc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff ff43 	bl	8001598 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	b2db      	uxtb	r3, r3
 800171a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2201      	movs	r2, #1
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <NRF24_write_registerN+0x4c>)
 8001726:	f002 f91a 	bl	800395e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	b29a      	uxth	r2, r3
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <NRF24_write_registerN+0x4c>)
 8001734:	f002 f913 	bl	800395e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff ff2d 	bl	8001598 <NRF24_csn>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000c70 	.word	0x20000c70

0800174c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff ff1d 	bl	8001598 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800175e:	23a0      	movs	r3, #160	; 0xa0
 8001760:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001762:	f107 010f 	add.w	r1, r7, #15
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2201      	movs	r2, #1
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <NRF24_write_payload+0x40>)
 800176c:	f002 f8f7 	bl	800395e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <NRF24_write_payload+0x40>)
 800177a:	f002 f8f0 	bl	800395e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff ff0a 	bl	8001598 <NRF24_csn>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000c70 	.word	0x20000c70

08001790 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800179c:	f000 fa82 	bl	8001ca4 <NRF24_getPayloadSize>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d303      	bcc.n	80017b2 <NRF24_read_payload+0x22>
 80017aa:	f000 fa7b 	bl	8001ca4 <NRF24_getPayloadSize>
 80017ae:	4603      	mov	r3, r0
 80017b0:	e000      	b.n	80017b4 <NRF24_read_payload+0x24>
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff feee 	bl	8001598 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80017bc:	2361      	movs	r3, #97	; 0x61
 80017be:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80017c0:	f107 010e 	add.w	r1, r7, #14
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	2201      	movs	r2, #1
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <NRF24_read_payload+0x5c>)
 80017ca:	f002 f8c8 	bl	800395e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <NRF24_read_payload+0x5c>)
 80017d8:	f002 fa04 	bl	8003be4 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fedb 	bl	8001598 <NRF24_csn>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000c70 	.word	0x20000c70

080017f0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80017f4:	21ff      	movs	r1, #255	; 0xff
 80017f6:	20e1      	movs	r0, #225	; 0xe1
 80017f8:	f7ff ff5e 	bl	80016b8 <NRF24_write_register>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001804:	21ff      	movs	r1, #255	; 0xff
 8001806:	20e2      	movs	r0, #226	; 0xe2
 8001808:	f7ff ff56 	bl	80016b8 <NRF24_write_register>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001816:	2007      	movs	r0, #7
 8001818:	f7ff fefe 	bl	8001618 <NRF24_read_register>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001820:	79fb      	ldrb	r3, [r7, #7]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 800182c:	b084      	sub	sp, #16
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	f107 0c10 	add.w	ip, r7, #16
 8001838:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800183c:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <NRF24_begin+0x1a4>)
 800183e:	4618      	mov	r0, r3
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2258      	movs	r2, #88	; 0x58
 8001846:	4619      	mov	r1, r3
 8001848:	f008 fa62 	bl	8009d10 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 800184c:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <NRF24_begin+0x1a8>)
 800184e:	4a62      	ldr	r2, [pc, #392]	; (80019d8 <NRF24_begin+0x1ac>)
 8001850:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 8001852:	4b62      	ldr	r3, [pc, #392]	; (80019dc <NRF24_begin+0x1b0>)
 8001854:	2208      	movs	r2, #8
 8001856:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <NRF24_begin+0x1b4>)
 800185a:	2210      	movs	r2, #16
 800185c:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff fe9a 	bl	8001598 <NRF24_csn>
	NRF24_ce(0);
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff feb7 	bl	80015d8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800186a:	2005      	movs	r0, #5
 800186c:	f000 fca6 	bl	80021bc <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8001870:	2108      	movs	r1, #8
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ff20 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8001878:	213f      	movs	r1, #63	; 0x3f
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff ff1c 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8001880:	2103      	movs	r1, #3
 8001882:	2002      	movs	r0, #2
 8001884:	f7ff ff18 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8001888:	2103      	movs	r1, #3
 800188a:	2003      	movs	r0, #3
 800188c:	f7ff ff14 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8001890:	2103      	movs	r1, #3
 8001892:	2004      	movs	r0, #4
 8001894:	f7ff ff10 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8001898:	2102      	movs	r1, #2
 800189a:	2005      	movs	r0, #5
 800189c:	f7ff ff0c 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 80018a0:	210f      	movs	r1, #15
 80018a2:	2006      	movs	r0, #6
 80018a4:	f7ff ff08 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 80018a8:	210e      	movs	r1, #14
 80018aa:	2007      	movs	r0, #7
 80018ac:	f7ff ff04 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 80018b0:	2100      	movs	r1, #0
 80018b2:	2008      	movs	r0, #8
 80018b4:	f7ff ff00 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2009      	movs	r0, #9
 80018bc:	f7ff fefc 	bl	80016b8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80018c0:	23e7      	movs	r3, #231	; 0xe7
 80018c2:	713b      	strb	r3, [r7, #4]
 80018c4:	23e7      	movs	r3, #231	; 0xe7
 80018c6:	70fb      	strb	r3, [r7, #3]
 80018c8:	23e7      	movs	r3, #231	; 0xe7
 80018ca:	70bb      	strb	r3, [r7, #2]
 80018cc:	23e7      	movs	r3, #231	; 0xe7
 80018ce:	707b      	strb	r3, [r7, #1]
 80018d0:	23e7      	movs	r3, #231	; 0xe7
 80018d2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 80018d4:	463b      	mov	r3, r7
 80018d6:	2205      	movs	r2, #5
 80018d8:	4619      	mov	r1, r3
 80018da:	200a      	movs	r0, #10
 80018dc:	f7ff ff0e 	bl	80016fc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80018e0:	23c2      	movs	r3, #194	; 0xc2
 80018e2:	713b      	strb	r3, [r7, #4]
 80018e4:	23c2      	movs	r3, #194	; 0xc2
 80018e6:	70fb      	strb	r3, [r7, #3]
 80018e8:	23c2      	movs	r3, #194	; 0xc2
 80018ea:	70bb      	strb	r3, [r7, #2]
 80018ec:	23c2      	movs	r3, #194	; 0xc2
 80018ee:	707b      	strb	r3, [r7, #1]
 80018f0:	23c2      	movs	r3, #194	; 0xc2
 80018f2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 80018f4:	463b      	mov	r3, r7
 80018f6:	2205      	movs	r2, #5
 80018f8:	4619      	mov	r1, r3
 80018fa:	200b      	movs	r0, #11
 80018fc:	f7ff fefe 	bl	80016fc <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8001900:	21c3      	movs	r1, #195	; 0xc3
 8001902:	200c      	movs	r0, #12
 8001904:	f7ff fed8 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 8001908:	21c4      	movs	r1, #196	; 0xc4
 800190a:	200d      	movs	r0, #13
 800190c:	f7ff fed4 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 8001910:	21c5      	movs	r1, #197	; 0xc5
 8001912:	200e      	movs	r0, #14
 8001914:	f7ff fed0 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 8001918:	21c6      	movs	r1, #198	; 0xc6
 800191a:	200f      	movs	r0, #15
 800191c:	f7ff fecc 	bl	80016b8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001920:	23e7      	movs	r3, #231	; 0xe7
 8001922:	713b      	strb	r3, [r7, #4]
 8001924:	23e7      	movs	r3, #231	; 0xe7
 8001926:	70fb      	strb	r3, [r7, #3]
 8001928:	23e7      	movs	r3, #231	; 0xe7
 800192a:	70bb      	strb	r3, [r7, #2]
 800192c:	23e7      	movs	r3, #231	; 0xe7
 800192e:	707b      	strb	r3, [r7, #1]
 8001930:	23e7      	movs	r3, #231	; 0xe7
 8001932:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8001934:	463b      	mov	r3, r7
 8001936:	2205      	movs	r2, #5
 8001938:	4619      	mov	r1, r3
 800193a:	2010      	movs	r0, #16
 800193c:	f7ff fede 	bl	80016fc <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 8001940:	2100      	movs	r1, #0
 8001942:	2011      	movs	r0, #17
 8001944:	f7ff feb8 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2012      	movs	r0, #18
 800194c:	f7ff feb4 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 8001950:	2100      	movs	r1, #0
 8001952:	2013      	movs	r0, #19
 8001954:	f7ff feb0 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 8001958:	2100      	movs	r1, #0
 800195a:	2014      	movs	r0, #20
 800195c:	f7ff feac 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	2015      	movs	r0, #21
 8001964:	f7ff fea8 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 8001968:	2100      	movs	r1, #0
 800196a:	2016      	movs	r0, #22
 800196c:	f7ff fea4 	bl	80016b8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001970:	f000 fbc8 	bl	8002104 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8001974:	2100      	movs	r1, #0
 8001976:	201c      	movs	r0, #28
 8001978:	f7ff fe9e 	bl	80016b8 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	201d      	movs	r0, #29
 8001980:	f7ff fe9a 	bl	80016b8 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001984:	210f      	movs	r1, #15
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f944 	bl	8001c14 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 fa2a 	bl	8001de6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 fa60 	bl	8001e58 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001998:	2002      	movs	r0, #2
 800199a:	f000 faa3 	bl	8001ee4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800199e:	f000 f9f5 	bl	8001d8c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80019a2:	2020      	movs	r0, #32
 80019a4:	f000 f966 	bl	8001c74 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 80019a8:	f000 fac4 	bl	8001f34 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 80019ac:	f000 fba2 	bl	80020f4 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80019b0:	204c      	movs	r0, #76	; 0x4c
 80019b2:	f000 f94a 	bl	8001c4a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80019b6:	f7ff ff1b 	bl	80017f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019ba:	f7ff ff21 	bl	8001800 <NRF24_flush_rx>

	NRF24_powerDown();
 80019be:	f000 face 	bl	8001f5e <NRF24_powerDown>

}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019cc:	b004      	add	sp, #16
 80019ce:	4770      	bx	lr
 80019d0:	20000c70 	.word	0x20000c70
 80019d4:	20000c68 	.word	0x20000c68
 80019d8:	40020000 	.word	0x40020000
 80019dc:	20000c6c 	.word	0x20000c6c
 80019e0:	20000c6e 	.word	0x20000c6e

080019e4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fe15 	bl	8001618 <NRF24_read_register>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f043 0303 	orr.w	r3, r3, #3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fe5d 	bl	80016b8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <NRF24_startListening+0x48>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	d004      	beq.n	8001a12 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001a08:	2205      	movs	r2, #5
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <NRF24_startListening+0x48>)
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f7ff fe75 	bl	80016fc <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8001a12:	f7ff feed 	bl	80017f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a16:	f7ff fef3 	bl	8001800 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff fddc 	bl	80015d8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001a20:	2096      	movs	r0, #150	; 0x96
 8001a22:	f7ff fd97 	bl	8001554 <NRF24_DelayMicroSeconds>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000c58 	.word	0x20000c58

08001a30 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fdcf 	bl	80015d8 <NRF24_ce>
	NRF24_flush_tx();
 8001a3a:	f7ff fed9 	bl	80017f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a3e:	f7ff fedf 	bl	8001800 <NRF24_flush_rx>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001a54:	f000 fb4e 	bl	80020f4 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fabd 	bl	8001fdc <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001a62:	f000 fb9f 	bl	80021a4 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001a68:	230a      	movs	r3, #10
 8001a6a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001a6c:	f107 030d 	add.w	r3, r7, #13
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	2008      	movs	r0, #8
 8001a76:	f7ff fdf7 	bl	8001668 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001a7a:	f7ff fec9 	bl	8001810 <NRF24_get_status>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <NRF24_write+0x54>
 8001a8c:	f000 fb8a 	bl	80021a4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8e7      	bhi.n	8001a6c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001a9c:	f107 010b 	add.w	r1, r7, #11
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <NRF24_write+0x90>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 faf1 	bl	800208e <NRF24_whatHappened>
	retStatus = tx_ok;
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <NRF24_write+0x90>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001ab8:	f000 f900 	bl	8001cbc <NRF24_getDynamicPayloadSize>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <NRF24_write+0x94>)
 8001ac2:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001ac4:	f000 f80c 	bl	8001ae0 <NRF24_available>
	NRF24_flush_tx();
 8001ac8:	f7ff fe92 	bl	80017f0 <NRF24_flush_tx>
	return retStatus;
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000c60 	.word	0x20000c60
 8001adc:	20000c61 	.word	0x20000c61

08001ae0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 fa49 	bl	8001f7c <NRF24_availablePipe>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fe45 	bl	8001790 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001b06:	2017      	movs	r0, #23
 8001b08:	f7ff fd86 	bl	8001618 <NRF24_read_register>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001b14:	f7ff fe74 	bl	8001800 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001b18:	f000 f8d0 	bl	8001cbc <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	4619      	mov	r1, r3
 8001b40:	200a      	movs	r0, #10
 8001b42:	f7ff fddb 	bl	80016fc <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001b46:	463b      	mov	r3, r7
 8001b48:	2205      	movs	r2, #5
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2010      	movs	r0, #16
 8001b4e:	f7ff fdd5 	bl	80016fc <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8001b52:	2320      	movs	r3, #32
 8001b54:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <NRF24_openWritingPipe+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bf28      	it	cs
 8001b60:	4613      	movcs	r3, r2
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	2011      	movs	r0, #17
 8001b68:	f7ff fda6 	bl	80016b8 <NRF24_write_register>
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000c62 	.word	0x20000c62

08001b78 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4601      	mov	r1, r0
 8001b80:	e9c7 2300 	strd	r2, r3, [r7]
 8001b84:	460b      	mov	r3, r1
 8001b86:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b92:	491c      	ldr	r1, [pc, #112]	; (8001c04 <NRF24_openReadingPipe+0x8c>)
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d82d      	bhi.n	8001bfa <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d808      	bhi.n	8001bb6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <NRF24_openReadingPipe+0x90>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	4639      	mov	r1, r7
 8001bac:	2205      	movs	r2, #5
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fda4 	bl	80016fc <NRF24_write_registerN>
 8001bb4:	e007      	b.n	8001bc6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <NRF24_openReadingPipe+0x90>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	4639      	mov	r1, r7
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fd9b 	bl	80016fc <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <NRF24_openReadingPipe+0x94>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <NRF24_openReadingPipe+0x98>)
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fd70 	bl	80016b8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fd1d 	bl	8001618 <NRF24_read_register>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b25a      	sxtb	r2, r3
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f7ff fd5f 	bl	80016b8 <NRF24_write_register>
	}

}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000c58 	.word	0x20000c58
 8001c08:	08009fb8 	.word	0x08009fb8
 8001c0c:	08009fc0 	.word	0x08009fc0
 8001c10:	20000c62 	.word	0x20000c62

08001c14 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	f7ff fd3b 	bl	80016b8 <NRF24_write_register>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001c54:	237f      	movs	r3, #127	; 0x7f
 8001c56:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf28      	it	cs
 8001c60:	4613      	movcs	r3, r2
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4619      	mov	r1, r3
 8001c66:	2005      	movs	r0, #5
 8001c68:	f7ff fd26 	bl	80016b8 <NRF24_write_register>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	bf28      	it	cs
 8001c8a:	4613      	movcs	r3, r2
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <NRF24_setPayloadSize+0x2c>)
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000c62 	.word	0x20000c62

08001ca4 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	return payload_size;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <NRF24_getPayloadSize+0x14>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000c62 	.word	0x20000c62

08001cbc <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001cc0:	2060      	movs	r0, #96	; 0x60
 8001cc2:	f7ff fca9 	bl	8001618 <NRF24_read_register>
 8001cc6:	4603      	mov	r3, r0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001cd0:	201d      	movs	r0, #29
 8001cd2:	f7ff fca1 	bl	8001618 <NRF24_read_register>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f043 0306 	orr.w	r3, r3, #6
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	201d      	movs	r0, #29
 8001ce2:	f7ff fce9 	bl	80016b8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001ce6:	201d      	movs	r0, #29
 8001ce8:	f7ff fc96 	bl	8001618 <NRF24_read_register>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001cf2:	f000 fa07 	bl	8002104 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001cf6:	201d      	movs	r0, #29
 8001cf8:	f7ff fc8e 	bl	8001618 <NRF24_read_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f043 0306 	orr.w	r3, r3, #6
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	201d      	movs	r0, #29
 8001d08:	f7ff fcd6 	bl	80016b8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f7ff fc83 	bl	8001618 <NRF24_read_register>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f043 0303 	orr.w	r3, r3, #3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	201c      	movs	r0, #28
 8001d1e:	f7ff fccb 	bl	80016b8 <NRF24_write_register>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001d2c:	201d      	movs	r0, #29
 8001d2e:	f7ff fc73 	bl	8001618 <NRF24_read_register>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	201d      	movs	r0, #29
 8001d3e:	f7ff fcbb 	bl	80016b8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001d42:	201d      	movs	r0, #29
 8001d44:	f7ff fc68 	bl	8001618 <NRF24_read_register>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10c      	bne.n	8001d68 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001d4e:	f000 f9d9 	bl	8002104 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001d52:	201d      	movs	r0, #29
 8001d54:	f7ff fc60 	bl	8001618 <NRF24_read_register>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	201d      	movs	r0, #29
 8001d64:	f7ff fca8 	bl	80016b8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001d68:	201c      	movs	r0, #28
 8001d6a:	f7ff fc55 	bl	8001618 <NRF24_read_register>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	201c      	movs	r0, #28
 8001d7a:	f7ff fc9d 	bl	80016b8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001d7e:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <NRF24_enableDynamicPayloads+0x60>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000c63 	.word	0x20000c63

08001d8c <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001d90:	201d      	movs	r0, #29
 8001d92:	f7ff fc41 	bl	8001618 <NRF24_read_register>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4619      	mov	r1, r3
 8001da0:	201d      	movs	r0, #29
 8001da2:	f7ff fc89 	bl	80016b8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001da6:	2100      	movs	r1, #0
 8001da8:	201c      	movs	r0, #28
 8001daa:	f7ff fc85 	bl	80016b8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001dae:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <NRF24_disableDynamicPayloads+0x2c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000c63 	.word	0x20000c63

08001dbc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001dcc:	213f      	movs	r1, #63	; 0x3f
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fc72 	bl	80016b8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001dd4:	e003      	b.n	8001dde <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff fc6d 	bl	80016b8 <NRF24_write_register>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001df0:	2006      	movs	r0, #6
 8001df2:	f7ff fc11 	bl	8001618 <NRF24_read_register>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	f023 0306 	bic.w	r3, r3, #6
 8001e00:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d104      	bne.n	8001e12 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f043 0306 	orr.w	r3, r3, #6
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e019      	b.n	8001e46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d104      	bne.n	8001e22 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e011      	b.n	8001e46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d104      	bne.n	8001e32 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e009      	b.n	8001e46 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d103      	bne.n	8001e46 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	f043 0306 	orr.w	r3, r3, #6
 8001e44:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2006      	movs	r0, #6
 8001e4c:	f7ff fc34 	bl	80016b8 <NRF24_write_register>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001e66:	2006      	movs	r0, #6
 8001e68:	f7ff fbd6 	bl	8001618 <NRF24_read_register>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <NRF24_setDataRate+0x88>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001e7c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d107      	bne.n	8001e94 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <NRF24_setDataRate+0x88>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	73bb      	strb	r3, [r7, #14]
 8001e92:	e00d      	b.n	8001eb0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <NRF24_setDataRate+0x88>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	73bb      	strb	r3, [r7, #14]
 8001ea8:	e002      	b.n	8001eb0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <NRF24_setDataRate+0x88>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f7ff fbff 	bl	80016b8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f7ff fbac 	bl	8001618 <NRF24_read_register>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d102      	bne.n	8001ed0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e002      	b.n	8001ed6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <NRF24_setDataRate+0x88>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000c64 	.word	0x20000c64

08001ee4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fb92 	bl	8001618 <NRF24_read_register>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f023 030c 	bic.w	r3, r3, #12
 8001efa:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00f      	beq.n	8001f22 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d104      	bne.n	8001f12 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e007      	b.n	8001f22 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	4619      	mov	r1, r3
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fbc6 	bl	80016b8 <NRF24_write_register>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fb6c 	bl	8001618 <NRF24_read_register>
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4a:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fbb1 	bl	80016b8 <NRF24_write_register>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fb58 	bl	8001618 <NRF24_read_register>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4619      	mov	r1, r3
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fba0 	bl	80016b8 <NRF24_write_register>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001f84:	f7ff fc44 	bl	8001810 <NRF24_get_status>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d017      	beq.n	8001fd2 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	2007      	movs	r0, #7
 8001fbc:	f7ff fb7c 	bl	80016b8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001fca:	2120      	movs	r1, #32
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f7ff fb73 	bl	80016b8 <NRF24_write_register>
    }
  }
  return result;
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff faf5 	bl	80015d8 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7ff fb12 	bl	8001618 <NRF24_read_register>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fb57 	bl	80016b8 <NRF24_write_register>
  NRF24_ce(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fae4 	bl	80015d8 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002010:	2096      	movs	r0, #150	; 0x96
 8002012:	f7ff fa9f 	bl	8001554 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb96 	bl	800174c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fad9 	bl	80015d8 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002026:	200f      	movs	r0, #15
 8002028:	f7ff fa94 	bl	8001554 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fad3 	bl	80015d8 <NRF24_ce>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	6039      	str	r1, [r7, #0]
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	4613      	mov	r3, r2
 8002048:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800204e:	2320      	movs	r3, #32
 8002050:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8002052:	7afa      	ldrb	r2, [r7, #11]
 8002054:	79bb      	ldrb	r3, [r7, #6]
 8002056:	4293      	cmp	r3, r2
 8002058:	bf28      	it	cs
 800205a:	4613      	movcs	r3, r2
 800205c:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fa9a 	bl	8001598 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	b25b      	sxtb	r3, r3
 800206e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8002072:	b25b      	sxtb	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	7aba      	ldrb	r2, [r7, #10]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fb3e 	bl	80016fc <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff fa89 	bl	8001598 <NRF24_csn>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800209a:	f7ff fbb9 	bl	8001810 <NRF24_get_status>
 800209e:	4603      	mov	r3, r0
 80020a0:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80020a8:	2170      	movs	r1, #112	; 0x70
 80020aa:	2007      	movs	r0, #7
 80020ac:	f7ff fb04 	bl	80016b8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	701a      	strb	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80020f8:	2170      	movs	r1, #112	; 0x70
 80020fa:	2007      	movs	r0, #7
 80020fc:	f7ff fadc 	bl	80016b8 <NRF24_write_register>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff fa44 	bl	8001598 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002110:	2350      	movs	r3, #80	; 0x50
 8002112:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002114:	2373      	movs	r3, #115	; 0x73
 8002116:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002118:	1d39      	adds	r1, r7, #4
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	2202      	movs	r2, #2
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <NRF24_ACTIVATE_cmd+0x30>)
 8002120:	f001 fc1d 	bl	800395e <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff fa37 	bl	8001598 <NRF24_csn>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000c70 	.word	0x20000c70

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 f8fc 	bl	800235e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	200f      	movs	r0, #15
 8002168:	f7ff f8f6 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7fe ffd4 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000030 	.word	0x20000030
 80021a0:	20000cc8 	.word	0x20000cc8

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000cc8 	.word	0x20000cc8

080021bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff ffee 	bl	80021a4 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d005      	beq.n	80021e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_Delay+0x44>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e2:	bf00      	nop
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d8f7      	bhi.n	80021e4 <HAL_Delay+0x28>
  {
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000030 	.word	0x20000030

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff4c 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002386:	f7ff ff61 	bl	800224c <__NVIC_GetPriorityGrouping>
 800238a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	6978      	ldr	r0, [r7, #20]
 8002392:	f7ff ffb1 	bl	80022f8 <NVIC_EncodePriority>
 8002396:	4602      	mov	r2, r0
 8002398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff80 	bl	80022a4 <__NVIC_SetPriority>
}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff54 	bl	8002268 <__NVIC_EnableIRQ>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff fee6 	bl	80021a4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e099      	b.n	8002518 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002404:	e00f      	b.n	8002426 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002406:	f7ff fecd 	bl	80021a4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b05      	cmp	r3, #5
 8002412:	d908      	bls.n	8002426 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e078      	b.n	8002518 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e8      	bne.n	8002406 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_DMA_Init+0x158>)
 8002440:	4013      	ands	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4313      	orrs	r3, r2
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d117      	bne.n	80024ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fb01 	bl	8002ad4 <DMA_CheckFifoParam>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024e6:	2301      	movs	r3, #1
 80024e8:	e016      	b.n	8002518 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fab8 	bl	8002a68 <DMA_CalcBaseAndBitshift>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	f010803f 	.word	0xf010803f

08002524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_DMA_Start_IT+0x26>
 8002546:	2302      	movs	r3, #2
 8002548:	e040      	b.n	80025cc <HAL_DMA_Start_IT+0xa8>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d12f      	bne.n	80025be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fa4a 	bl	8002a0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	223f      	movs	r2, #63	; 0x3f
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0216 	orr.w	r2, r2, #22
 8002592:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0208 	orr.w	r2, r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e005      	b.n	80025ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025e2:	f7ff fddf 	bl	80021a4 <HAL_GetTick>
 80025e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e052      	b.n	80026ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0216 	bic.w	r2, r2, #22
 8002614:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002624:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_DMA_Abort+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	e013      	b.n	8002680 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002658:	f7ff fda4 	bl	80021a4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b05      	cmp	r3, #5
 8002664:	d90c      	bls.n	8002680 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e015      	b.n	80026ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e4      	bne.n	8002658 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	223f      	movs	r2, #63	; 0x3f
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00c      	b.n	80026ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2205      	movs	r2, #5
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002704:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <HAL_DMA_IRQHandler+0x248>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8e      	ldr	r2, [pc, #568]	; (8002944 <HAL_DMA_IRQHandler+0x24c>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2208      	movs	r2, #8
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2208      	movs	r2, #8
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2201      	movs	r2, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2201      	movs	r2, #1
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2204      	movs	r2, #4
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2204      	movs	r2, #4
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2210      	movs	r2, #16
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03c      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2210      	movs	r2, #16
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d018      	beq.n	800283a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d024      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e01f      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e016      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0208 	bic.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2220      	movs	r2, #32
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 808f 	beq.w	8002998 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8087 	beq.w	8002998 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2220      	movs	r2, #32
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d136      	bne.n	8002910 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0216 	bic.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x1da>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	223f      	movs	r2, #63	; 0x3f
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d07e      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
        }
        return;
 800290e:	e079      	b.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01d      	beq.n	800295a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	2b00      	cmp	r3, #0
 8002932:	d031      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e02c      	b.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
 800293e:	bf00      	nop
 8002940:	20000028 	.word	0x20000028
 8002944:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e01e      	b.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0210 	bic.w	r2, r2, #16
 8002976:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d032      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2205      	movs	r2, #5
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d307      	bcc.n	80029e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f2      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x2cc>
 80029de:	e000      	b.n	80029e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a04:	bf00      	nop
    }
  }
}
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d108      	bne.n	8002a4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4a:	e007      	b.n	8002a5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3b10      	subs	r3, #16
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <DMA_CalcBaseAndBitshift+0x64>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d909      	bls.n	8002aaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa8:	e007      	b.n	8002aba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	aaaaaaab 	.word	0xaaaaaaab
 8002ad0:	08009fc8 	.word	0x08009fc8

08002ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d856      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xce>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <DMA_CheckFifoParam+0x28>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b1f 	.word	0x08002b1f
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002ba3 	.word	0x08002ba3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d046      	beq.n	8002ba6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e043      	b.n	8002ba6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b26:	d140      	bne.n	8002baa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e03d      	b.n	8002baa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b36:	d121      	bne.n	8002b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d837      	bhi.n	8002bae <DMA_CheckFifoParam+0xda>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <DMA_CheckFifoParam+0x70>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002b6d 	.word	0x08002b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e030      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d025      	beq.n	8002bb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e022      	b.n	8002bb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b74:	d11f      	bne.n	8002bb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7a:	e01c      	b.n	8002bb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d903      	bls.n	8002b8a <DMA_CheckFifoParam+0xb6>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b88:	e018      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8e:	e015      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e00b      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e00a      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e008      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e006      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e004      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
    }
  } 
  
  return status; 
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e159      	b.n	8002e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8148 	bne.w	8002e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d130      	bne.n	8002c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0201 	and.w	r2, r3, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d017      	beq.n	8002cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a2 	beq.w	8002e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a49      	ldr	r2, [pc, #292]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x202>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a48      	ldr	r2, [pc, #288]	; (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x1fe>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_GPIO_Init+0x2f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x1f6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x1f2>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f aea2 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fd34 	bl	8000994 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e267      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d075      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e242      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x74>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7ff f8d8 	bl	80021a4 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7ff f8d4 	bl	80021a4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e207      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7ff f8c4 	bl	80021a4 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7ff f8c0 	bl	80021a4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1f3      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c7      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7ff f879 	bl	80021a4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7ff f875 	bl	80021a4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a8      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7ff f858 	bl	80021a4 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7ff f854 	bl	80021a4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e187      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7ff f838 	bl	80021a4 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7ff f834 	bl	80021a4 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e167      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x200>
 8003156:	e01b      	b.n	8003190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7ff f821 	bl	80021a4 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00e      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7ff f81d 	bl	80021a4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d907      	bls.n	8003184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e150      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8097 	beq.w	80032cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b77      	ldr	r3, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe ffdd 	bl	80021a4 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe ffd9 	bl	80021a4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e10c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ea>
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e01c      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x30c>
 800322a:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b5c      	ldr	r3, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe ff9e 	bl	80021a4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe ff9a 	bl	80021a4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0cb      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RCC_OscConfig+0x334>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe ff88 	bl	80021a4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe ff84 	bl	80021a4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0b5      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a1 	beq.w	8003418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d05c      	beq.n	800339c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d141      	bne.n	800336e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff58 	bl	80021a4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe ff54 	bl	80021a4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e087      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe ff2d 	bl	80021a4 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe ff29 	bl	80021a4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e05c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x416>
 800336c:	e054      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe ff16 	bl	80021a4 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe ff12 	bl	80021a4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e045      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x444>
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e038      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d121      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0cc      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d90c      	bls.n	8003464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d044      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e067      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4934      	ldr	r1, [pc, #208]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe fe44 	bl	80021a4 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe fe40 	bl	80021a4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d20c      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fec2 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08009fa0 	.word	0x08009fa0
 80035ec:	20000028 	.word	0x20000028
 80035f0:	2000002c 	.word	0x2000002c

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b090      	sub	sp, #64	; 0x40
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80a1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x16c>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e09b      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_GetSysClockFreq+0x184>)
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800362c:	e09b      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003632:	e098      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d028      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	627a      	str	r2, [r7, #36]	; 0x24
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800365c:	2100      	movs	r1, #0
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 8003660:	fb03 f201 	mul.w	r2, r3, r1
 8003664:	2300      	movs	r3, #0
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	4413      	add	r3, r2
 800366c:	4a43      	ldr	r2, [pc, #268]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 800366e:	fba0 1202 	umull	r1, r2, r0, r2
 8003672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003674:	460a      	mov	r2, r1
 8003676:	62ba      	str	r2, [r7, #40]	; 0x28
 8003678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367a:	4413      	add	r3, r2
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	2200      	movs	r2, #0
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	61fa      	str	r2, [r7, #28]
 8003686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800368e:	f7fc fda7 	bl	80001e0 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4613      	mov	r3, r2
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369a:	e053      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	2200      	movs	r2, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	617a      	str	r2, [r7, #20]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036ae:	f04f 0b00 	mov.w	fp, #0
 80036b2:	4652      	mov	r2, sl
 80036b4:	465b      	mov	r3, fp
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ebb2 080a 	subs.w	r8, r2, sl
 80036ce:	eb63 090b 	sbc.w	r9, r3, fp
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036e6:	ebb2 0408 	subs.w	r4, r2, r8
 80036ea:	eb63 0509 	sbc.w	r5, r3, r9
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	00eb      	lsls	r3, r5, #3
 80036f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fc:	00e2      	lsls	r2, r4, #3
 80036fe:	4614      	mov	r4, r2
 8003700:	461d      	mov	r5, r3
 8003702:	eb14 030a 	adds.w	r3, r4, sl
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	eb45 030b 	adc.w	r3, r5, fp
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	2200      	movs	r2, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	60fa      	str	r2, [r7, #12]
 8003734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003738:	f7fc fd52 	bl	80001e0 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x184>)
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003768:	4618      	mov	r0, r3
 800376a:	3740      	adds	r7, #64	; 0x40
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	017d7840 	.word	0x017d7840

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000028 	.word	0x20000028

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08009fb0 	.word	0x08009fb0

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08009fb0 	.word	0x08009fb0

080037e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	220f      	movs	r2, #15
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0203 	and.w	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCC_GetClockConfig+0x60>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0207 	and.w	r2, r3, #7
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40023c00 	.word	0x40023c00

0800384c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07b      	b.n	8003956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386e:	d009      	beq.n	8003884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
 8003876:	e005      	b.n	8003884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fc66 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0104 	and.w	r1, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0210 	and.w	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_SPI_Transmit+0x22>
 800397c:	2302      	movs	r3, #2
 800397e:	e12d      	b.n	8003bdc <HAL_SPI_Transmit+0x27e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003988:	f7fe fc0c 	bl	80021a4 <HAL_GetTick>
 800398c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a2:	e116      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Transmit+0x52>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039b4:	e10d      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2203      	movs	r2, #3
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	d10f      	bne.n	8003a1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d007      	beq.n	8003a3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a44:	d14f      	bne.n	8003ae6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Transmit+0xf6>
 8003a4e:	8afb      	ldrh	r3, [r7, #22]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d142      	bne.n	8003ada <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	881a      	ldrh	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a78:	e02f      	b.n	8003ada <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d112      	bne.n	8003aae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aac:	e015      	b.n	8003ada <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aae:	f7fe fb79 	bl	80021a4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d803      	bhi.n	8003ac6 <HAL_SPI_Transmit+0x168>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d102      	bne.n	8003acc <HAL_SPI_Transmit+0x16e>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ad8:	e07b      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ca      	bne.n	8003a7a <HAL_SPI_Transmit+0x11c>
 8003ae4:	e050      	b.n	8003b88 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_Transmit+0x196>
 8003aee:	8afb      	ldrh	r3, [r7, #22]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d144      	bne.n	8003b7e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b1a:	e030      	b.n	8003b7e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d113      	bne.n	8003b52 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b50:	e015      	b.n	8003b7e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fe fb27 	bl	80021a4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x20c>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x212>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b7c:	e029      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1c9      	bne.n	8003b1c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	6839      	ldr	r1, [r7, #0]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fbdf 	bl	8004350 <SPI_EndRxTxTransaction>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e003      	b.n	8003bd2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c08:	e0fb      	b.n	8003e02 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c12:	d112      	bne.n	8003c3a <HAL_SPI_Receive+0x56>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10e      	bne.n	8003c3a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f8ef 	bl	8003e14 <HAL_SPI_TransmitReceive>
 8003c36:	4603      	mov	r3, r0
 8003c38:	e0e8      	b.n	8003e0c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_SPI_Receive+0x64>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e0e1      	b.n	8003e0c <HAL_SPI_Receive+0x228>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c50:	f7fe faa8 	bl	80021a4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_Receive+0x7e>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c66:	e0cc      	b.n	8003e02 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cae:	d10f      	bne.n	8003cd0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d007      	beq.n	8003cee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d16a      	bne.n	8003dcc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cf6:	e032      	b.n	8003d5e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d115      	bne.n	8003d32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f103 020c 	add.w	r2, r3, #12
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d30:	e015      	b.n	8003d5e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d32:	f7fe fa37 	bl	80021a4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d803      	bhi.n	8003d4a <HAL_SPI_Receive+0x166>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d102      	bne.n	8003d50 <HAL_SPI_Receive+0x16c>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d5c:	e051      	b.n	8003e02 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1c7      	bne.n	8003cf8 <HAL_SPI_Receive+0x114>
 8003d68:	e035      	b.n	8003dd6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d113      	bne.n	8003da0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	b292      	uxth	r2, r2
 8003d84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	1c9a      	adds	r2, r3, #2
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d9e:	e015      	b.n	8003dcc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da0:	f7fe fa00 	bl	80021a4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d803      	bhi.n	8003db8 <HAL_SPI_Receive+0x1d4>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d102      	bne.n	8003dbe <HAL_SPI_Receive+0x1da>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003dca:	e01a      	b.n	8003e02 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1c9      	bne.n	8003d6a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa52 	bl	8004284 <SPI_EndRxTransaction>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
 8003df8:	e003      	b.n	8003e02 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e22:	2301      	movs	r3, #1
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x26>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e198      	b.n	800416c <HAL_SPI_TransmitReceive+0x358>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e42:	f7fe f9af 	bl	80021a4 <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d00f      	beq.n	8003e84 <HAL_SPI_TransmitReceive+0x70>
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d107      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x68>
 8003e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d003      	beq.n	8003e84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e82:	e16d      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x82>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x82>
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e9c:	e160      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d003      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2205      	movs	r2, #5
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	887a      	ldrh	r2, [r7, #2]
 8003ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	887a      	ldrh	r2, [r7, #2]
 8003eda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d007      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d17c      	bne.n	800400a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x10a>
 8003f18:	8b7b      	ldrh	r3, [r7, #26]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d16a      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f42:	e057      	b.n	8003ff4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d11b      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x176>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d016      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x176>
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d113      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d119      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x1b8>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d014      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fcc:	f7fe f8ea 	bl	80021a4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d80b      	bhi.n	8003ff4 <HAL_SPI_TransmitReceive+0x1e0>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d007      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ff2:	e0b5      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1a2      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x130>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d19d      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x130>
 8004008:	e080      	b.n	800410c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x204>
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d16f      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	e05b      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d11c      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x274>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x274>
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d114      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d119      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x2b6>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d014      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c6:	2301      	movs	r3, #1
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ca:	f7fe f86b 	bl	80021a4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d803      	bhi.n	80040e2 <HAL_SPI_TransmitReceive+0x2ce>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x2d4>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80040f6:	e033      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d19e      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x22c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d199      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f91d 	bl	8004350 <SPI_EndRxTxTransaction>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004128:	e01a      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004156:	e003      	b.n	8004160 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800416c:	4618      	mov	r0, r3
 800416e:	3730      	adds	r7, #48	; 0x30
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004184:	f7fe f80e 	bl	80021a4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4413      	add	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004194:	f7fe f806 	bl	80021a4 <HAL_GetTick>
 8004198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	0d1b      	lsrs	r3, r3, #20
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	e054      	b.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d050      	beq.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041b4:	f7fd fff6 	bl	80021a4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d902      	bls.n	80041ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d13d      	bne.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d111      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d004      	beq.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d107      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d10f      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e017      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3b01      	subs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	429a      	cmp	r2, r3
 8004272:	d19b      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000028 	.word	0x20000028

08004284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004298:	d111      	bne.n	80042be <SPI_EndRxTransaction+0x3a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d004      	beq.n	80042ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	d107      	bne.n	80042be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c6:	d12a      	bne.n	800431e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d012      	beq.n	80042f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7ff ff49 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02d      	beq.n	8004344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f043 0220 	orr.w	r2, r3, #32
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e026      	b.n	8004346 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2200      	movs	r2, #0
 8004300:	2101      	movs	r1, #1
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff ff36 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01a      	beq.n	8004344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e013      	b.n	8004346 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	2101      	movs	r1, #1
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff ff23 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e000      	b.n	8004346 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2201      	movs	r2, #1
 8004364:	2102      	movs	r1, #2
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff ff04 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e032      	b.n	80043e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004382:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <SPI_EndRxTxTransaction+0xa0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <SPI_EndRxTxTransaction+0xa4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	0d5b      	lsrs	r3, r3, #21
 800438e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a0:	d112      	bne.n	80043c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2200      	movs	r2, #0
 80043aa:	2180      	movs	r1, #128	; 0x80
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff fee1 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d016      	beq.n	80043e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e00f      	b.n	80043e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d0f2      	beq.n	80043c8 <SPI_EndRxTxTransaction+0x78>
 80043e2:	e000      	b.n	80043e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80043e4:	bf00      	nop
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000028 	.word	0x20000028
 80043f4:	165e9f81 	.word	0x165e9f81

080043f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e041      	b.n	800448e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc feee 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 f9ea 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e044      	b.n	800453a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_TIM_Base_Start_IT+0xb0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_TIM_Base_Start_IT+0xb4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a19      	ldr	r2, [pc, #100]	; (8004550 <HAL_TIM_Base_Start_IT+0xb8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_TIM_Base_Start_IT+0xbc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x6c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIM_Base_Start_IT+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0202 	mvn.w	r2, #2
 8004590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f914 	bl	80047d4 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f906 	bl	80047c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f917 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0204 	mvn.w	r2, #4
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8ee 	bl	80047d4 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8e0 	bl	80047c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8f1 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d020      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0208 	mvn.w	r2, #8
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8c8 	bl	80047d4 <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8ba 	bl	80047c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8cb 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d020      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2208      	movs	r2, #8
 800467a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8a2 	bl	80047d4 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f894 	bl	80047c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8a5 	bl	80047e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0201 	mvn.w	r2, #1
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fd10 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 faa6 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f876 	bl	80047fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0220 	mvn.w	r2, #32
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa78 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e031      	b.n	80047b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8de 	bl	8004928 <TIM_SlaveTimer_SetConfig>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e018      	b.n	80047b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004794:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0xfc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a37      	ldr	r2, [pc, #220]	; (8004910 <TIM_Base_SetConfig+0x100>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a36      	ldr	r2, [pc, #216]	; (8004914 <TIM_Base_SetConfig+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a35      	ldr	r2, [pc, #212]	; (8004918 <TIM_Base_SetConfig+0x108>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2b      	ldr	r2, [pc, #172]	; (800490c <TIM_Base_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x100>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x104>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x108>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x10c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x110>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x114>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <TIM_Base_SetConfig+0xfc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]
  }
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b70      	cmp	r3, #112	; 0x70
 8004970:	d01a      	beq.n	80049a8 <TIM_SlaveTimer_SetConfig+0x80>
 8004972:	2b70      	cmp	r3, #112	; 0x70
 8004974:	d860      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 8004976:	2b60      	cmp	r3, #96	; 0x60
 8004978:	d054      	beq.n	8004a24 <TIM_SlaveTimer_SetConfig+0xfc>
 800497a:	2b60      	cmp	r3, #96	; 0x60
 800497c:	d85c      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 800497e:	2b50      	cmp	r3, #80	; 0x50
 8004980:	d046      	beq.n	8004a10 <TIM_SlaveTimer_SetConfig+0xe8>
 8004982:	2b50      	cmp	r3, #80	; 0x50
 8004984:	d858      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d019      	beq.n	80049be <TIM_SlaveTimer_SetConfig+0x96>
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d854      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d055      	beq.n	8004a3e <TIM_SlaveTimer_SetConfig+0x116>
 8004992:	2b30      	cmp	r3, #48	; 0x30
 8004994:	d850      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 8004996:	2b20      	cmp	r3, #32
 8004998:	d051      	beq.n	8004a3e <TIM_SlaveTimer_SetConfig+0x116>
 800499a:	2b20      	cmp	r3, #32
 800499c:	d84c      	bhi.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04d      	beq.n	8004a3e <TIM_SlaveTimer_SetConfig+0x116>
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d04b      	beq.n	8004a3e <TIM_SlaveTimer_SetConfig+0x116>
 80049a6:	e047      	b.n	8004a38 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80049b8:	f000 f8a6 	bl	8004b08 <TIM_ETR_SetConfig>
      break;
 80049bc:	e040      	b.n	8004a40 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d101      	bne.n	80049ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e03b      	b.n	8004a42 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a1a      	ldr	r2, [r3, #32]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
      break;
 8004a0e:	e017      	b.n	8004a40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f000 f814 	bl	8004a4a <TIM_TI1_ConfigInputStage>
      break;
 8004a22:	e00d      	b.n	8004a40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a30:	461a      	mov	r2, r3
 8004a32:	f000 f839 	bl	8004aa8 <TIM_TI2_ConfigInputStage>
      break;
 8004a36:	e003      	b.n	8004a40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3c:	e000      	b.n	8004a40 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004a3e:	bf00      	nop
  }

  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 0201 	bic.w	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 030a 	bic.w	r3, r3, #10
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0210 	bic.w	r2, r3, #16
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	031b      	lsls	r3, r3, #12
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e050      	b.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d013      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e042      	b.n	8004ce4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc faec 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fe6b 	bl	800596c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d112      	bne.n	8004d2c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_UART_Receive_DMA+0x26>
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00b      	b.n	8004d2e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fbc2 	bl	80054ac <UART_Start_Receive_DMA>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	e000      	b.n	8004d2e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0ba      	sub	sp, #232	; 0xe8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_UART_IRQHandler+0x66>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fd29 	bl	80057ee <UART_Receive_IT>
      return;
 8004d9c:	e25b      	b.n	8005256 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80de 	beq.w	8004f64 <HAL_UART_IRQHandler+0x22c>
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80d1 	beq.w	8004f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xae>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_UART_IRQHandler+0xd2>
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <HAL_UART_IRQHandler+0xf6>
 8004e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d011      	beq.n	8004e5e <HAL_UART_IRQHandler+0x126>
 8004e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0208 	orr.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 81f2 	beq.w	800524c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_UART_IRQHandler+0x14e>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fcb4 	bl	80057ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x17a>
 8004eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04f      	beq.n	8004f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fbbc 	bl	8005630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d141      	bne.n	8004f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1d9      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d013      	beq.n	8004f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	4a7e      	ldr	r2, [pc, #504]	; (8005118 <HAL_UART_IRQHandler+0x3e0>)
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fbc4 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	e00e      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f99e 	bl	8005284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00a      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f99a 	bl	8005284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e006      	b.n	8004f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f996 	bl	8005284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f5e:	e175      	b.n	800524c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	bf00      	nop
    return;
 8004f62:	e173      	b.n	800524c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f040 814f 	bne.w	800520c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8148 	beq.w	800520c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8141 	beq.w	800520c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	f040 80b6 	bne.w	800511c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8145 	beq.w	8005250 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f080 813e 	bcs.w	8005250 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe6:	f000 8088 	beq.w	80050fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800502e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1d9      	bne.n	8004fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800505a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800505e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800506c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e1      	bne.n	8005036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800509c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ca:	f023 0310 	bic.w	r3, r3, #16
 80050ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fd fa6d 	bl	80025d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8c1 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005116:	e09b      	b.n	8005250 <HAL_UART_IRQHandler+0x518>
 8005118:	080056f7 	.word	0x080056f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005124:	b29b      	uxth	r3, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 808e 	beq.w	8005254 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8089 	beq.w	8005254 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005166:	647a      	str	r2, [r7, #68]	; 0x44
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800516c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e3      	bne.n	8005142 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	623b      	str	r3, [r7, #32]
   return(result);
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3314      	adds	r3, #20
 800519a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800519e:	633a      	str	r2, [r7, #48]	; 0x30
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0310 	bic.w	r3, r3, #16
 80051d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051e4:	61fa      	str	r2, [r7, #28]
 80051e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	617b      	str	r3, [r7, #20]
   return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f847 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800520a:	e023      	b.n	8005254 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d009      	beq.n	800522c <HAL_UART_IRQHandler+0x4f4>
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa7a 	bl	800571e <UART_Transmit_IT>
    return;
 800522a:	e014      	b.n	8005256 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00e      	beq.n	8005256 <HAL_UART_IRQHandler+0x51e>
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 faba 	bl	80057be <UART_EndTransmit_IT>
    return;
 800524a:	e004      	b.n	8005256 <HAL_UART_IRQHandler+0x51e>
    return;
 800524c:	bf00      	nop
 800524e:	e002      	b.n	8005256 <HAL_UART_IRQHandler+0x51e>
      return;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_UART_IRQHandler+0x51e>
      return;
 8005254:	bf00      	nop
  }
}
 8005256:	37e8      	adds	r7, #232	; 0xe8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b09c      	sub	sp, #112	; 0x70
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d172      	bne.n	80053b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	2200      	movs	r2, #0
 80052d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80052f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	667b      	str	r3, [r7, #100]	; 0x64
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005326:	647a      	str	r2, [r7, #68]	; 0x44
 8005328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800532c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	623b      	str	r3, [r7, #32]
   return(result);
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005350:	663b      	str	r3, [r7, #96]	; 0x60
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800535a:	633a      	str	r2, [r7, #48]	; 0x30
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800536e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	2b01      	cmp	r3, #1
 800537c:	d119      	bne.n	80053b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	60fb      	str	r3, [r7, #12]
   return(result);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800539e:	61fa      	str	r2, [r7, #28]
 80053a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	69b9      	ldr	r1, [r7, #24]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	617b      	str	r3, [r7, #20]
   return(result);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	2200      	movs	r2, #0
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053c4:	4619      	mov	r1, r3
 80053c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053c8:	f7ff ff66 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053cc:	e002      	b.n	80053d4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053d0:	f7fb faec 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80053d4:	bf00      	nop
 80053d6:	3770      	adds	r7, #112	; 0x70
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d108      	bne.n	800540a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff ff48 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005408:	e002      	b.n	8005410 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff ff30 	bl	8005270 <HAL_UART_RxHalfCpltCallback>
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b21      	cmp	r3, #33	; 0x21
 800544a:	d108      	bne.n	800545e <UART_DMAError+0x46>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005458:	68b8      	ldr	r0, [r7, #8]
 800545a:	f000 f8c1 	bl	80055e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b22      	cmp	r3, #34	; 0x22
 800547e:	d108      	bne.n	8005492 <UART_DMAError+0x7a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800548c:	68b8      	ldr	r0, [r7, #8]
 800548e:	f000 f8cf 	bl	8005630 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f043 0210 	orr.w	r2, r3, #16
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800549e:	68b8      	ldr	r0, [r7, #8]
 80054a0:	f7ff fef0 	bl	8005284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b098      	sub	sp, #96	; 0x60
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2222      	movs	r2, #34	; 0x22
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	4a3e      	ldr	r2, [pc, #248]	; (80055d4 <UART_Start_Receive_DMA+0x128>)
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	4a3d      	ldr	r2, [pc, #244]	; (80055d8 <UART_Start_Receive_DMA+0x12c>)
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	4a3c      	ldr	r2, [pc, #240]	; (80055dc <UART_Start_Receive_DMA+0x130>)
 80054ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	2200      	movs	r2, #0
 80054f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	f7fd f80a 	bl	8002524 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d019      	beq.n	8005562 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	65bb      	str	r3, [r7, #88]	; 0x58
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800554e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005582:	63ba      	str	r2, [r7, #56]	; 0x38
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	617b      	str	r3, [r7, #20]
   return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ac:	653b      	str	r3, [r7, #80]	; 0x50
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055b6:	627a      	str	r2, [r7, #36]	; 0x24
 80055b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6a39      	ldr	r1, [r7, #32]
 80055bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3760      	adds	r7, #96	; 0x60
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	080052b1 	.word	0x080052b1
 80055d8:	080053dd 	.word	0x080053dd
 80055dc:	08005419 	.word	0x08005419

080055e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b089      	sub	sp, #36	; 0x24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	61ba      	str	r2, [r7, #24]
 800560a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	613b      	str	r3, [r7, #16]
   return(result);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005624:	bf00      	nop
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b095      	sub	sp, #84	; 0x54
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800564e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005658:	643a      	str	r2, [r7, #64]	; 0x40
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800565e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3314      	adds	r3, #20
 8005672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	61fb      	str	r3, [r7, #28]
   return(result);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	64bb      	str	r3, [r7, #72]	; 0x48
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800568c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d119      	bne.n	80056dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0310 	bic.w	r3, r3, #16
 80056be:	647b      	str	r3, [r7, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c8:	61ba      	str	r2, [r7, #24]
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	613b      	str	r3, [r7, #16]
   return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056ea:	bf00      	nop
 80056ec:	3754      	adds	r7, #84	; 0x54
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fdb7 	bl	8005284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b21      	cmp	r3, #33	; 0x21
 8005730:	d13e      	bne.n	80057b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d114      	bne.n	8005766 <UART_Transmit_IT+0x48>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d110      	bne.n	8005766 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005758:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	1c9a      	adds	r2, r3, #2
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]
 8005764:	e008      	b.n	8005778 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6211      	str	r1, [r2, #32]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4619      	mov	r1, r3
 8005786:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10f      	bne.n	80057ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fd3c 	bl	800525c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08c      	sub	sp, #48	; 0x30
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b22      	cmp	r3, #34	; 0x22
 8005800:	f040 80ae 	bne.w	8005960 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d117      	bne.n	800583e <UART_Receive_IT+0x50>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d113      	bne.n	800583e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582c:	b29a      	uxth	r2, r3
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28
 800583c:	e026      	b.n	800588c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d007      	beq.n	8005862 <UART_Receive_IT+0x74>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <UART_Receive_IT+0x82>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e008      	b.n	8005882 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587c:	b2da      	uxtb	r2, r3
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4619      	mov	r1, r3
 800589a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800589c:	2b00      	cmp	r3, #0
 800589e:	d15d      	bne.n	800595c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0220 	bic.w	r2, r2, #32
 80058ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d135      	bne.n	8005952 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590c:	623a      	str	r2, [r7, #32]
 800590e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	61bb      	str	r3, [r7, #24]
   return(result);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b10      	cmp	r3, #16
 800592c:	d10a      	bne.n	8005944 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fca4 	bl	8005298 <HAL_UARTEx_RxEventCallback>
 8005950:	e002      	b.n	8005958 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb f82a 	bl	80009ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e002      	b.n	8005962 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3730      	adds	r7, #48	; 0x30
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b0c0      	sub	sp, #256	; 0x100
 8005972:	af00      	add	r7, sp, #0
 8005974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	68d9      	ldr	r1, [r3, #12]
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	ea40 0301 	orr.w	r3, r0, r1
 8005994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059c4:	f021 010c 	bic.w	r1, r1, #12
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059d2:	430b      	orrs	r3, r1
 80059d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	6999      	ldr	r1, [r3, #24]
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	ea40 0301 	orr.w	r3, r0, r1
 80059f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b8f      	ldr	r3, [pc, #572]	; (8005c38 <UART_SetConfig+0x2cc>)
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d005      	beq.n	8005a0c <UART_SetConfig+0xa0>
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b8d      	ldr	r3, [pc, #564]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d104      	bne.n	8005a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a0c:	f7fd fed8 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8005a10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a14:	e003      	b.n	8005a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a16:	f7fd febf 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8005a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a28:	f040 810c 	bne.w	8005c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	1891      	adds	r1, r2, r2
 8005a44:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a46:	415b      	adcs	r3, r3
 8005a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a4e:	4621      	mov	r1, r4
 8005a50:	eb12 0801 	adds.w	r8, r2, r1
 8005a54:	4629      	mov	r1, r5
 8005a56:	eb43 0901 	adc.w	r9, r3, r1
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a6e:	4690      	mov	r8, r2
 8005a70:	4699      	mov	r9, r3
 8005a72:	4623      	mov	r3, r4
 8005a74:	eb18 0303 	adds.w	r3, r8, r3
 8005a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	eb49 0303 	adc.w	r3, r9, r3
 8005a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	18db      	adds	r3, r3, r3
 8005a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	eb42 0303 	adc.w	r3, r2, r3
 8005aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8005aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ab0:	f7fa fb96 	bl	80001e0 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005aba:	fba3 2302 	umull	r2, r3, r3, r2
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	011c      	lsls	r4, r3, #4
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005acc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	64b9      	str	r1, [r7, #72]	; 0x48
 8005adc:	415b      	adcs	r3, r3
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8005aea:	4649      	mov	r1, r9
 8005aec:	eb43 0b01 	adc.w	fp, r3, r1
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b04:	4692      	mov	sl, r2
 8005b06:	469b      	mov	fp, r3
 8005b08:	4643      	mov	r3, r8
 8005b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b12:	464b      	mov	r3, r9
 8005b14:	eb4b 0303 	adc.w	r3, fp, r3
 8005b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b30:	460b      	mov	r3, r1
 8005b32:	18db      	adds	r3, r3, r3
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
 8005b36:	4613      	mov	r3, r2
 8005b38:	eb42 0303 	adc.w	r3, r2, r3
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b46:	f7fa fb4b 	bl	80001e0 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005b52:	fba3 2301 	umull	r2, r3, r3, r1
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	2264      	movs	r2, #100	; 0x64
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	1acb      	subs	r3, r1, r3
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005b68:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b74:	441c      	add	r4, r3
 8005b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	1891      	adds	r1, r2, r2
 8005b8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b90:	415b      	adcs	r3, r3
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b98:	4641      	mov	r1, r8
 8005b9a:	1851      	adds	r1, r2, r1
 8005b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	414b      	adcs	r3, r1
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	00cb      	lsls	r3, r1, #3
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bba:	4651      	mov	r1, sl
 8005bbc:	00ca      	lsls	r2, r1, #3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bcc:	464b      	mov	r3, r9
 8005bce:	460a      	mov	r2, r1
 8005bd0:	eb42 0303 	adc.w	r3, r2, r3
 8005bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005be4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bec:	460b      	mov	r3, r1
 8005bee:	18db      	adds	r3, r3, r3
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c02:	f7fa faed 	bl	80001e0 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	2164      	movs	r1, #100	; 0x64
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	3332      	adds	r3, #50	; 0x32
 8005c1e:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f003 0207 	and.w	r2, r3, #7
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4422      	add	r2, r4
 8005c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c34:	e106      	b.n	8005e44 <UART_SetConfig+0x4d8>
 8005c36:	bf00      	nop
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c56:	4642      	mov	r2, r8
 8005c58:	464b      	mov	r3, r9
 8005c5a:	1891      	adds	r1, r2, r2
 8005c5c:	6239      	str	r1, [r7, #32]
 8005c5e:	415b      	adcs	r3, r3
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
 8005c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c66:	4641      	mov	r1, r8
 8005c68:	1854      	adds	r4, r2, r1
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	eb43 0501 	adc.w	r5, r3, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	00eb      	lsls	r3, r5, #3
 8005c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7e:	00e2      	lsls	r2, r4, #3
 8005c80:	4614      	mov	r4, r2
 8005c82:	461d      	mov	r5, r3
 8005c84:	4643      	mov	r3, r8
 8005c86:	18e3      	adds	r3, r4, r3
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	eb45 0303 	adc.w	r3, r5, r3
 8005c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	008b      	lsls	r3, r1, #2
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	008a      	lsls	r2, r1, #2
 8005cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cc4:	f7fa fa8c 	bl	80001e0 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	011c      	lsls	r4, r3, #4
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	61b9      	str	r1, [r7, #24]
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	1851      	adds	r1, r2, r1
 8005cfc:	6139      	str	r1, [r7, #16]
 8005cfe:	4649      	mov	r1, r9
 8005d00:	414b      	adcs	r3, r1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d10:	4659      	mov	r1, fp
 8005d12:	00cb      	lsls	r3, r1, #3
 8005d14:	4651      	mov	r1, sl
 8005d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	00ca      	lsls	r2, r1, #3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	4642      	mov	r2, r8
 8005d26:	189b      	adds	r3, r3, r2
 8005d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	460a      	mov	r2, r1
 8005d30:	eb42 0303 	adc.w	r3, r2, r3
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d50:	4649      	mov	r1, r9
 8005d52:	008b      	lsls	r3, r1, #2
 8005d54:	4641      	mov	r1, r8
 8005d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	008a      	lsls	r2, r1, #2
 8005d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d62:	f7fa fa3d 	bl	80001e0 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <UART_SetConfig+0x4e4>)
 8005d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2264      	movs	r2, #100	; 0x64
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	1acb      	subs	r3, r1, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a33      	ldr	r2, [pc, #204]	; (8005e50 <UART_SetConfig+0x4e4>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d8c:	441c      	add	r4, r3
 8005d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d92:	2200      	movs	r2, #0
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
 8005d96:	677a      	str	r2, [r7, #116]	; 0x74
 8005d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	415b      	adcs	r3, r3
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dde:	464b      	mov	r3, r9
 8005de0:	460a      	mov	r2, r1
 8005de2:	eb42 0303 	adc.w	r3, r2, r3
 8005de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	663b      	str	r3, [r7, #96]	; 0x60
 8005df2:	667a      	str	r2, [r7, #100]	; 0x64
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e00:	4649      	mov	r1, r9
 8005e02:	008b      	lsls	r3, r1, #2
 8005e04:	4641      	mov	r1, r8
 8005e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0a:	4641      	mov	r1, r8
 8005e0c:	008a      	lsls	r2, r1, #2
 8005e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e12:	f7fa f9e5 	bl	80001e0 <__aeabi_uldivmod>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <UART_SetConfig+0x4e4>)
 8005e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	3332      	adds	r3, #50	; 0x32
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <UART_SetConfig+0x4e4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4422      	add	r2, r4
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e50:	51eb851f 	.word	0x51eb851f

08005e54 <__NVIC_SetPriority>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	6039      	str	r1, [r7, #0]
 8005e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	db0a      	blt.n	8005e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	490c      	ldr	r1, [pc, #48]	; (8005ea0 <__NVIC_SetPriority+0x4c>)
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	0112      	lsls	r2, r2, #4
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	440b      	add	r3, r1
 8005e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e7c:	e00a      	b.n	8005e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4908      	ldr	r1, [pc, #32]	; (8005ea4 <__NVIC_SetPriority+0x50>)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	3b04      	subs	r3, #4
 8005e8c:	0112      	lsls	r2, r2, #4
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	440b      	add	r3, r1
 8005e92:	761a      	strb	r2, [r3, #24]
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000e100 	.word	0xe000e100
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <SysTick_Handler+0x1c>)
 8005eae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005eb0:	f002 fcce 	bl	8008850 <xTaskGetSchedulerState>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d001      	beq.n	8005ebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005eba:	f003 fbed 	bl	8009698 <xPortSysTickHandler>
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	e000e010 	.word	0xe000e010

08005ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ecc:	2100      	movs	r1, #0
 8005ece:	f06f 0004 	mvn.w	r0, #4
 8005ed2:	f7ff ffbf 	bl	8005e54 <__NVIC_SetPriority>
#endif
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ee2:	f3ef 8305 	mrs	r3, IPSR
 8005ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005eee:	f06f 0305 	mvn.w	r3, #5
 8005ef2:	607b      	str	r3, [r7, #4]
 8005ef4:	e00c      	b.n	8005f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <osKernelInitialize+0x44>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <osKernelInitialize+0x44>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	607b      	str	r3, [r7, #4]
 8005f08:	e002      	b.n	8005f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f10:	687b      	ldr	r3, [r7, #4]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000ccc 	.word	0x20000ccc

08005f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f2a:	f3ef 8305 	mrs	r3, IPSR
 8005f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f36:	f06f 0305 	mvn.w	r3, #5
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e010      	b.n	8005f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <osKernelStart+0x48>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d109      	bne.n	8005f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f46:	f7ff ffbf 	bl	8005ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <osKernelStart+0x48>)
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f50:	f001 ff6a 	bl	8007e28 <vTaskStartScheduler>
      stat = osOK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	607b      	str	r3, [r7, #4]
 8005f58:	e002      	b.n	8005f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f60:	687b      	ldr	r3, [r7, #4]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000ccc 	.word	0x20000ccc

08005f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f80:	f3ef 8305 	mrs	r3, IPSR
 8005f84:	617b      	str	r3, [r7, #20]
  return(result);
 8005f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d17e      	bne.n	800608a <osThreadNew+0x11a>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d07b      	beq.n	800608a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f96:	2318      	movs	r3, #24
 8005f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d045      	beq.n	8006036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <osThreadNew+0x48>
        name = attr->name;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <osThreadNew+0x6e>
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b38      	cmp	r3, #56	; 0x38
 8005fd0:	d805      	bhi.n	8005fde <osThreadNew+0x6e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <osThreadNew+0x72>
        return (NULL);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e054      	b.n	800608c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00e      	beq.n	8006018 <osThreadNew+0xa8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b63      	cmp	r3, #99	; 0x63
 8006000:	d90a      	bls.n	8006018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <osThreadNew+0xa8>
        mem = 1;
 8006012:	2301      	movs	r3, #1
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e010      	b.n	800603a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10c      	bne.n	800603a <osThreadNew+0xca>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <osThreadNew+0xca>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <osThreadNew+0xca>
          mem = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e001      	b.n	800603a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d110      	bne.n	8006062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006048:	9202      	str	r2, [sp, #8]
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f001 fc32 	bl	80078c0 <xTaskCreateStatic>
 800605c:	4603      	mov	r3, r0
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e013      	b.n	800608a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d110      	bne.n	800608a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	b29a      	uxth	r2, r3
 800606c:	f107 0310 	add.w	r3, r7, #16
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f001 fc7d 	bl	800797a <xTaskCreate>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d001      	beq.n	800608a <osThreadNew+0x11a>
            hTask = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800608a:	693b      	ldr	r3, [r7, #16]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	; 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a0:	f3ef 8305 	mrs	r3, IPSR
 80060a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80060ac:	f06f 0305 	mvn.w	r3, #5
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e017      	b.n	80060e4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80060ba:	f06f 0303 	mvn.w	r3, #3
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e010      	b.n	80060e4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80060c2:	6938      	ldr	r0, [r7, #16]
 80060c4:	f001 fe4a 	bl	8007d5c <eTaskGetState>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d005      	beq.n	80060de <osThreadTerminate+0x4a>
      stat = osOK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80060d6:	6938      	ldr	r0, [r7, #16]
 80060d8:	f001 fd9a 	bl	8007c10 <vTaskDelete>
 80060dc:	e002      	b.n	80060e4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80060de:	f06f 0302 	mvn.w	r3, #2
 80060e2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80060e4:	697b      	ldr	r3, [r7, #20]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f6:	f3ef 8305 	mrs	r3, IPSR
 80060fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <osDelay+0x1c>
    stat = osErrorISR;
 8006102:	f06f 0305 	mvn.w	r3, #5
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e007      	b.n	800611a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <osDelay+0x2c>
      vTaskDelay(ticks);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fded 	bl	8007cf4 <vTaskDelay>
    }
  }

  return (stat);
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006130:	f3ef 8305 	mrs	r3, IPSR
 8006134:	60fb      	str	r3, [r7, #12]
  return(result);
 8006136:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006138:	2b00      	cmp	r3, #0
 800613a:	d12d      	bne.n	8006198 <osEventFlagsNew+0x74>
    mem = -1;
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <osEventFlagsNew+0x3a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b1f      	cmp	r3, #31
 8006156:	d902      	bls.n	800615e <osEventFlagsNew+0x3a>
        mem = 1;
 8006158:	2301      	movs	r3, #1
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	e00c      	b.n	8006178 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d108      	bne.n	8006178 <osEventFlagsNew+0x54>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <osEventFlagsNew+0x54>
          mem = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e001      	b.n	8006178 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d106      	bne.n	800618c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f9fa 	bl	800657c <xEventGroupCreateStatic>
 8006188:	6178      	str	r0, [r7, #20]
 800618a:	e005      	b.n	8006198 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006192:	f000 fa2a 	bl	80065ea <xEventGroupCreate>
 8006196:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006198:	697b      	ldr	r3, [r7, #20]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <osEventFlagsSet+0x1e>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80061c2:	f06f 0303 	mvn.w	r3, #3
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e028      	b.n	800621c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ca:	f3ef 8305 	mrs	r3, IPSR
 80061ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80061d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01d      	beq.n	8006212 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	461a      	mov	r2, r3
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6938      	ldr	r0, [r7, #16]
 80061e4:	f000 fba4 	bl	8006930 <xEventGroupSetBitsFromISR>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80061ee:	f06f 0302 	mvn.w	r3, #2
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e012      	b.n	800621c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <osEventFlagsSet+0x78>
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <osEventFlagsSet+0x84>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e004      	b.n	800621c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6938      	ldr	r0, [r7, #16]
 8006216:	f000 fad1 	bl	80067bc <xEventGroupSetBits>
 800621a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800621c:	697b      	ldr	r3, [r7, #20]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	; 0x30
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <osEventFlagsWait+0x22>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800624e:	f06f 0303 	mvn.w	r3, #3
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e04b      	b.n	80062ee <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006256:	f3ef 8305 	mrs	r3, IPSR
 800625a:	617b      	str	r3, [r7, #20]
  return(result);
 800625c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8006262:	f06f 0305 	mvn.w	r3, #5
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e041      	b.n	80062ee <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
 8006278:	e001      	b.n	800627e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006288:	2300      	movs	r3, #0
 800628a:	623b      	str	r3, [r7, #32]
 800628c:	e001      	b.n	8006292 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	69b8      	ldr	r0, [r7, #24]
 800629e:	f000 f9bf 	bl	8006620 <xEventGroupWaitBits>
 80062a2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4013      	ands	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d019      	beq.n	80062ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80062c0:	f06f 0301 	mvn.w	r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e012      	b.n	80062ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80062c8:	f06f 0302 	mvn.w	r3, #2
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e00e      	b.n	80062ee <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80062e0:	f06f 0301 	mvn.w	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e002      	b.n	80062ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80062e8:	f06f 0302 	mvn.w	r3, #2
 80062ec:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80062ee:	69fb      	ldr	r3, [r7, #28]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006304:	f3ef 8305 	mrs	r3, IPSR
 8006308:	60bb      	str	r3, [r7, #8]
  return(result);
 800630a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800630c:	2b00      	cmp	r3, #0
 800630e:	d174      	bne.n	80063fa <osMutexNew+0x102>
    if (attr != NULL) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osMutexNew+0x26>
      type = attr->attr_bits;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e001      	b.n	8006322 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <osMutexNew+0x3a>
      rmtx = 1U;
 800632c:	2301      	movs	r3, #1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e001      	b.n	8006336 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d15c      	bne.n	80063fa <osMutexNew+0x102>
      mem = -1;
 8006340:	f04f 33ff 	mov.w	r3, #4294967295
 8006344:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <osMutexNew+0x6a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b4f      	cmp	r3, #79	; 0x4f
 800635a:	d902      	bls.n	8006362 <osMutexNew+0x6a>
          mem = 1;
 800635c:	2301      	movs	r3, #1
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e00c      	b.n	800637c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <osMutexNew+0x84>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <osMutexNew+0x84>
            mem = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	e001      	b.n	800637c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d112      	bne.n	80063a8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4619      	mov	r1, r3
 800638e:	2004      	movs	r0, #4
 8006390:	f000 fd05 	bl	8006d9e <xQueueCreateMutexStatic>
 8006394:	61f8      	str	r0, [r7, #28]
 8006396:	e016      	b.n	80063c6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4619      	mov	r1, r3
 800639e:	2001      	movs	r0, #1
 80063a0:	f000 fcfd 	bl	8006d9e <xQueueCreateMutexStatic>
 80063a4:	61f8      	str	r0, [r7, #28]
 80063a6:	e00e      	b.n	80063c6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80063b4:	2004      	movs	r0, #4
 80063b6:	f000 fcda 	bl	8006d6e <xQueueCreateMutex>
 80063ba:	61f8      	str	r0, [r7, #28]
 80063bc:	e003      	b.n	80063c6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80063be:	2001      	movs	r0, #1
 80063c0:	f000 fcd5 	bl	8006d6e <xQueueCreateMutex>
 80063c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <osMutexNew+0xee>
        if (attr != NULL) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <osMutexNew+0xe2>
          name = attr->name;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e001      	b.n	80063de <osMutexNew+0xe6>
        } else {
          name = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	69f8      	ldr	r0, [r7, #28]
 80063e2:	f001 fa0f 	bl	8007804 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <osMutexNew+0x102>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80063fa:	69fb      	ldr	r3, [r7, #28]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	60bb      	str	r3, [r7, #8]
  return(result);
 8006428:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800642e:	f06f 0305 	mvn.w	r3, #5
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e02c      	b.n	8006490 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800643c:	f06f 0303 	mvn.w	r3, #3
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e025      	b.n	8006490 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d011      	beq.n	800646e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6938      	ldr	r0, [r7, #16]
 800644e:	f000 fcf5 	bl	8006e3c <xQueueTakeMutexRecursive>
 8006452:	4603      	mov	r3, r0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d01b      	beq.n	8006490 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800645e:	f06f 0301 	mvn.w	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e014      	b.n	8006490 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006466:	f06f 0302 	mvn.w	r3, #2
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e010      	b.n	8006490 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6938      	ldr	r0, [r7, #16]
 8006472:	f000 ff93 	bl	800739c <xQueueSemaphoreTake>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d009      	beq.n	8006490 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006482:	f06f 0301 	mvn.w	r3, #1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e002      	b.n	8006490 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800648a:	f06f 0302 	mvn.w	r3, #2
 800648e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006490:	697b      	ldr	r3, [r7, #20]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b6:	f3ef 8305 	mrs	r3, IPSR
 80064ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80064bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <osMutexRelease+0x30>
    stat = osErrorISR;
 80064c2:	f06f 0305 	mvn.w	r3, #5
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e01f      	b.n	800650a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80064d0:	f06f 0303 	mvn.w	r3, #3
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e018      	b.n	800650a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80064de:	6938      	ldr	r0, [r7, #16]
 80064e0:	f000 fc78 	bl	8006dd4 <xQueueGiveMutexRecursive>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00f      	beq.n	800650a <osMutexRelease+0x70>
        stat = osErrorResource;
 80064ea:	f06f 0302 	mvn.w	r3, #2
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e00b      	b.n	800650a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80064f2:	2300      	movs	r3, #0
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	6938      	ldr	r0, [r7, #16]
 80064fa:	f000 fcd5 	bl	8006ea8 <xQueueGenericSend>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b01      	cmp	r3, #1
 8006502:	d002      	beq.n	800650a <osMutexRelease+0x70>
        stat = osErrorResource;
 8006504:	f06f 0302 	mvn.w	r3, #2
 8006508:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800650a:	697b      	ldr	r3, [r7, #20]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a07      	ldr	r2, [pc, #28]	; (8006540 <vApplicationGetIdleTaskMemory+0x2c>)
 8006524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a06      	ldr	r2, [pc, #24]	; (8006544 <vApplicationGetIdleTaskMemory+0x30>)
 800652a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	601a      	str	r2, [r3, #0]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000cd0 	.word	0x20000cd0
 8006544:	20000d34 	.word	0x20000d34

08006548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <vApplicationGetTimerTaskMemory+0x2c>)
 8006558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <vApplicationGetTimerTaskMemory+0x30>)
 800655e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006566:	601a      	str	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20000f34 	.word	0x20000f34
 8006578:	20000f98 	.word	0x20000f98

0800657c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80065a0:	2320      	movs	r3, #32
 80065a2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d00a      	beq.n	80065c0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	60fb      	str	r3, [r7, #12]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f9bf 	bl	8006958 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2201      	movs	r2, #1
 80065de:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80065e0:	697b      	ldr	r3, [r7, #20]
	}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80065f0:	2020      	movs	r0, #32
 80065f2:	f003 f8e1 	bl	80097b8 <pvPortMalloc>
 80065f6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f9a5 	bl	8006958 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006614:	687b      	ldr	r3, [r7, #4]
	}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b090      	sub	sp, #64	; 0x40
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	61fb      	str	r3, [r7, #28]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xEventGroupWaitBits+0x72>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006692:	f002 f8dd 	bl	8008850 <xTaskGetSchedulerState>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <xEventGroupWaitBits+0x82>
 800669c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <xEventGroupWaitBits+0x86>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <xEventGroupWaitBits+0x88>
 80066a6:	2300      	movs	r3, #0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	617b      	str	r3, [r7, #20]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80066c2:	f001 fc19 	bl	8007ef8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066d2:	f000 f90b 	bl	80068ec <prvTestWaitCondition>
 80066d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d028      	beq.n	800673e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	43db      	mvns	r3, r3
 80066f4:	401a      	ands	r2, r3
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e020      	b.n	800673e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80066fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
 800670a:	e018      	b.n	800673e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	1d18      	adds	r0, r3, #4
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	4313      	orrs	r3, r2
 8006732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006734:	4619      	mov	r1, r3
 8006736:	f001 fdf1 	bl	800831c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800673e:	f001 fbe9 	bl	8007f14 <xTaskResumeAll>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d031      	beq.n	80067ae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006750:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <xEventGroupWaitBits+0x198>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006760:	f002 f9ec 	bl	8008b3c <uxTaskResetEventItemValue>
 8006764:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11a      	bne.n	80067a6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006770:	f002 ff00 	bl	8009574 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006780:	f000 f8b4 	bl	80068ec <prvTestWaitCondition>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	43db      	mvns	r3, r3
 8006798:	401a      	ands	r2, r3
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80067a2:	f002 ff17 	bl	80095d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3740      	adds	r7, #64	; 0x40
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	; 0x38
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80067c6:	2300      	movs	r3, #0
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xEventGroupSetBits+0x32>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	613b      	str	r3, [r7, #16]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <xEventGroupSetBits+0x52>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	3304      	adds	r3, #4
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	3308      	adds	r3, #8
 8006818:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800681a:	f001 fb6d 	bl	8007ef8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	431a      	orrs	r2, r3
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006830:	e03c      	b.n	80068ac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800683e:	2300      	movs	r3, #0
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006848:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006850:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800686c:	e008      	b.n	8006880 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	4013      	ands	r3, r2
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d101      	bne.n	8006880 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	4313      	orrs	r3, r2
 8006896:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068a0:	4619      	mov	r1, r3
 80068a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068a4:	f001 fe06 	bl	80084b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80068ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d1be      	bne.n	8006832 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	43db      	mvns	r3, r3
 80068bc:	401a      	ands	r2, r3
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80068c2:	f001 fb27 	bl	8007f14 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	681b      	ldr	r3, [r3, #0]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3738      	adds	r7, #56	; 0x38
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff6c 	bl	80067bc <xEventGroupSetBits>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e007      	b.n	8006922 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4013      	ands	r3, r2
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d101      	bne.n	8006922 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006922:	697b      	ldr	r3, [r7, #20]
}
 8006924:	4618      	mov	r0, r3
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	4804      	ldr	r0, [pc, #16]	; (8006954 <xEventGroupSetBitsFromISR+0x24>)
 8006944:	f002 fcc8 	bl	80092d8 <xTimerPendFunctionCallFromISR>
 8006948:	6178      	str	r0, [r7, #20]

		return xReturn;
 800694a:	697b      	ldr	r3, [r7, #20]
	}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	080068d3 	.word	0x080068d3

08006958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f103 0208 	add.w	r2, r3, #8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f103 0208 	add.w	r2, r3, #8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 0208 	add.w	r2, r3, #8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d103      	bne.n	8006a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e00c      	b.n	8006a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e002      	b.n	8006a28 <vListInsert+0x2e>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d2f6      	bcs.n	8006a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6892      	ldr	r2, [r2, #8]
 8006a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6852      	ldr	r2, [r2, #4]
 8006a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d103      	bne.n	8006aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericReset+0x2a>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60bb      	str	r3, [r7, #8]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aea:	f002 fd43 	bl	8009574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	441a      	add	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	22ff      	movs	r2, #255	; 0xff
 8006b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	22ff      	movs	r2, #255	; 0xff
 8006b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d114      	bne.n	8006b6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01a      	beq.n	8006b7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3310      	adds	r3, #16
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 fc4d 	bl	80083ec <xTaskRemoveFromEventList>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d012      	beq.n	8006b7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <xQueueGenericReset+0xcc>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	e009      	b.n	8006b7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fef2 	bl	8006958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff feed 	bl	8006958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b7e:	f002 fd29 	bl	80095d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b82:	2301      	movs	r3, #1
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08e      	sub	sp, #56	; 0x38
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <xQueueGenericCreateStatic+0x52>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <xQueueGenericCreateStatic+0x56>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericCreateStatic+0x58>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <xQueueGenericCreateStatic+0x7e>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <xQueueGenericCreateStatic+0x82>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <xQueueGenericCreateStatic+0x84>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c2e:	2350      	movs	r3, #80	; 0x50
 8006c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b50      	cmp	r3, #80	; 0x50
 8006c36:	d00a      	beq.n	8006c4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f83f 	bl	8006cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	; 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3350      	adds	r3, #80	; 0x50
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f002 fd7d 	bl	80097b8 <pvPortMalloc>
 8006cbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d011      	beq.n	8006cea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	3350      	adds	r3, #80	; 0x50
 8006cce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cd8:	79fa      	ldrb	r2, [r7, #7]
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f805 	bl	8006cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cea:	69bb      	ldr	r3, [r7, #24]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e002      	b.n	8006d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d22:	2101      	movs	r1, #1
 8006d24:	69b8      	ldr	r0, [r7, #24]
 8006d26:	f7ff fecb 	bl	8006ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8a1 	bl	8006ea8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	4603      	mov	r3, r0
 8006d76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6939      	ldr	r1, [r7, #16]
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	f7ff ff7a 	bl	8006c80 <xQueueGenericCreate>
 8006d8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff ffd3 	bl	8006d3a <prvInitialiseMutex>

		return xNewQueue;
 8006d94:	68fb      	ldr	r3, [r7, #12]
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b088      	sub	sp, #32
 8006da2:	af02      	add	r7, sp, #8
 8006da4:	4603      	mov	r3, r0
 8006da6:	6039      	str	r1, [r7, #0]
 8006da8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2200      	movs	r2, #0
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	6978      	ldr	r0, [r7, #20]
 8006dbe:	f7ff fee7 	bl	8006b90 <xQueueGenericCreateStatic>
 8006dc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff ffb8 	bl	8006d3a <prvInitialiseMutex>

		return xNewQueue;
 8006dca:	68fb      	ldr	r3, [r7, #12]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	689c      	ldr	r4, [r3, #8]
 8006e00:	f001 fd16 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006e04:	4603      	mov	r3, r0
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d111      	bne.n	8006e2e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	1e5a      	subs	r2, r3, #1
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	6938      	ldr	r0, [r7, #16]
 8006e24:	f000 f840 	bl	8006ea8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e001      	b.n	8006e32 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006e32:	697b      	ldr	r3, [r7, #20]
	}
 8006e34:	4618      	mov	r0, r3
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd90      	pop	{r4, r7, pc}

08006e3c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	689c      	ldr	r4, [r3, #8]
 8006e6a:	f001 fce1 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	429c      	cmp	r4, r3
 8006e72:	d107      	bne.n	8006e84 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e00c      	b.n	8006e9e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f000 fa88 	bl	800739c <xQueueSemaphoreTake>
 8006e8c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006e9e:	697b      	ldr	r3, [r7, #20]
	}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08e      	sub	sp, #56	; 0x38
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericSend+0x32>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d103      	bne.n	8006ee8 <xQueueGenericSend+0x40>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueGenericSend+0x44>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueGenericSend+0x46>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xQueueGenericSend+0x60>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d103      	bne.n	8006f16 <xQueueGenericSend+0x6e>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSend+0x72>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSend+0x74>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSend+0x8e>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f36:	f001 fc8b 	bl	8008850 <xTaskGetSchedulerState>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <xQueueGenericSend+0x9e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <xQueueGenericSend+0xa2>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <xQueueGenericSend+0xa4>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	61fb      	str	r3, [r7, #28]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f66:	f002 fb05 	bl	8009574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <xQueueGenericSend+0xd4>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d129      	bne.n	8006fd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f82:	f000 fb2f 	bl	80075e4 <prvCopyDataToQueue>
 8006f86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d010      	beq.n	8006fb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 fa29 	bl	80083ec <xTaskRemoveFromEventList>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d013      	beq.n	8006fc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b3f      	ldr	r3, [pc, #252]	; (80070a0 <xQueueGenericSend+0x1f8>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	e00a      	b.n	8006fc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fb8:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <xQueueGenericSend+0x1f8>)
 8006fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fc8:	f002 fb04 	bl	80095d4 <vPortExitCritical>
				return pdPASS;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e063      	b.n	8007098 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fd6:	f002 fafd 	bl	80095d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e05c      	b.n	8007098 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fac5 	bl	8008578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff2:	f002 faef 	bl	80095d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ff6:	f000 ff7f 	bl	8007ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ffa:	f002 fabb 	bl	8009574 <vPortEnterCritical>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007004:	b25b      	sxtb	r3, r3
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d103      	bne.n	8007014 <xQueueGenericSend+0x16c>
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701a:	b25b      	sxtb	r3, r3
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d103      	bne.n	800702a <xQueueGenericSend+0x182>
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702a:	f002 fad3 	bl	80095d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800702e:	1d3a      	adds	r2, r7, #4
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f001 fab4 	bl	80085a4 <xTaskCheckForTimeOut>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d124      	bne.n	800708c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007044:	f000 fbc6 	bl	80077d4 <prvIsQueueFull>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	3310      	adds	r3, #16
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f001 f93c 	bl	80082d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 fb51 	bl	8007704 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007062:	f000 ff57 	bl	8007f14 <xTaskResumeAll>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af7c 	bne.w	8006f66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <xQueueGenericSend+0x1f8>)
 8007070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	e772      	b.n	8006f66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007082:	f000 fb3f 	bl	8007704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007086:	f000 ff45 	bl	8007f14 <xTaskResumeAll>
 800708a:	e76c      	b.n	8006f66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800708c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708e:	f000 fb39 	bl	8007704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007092:	f000 ff3f 	bl	8007f14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007096:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007098:	4618      	mov	r0, r3
 800709a:	3738      	adds	r7, #56	; 0x38
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b090      	sub	sp, #64	; 0x40
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <xQueueGenericSendFromISR+0x3c>
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <xQueueGenericSendFromISR+0x40>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <xQueueGenericSendFromISR+0x42>
 80070e4:	2300      	movs	r3, #0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070fc:	bf00      	nop
 80070fe:	e7fe      	b.n	80070fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d103      	bne.n	800710e <xQueueGenericSendFromISR+0x6a>
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <xQueueGenericSendFromISR+0x6e>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <xQueueGenericSendFromISR+0x70>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	623b      	str	r3, [r7, #32]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800712e:	f002 fb03 	bl	8009738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007132:	f3ef 8211 	mrs	r2, BASEPRI
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61fa      	str	r2, [r7, #28]
 8007148:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800714a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <xQueueGenericSendFromISR+0xbc>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d12f      	bne.n	80071c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007176:	f000 fa35 	bl	80075e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800717a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d112      	bne.n	80071aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d016      	beq.n	80071ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	3324      	adds	r3, #36	; 0x24
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f92b 	bl	80083ec <xTaskRemoveFromEventList>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e007      	b.n	80071ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80071ae:	3301      	adds	r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	b25a      	sxtb	r2, r3
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071ba:	2301      	movs	r3, #1
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80071be:	e001      	b.n	80071c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3740      	adds	r7, #64	; 0x40
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	; 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <xQueueReceive+0x30>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	623b      	str	r3, [r7, #32]
}
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <xQueueReceive+0x3e>
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueReceive+0x42>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueReceive+0x44>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueReceive+0x5e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61fb      	str	r3, [r7, #28]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800723a:	f001 fb09 	bl	8008850 <xTaskGetSchedulerState>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <xQueueReceive+0x6e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <xQueueReceive+0x72>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <xQueueReceive+0x74>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <xQueueReceive+0x8e>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61bb      	str	r3, [r7, #24]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800726a:	f002 f983 	bl	8009574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01f      	beq.n	80072ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800727e:	f000 fa1b 	bl	80076b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00f      	beq.n	80072b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	3310      	adds	r3, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f8a8 	bl	80083ec <xTaskRemoveFromEventList>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072a2:	4b3d      	ldr	r3, [pc, #244]	; (8007398 <xQueueReceive+0x1bc>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072b2:	f002 f98f 	bl	80095d4 <vPortExitCritical>
				return pdPASS;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e069      	b.n	800738e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072c0:	f002 f988 	bl	80095d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e062      	b.n	800738e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ce:	f107 0310 	add.w	r3, r7, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 f950 	bl	8008578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072d8:	2301      	movs	r3, #1
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072dc:	f002 f97a 	bl	80095d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072e0:	f000 fe0a 	bl	8007ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072e4:	f002 f946 	bl	8009574 <vPortEnterCritical>
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d103      	bne.n	80072fe <xQueueReceive+0x122>
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007304:	b25b      	sxtb	r3, r3
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d103      	bne.n	8007314 <xQueueReceive+0x138>
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007314:	f002 f95e 	bl	80095d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007318:	1d3a      	adds	r2, r7, #4
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	4611      	mov	r1, r2
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f93f 	bl	80085a4 <xTaskCheckForTimeOut>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d123      	bne.n	8007374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800732c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800732e:	f000 fa3b 	bl	80077a8 <prvIsQueueEmpty>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	3324      	adds	r3, #36	; 0x24
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 ffc7 	bl	80082d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007348:	f000 f9dc 	bl	8007704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800734c:	f000 fde2 	bl	8007f14 <xTaskResumeAll>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d189      	bne.n	800726a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007356:	4b10      	ldr	r3, [pc, #64]	; (8007398 <xQueueReceive+0x1bc>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	e780      	b.n	800726a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736a:	f000 f9cb 	bl	8007704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800736e:	f000 fdd1 	bl	8007f14 <xTaskResumeAll>
 8007372:	e77a      	b.n	800726a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007376:	f000 f9c5 	bl	8007704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800737a:	f000 fdcb 	bl	8007f14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800737e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007380:	f000 fa12 	bl	80077a8 <prvIsQueueEmpty>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	f43f af6f 	beq.w	800726a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800738c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800738e:	4618      	mov	r0, r3
 8007390:	3730      	adds	r7, #48	; 0x30
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08e      	sub	sp, #56	; 0x38
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	623b      	str	r3, [r7, #32]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	61fb      	str	r3, [r7, #28]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ec:	f001 fa30 	bl	8008850 <xTaskGetSchedulerState>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <xQueueSemaphoreTake+0x60>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <xQueueSemaphoreTake+0x64>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <xQueueSemaphoreTake+0x66>
 8007400:	2300      	movs	r3, #0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61bb      	str	r3, [r7, #24]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800741c:	f002 f8aa 	bl	8009574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	2b00      	cmp	r3, #0
 800742a:	d024      	beq.n	8007476 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	1e5a      	subs	r2, r3, #1
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800743c:	f001 fb96 	bl	8008b6c <pvTaskIncrementMutexHeldCount>
 8007440:	4602      	mov	r2, r0
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	3310      	adds	r3, #16
 8007452:	4618      	mov	r0, r3
 8007454:	f000 ffca 	bl	80083ec <xTaskRemoveFromEventList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800745e:	4b54      	ldr	r3, [pc, #336]	; (80075b0 <xQueueSemaphoreTake+0x214>)
 8007460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800746e:	f002 f8b1 	bl	80095d4 <vPortExitCritical>
				return pdPASS;
 8007472:	2301      	movs	r3, #1
 8007474:	e097      	b.n	80075a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d111      	bne.n	80074a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	617b      	str	r3, [r7, #20]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007498:	f002 f89c 	bl	80095d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800749c:	2300      	movs	r3, #0
 800749e:	e082      	b.n	80075a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a6:	f107 030c 	add.w	r3, r7, #12
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 f864 	bl	8008578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b4:	f002 f88e 	bl	80095d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074b8:	f000 fd1e 	bl	8007ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074bc:	f002 f85a 	bl	8009574 <vPortEnterCritical>
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d103      	bne.n	80074d6 <xQueueSemaphoreTake+0x13a>
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d103      	bne.n	80074ec <xQueueSemaphoreTake+0x150>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ec:	f002 f872 	bl	80095d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f0:	463a      	mov	r2, r7
 80074f2:	f107 030c 	add.w	r3, r7, #12
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f853 	bl	80085a4 <xTaskCheckForTimeOut>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d132      	bne.n	800756a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007506:	f000 f94f 	bl	80077a8 <prvIsQueueEmpty>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d026      	beq.n	800755e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007518:	f002 f82c 	bl	8009574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f9b3 	bl	800888c <xTaskPriorityInherit>
 8007526:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007528:	f002 f854 	bl	80095d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fecd 	bl	80082d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800753a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800753c:	f000 f8e2 	bl	8007704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007540:	f000 fce8 	bl	8007f14 <xTaskResumeAll>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	f47f af68 	bne.w	800741c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800754c:	4b18      	ldr	r3, [pc, #96]	; (80075b0 <xQueueSemaphoreTake+0x214>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	e75e      	b.n	800741c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800755e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007560:	f000 f8d0 	bl	8007704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007564:	f000 fcd6 	bl	8007f14 <xTaskResumeAll>
 8007568:	e758      	b.n	800741c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800756a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800756c:	f000 f8ca 	bl	8007704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007570:	f000 fcd0 	bl	8007f14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007576:	f000 f917 	bl	80077a8 <prvIsQueueEmpty>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	f43f af4d 	beq.w	800741c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00d      	beq.n	80075a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007588:	f001 fff4 	bl	8009574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800758c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800758e:	f000 f811 	bl	80075b4 <prvGetDisinheritPriorityAfterTimeout>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fa4c 	bl	8008a38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075a0:	f002 f818 	bl	80095d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3738      	adds	r7, #56	; 0x38
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d006      	beq.n	80075d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e001      	b.n	80075d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075d6:	68fb      	ldr	r3, [r7, #12]
	}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10d      	bne.n	800761e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d14d      	bne.n	80076a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f9a4 	bl	800895c <xTaskPriorityDisinherit>
 8007614:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	e043      	b.n	80076a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d119      	bne.n	8007658 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6858      	ldr	r0, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	461a      	mov	r2, r3
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	f002 fb6e 	bl	8009d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	441a      	add	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	d32b      	bcc.n	80076a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]
 8007656:	e026      	b.n	80076a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68d8      	ldr	r0, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	461a      	mov	r2, r3
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	f002 fb54 	bl	8009d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	425b      	negs	r3, r3
 8007672:	441a      	add	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d207      	bcs.n	8007694 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	425b      	negs	r3, r3
 800768e:	441a      	add	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d105      	bne.n	80076a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076ae:	697b      	ldr	r3, [r7, #20]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d018      	beq.n	80076fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	441a      	add	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d303      	bcc.n	80076ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68d9      	ldr	r1, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	461a      	mov	r2, r3
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f002 fb0a 	bl	8009d10 <memcpy>
	}
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800770c:	f001 ff32 	bl	8009574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007716:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007718:	e011      	b.n	800773e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d012      	beq.n	8007748 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3324      	adds	r3, #36	; 0x24
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fe60 	bl	80083ec <xTaskRemoveFromEventList>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007732:	f000 ff99 	bl	8008668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	3b01      	subs	r3, #1
 800773a:	b2db      	uxtb	r3, r3
 800773c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800773e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dce9      	bgt.n	800771a <prvUnlockQueue+0x16>
 8007746:	e000      	b.n	800774a <prvUnlockQueue+0x46>
					break;
 8007748:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	22ff      	movs	r2, #255	; 0xff
 800774e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007752:	f001 ff3f 	bl	80095d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007756:	f001 ff0d 	bl	8009574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007760:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007762:	e011      	b.n	8007788 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d012      	beq.n	8007792 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3310      	adds	r3, #16
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fe3b 	bl	80083ec <xTaskRemoveFromEventList>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800777c:	f000 ff74 	bl	8008668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	3b01      	subs	r3, #1
 8007784:	b2db      	uxtb	r3, r3
 8007786:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800778c:	2b00      	cmp	r3, #0
 800778e:	dce9      	bgt.n	8007764 <prvUnlockQueue+0x60>
 8007790:	e000      	b.n	8007794 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007792:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	22ff      	movs	r2, #255	; 0xff
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800779c:	f001 ff1a 	bl	80095d4 <vPortExitCritical>
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b0:	f001 fee0 	bl	8009574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077bc:	2301      	movs	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e001      	b.n	80077c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077c6:	f001 ff05 	bl	80095d4 <vPortExitCritical>

	return xReturn;
 80077ca:	68fb      	ldr	r3, [r7, #12]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077dc:	f001 feca 	bl	8009574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d102      	bne.n	80077f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e001      	b.n	80077f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077f6:	f001 feed 	bl	80095d4 <vPortExitCritical>

	return xReturn;
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e014      	b.n	800783e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007814:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <vQueueAddToRegistry+0x50>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10b      	bne.n	8007838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007820:	490c      	ldr	r1, [pc, #48]	; (8007854 <vQueueAddToRegistry+0x50>)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800782a:	4a0a      	ldr	r2, [pc, #40]	; (8007854 <vQueueAddToRegistry+0x50>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007836:	e006      	b.n	8007846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b07      	cmp	r3, #7
 8007842:	d9e7      	bls.n	8007814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20001398 	.word	0x20001398

08007858 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007868:	f001 fe84 	bl	8009574 <vPortEnterCritical>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007872:	b25b      	sxtb	r3, r3
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d103      	bne.n	8007882 <vQueueWaitForMessageRestricted+0x2a>
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007888:	b25b      	sxtb	r3, r3
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d103      	bne.n	8007898 <vQueueWaitForMessageRestricted+0x40>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007898:	f001 fe9c 	bl	80095d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fd71 	bl	8008394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078b2:	6978      	ldr	r0, [r7, #20]
 80078b4:	f7ff ff26 	bl	8007704 <prvUnlockQueue>
	}
 80078b8:	bf00      	nop
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af04      	add	r7, sp, #16
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <xTaskCreateStatic+0x46>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	61fb      	str	r3, [r7, #28]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007906:	2364      	movs	r3, #100	; 0x64
 8007908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b64      	cmp	r3, #100	; 0x64
 800790e:	d00a      	beq.n	8007926 <xTaskCreateStatic+0x66>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	61bb      	str	r3, [r7, #24]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007926:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01e      	beq.n	800796c <xTaskCreateStatic+0xac>
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01b      	beq.n	800796c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800793c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	2202      	movs	r2, #2
 8007942:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007946:	2300      	movs	r3, #0
 8007948:	9303      	str	r3, [sp, #12]
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	9302      	str	r3, [sp, #8]
 800794e:	f107 0314 	add.w	r3, r7, #20
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f850 	bl	8007a04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007966:	f000 f8e3 	bl	8007b30 <prvAddNewTaskToReadyList>
 800796a:	e001      	b.n	8007970 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007970:	697b      	ldr	r3, [r7, #20]
	}
 8007972:	4618      	mov	r0, r3
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800797a:	b580      	push	{r7, lr}
 800797c:	b08c      	sub	sp, #48	; 0x30
 800797e:	af04      	add	r7, sp, #16
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f001 ff12 	bl	80097b8 <pvPortMalloc>
 8007994:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800799c:	2064      	movs	r0, #100	; 0x64
 800799e:	f001 ff0b 	bl	80097b8 <pvPortMalloc>
 80079a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
 80079b0:	e005      	b.n	80079be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f001 ffcc 	bl	8009950 <vPortFree>
 80079b8:	e001      	b.n	80079be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	2300      	movs	r3, #0
 80079d0:	9303      	str	r3, [sp, #12]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	9302      	str	r3, [sp, #8]
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f80e 	bl	8007a04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e8:	69f8      	ldr	r0, [r7, #28]
 80079ea:	f000 f8a1 	bl	8007b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079ee:	2301      	movs	r3, #1
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e002      	b.n	80079fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079fa:	69bb      	ldr	r3, [r7, #24]
	}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3720      	adds	r7, #32
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	21a5      	movs	r1, #165	; 0xa5
 8007a1e:	f002 f945 	bl	8009cac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01f      	beq.n	8007aa8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e012      	b.n	8007a94 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	7819      	ldrb	r1, [r3, #0]
 8007a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3334      	adds	r3, #52	; 0x34
 8007a7e:	460a      	mov	r2, r1
 8007a80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	4413      	add	r3, r2
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	3301      	adds	r3, #1
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d9e9      	bls.n	8007a6e <prvInitialiseNewTask+0x6a>
 8007a9a:	e000      	b.n	8007a9e <prvInitialiseNewTask+0x9a>
			{
				break;
 8007a9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007aa6:	e003      	b.n	8007ab0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	2b37      	cmp	r3, #55	; 0x37
 8007ab4:	d901      	bls.n	8007aba <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ab6:	2337      	movs	r3, #55	; 0x37
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2200      	movs	r2, #0
 8007aca:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe ff61 	bl	8006998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	3318      	adds	r3, #24
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe ff5c 	bl	8006998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	2200      	movs	r2, #0
 8007b00:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	68f9      	ldr	r1, [r7, #12]
 8007b0e:	69b8      	ldr	r0, [r7, #24]
 8007b10:	f001 fc02 	bl	8009318 <pxPortInitialiseStack>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b26:	bf00      	nop
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b38:	f001 fd1c 	bl	8009574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b3c:	4b2d      	ldr	r3, [pc, #180]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b46:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b4e:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d110      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b5c:	f000 fdaa 	bl	80086b4 <prvInitialiseTaskLists>
 8007b60:	e00d      	b.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b62:	4b26      	ldr	r3, [pc, #152]	; (8007bfc <prvAddNewTaskToReadyList+0xcc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b6a:	4b23      	ldr	r3, [pc, #140]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d802      	bhi.n	8007b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b78:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <prvAddNewTaskToReadyList+0xd0>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <prvAddNewTaskToReadyList+0xd4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d903      	bls.n	8007ba4 <prvAddNewTaskToReadyList+0x74>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <prvAddNewTaskToReadyList+0xd4>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <prvAddNewTaskToReadyList+0xd8>)
 8007bb2:	441a      	add	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fe fef9 	bl	80069b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bc0:	f001 fd08 	bl	80095d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bc4:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <prvAddNewTaskToReadyList+0xcc>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <prvAddNewTaskToReadyList+0xc8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d207      	bcs.n	8007bea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <prvAddNewTaskToReadyList+0xdc>)
 8007bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200018ac 	.word	0x200018ac
 8007bf8:	200013d8 	.word	0x200013d8
 8007bfc:	200018b8 	.word	0x200018b8
 8007c00:	200018c8 	.word	0x200018c8
 8007c04:	200018b4 	.word	0x200018b4
 8007c08:	200013dc 	.word	0x200013dc
 8007c0c:	e000ed04 	.word	0xe000ed04

08007c10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c18:	f001 fcac 	bl	8009574 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <vTaskDelete+0x18>
 8007c22:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <vTaskDelete+0xc4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	e000      	b.n	8007c2a <vTaskDelete+0x1a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe ff1b 	bl	8006a6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3318      	adds	r3, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe ff12 	bl	8006a6c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007c48:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <vTaskDelete+0xc8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4a22      	ldr	r2, [pc, #136]	; (8007cd8 <vTaskDelete+0xc8>)
 8007c50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007c52:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <vTaskDelete+0xc4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d10b      	bne.n	8007c74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	481e      	ldr	r0, [pc, #120]	; (8007cdc <vTaskDelete+0xcc>)
 8007c64:	f7fe fea5 	bl	80069b2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007c68:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <vTaskDelete+0xd0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <vTaskDelete+0xd0>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e009      	b.n	8007c88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007c74:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <vTaskDelete+0xd4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <vTaskDelete+0xd4>)
 8007c7c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fd86 	bl	8008790 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007c84:	f000 fdb4 	bl	80087f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007c88:	f001 fca4 	bl	80095d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007c8c:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <vTaskDelete+0xd8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <vTaskDelete+0xc4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d116      	bne.n	8007ccc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <vTaskDelete+0xdc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <vTaskDelete+0xac>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60bb      	str	r3, [r7, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <vTaskDelete+0xe0>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200013d8 	.word	0x200013d8
 8007cd8:	200018c8 	.word	0x200018c8
 8007cdc:	20001880 	.word	0x20001880
 8007ce0:	20001894 	.word	0x20001894
 8007ce4:	200018ac 	.word	0x200018ac
 8007ce8:	200018b8 	.word	0x200018b8
 8007cec:	200018d4 	.word	0x200018d4
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d017      	beq.n	8007d36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <vTaskDelay+0x60>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <vTaskDelay+0x30>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60bb      	str	r3, [r7, #8]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d24:	f000 f8e8 	bl	8007ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 ff32 	bl	8008b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d30:	f000 f8f0 	bl	8007f14 <xTaskResumeAll>
 8007d34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d107      	bne.n	8007d4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <vTaskDelay+0x64>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	200018d4 	.word	0x200018d4
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <eTaskGetState+0x28>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60bb      	str	r3, [r7, #8]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007d84:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <eTaskGetState+0xb8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d102      	bne.n	8007d94 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e03a      	b.n	8007e0a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8007d94:	f001 fbee 	bl	8009574 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007d9e:	4b1e      	ldr	r3, [pc, #120]	; (8007e18 <eTaskGetState+0xbc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007da4:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <eTaskGetState+0xc0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007daa:	f001 fc13 	bl	80095d4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d003      	beq.n	8007dbe <eTaskGetState+0x62>
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d102      	bne.n	8007dc4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e022      	b.n	8007e0a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <eTaskGetState+0xc4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d112      	bne.n	8007df2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d102      	bne.n	8007de6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8007de0:	2302      	movs	r3, #2
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e011      	b.n	8007e0a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8007de6:	2303      	movs	r3, #3
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e00e      	b.n	8007e0a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007dec:	2302      	movs	r3, #2
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e00b      	b.n	8007e0a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	4a0b      	ldr	r2, [pc, #44]	; (8007e24 <eTaskGetState+0xc8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d002      	beq.n	8007e00 <eTaskGetState+0xa4>
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e001      	b.n	8007e0a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007e06:	2301      	movs	r3, #1
 8007e08:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007e0a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	200013d8 	.word	0x200013d8
 8007e18:	20001864 	.word	0x20001864
 8007e1c:	20001868 	.word	0x20001868
 8007e20:	20001898 	.word	0x20001898
 8007e24:	20001880 	.word	0x20001880

08007e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08a      	sub	sp, #40	; 0x28
 8007e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e36:	463a      	mov	r2, r7
 8007e38:	1d39      	adds	r1, r7, #4
 8007e3a:	f107 0308 	add.w	r3, r7, #8
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fb68 	bl	8006514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	9202      	str	r2, [sp, #8]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	460a      	mov	r2, r1
 8007e56:	4922      	ldr	r1, [pc, #136]	; (8007ee0 <vTaskStartScheduler+0xb8>)
 8007e58:	4822      	ldr	r0, [pc, #136]	; (8007ee4 <vTaskStartScheduler+0xbc>)
 8007e5a:	f7ff fd31 	bl	80078c0 <xTaskCreateStatic>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4a21      	ldr	r2, [pc, #132]	; (8007ee8 <vTaskStartScheduler+0xc0>)
 8007e62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e64:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <vTaskStartScheduler+0xc0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	e001      	b.n	8007e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d102      	bne.n	8007e82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e7c:	f000 fede 	bl	8008c3c <xTimerCreateTimerTask>
 8007e80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d118      	bne.n	8007eba <vTaskStartScheduler+0x92>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	613b      	str	r3, [r7, #16]
}
 8007e9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e9c:	4b13      	ldr	r3, [pc, #76]	; (8007eec <vTaskStartScheduler+0xc4>)
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ea4:	4b12      	ldr	r3, [pc, #72]	; (8007ef0 <vTaskStartScheduler+0xc8>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007eaa:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <vTaskStartScheduler+0xcc>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007eb0:	f7f8 fb14 	bl	80004dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007eb4:	f001 fabc 	bl	8009430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007eb8:	e00e      	b.n	8007ed8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec0:	d10a      	bne.n	8007ed8 <vTaskStartScheduler+0xb0>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60fb      	str	r3, [r7, #12]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <vTaskStartScheduler+0xae>
}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	08009dd8 	.word	0x08009dd8
 8007ee4:	08008681 	.word	0x08008681
 8007ee8:	200018d0 	.word	0x200018d0
 8007eec:	200018cc 	.word	0x200018cc
 8007ef0:	200018b8 	.word	0x200018b8
 8007ef4:	200018b0 	.word	0x200018b0

08007ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <vTaskSuspendAll+0x18>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3301      	adds	r3, #1
 8007f02:	4a03      	ldr	r2, [pc, #12]	; (8007f10 <vTaskSuspendAll+0x18>)
 8007f04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f06:	bf00      	nop
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	200018d4 	.word	0x200018d4

08007f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f22:	4b42      	ldr	r3, [pc, #264]	; (800802c <xTaskResumeAll+0x118>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	603b      	str	r3, [r7, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f40:	f001 fb18 	bl	8009574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f44:	4b39      	ldr	r3, [pc, #228]	; (800802c <xTaskResumeAll+0x118>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	4a38      	ldr	r2, [pc, #224]	; (800802c <xTaskResumeAll+0x118>)
 8007f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4e:	4b37      	ldr	r3, [pc, #220]	; (800802c <xTaskResumeAll+0x118>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d162      	bne.n	800801c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <xTaskResumeAll+0x11c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d05e      	beq.n	800801c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f5e:	e02f      	b.n	8007fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f60:	4b34      	ldr	r3, [pc, #208]	; (8008034 <xTaskResumeAll+0x120>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3318      	adds	r3, #24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe fd7d 	bl	8006a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3304      	adds	r3, #4
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fd78 	bl	8006a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <xTaskResumeAll+0x124>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <xTaskResumeAll+0x7c>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <xTaskResumeAll+0x124>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a27      	ldr	r2, [pc, #156]	; (800803c <xTaskResumeAll+0x128>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fd03 	bl	80069b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4b23      	ldr	r3, [pc, #140]	; (8008040 <xTaskResumeAll+0x12c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d302      	bcc.n	8007fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fba:	4b22      	ldr	r3, [pc, #136]	; (8008044 <xTaskResumeAll+0x130>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fc0:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <xTaskResumeAll+0x120>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1cb      	bne.n	8007f60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fce:	f000 fc0f 	bl	80087f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fd2:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <xTaskResumeAll+0x134>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d010      	beq.n	8008000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fde:	f000 f847 	bl	8008070 <xTaskIncrementTick>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fe8:	4b16      	ldr	r3, [pc, #88]	; (8008044 <xTaskResumeAll+0x130>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f1      	bne.n	8007fde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <xTaskResumeAll+0x134>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <xTaskResumeAll+0x130>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <xTaskResumeAll+0x138>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800801c:	f001 fada 	bl	80095d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008020:	68bb      	ldr	r3, [r7, #8]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200018d4 	.word	0x200018d4
 8008030:	200018ac 	.word	0x200018ac
 8008034:	2000186c 	.word	0x2000186c
 8008038:	200018b4 	.word	0x200018b4
 800803c:	200013dc 	.word	0x200013dc
 8008040:	200013d8 	.word	0x200013d8
 8008044:	200018c0 	.word	0x200018c0
 8008048:	200018bc 	.word	0x200018bc
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <xTaskGetTickCount+0x1c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800805c:	687b      	ldr	r3, [r7, #4]
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	200018b0 	.word	0x200018b0

08008070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807a:	4b4f      	ldr	r3, [pc, #316]	; (80081b8 <xTaskIncrementTick+0x148>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f040 808f 	bne.w	80081a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008084:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <xTaskIncrementTick+0x14c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800808c:	4a4b      	ldr	r2, [pc, #300]	; (80081bc <xTaskIncrementTick+0x14c>)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d120      	bne.n	80080da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <xTaskIncrementTick+0x150>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	603b      	str	r3, [r7, #0]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xTaskIncrementTick+0x46>
 80080b8:	4b41      	ldr	r3, [pc, #260]	; (80081c0 <xTaskIncrementTick+0x150>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	4b41      	ldr	r3, [pc, #260]	; (80081c4 <xTaskIncrementTick+0x154>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a3f      	ldr	r2, [pc, #252]	; (80081c0 <xTaskIncrementTick+0x150>)
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	4a3f      	ldr	r2, [pc, #252]	; (80081c4 <xTaskIncrementTick+0x154>)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	4b3e      	ldr	r3, [pc, #248]	; (80081c8 <xTaskIncrementTick+0x158>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a3d      	ldr	r2, [pc, #244]	; (80081c8 <xTaskIncrementTick+0x158>)
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	f000 fb8b 	bl	80087f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080da:	4b3c      	ldr	r3, [pc, #240]	; (80081cc <xTaskIncrementTick+0x15c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d349      	bcc.n	8008178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080e4:	4b36      	ldr	r3, [pc, #216]	; (80081c0 <xTaskIncrementTick+0x150>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ee:	4b37      	ldr	r3, [pc, #220]	; (80081cc <xTaskIncrementTick+0x15c>)
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295
 80080f4:	601a      	str	r2, [r3, #0]
					break;
 80080f6:	e03f      	b.n	8008178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f8:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <xTaskIncrementTick+0x150>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d203      	bcs.n	8008118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008110:	4a2e      	ldr	r2, [pc, #184]	; (80081cc <xTaskIncrementTick+0x15c>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008116:	e02f      	b.n	8008178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fca5 	bl	8006a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3318      	adds	r3, #24
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fc9c 	bl	8006a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <xTaskIncrementTick+0x160>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d903      	bls.n	8008148 <xTaskIncrementTick+0xd8>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	4a22      	ldr	r2, [pc, #136]	; (80081d0 <xTaskIncrementTick+0x160>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <xTaskIncrementTick+0x164>)
 8008156:	441a      	add	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe fc27 	bl	80069b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <xTaskIncrementTick+0x168>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	429a      	cmp	r2, r3
 8008170:	d3b8      	bcc.n	80080e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008172:	2301      	movs	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008176:	e7b5      	b.n	80080e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008178:	4b17      	ldr	r3, [pc, #92]	; (80081d8 <xTaskIncrementTick+0x168>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	4915      	ldr	r1, [pc, #84]	; (80081d4 <xTaskIncrementTick+0x164>)
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d901      	bls.n	8008194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008194:	4b11      	ldr	r3, [pc, #68]	; (80081dc <xTaskIncrementTick+0x16c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e004      	b.n	80081ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081a2:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <xTaskIncrementTick+0x170>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3301      	adds	r3, #1
 80081a8:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <xTaskIncrementTick+0x170>)
 80081aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081ac:	697b      	ldr	r3, [r7, #20]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200018d4 	.word	0x200018d4
 80081bc:	200018b0 	.word	0x200018b0
 80081c0:	20001864 	.word	0x20001864
 80081c4:	20001868 	.word	0x20001868
 80081c8:	200018c4 	.word	0x200018c4
 80081cc:	200018cc 	.word	0x200018cc
 80081d0:	200018b4 	.word	0x200018b4
 80081d4:	200013dc 	.word	0x200013dc
 80081d8:	200013d8 	.word	0x200013d8
 80081dc:	200018c0 	.word	0x200018c0
 80081e0:	200018bc 	.word	0x200018bc

080081e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081ea:	4b33      	ldr	r3, [pc, #204]	; (80082b8 <vTaskSwitchContext+0xd4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081f2:	4b32      	ldr	r3, [pc, #200]	; (80082bc <vTaskSwitchContext+0xd8>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081f8:	e05a      	b.n	80082b0 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80081fa:	4b30      	ldr	r3, [pc, #192]	; (80082bc <vTaskSwitchContext+0xd8>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008200:	f7f8 f973 	bl	80004ea <getRunTimeCounterValue>
 8008204:	4603      	mov	r3, r0
 8008206:	4a2e      	ldr	r2, [pc, #184]	; (80082c0 <vTaskSwitchContext+0xdc>)
 8008208:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800820a:	4b2d      	ldr	r3, [pc, #180]	; (80082c0 <vTaskSwitchContext+0xdc>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b2d      	ldr	r3, [pc, #180]	; (80082c4 <vTaskSwitchContext+0xe0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d909      	bls.n	800822a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008216:	4b2c      	ldr	r3, [pc, #176]	; (80082c8 <vTaskSwitchContext+0xe4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800821c:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <vTaskSwitchContext+0xdc>)
 800821e:	6810      	ldr	r0, [r2, #0]
 8008220:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <vTaskSwitchContext+0xe0>)
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	1a82      	subs	r2, r0, r2
 8008226:	440a      	add	r2, r1
 8008228:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800822a:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <vTaskSwitchContext+0xdc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a25      	ldr	r2, [pc, #148]	; (80082c4 <vTaskSwitchContext+0xe0>)
 8008230:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008232:	4b26      	ldr	r3, [pc, #152]	; (80082cc <vTaskSwitchContext+0xe8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e010      	b.n	800825c <vTaskSwitchContext+0x78>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <vTaskSwitchContext+0x72>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	607b      	str	r3, [r7, #4]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <vTaskSwitchContext+0x70>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b01      	subs	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	491c      	ldr	r1, [pc, #112]	; (80082d0 <vTaskSwitchContext+0xec>)
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0e4      	beq.n	800823a <vTaskSwitchContext+0x56>
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <vTaskSwitchContext+0xec>)
 800827c:	4413      	add	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3308      	adds	r3, #8
 8008292:	429a      	cmp	r2, r3
 8008294:	d104      	bne.n	80082a0 <vTaskSwitchContext+0xbc>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	605a      	str	r2, [r3, #4]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <vTaskSwitchContext+0xe4>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <vTaskSwitchContext+0xe8>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200018d4 	.word	0x200018d4
 80082bc:	200018c0 	.word	0x200018c0
 80082c0:	200018dc 	.word	0x200018dc
 80082c4:	200018d8 	.word	0x200018d8
 80082c8:	200013d8 	.word	0x200013d8
 80082cc:	200018b4 	.word	0x200018b4
 80082d0:	200013dc 	.word	0x200013dc

080082d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	60fb      	str	r3, [r7, #12]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <vTaskPlaceOnEventList+0x44>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3318      	adds	r3, #24
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fe fb79 	bl	80069fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008308:	2101      	movs	r1, #1
 800830a:	6838      	ldr	r0, [r7, #0]
 800830c:	f000 fc42 	bl	8008b94 <prvAddCurrentTaskToDelayedList>
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	200013d8 	.word	0x200013d8

0800831c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	617b      	str	r3, [r7, #20]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <vTaskPlaceOnUnorderedEventList+0x70>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	613b      	str	r3, [r7, #16]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008362:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800836c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800836e:	4b08      	ldr	r3, [pc, #32]	; (8008390 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3318      	adds	r3, #24
 8008374:	4619      	mov	r1, r3
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7fe fb1b 	bl	80069b2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800837c:	2101      	movs	r1, #1
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fc08 	bl	8008b94 <prvAddCurrentTaskToDelayedList>
}
 8008384:	bf00      	nop
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	200018d4 	.word	0x200018d4
 8008390:	200013d8 	.word	0x200013d8

08008394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	617b      	str	r3, [r7, #20]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3318      	adds	r3, #24
 80083c2:	4619      	mov	r1, r3
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7fe faf4 	bl	80069b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295
 80083d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	68b8      	ldr	r0, [r7, #8]
 80083da:	f000 fbdb 	bl	8008b94 <prvAddCurrentTaskToDelayedList>
	}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200013d8 	.word	0x200013d8

080083ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60fb      	str	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	3318      	adds	r3, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fb25 	bl	8006a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008422:	4b1e      	ldr	r3, [pc, #120]	; (800849c <xTaskRemoveFromEventList+0xb0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d11d      	bne.n	8008466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3304      	adds	r3, #4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fb1c 	bl	8006a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <xTaskRemoveFromEventList+0xb4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d903      	bls.n	8008448 <xTaskRemoveFromEventList+0x5c>
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <xTaskRemoveFromEventList+0xb4>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4a13      	ldr	r2, [pc, #76]	; (80084a4 <xTaskRemoveFromEventList+0xb8>)
 8008456:	441a      	add	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3304      	adds	r3, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe faa7 	bl	80069b2 <vListInsertEnd>
 8008464:	e005      	b.n	8008472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3318      	adds	r3, #24
 800846a:	4619      	mov	r1, r3
 800846c:	480e      	ldr	r0, [pc, #56]	; (80084a8 <xTaskRemoveFromEventList+0xbc>)
 800846e:	f7fe faa0 	bl	80069b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <xTaskRemoveFromEventList+0xc0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	429a      	cmp	r2, r3
 800847e:	d905      	bls.n	800848c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008480:	2301      	movs	r3, #1
 8008482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008484:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <xTaskRemoveFromEventList+0xc4>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e001      	b.n	8008490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008490:	697b      	ldr	r3, [r7, #20]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200018d4 	.word	0x200018d4
 80084a0:	200018b4 	.word	0x200018b4
 80084a4:	200013dc 	.word	0x200013dc
 80084a8:	2000186c 	.word	0x2000186c
 80084ac:	200013d8 	.word	0x200013d8
 80084b0:	200018c0 	.word	0x200018c0

080084b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80084be:	4b29      	ldr	r3, [pc, #164]	; (8008564 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	613b      	str	r3, [r7, #16]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60fb      	str	r3, [r7, #12]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe faaf 	bl	8006a6c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe faaa 	bl	8006a6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d903      	bls.n	800852c <vTaskRemoveFromUnorderedEventList+0x78>
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	4a0f      	ldr	r2, [pc, #60]	; (8008568 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4a0c      	ldr	r2, [pc, #48]	; (800856c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800853a:	441a      	add	r2, r3
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f7fe fa35 	bl	80069b2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	429a      	cmp	r2, r3
 8008554:	d902      	bls.n	800855c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008558:	2201      	movs	r2, #1
 800855a:	601a      	str	r2, [r3, #0]
	}
}
 800855c:	bf00      	nop
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	200018d4 	.word	0x200018d4
 8008568:	200018b4 	.word	0x200018b4
 800856c:	200013dc 	.word	0x200013dc
 8008570:	200013d8 	.word	0x200013d8
 8008574:	200018c0 	.word	0x200018c0

08008578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <vTaskInternalSetTimeOutState+0x24>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <vTaskInternalSetTimeOutState+0x28>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	200018c4 	.word	0x200018c4
 80085a0:	200018b0 	.word	0x200018b0

080085a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	613b      	str	r3, [r7, #16]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085e6:	f000 ffc5 	bl	8009574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ea:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <xTaskCheckForTimeOut+0xbc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	d102      	bne.n	800860a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e023      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <xTaskCheckForTimeOut+0xc0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d007      	beq.n	8008626 <xTaskCheckForTimeOut+0x82>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e015      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d20b      	bcs.n	8008648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ff9b 	bl	8008578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e004      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008652:	f000 ffbf 	bl	80095d4 <vPortExitCritical>

	return xReturn;
 8008656:	69fb      	ldr	r3, [r7, #28]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200018b0 	.word	0x200018b0
 8008664:	200018c4 	.word	0x200018c4

08008668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800866c:	4b03      	ldr	r3, [pc, #12]	; (800867c <vTaskMissedYield+0x14>)
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200018c0 	.word	0x200018c0

08008680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008688:	f000 f854 	bl	8008734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <prvIdleTask+0x2c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d907      	bls.n	80086a4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <prvIdleTask+0x30>)
 8008696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80086a4:	f7f7 ff29 	bl	80004fa <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80086a8:	e7ee      	b.n	8008688 <prvIdleTask+0x8>
 80086aa:	bf00      	nop
 80086ac:	200013dc 	.word	0x200013dc
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ba:	2300      	movs	r3, #0
 80086bc:	607b      	str	r3, [r7, #4]
 80086be:	e00c      	b.n	80086da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4a12      	ldr	r2, [pc, #72]	; (8008714 <prvInitialiseTaskLists+0x60>)
 80086cc:	4413      	add	r3, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe f942 	bl	8006958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3301      	adds	r3, #1
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b37      	cmp	r3, #55	; 0x37
 80086de:	d9ef      	bls.n	80086c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086e0:	480d      	ldr	r0, [pc, #52]	; (8008718 <prvInitialiseTaskLists+0x64>)
 80086e2:	f7fe f939 	bl	8006958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086e6:	480d      	ldr	r0, [pc, #52]	; (800871c <prvInitialiseTaskLists+0x68>)
 80086e8:	f7fe f936 	bl	8006958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086ec:	480c      	ldr	r0, [pc, #48]	; (8008720 <prvInitialiseTaskLists+0x6c>)
 80086ee:	f7fe f933 	bl	8006958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086f2:	480c      	ldr	r0, [pc, #48]	; (8008724 <prvInitialiseTaskLists+0x70>)
 80086f4:	f7fe f930 	bl	8006958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086f8:	480b      	ldr	r0, [pc, #44]	; (8008728 <prvInitialiseTaskLists+0x74>)
 80086fa:	f7fe f92d 	bl	8006958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086fe:	4b0b      	ldr	r3, [pc, #44]	; (800872c <prvInitialiseTaskLists+0x78>)
 8008700:	4a05      	ldr	r2, [pc, #20]	; (8008718 <prvInitialiseTaskLists+0x64>)
 8008702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <prvInitialiseTaskLists+0x7c>)
 8008706:	4a05      	ldr	r2, [pc, #20]	; (800871c <prvInitialiseTaskLists+0x68>)
 8008708:	601a      	str	r2, [r3, #0]
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200013dc 	.word	0x200013dc
 8008718:	2000183c 	.word	0x2000183c
 800871c:	20001850 	.word	0x20001850
 8008720:	2000186c 	.word	0x2000186c
 8008724:	20001880 	.word	0x20001880
 8008728:	20001898 	.word	0x20001898
 800872c:	20001864 	.word	0x20001864
 8008730:	20001868 	.word	0x20001868

08008734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800873a:	e019      	b.n	8008770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800873c:	f000 ff1a 	bl	8009574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008740:	4b10      	ldr	r3, [pc, #64]	; (8008784 <prvCheckTasksWaitingTermination+0x50>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe f98d 	bl	8006a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <prvCheckTasksWaitingTermination+0x54>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3b01      	subs	r3, #1
 8008758:	4a0b      	ldr	r2, [pc, #44]	; (8008788 <prvCheckTasksWaitingTermination+0x54>)
 800875a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <prvCheckTasksWaitingTermination+0x58>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3b01      	subs	r3, #1
 8008762:	4a0a      	ldr	r2, [pc, #40]	; (800878c <prvCheckTasksWaitingTermination+0x58>)
 8008764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008766:	f000 ff35 	bl	80095d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f810 	bl	8008790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <prvCheckTasksWaitingTermination+0x58>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e1      	bne.n	800873c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20001880 	.word	0x20001880
 8008788:	200018ac 	.word	0x200018ac
 800878c:	20001894 	.word	0x20001894

08008790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d108      	bne.n	80087b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 f8d2 	bl	8009950 <vPortFree>
				vPortFree( pxTCB );
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 f8cf 	bl	8009950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087b2:	e018      	b.n	80087e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d103      	bne.n	80087c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f8c6 	bl	8009950 <vPortFree>
	}
 80087c4:	e00f      	b.n	80087e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d00a      	beq.n	80087e6 <prvDeleteTCB+0x56>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60fb      	str	r3, [r7, #12]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <prvDeleteTCB+0x54>
	}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <prvResetNextTaskUnblockTime+0x38>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008808:	e008      	b.n	800881c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b07      	ldr	r3, [pc, #28]	; (8008828 <prvResetNextTaskUnblockTime+0x38>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a04      	ldr	r2, [pc, #16]	; (800882c <prvResetNextTaskUnblockTime+0x3c>)
 800881a:	6013      	str	r3, [r2, #0]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	20001864 	.word	0x20001864
 800882c:	200018cc 	.word	0x200018cc

08008830 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008836:	4b05      	ldr	r3, [pc, #20]	; (800884c <xTaskGetCurrentTaskHandle+0x1c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800883c:	687b      	ldr	r3, [r7, #4]
	}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	200013d8 	.word	0x200013d8

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	200018b8 	.word	0x200018b8
 8008888:	200018d4 	.word	0x200018d4

0800888c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d051      	beq.n	8008946 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <xTaskPriorityInherit+0xc4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d241      	bcs.n	8008934 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db06      	blt.n	80088c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <xTaskPriorityInherit+0xc4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6959      	ldr	r1, [r3, #20]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <xTaskPriorityInherit+0xc8>)
 80088d8:	4413      	add	r3, r2
 80088da:	4299      	cmp	r1, r3
 80088dc:	d122      	bne.n	8008924 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe f8c2 	bl	8006a6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088e8:	4b19      	ldr	r3, [pc, #100]	; (8008950 <xTaskPriorityInherit+0xc4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f6:	4b18      	ldr	r3, [pc, #96]	; (8008958 <xTaskPriorityInherit+0xcc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d903      	bls.n	8008906 <xTaskPriorityInherit+0x7a>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	4a15      	ldr	r2, [pc, #84]	; (8008958 <xTaskPriorityInherit+0xcc>)
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <xTaskPriorityInherit+0xc8>)
 8008914:	441a      	add	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f7fe f848 	bl	80069b2 <vListInsertEnd>
 8008922:	e004      	b.n	800892e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <xTaskPriorityInherit+0xc4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800892e:	2301      	movs	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e008      	b.n	8008946 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <xTaskPriorityInherit+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	429a      	cmp	r2, r3
 8008940:	d201      	bcs.n	8008946 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008946:	68fb      	ldr	r3, [r7, #12]
	}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200013d8 	.word	0x200013d8
 8008954:	200013dc 	.word	0x200013dc
 8008958:	200018b4 	.word	0x200018b4

0800895c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d056      	beq.n	8008a20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008972:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <xTaskPriorityDisinherit+0xd0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	d00a      	beq.n	8008992 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60fb      	str	r3, [r7, #12]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	60bb      	str	r3, [r7, #8]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b4:	1e5a      	subs	r2, r3, #1
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d02c      	beq.n	8008a20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d128      	bne.n	8008a20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f84a 	bl	8006a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <xTaskPriorityDisinherit+0xd4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d903      	bls.n	8008a00 <xTaskPriorityDisinherit+0xa4>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	4a0c      	ldr	r2, [pc, #48]	; (8008a30 <xTaskPriorityDisinherit+0xd4>)
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4a09      	ldr	r2, [pc, #36]	; (8008a34 <xTaskPriorityDisinherit+0xd8>)
 8008a0e:	441a      	add	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7fd ffcb 	bl	80069b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a20:	697b      	ldr	r3, [r7, #20]
	}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200013d8 	.word	0x200013d8
 8008a30:	200018b4 	.word	0x200018b4
 8008a34:	200013dc 	.word	0x200013dc

08008a38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a46:	2301      	movs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d06a      	beq.n	8008b26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60fb      	str	r3, [r7, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d902      	bls.n	8008a7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e002      	b.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d04b      	beq.n	8008b26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d146      	bne.n	8008b26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a98:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d10a      	bne.n	8008ab8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60bb      	str	r3, [r7, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db04      	blt.n	8008ad6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	6959      	ldr	r1, [r3, #20]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ae6:	4413      	add	r3, r2
 8008ae8:	4299      	cmp	r1, r3
 8008aea:	d11c      	bne.n	8008b26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fd ffbb 	bl	8006a6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d903      	bls.n	8008b0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4a07      	ldr	r2, [pc, #28]	; (8008b34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b18:	441a      	add	r2, r3
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f7fd ff46 	bl	80069b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b26:	bf00      	nop
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200013d8 	.word	0x200013d8
 8008b34:	200013dc 	.word	0x200013dc
 8008b38:	200018b4 	.word	0x200018b4

08008b3c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <uxTaskResetEventItemValue+0x2c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <uxTaskResetEventItemValue+0x2c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <uxTaskResetEventItemValue+0x2c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008b58:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008b5a:	687b      	ldr	r3, [r7, #4]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	200013d8 	.word	0x200013d8

08008b6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d004      	beq.n	8008b82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b7e:	3201      	adds	r2, #1
 8008b80:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8008b82:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b84:	681b      	ldr	r3, [r3, #0]
	}
 8008b86:	4618      	mov	r0, r3
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	200013d8 	.word	0x200013d8

08008b94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b9e:	4b21      	ldr	r3, [pc, #132]	; (8008c24 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ba4:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fd ff5e 	bl	8006a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d10a      	bne.n	8008bce <prvAddCurrentTaskToDelayedList+0x3a>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bbe:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4819      	ldr	r0, [pc, #100]	; (8008c2c <prvAddCurrentTaskToDelayedList+0x98>)
 8008bc8:	f7fd fef3 	bl	80069b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bcc:	e026      	b.n	8008c1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d209      	bcs.n	8008bfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fd ff01 	bl	80069fa <vListInsert>
}
 8008bf8:	e010      	b.n	8008c1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bfa:	4b0e      	ldr	r3, [pc, #56]	; (8008c34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7fd fef7 	bl	80069fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d202      	bcs.n	8008c1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c16:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6013      	str	r3, [r2, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	200018b0 	.word	0x200018b0
 8008c28:	200013d8 	.word	0x200013d8
 8008c2c:	20001898 	.word	0x20001898
 8008c30:	20001868 	.word	0x20001868
 8008c34:	20001864 	.word	0x20001864
 8008c38:	200018cc 	.word	0x200018cc

08008c3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c46:	f000 fb07 	bl	8009258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <xTimerCreateTimerTask+0x80>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d021      	beq.n	8008c96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c5a:	1d3a      	adds	r2, r7, #4
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	f107 030c 	add.w	r3, r7, #12
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd fc6f 	bl	8006548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	9202      	str	r2, [sp, #8]
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	2302      	movs	r3, #2
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <xTimerCreateTimerTask+0x84>)
 8008c7e:	4811      	ldr	r0, [pc, #68]	; (8008cc4 <xTimerCreateTimerTask+0x88>)
 8008c80:	f7fe fe1e 	bl	80078c0 <xTaskCreateStatic>
 8008c84:	4603      	mov	r3, r0
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <xTimerCreateTimerTask+0x8c>)
 8008c88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <xTimerCreateTimerTask+0x8c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c92:	2301      	movs	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	613b      	str	r3, [r7, #16]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008cb2:	697b      	ldr	r3, [r7, #20]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20001910 	.word	0x20001910
 8008cc0:	08009e08 	.word	0x08009e08
 8008cc4:	08008e01 	.word	0x08008e01
 8008cc8:	20001914 	.word	0x20001914

08008ccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	; 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	623b      	str	r3, [r7, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cfa:	4b1a      	ldr	r3, [pc, #104]	; (8008d64 <xTimerGenericCommand+0x98>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d02a      	beq.n	8008d58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b05      	cmp	r3, #5
 8008d12:	dc18      	bgt.n	8008d46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d14:	f7ff fd9c 	bl	8008850 <xTaskGetSchedulerState>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d109      	bne.n	8008d32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d1e:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <xTimerGenericCommand+0x98>)
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f107 0110 	add.w	r1, r7, #16
 8008d26:	2300      	movs	r3, #0
 8008d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d2a:	f7fe f8bd 	bl	8006ea8 <xQueueGenericSend>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d30:	e012      	b.n	8008d58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <xTimerGenericCommand+0x98>)
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f107 0110 	add.w	r1, r7, #16
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f7fe f8b3 	bl	8006ea8 <xQueueGenericSend>
 8008d42:	6278      	str	r0, [r7, #36]	; 0x24
 8008d44:	e008      	b.n	8008d58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <xTimerGenericCommand+0x98>)
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f107 0110 	add.w	r1, r7, #16
 8008d4e:	2300      	movs	r3, #0
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	f7fe f9a7 	bl	80070a4 <xQueueGenericSendFromISR>
 8008d56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3728      	adds	r7, #40	; 0x28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20001910 	.word	0x20001910

08008d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d72:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <prvProcessExpiredTimer+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fd fe73 	bl	8006a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d022      	beq.n	8008dda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	18d1      	adds	r1, r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f000 f8d1 	bl	8008f48 <prvInsertTimerInActiveList>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01f      	beq.n	8008dec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	2100      	movs	r1, #0
 8008db6:	6978      	ldr	r0, [r7, #20]
 8008db8:	f7ff ff88 	bl	8008ccc <xTimerGenericCommand>
 8008dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d113      	bne.n	8008dec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60fb      	str	r3, [r7, #12]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	6978      	ldr	r0, [r7, #20]
 8008df2:	4798      	blx	r3
}
 8008df4:	bf00      	nop
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20001908 	.word	0x20001908

08008e00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f857 	bl	8008ec0 <prvGetNextExpireTime>
 8008e12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4619      	mov	r1, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f803 	bl	8008e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e1e:	f000 f8d5 	bl	8008fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e22:	e7f1      	b.n	8008e08 <prvTimerTask+0x8>

08008e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e2e:	f7ff f863 	bl	8007ef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f866 	bl	8008f08 <prvSampleTimeNow>
 8008e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d130      	bne.n	8008ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <prvProcessTimerOrBlockTask+0x3c>
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d806      	bhi.n	8008e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e52:	f7ff f85f 	bl	8007f14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff85 	bl	8008d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e5e:	e024      	b.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d008      	beq.n	8008e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <prvProcessTimerOrBlockTask+0x90>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <prvProcessTimerOrBlockTask+0x50>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <prvProcessTimerOrBlockTask+0x52>
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e78:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <prvProcessTimerOrBlockTask+0x94>)
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7fe fce7 	bl	8007858 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e8a:	f7ff f843 	bl	8007f14 <xTaskResumeAll>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <prvProcessTimerOrBlockTask+0x98>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
}
 8008ea4:	e001      	b.n	8008eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ea6:	f7ff f835 	bl	8007f14 <xTaskResumeAll>
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000190c 	.word	0x2000190c
 8008eb8:	20001910 	.word	0x20001910
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <prvGetNextExpireTime+0x44>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <prvGetNextExpireTime+0x16>
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	e000      	b.n	8008ed8 <prvGetNextExpireTime+0x18>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ee4:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <prvGetNextExpireTime+0x44>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e001      	b.n	8008ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20001908 	.word	0x20001908

08008f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f10:	f7ff f89e 	bl	8008050 <xTaskGetTickCount>
 8008f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f16:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <prvSampleTimeNow+0x3c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d205      	bcs.n	8008f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f20:	f000 f936 	bl	8009190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f32:	4a04      	ldr	r2, [pc, #16]	; (8008f44 <prvSampleTimeNow+0x3c>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f38:	68fb      	ldr	r3, [r7, #12]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20001918 	.word	0x20001918

08008f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d812      	bhi.n	8008f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d302      	bcc.n	8008f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	e01b      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <prvInsertTimerInActiveList+0x7c>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7fd fd34 	bl	80069fa <vListInsert>
 8008f92:	e012      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d206      	bcs.n	8008faa <prvInsertTimerInActiveList+0x62>
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d302      	bcc.n	8008faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e007      	b.n	8008fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008faa:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <prvInsertTimerInActiveList+0x80>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f7fd fd20 	bl	80069fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fba:	697b      	ldr	r3, [r7, #20]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	2000190c 	.word	0x2000190c
 8008fc8:	20001908 	.word	0x20001908

08008fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	; 0x38
 8008fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fd2:	e0ca      	b.n	800916a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da18      	bge.n	800900c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fda:	1d3b      	adds	r3, r7, #4
 8008fdc:	3304      	adds	r3, #4
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	61fb      	str	r3, [r7, #28]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009002:	6850      	ldr	r0, [r2, #4]
 8009004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009006:	6892      	ldr	r2, [r2, #8]
 8009008:	4611      	mov	r1, r2
 800900a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f2c0 80ab 	blt.w	800916a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	3304      	adds	r3, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f7fd fd21 	bl	8006a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800902a:	463b      	mov	r3, r7
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff ff6b 	bl	8008f08 <prvSampleTimeNow>
 8009032:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b09      	cmp	r3, #9
 8009038:	f200 8096 	bhi.w	8009168 <prvProcessReceivedCommands+0x19c>
 800903c:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <prvProcessReceivedCommands+0x78>)
 800903e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009042:	bf00      	nop
 8009044:	0800906d 	.word	0x0800906d
 8009048:	0800906d 	.word	0x0800906d
 800904c:	0800906d 	.word	0x0800906d
 8009050:	080090e1 	.word	0x080090e1
 8009054:	080090f5 	.word	0x080090f5
 8009058:	0800913f 	.word	0x0800913f
 800905c:	0800906d 	.word	0x0800906d
 8009060:	0800906d 	.word	0x0800906d
 8009064:	080090e1 	.word	0x080090e1
 8009068:	080090f5 	.word	0x080090f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	18d1      	adds	r1, r2, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908c:	f7ff ff5c 	bl	8008f48 <prvInsertTimerInActiveList>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d069      	beq.n	800916a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d05e      	beq.n	800916a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	441a      	add	r2, r3
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090be:	f7ff fe05 	bl	8008ccc <xTimerGenericCommand>
 80090c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d14f      	bne.n	800916a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	61bb      	str	r3, [r7, #24]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e6:	f023 0301 	bic.w	r3, r3, #1
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090f2:	e03a      	b.n	800916a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090fa:	f043 0301 	orr.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	617b      	str	r3, [r7, #20]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	699a      	ldr	r2, [r3, #24]
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	18d1      	adds	r1, r2, r3
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009138:	f7ff ff06 	bl	8008f48 <prvInsertTimerInActiveList>
					break;
 800913c:	e015      	b.n	800916a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d103      	bne.n	8009154 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800914c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800914e:	f000 fbff 	bl	8009950 <vPortFree>
 8009152:	e00a      	b.n	800916a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800915a:	f023 0301 	bic.w	r3, r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009166:	e000      	b.n	800916a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800916a:	4b08      	ldr	r3, [pc, #32]	; (800918c <prvProcessReceivedCommands+0x1c0>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	1d39      	adds	r1, r7, #4
 8009170:	2200      	movs	r2, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f832 	bl	80071dc <xQueueReceive>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f47f af2a 	bne.w	8008fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	3730      	adds	r7, #48	; 0x30
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001910 	.word	0x20001910

08009190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009196:	e048      	b.n	800922a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009198:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <prvSwitchTimerLists+0xc0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a2:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <prvSwitchTimerLists+0xc0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fc5b 	bl	8006a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d02e      	beq.n	800922a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d90e      	bls.n	80091fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ea:	4b19      	ldr	r3, [pc, #100]	; (8009250 <prvSwitchTimerLists+0xc0>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3304      	adds	r3, #4
 80091f2:	4619      	mov	r1, r3
 80091f4:	4610      	mov	r0, r2
 80091f6:	f7fd fc00 	bl	80069fa <vListInsert>
 80091fa:	e016      	b.n	800922a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091fc:	2300      	movs	r3, #0
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	2300      	movs	r3, #0
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	2100      	movs	r1, #0
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff fd60 	bl	8008ccc <xTimerGenericCommand>
 800920c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	603b      	str	r3, [r7, #0]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <prvSwitchTimerLists+0xc0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1b1      	bne.n	8009198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <prvSwitchTimerLists+0xc0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800923a:	4b06      	ldr	r3, [pc, #24]	; (8009254 <prvSwitchTimerLists+0xc4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a04      	ldr	r2, [pc, #16]	; (8009250 <prvSwitchTimerLists+0xc0>)
 8009240:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009242:	4a04      	ldr	r2, [pc, #16]	; (8009254 <prvSwitchTimerLists+0xc4>)
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	6013      	str	r3, [r2, #0]
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001908 	.word	0x20001908
 8009254:	2000190c 	.word	0x2000190c

08009258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800925e:	f000 f989 	bl	8009574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009262:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d120      	bne.n	80092ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800926a:	4814      	ldr	r0, [pc, #80]	; (80092bc <prvCheckForValidListAndQueue+0x64>)
 800926c:	f7fd fb74 	bl	8006958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009270:	4813      	ldr	r0, [pc, #76]	; (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009272:	f7fd fb71 	bl	8006958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009276:	4b13      	ldr	r3, [pc, #76]	; (80092c4 <prvCheckForValidListAndQueue+0x6c>)
 8009278:	4a10      	ldr	r2, [pc, #64]	; (80092bc <prvCheckForValidListAndQueue+0x64>)
 800927a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800927c:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <prvCheckForValidListAndQueue+0x70>)
 800927e:	4a10      	ldr	r2, [pc, #64]	; (80092c0 <prvCheckForValidListAndQueue+0x68>)
 8009280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009282:	2300      	movs	r3, #0
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <prvCheckForValidListAndQueue+0x74>)
 8009288:	4a11      	ldr	r2, [pc, #68]	; (80092d0 <prvCheckForValidListAndQueue+0x78>)
 800928a:	2110      	movs	r1, #16
 800928c:	200a      	movs	r0, #10
 800928e:	f7fd fc7f 	bl	8006b90 <xQueueGenericCreateStatic>
 8009292:	4603      	mov	r3, r0
 8009294:	4a08      	ldr	r2, [pc, #32]	; (80092b8 <prvCheckForValidListAndQueue+0x60>)
 8009296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009298:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <prvCheckForValidListAndQueue+0x60>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <prvCheckForValidListAndQueue+0x60>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	490b      	ldr	r1, [pc, #44]	; (80092d4 <prvCheckForValidListAndQueue+0x7c>)
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe faac 	bl	8007804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ac:	f000 f992 	bl	80095d4 <vPortExitCritical>
}
 80092b0:	bf00      	nop
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20001910 	.word	0x20001910
 80092bc:	200018e0 	.word	0x200018e0
 80092c0:	200018f4 	.word	0x200018f4
 80092c4:	20001908 	.word	0x20001908
 80092c8:	2000190c 	.word	0x2000190c
 80092cc:	200019bc 	.word	0x200019bc
 80092d0:	2000191c 	.word	0x2000191c
 80092d4:	08009e10 	.word	0x08009e10

080092d8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80092e6:	f06f 0301 	mvn.w	r3, #1
 80092ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <xTimerPendFunctionCallFromISR+0x3c>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f107 0114 	add.w	r1, r7, #20
 8009300:	2300      	movs	r3, #0
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	f7fd fece 	bl	80070a4 <xQueueGenericSendFromISR>
 8009308:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800930c:	4618      	mov	r0, r3
 800930e:	3728      	adds	r7, #40	; 0x28
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20001910 	.word	0x20001910

08009318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3b04      	subs	r3, #4
 8009328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3b04      	subs	r3, #4
 8009336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f023 0201 	bic.w	r2, r3, #1
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3b04      	subs	r3, #4
 8009346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009348:	4a0c      	ldr	r2, [pc, #48]	; (800937c <pxPortInitialiseStack+0x64>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3b14      	subs	r3, #20
 8009352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3b04      	subs	r3, #4
 800935e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f06f 0202 	mvn.w	r2, #2
 8009366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3b20      	subs	r3, #32
 800936c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	08009381 	.word	0x08009381

08009380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800938a:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <prvTaskExitError+0x54>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d00a      	beq.n	80093aa <prvTaskExitError+0x2a>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <prvTaskExitError+0x28>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	60bb      	str	r3, [r7, #8]
}
 80093bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093be:	bf00      	nop
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0fc      	beq.n	80093c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000034 	.word	0x20000034
	...

080093e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093e0:	4b07      	ldr	r3, [pc, #28]	; (8009400 <pxCurrentTCBConst2>)
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	6808      	ldr	r0, [r1, #0]
 80093e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	f380 8809 	msr	PSP, r0
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8811 	msr	BASEPRI, r0
 80093fa:	4770      	bx	lr
 80093fc:	f3af 8000 	nop.w

08009400 <pxCurrentTCBConst2>:
 8009400:	200013d8 	.word	0x200013d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop

08009408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009408:	4808      	ldr	r0, [pc, #32]	; (800942c <prvPortStartFirstTask+0x24>)
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	6800      	ldr	r0, [r0, #0]
 800940e:	f380 8808 	msr	MSP, r0
 8009412:	f04f 0000 	mov.w	r0, #0
 8009416:	f380 8814 	msr	CONTROL, r0
 800941a:	b662      	cpsie	i
 800941c:	b661      	cpsie	f
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	df00      	svc	0
 8009428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800942a:	bf00      	nop
 800942c:	e000ed08 	.word	0xe000ed08

08009430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009436:	4b46      	ldr	r3, [pc, #280]	; (8009550 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a46      	ldr	r2, [pc, #280]	; (8009554 <xPortStartScheduler+0x124>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x26>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	613b      	str	r3, [r7, #16]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009456:	4b3e      	ldr	r3, [pc, #248]	; (8009550 <xPortStartScheduler+0x120>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a3f      	ldr	r2, [pc, #252]	; (8009558 <xPortStartScheduler+0x128>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d10a      	bne.n	8009476 <xPortStartScheduler+0x46>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009476:	4b39      	ldr	r3, [pc, #228]	; (800955c <xPortStartScheduler+0x12c>)
 8009478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	22ff      	movs	r2, #255	; 0xff
 8009486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009498:	b2da      	uxtb	r2, r3
 800949a:	4b31      	ldr	r3, [pc, #196]	; (8009560 <xPortStartScheduler+0x130>)
 800949c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800949e:	4b31      	ldr	r3, [pc, #196]	; (8009564 <xPortStartScheduler+0x134>)
 80094a0:	2207      	movs	r2, #7
 80094a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094a4:	e009      	b.n	80094ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80094a6:	4b2f      	ldr	r3, [pc, #188]	; (8009564 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	4a2d      	ldr	r2, [pc, #180]	; (8009564 <xPortStartScheduler+0x134>)
 80094ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d0ef      	beq.n	80094a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094c6:	4b27      	ldr	r3, [pc, #156]	; (8009564 <xPortStartScheduler+0x134>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f1c3 0307 	rsb	r3, r3, #7
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d00a      	beq.n	80094e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60bb      	str	r3, [r7, #8]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094e8:	4b1e      	ldr	r3, [pc, #120]	; (8009564 <xPortStartScheduler+0x134>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	4a1d      	ldr	r2, [pc, #116]	; (8009564 <xPortStartScheduler+0x134>)
 80094f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094f2:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <xPortStartScheduler+0x134>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094fa:	4a1a      	ldr	r2, [pc, #104]	; (8009564 <xPortStartScheduler+0x134>)
 80094fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	b2da      	uxtb	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009506:	4b18      	ldr	r3, [pc, #96]	; (8009568 <xPortStartScheduler+0x138>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <xPortStartScheduler+0x138>)
 800950c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009512:	4b15      	ldr	r3, [pc, #84]	; (8009568 <xPortStartScheduler+0x138>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a14      	ldr	r2, [pc, #80]	; (8009568 <xPortStartScheduler+0x138>)
 8009518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800951c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800951e:	f000 f8dd 	bl	80096dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <xPortStartScheduler+0x13c>)
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009528:	f000 f8fc 	bl	8009724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800952c:	4b10      	ldr	r3, [pc, #64]	; (8009570 <xPortStartScheduler+0x140>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a0f      	ldr	r2, [pc, #60]	; (8009570 <xPortStartScheduler+0x140>)
 8009532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009538:	f7ff ff66 	bl	8009408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800953c:	f7fe fe52 	bl	80081e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009540:	f7ff ff1e 	bl	8009380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	e000ed00 	.word	0xe000ed00
 8009554:	410fc271 	.word	0x410fc271
 8009558:	410fc270 	.word	0x410fc270
 800955c:	e000e400 	.word	0xe000e400
 8009560:	20001a0c 	.word	0x20001a0c
 8009564:	20001a10 	.word	0x20001a10
 8009568:	e000ed20 	.word	0xe000ed20
 800956c:	20000034 	.word	0x20000034
 8009570:	e000ef34 	.word	0xe000ef34

08009574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	607b      	str	r3, [r7, #4]
}
 800958c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <vPortEnterCritical+0x58>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	4a0d      	ldr	r2, [pc, #52]	; (80095cc <vPortEnterCritical+0x58>)
 8009596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <vPortEnterCritical+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d10f      	bne.n	80095c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <vPortEnterCritical+0x5c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	603b      	str	r3, [r7, #0]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <vPortEnterCritical+0x4a>
	}
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20000034 	.word	0x20000034
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <vPortExitCritical+0x50>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <vPortExitCritical+0x24>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	607b      	str	r3, [r7, #4]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <vPortExitCritical+0x50>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	4a09      	ldr	r2, [pc, #36]	; (8009624 <vPortExitCritical+0x50>)
 8009600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <vPortExitCritical+0x50>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <vPortExitCritical+0x42>
 800960a:	2300      	movs	r3, #0
 800960c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f383 8811 	msr	BASEPRI, r3
}
 8009614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000034 	.word	0x20000034
	...

08009630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009630:	f3ef 8009 	mrs	r0, PSP
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4b15      	ldr	r3, [pc, #84]	; (8009690 <pxCurrentTCBConst>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	f01e 0f10 	tst.w	lr, #16
 8009640:	bf08      	it	eq
 8009642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964a:	6010      	str	r0, [r2, #0]
 800964c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009654:	f380 8811 	msr	BASEPRI, r0
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f7fe fdc0 	bl	80081e4 <vTaskSwitchContext>
 8009664:	f04f 0000 	mov.w	r0, #0
 8009668:	f380 8811 	msr	BASEPRI, r0
 800966c:	bc09      	pop	{r0, r3}
 800966e:	6819      	ldr	r1, [r3, #0]
 8009670:	6808      	ldr	r0, [r1, #0]
 8009672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009676:	f01e 0f10 	tst.w	lr, #16
 800967a:	bf08      	it	eq
 800967c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009680:	f380 8809 	msr	PSP, r0
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst>:
 8009690:	200013d8 	.word	0x200013d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096b2:	f7fe fcdd 	bl	8008070 <xTaskIncrementTick>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096bc:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <xPortSysTickHandler+0x40>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f383 8811 	msr	BASEPRI, r3
}
 80096ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <vPortSetupTimerInterrupt+0x34>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096e6:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <vPortSetupTimerInterrupt+0x38>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <vPortSetupTimerInterrupt+0x3c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a0a      	ldr	r2, [pc, #40]	; (800971c <vPortSetupTimerInterrupt+0x40>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	099b      	lsrs	r3, r3, #6
 80096f8:	4a09      	ldr	r2, [pc, #36]	; (8009720 <vPortSetupTimerInterrupt+0x44>)
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096fe:	4b04      	ldr	r3, [pc, #16]	; (8009710 <vPortSetupTimerInterrupt+0x34>)
 8009700:	2207      	movs	r2, #7
 8009702:	601a      	str	r2, [r3, #0]
}
 8009704:	bf00      	nop
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	e000e010 	.word	0xe000e010
 8009714:	e000e018 	.word	0xe000e018
 8009718:	20000028 	.word	0x20000028
 800971c:	10624dd3 	.word	0x10624dd3
 8009720:	e000e014 	.word	0xe000e014

08009724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009734 <vPortEnableVFP+0x10>
 8009728:	6801      	ldr	r1, [r0, #0]
 800972a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800972e:	6001      	str	r1, [r0, #0]
 8009730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009732:	bf00      	nop
 8009734:	e000ed88 	.word	0xe000ed88

08009738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800973e:	f3ef 8305 	mrs	r3, IPSR
 8009742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b0f      	cmp	r3, #15
 8009748:	d914      	bls.n	8009774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800974a:	4a17      	ldr	r2, [pc, #92]	; (80097a8 <vPortValidateInterruptPriority+0x70>)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009754:	4b15      	ldr	r3, [pc, #84]	; (80097ac <vPortValidateInterruptPriority+0x74>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	7afa      	ldrb	r2, [r7, #11]
 800975a:	429a      	cmp	r2, r3
 800975c:	d20a      	bcs.n	8009774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009774:	4b0e      	ldr	r3, [pc, #56]	; (80097b0 <vPortValidateInterruptPriority+0x78>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <vPortValidateInterruptPriority+0x7c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d90a      	bls.n	800979a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	603b      	str	r3, [r7, #0]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <vPortValidateInterruptPriority+0x60>
	}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	e000e3f0 	.word	0xe000e3f0
 80097ac:	20001a0c 	.word	0x20001a0c
 80097b0:	e000ed0c 	.word	0xe000ed0c
 80097b4:	20001a10 	.word	0x20001a10

080097b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	; 0x28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097c4:	f7fe fb98 	bl	8007ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097c8:	4b5b      	ldr	r3, [pc, #364]	; (8009938 <pvPortMalloc+0x180>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097d0:	f000 f920 	bl	8009a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097d4:	4b59      	ldr	r3, [pc, #356]	; (800993c <pvPortMalloc+0x184>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f040 8093 	bne.w	8009908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01d      	beq.n	8009824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097e8:	2208      	movs	r2, #8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d014      	beq.n	8009824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	3308      	adds	r3, #8
 8009802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <pvPortMalloc+0x6c>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	617b      	str	r3, [r7, #20]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d06e      	beq.n	8009908 <pvPortMalloc+0x150>
 800982a:	4b45      	ldr	r3, [pc, #276]	; (8009940 <pvPortMalloc+0x188>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d869      	bhi.n	8009908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009834:	4b43      	ldr	r3, [pc, #268]	; (8009944 <pvPortMalloc+0x18c>)
 8009836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009838:	4b42      	ldr	r3, [pc, #264]	; (8009944 <pvPortMalloc+0x18c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983e:	e004      	b.n	800984a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d903      	bls.n	800985c <pvPortMalloc+0xa4>
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f1      	bne.n	8009840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800985c:	4b36      	ldr	r3, [pc, #216]	; (8009938 <pvPortMalloc+0x180>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	429a      	cmp	r2, r3
 8009864:	d050      	beq.n	8009908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2208      	movs	r2, #8
 800986c:	4413      	add	r3, r2
 800986e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	2308      	movs	r3, #8
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	429a      	cmp	r2, r3
 8009886:	d91f      	bls.n	80098c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <pvPortMalloc+0xf8>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	613b      	str	r3, [r7, #16]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098c2:	69b8      	ldr	r0, [r7, #24]
 80098c4:	f000 f908 	bl	8009ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c8:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <pvPortMalloc+0x188>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <pvPortMalloc+0x188>)
 80098d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <pvPortMalloc+0x188>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <pvPortMalloc+0x190>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d203      	bcs.n	80098ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098e2:	4b17      	ldr	r3, [pc, #92]	; (8009940 <pvPortMalloc+0x188>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a18      	ldr	r2, [pc, #96]	; (8009948 <pvPortMalloc+0x190>)
 80098e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <pvPortMalloc+0x184>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	431a      	orrs	r2, r3
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <pvPortMalloc+0x194>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3301      	adds	r3, #1
 8009904:	4a11      	ldr	r2, [pc, #68]	; (800994c <pvPortMalloc+0x194>)
 8009906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009908:	f7fe fb04 	bl	8007f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <pvPortMalloc+0x174>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <pvPortMalloc+0x172>
	return pvReturn;
 800992c:	69fb      	ldr	r3, [r7, #28]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3728      	adds	r7, #40	; 0x28
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	2000561c 	.word	0x2000561c
 800993c:	20005630 	.word	0x20005630
 8009940:	20005620 	.word	0x20005620
 8009944:	20005614 	.word	0x20005614
 8009948:	20005624 	.word	0x20005624
 800994c:	20005628 	.word	0x20005628

08009950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d04d      	beq.n	80099fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009962:	2308      	movs	r3, #8
 8009964:	425b      	negs	r3, r3
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <vPortFree+0xb8>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4013      	ands	r3, r2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <vPortFree+0x44>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	60fb      	str	r3, [r7, #12]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00a      	beq.n	80099b2 <vPortFree+0x62>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	60bb      	str	r3, [r7, #8]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <vPortFree+0xb8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01e      	beq.n	80099fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11a      	bne.n	80099fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <vPortFree+0xb8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099d8:	f7fe fa8e 	bl	8007ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <vPortFree+0xbc>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4413      	add	r3, r2
 80099e6:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <vPortFree+0xbc>)
 80099e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ea:	6938      	ldr	r0, [r7, #16]
 80099ec:	f000 f874 	bl	8009ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <vPortFree+0xc0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	4a06      	ldr	r2, [pc, #24]	; (8009a10 <vPortFree+0xc0>)
 80099f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099fa:	f7fe fa8b 	bl	8007f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099fe:	bf00      	nop
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20005630 	.word	0x20005630
 8009a0c:	20005620 	.word	0x20005620
 8009a10:	2000562c 	.word	0x2000562c

08009a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a20:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <prvHeapInit+0xac>)
 8009a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00c      	beq.n	8009a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1f      	ldr	r2, [pc, #124]	; (8009ac0 <prvHeapInit+0xac>)
 8009a44:	4413      	add	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a52:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <prvHeapInit+0xb8>)
 8009aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <prvHeapInit+0xbc>)
 8009aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <prvHeapInit+0xc0>)
 8009aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ab2:	601a      	str	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	20001a14 	.word	0x20001a14
 8009ac4:	20005614 	.word	0x20005614
 8009ac8:	2000561c 	.word	0x2000561c
 8009acc:	20005624 	.word	0x20005624
 8009ad0:	20005620 	.word	0x20005620
 8009ad4:	20005630 	.word	0x20005630

08009ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae0:	4b28      	ldr	r3, [pc, #160]	; (8009b84 <prvInsertBlockIntoFreeList+0xac>)
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e002      	b.n	8009aec <prvInsertBlockIntoFreeList+0x14>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d8f7      	bhi.n	8009ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	4413      	add	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d108      	bne.n	8009b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	441a      	add	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d118      	bne.n	8009b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d00d      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	441a      	add	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e008      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b56:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e003      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d002      	beq.n	8009b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20005614 	.word	0x20005614
 8009b88:	2000561c 	.word	0x2000561c

08009b8c <atoi>:
 8009b8c:	220a      	movs	r2, #10
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f000 b882 	b.w	8009c98 <strtol>

08009b94 <_strtol_l.constprop.0>:
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9a:	d001      	beq.n	8009ba0 <_strtol_l.constprop.0+0xc>
 8009b9c:	2b24      	cmp	r3, #36	; 0x24
 8009b9e:	d906      	bls.n	8009bae <_strtol_l.constprop.0+0x1a>
 8009ba0:	f000 f88c 	bl	8009cbc <__errno>
 8009ba4:	2316      	movs	r3, #22
 8009ba6:	6003      	str	r3, [r0, #0]
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c94 <_strtol_l.constprop.0+0x100>
 8009bb2:	460d      	mov	r5, r1
 8009bb4:	462e      	mov	r6, r5
 8009bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009bbe:	f017 0708 	ands.w	r7, r7, #8
 8009bc2:	d1f7      	bne.n	8009bb4 <_strtol_l.constprop.0+0x20>
 8009bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8009bc6:	d132      	bne.n	8009c2e <_strtol_l.constprop.0+0x9a>
 8009bc8:	782c      	ldrb	r4, [r5, #0]
 8009bca:	2701      	movs	r7, #1
 8009bcc:	1cb5      	adds	r5, r6, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d05b      	beq.n	8009c8a <_strtol_l.constprop.0+0xf6>
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d109      	bne.n	8009bea <_strtol_l.constprop.0+0x56>
 8009bd6:	2c30      	cmp	r4, #48	; 0x30
 8009bd8:	d107      	bne.n	8009bea <_strtol_l.constprop.0+0x56>
 8009bda:	782c      	ldrb	r4, [r5, #0]
 8009bdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009be0:	2c58      	cmp	r4, #88	; 0x58
 8009be2:	d14d      	bne.n	8009c80 <_strtol_l.constprop.0+0xec>
 8009be4:	786c      	ldrb	r4, [r5, #1]
 8009be6:	2310      	movs	r3, #16
 8009be8:	3502      	adds	r5, #2
 8009bea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bee:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bf2:	f04f 0e00 	mov.w	lr, #0
 8009bf6:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bfa:	4676      	mov	r6, lr
 8009bfc:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c00:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c04:	f1bc 0f09 	cmp.w	ip, #9
 8009c08:	d816      	bhi.n	8009c38 <_strtol_l.constprop.0+0xa4>
 8009c0a:	4664      	mov	r4, ip
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	dd24      	ble.n	8009c5a <_strtol_l.constprop.0+0xc6>
 8009c10:	f1be 3fff 	cmp.w	lr, #4294967295
 8009c14:	d008      	beq.n	8009c28 <_strtol_l.constprop.0+0x94>
 8009c16:	45b1      	cmp	r9, r6
 8009c18:	d31c      	bcc.n	8009c54 <_strtol_l.constprop.0+0xc0>
 8009c1a:	d101      	bne.n	8009c20 <_strtol_l.constprop.0+0x8c>
 8009c1c:	45a2      	cmp	sl, r4
 8009c1e:	db19      	blt.n	8009c54 <_strtol_l.constprop.0+0xc0>
 8009c20:	fb06 4603 	mla	r6, r6, r3, r4
 8009c24:	f04f 0e01 	mov.w	lr, #1
 8009c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c2c:	e7e8      	b.n	8009c00 <_strtol_l.constprop.0+0x6c>
 8009c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c30:	bf04      	itt	eq
 8009c32:	782c      	ldrbeq	r4, [r5, #0]
 8009c34:	1cb5      	addeq	r5, r6, #2
 8009c36:	e7ca      	b.n	8009bce <_strtol_l.constprop.0+0x3a>
 8009c38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c3c:	f1bc 0f19 	cmp.w	ip, #25
 8009c40:	d801      	bhi.n	8009c46 <_strtol_l.constprop.0+0xb2>
 8009c42:	3c37      	subs	r4, #55	; 0x37
 8009c44:	e7e2      	b.n	8009c0c <_strtol_l.constprop.0+0x78>
 8009c46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c4a:	f1bc 0f19 	cmp.w	ip, #25
 8009c4e:	d804      	bhi.n	8009c5a <_strtol_l.constprop.0+0xc6>
 8009c50:	3c57      	subs	r4, #87	; 0x57
 8009c52:	e7db      	b.n	8009c0c <_strtol_l.constprop.0+0x78>
 8009c54:	f04f 3eff 	mov.w	lr, #4294967295
 8009c58:	e7e6      	b.n	8009c28 <_strtol_l.constprop.0+0x94>
 8009c5a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009c5e:	d105      	bne.n	8009c6c <_strtol_l.constprop.0+0xd8>
 8009c60:	2322      	movs	r3, #34	; 0x22
 8009c62:	6003      	str	r3, [r0, #0]
 8009c64:	4646      	mov	r6, r8
 8009c66:	b942      	cbnz	r2, 8009c7a <_strtol_l.constprop.0+0xe6>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	e79e      	b.n	8009baa <_strtol_l.constprop.0+0x16>
 8009c6c:	b107      	cbz	r7, 8009c70 <_strtol_l.constprop.0+0xdc>
 8009c6e:	4276      	negs	r6, r6
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	d0f9      	beq.n	8009c68 <_strtol_l.constprop.0+0xd4>
 8009c74:	f1be 0f00 	cmp.w	lr, #0
 8009c78:	d000      	beq.n	8009c7c <_strtol_l.constprop.0+0xe8>
 8009c7a:	1e69      	subs	r1, r5, #1
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	e7f3      	b.n	8009c68 <_strtol_l.constprop.0+0xd4>
 8009c80:	2430      	movs	r4, #48	; 0x30
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1b1      	bne.n	8009bea <_strtol_l.constprop.0+0x56>
 8009c86:	2308      	movs	r3, #8
 8009c88:	e7af      	b.n	8009bea <_strtol_l.constprop.0+0x56>
 8009c8a:	2c30      	cmp	r4, #48	; 0x30
 8009c8c:	d0a5      	beq.n	8009bda <_strtol_l.constprop.0+0x46>
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e7ab      	b.n	8009bea <_strtol_l.constprop.0+0x56>
 8009c92:	bf00      	nop
 8009c94:	08009fd1 	.word	0x08009fd1

08009c98 <strtol>:
 8009c98:	4613      	mov	r3, r2
 8009c9a:	460a      	mov	r2, r1
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	4802      	ldr	r0, [pc, #8]	; (8009ca8 <strtol+0x10>)
 8009ca0:	6800      	ldr	r0, [r0, #0]
 8009ca2:	f7ff bf77 	b.w	8009b94 <_strtol_l.constprop.0>
 8009ca6:	bf00      	nop
 8009ca8:	20000084 	.word	0x20000084

08009cac <memset>:
 8009cac:	4402      	add	r2, r0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <memset+0xa>
 8009cb4:	4770      	bx	lr
 8009cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cba:	e7f9      	b.n	8009cb0 <memset+0x4>

08009cbc <__errno>:
 8009cbc:	4b01      	ldr	r3, [pc, #4]	; (8009cc4 <__errno+0x8>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000084 	.word	0x20000084

08009cc8 <__libc_init_array>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4d0d      	ldr	r5, [pc, #52]	; (8009d00 <__libc_init_array+0x38>)
 8009ccc:	4c0d      	ldr	r4, [pc, #52]	; (8009d04 <__libc_init_array+0x3c>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	42a6      	cmp	r6, r4
 8009cd6:	d109      	bne.n	8009cec <__libc_init_array+0x24>
 8009cd8:	4d0b      	ldr	r5, [pc, #44]	; (8009d08 <__libc_init_array+0x40>)
 8009cda:	4c0c      	ldr	r4, [pc, #48]	; (8009d0c <__libc_init_array+0x44>)
 8009cdc:	f000 f826 	bl	8009d2c <_init>
 8009ce0:	1b64      	subs	r4, r4, r5
 8009ce2:	10a4      	asrs	r4, r4, #2
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	42a6      	cmp	r6, r4
 8009ce8:	d105      	bne.n	8009cf6 <__libc_init_array+0x2e>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf0:	4798      	blx	r3
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__libc_init_array+0xc>
 8009cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfa:	4798      	blx	r3
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	e7f2      	b.n	8009ce6 <__libc_init_array+0x1e>
 8009d00:	0800a0dc 	.word	0x0800a0dc
 8009d04:	0800a0dc 	.word	0x0800a0dc
 8009d08:	0800a0dc 	.word	0x0800a0dc
 8009d0c:	0800a0e0 	.word	0x0800a0e0

08009d10 <memcpy>:
 8009d10:	440a      	add	r2, r1
 8009d12:	4291      	cmp	r1, r2
 8009d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d18:	d100      	bne.n	8009d1c <memcpy+0xc>
 8009d1a:	4770      	bx	lr
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d26:	4291      	cmp	r1, r2
 8009d28:	d1f9      	bne.n	8009d1e <memcpy+0xe>
 8009d2a:	bd10      	pop	{r4, pc}

08009d2c <_init>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr

08009d38 <_fini>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr
