
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800b890  0800b890  0000c890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c428  0800c428  0000e308  2**0
                  CONTENTS
  4 .ARM          00000008  0800c428  0800c428  0000d428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c430  0800c430  0000e308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c430  0800c430  0000d430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c434  0800c434  0000d434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0800c438  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b3c  20000308  0800c740  0000e308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e44  0800c740  0000ee44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe19  00000000  00000000  0000e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cb  00000000  00000000  0002e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e6  00000000  00000000  00034368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a026  00000000  00000000  00035a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e99  00000000  00000000  0004fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea4b  00000000  00000000  0007090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e74  00000000  00000000  0010f39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00117210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b878 	.word	0x0800b878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	0800b878 	.word	0x0800b878

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f002 fcd2 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8bc 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa20 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f9fe 	bl	800090c <MX_DMA_Init>
  MX_SPI1_Init();
 8000510:	f000 f94c 	bl	80007ac <MX_SPI1_Init>
  MX_TIM3_Init();
 8000514:	f000 f980 	bl	8000818 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f9ce 	bl	80008b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800051c:	f000 f918 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000520:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000524:	4932      	ldr	r1, [pc, #200]	@ (80005f0 <main+0xf4>)
 8000526:	4833      	ldr	r0, [pc, #204]	@ (80005f4 <main+0xf8>)
 8000528:	f006 f8ef 	bl	800670a <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f007 fa3e 	bl	80079ac <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of NRF_Mutex */
  NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 8000530:	4831      	ldr	r0, [pc, #196]	@ (80005f8 <main+0xfc>)
 8000532:	f007 fc46 	bl	8007dc2 <osMutexNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a30      	ldr	r2, [pc, #192]	@ (80005fc <main+0x100>)
 800053a:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* creation of defaultTask */

  /* creation of Startup_Task */
  Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 800053c:	4a30      	ldr	r2, [pc, #192]	@ (8000600 <main+0x104>)
 800053e:	2100      	movs	r1, #0
 8000540:	4830      	ldr	r0, [pc, #192]	@ (8000604 <main+0x108>)
 8000542:	f007 fa7d 	bl	8007a40 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a2f      	ldr	r2, [pc, #188]	@ (8000608 <main+0x10c>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of Calc_Dis */
  Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 800054c:	4a2f      	ldr	r2, [pc, #188]	@ (800060c <main+0x110>)
 800054e:	2100      	movs	r1, #0
 8000550:	482f      	ldr	r0, [pc, #188]	@ (8000610 <main+0x114>)
 8000552:	f007 fa75 	bl	8007a40 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a2e      	ldr	r2, [pc, #184]	@ (8000614 <main+0x118>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of Local_Task */
  Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 800055c:	4a2e      	ldr	r2, [pc, #184]	@ (8000618 <main+0x11c>)
 800055e:	2100      	movs	r1, #0
 8000560:	482e      	ldr	r0, [pc, #184]	@ (800061c <main+0x120>)
 8000562:	f007 fa6d 	bl	8007a40 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a2d      	ldr	r2, [pc, #180]	@ (8000620 <main+0x124>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of Check_Algo */
  Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 800056c:	4a2d      	ldr	r2, [pc, #180]	@ (8000624 <main+0x128>)
 800056e:	2100      	movs	r1, #0
 8000570:	482d      	ldr	r0, [pc, #180]	@ (8000628 <main+0x12c>)
 8000572:	f007 fa65 	bl	8007a40 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a2c      	ldr	r2, [pc, #176]	@ (800062c <main+0x130>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of BSW_Algo */
  BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 800057c:	4a2c      	ldr	r2, [pc, #176]	@ (8000630 <main+0x134>)
 800057e:	2100      	movs	r1, #0
 8000580:	482c      	ldr	r0, [pc, #176]	@ (8000634 <main+0x138>)
 8000582:	f007 fa5d 	bl	8007a40 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a2b      	ldr	r2, [pc, #172]	@ (8000638 <main+0x13c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of DPW_Algo */
  DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 800058c:	4a2b      	ldr	r2, [pc, #172]	@ (800063c <main+0x140>)
 800058e:	2100      	movs	r1, #0
 8000590:	482b      	ldr	r0, [pc, #172]	@ (8000640 <main+0x144>)
 8000592:	f007 fa55 	bl	8007a40 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a2a      	ldr	r2, [pc, #168]	@ (8000644 <main+0x148>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of Receiveing */
  ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 800059c:	4a2a      	ldr	r2, [pc, #168]	@ (8000648 <main+0x14c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	482a      	ldr	r0, [pc, #168]	@ (800064c <main+0x150>)
 80005a2:	f007 fa4d 	bl	8007a40 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <main+0x154>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of FCW_Algo */
  FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005ac:	4a29      	ldr	r2, [pc, #164]	@ (8000654 <main+0x158>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4829      	ldr	r0, [pc, #164]	@ (8000658 <main+0x15c>)
 80005b2:	f007 fa45 	bl	8007a40 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a28      	ldr	r2, [pc, #160]	@ (800065c <main+0x160>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of EEBL_Algo */
  EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005bc:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <main+0x164>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4828      	ldr	r0, [pc, #160]	@ (8000664 <main+0x168>)
 80005c2:	f007 fa3d 	bl	8007a40 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <main+0x16c>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Task_LidarData */
  Task_LidarDataHandle = osThreadNew(Ask_LidarData, NULL, &Task_LidarData_attributes);
 80005cc:	4a27      	ldr	r2, [pc, #156]	@ (800066c <main+0x170>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4827      	ldr	r0, [pc, #156]	@ (8000670 <main+0x174>)
 80005d2:	f007 fa35 	bl	8007a40 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <main+0x178>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of EventGroup */
  EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005dc:	4826      	ldr	r0, [pc, #152]	@ (8000678 <main+0x17c>)
 80005de:	f007 fb09 	bl	8007bf4 <osEventFlagsNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a25      	ldr	r2, [pc, #148]	@ (800067c <main+0x180>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f007 fa04 	bl	80079f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0xf0>
 80005f0:	200004f0 	.word	0x200004f0
 80005f4:	20000418 	.word	0x20000418
 80005f8:	0800c2d4 	.word	0x0800c2d4
 80005fc:	200004e8 	.word	0x200004e8
 8000600:	0800c16c 	.word	0x0800c16c
 8000604:	08000d41 	.word	0x08000d41
 8000608:	200004c0 	.word	0x200004c0
 800060c:	0800c190 	.word	0x0800c190
 8000610:	08000de1 	.word	0x08000de1
 8000614:	200004c4 	.word	0x200004c4
 8000618:	0800c1b4 	.word	0x0800c1b4
 800061c:	08000e55 	.word	0x08000e55
 8000620:	200004c8 	.word	0x200004c8
 8000624:	0800c1d8 	.word	0x0800c1d8
 8000628:	08000f05 	.word	0x08000f05
 800062c:	200004cc 	.word	0x200004cc
 8000630:	0800c1fc 	.word	0x0800c1fc
 8000634:	08000f85 	.word	0x08000f85
 8000638:	200004d0 	.word	0x200004d0
 800063c:	0800c220 	.word	0x0800c220
 8000640:	0800108d 	.word	0x0800108d
 8000644:	200004d4 	.word	0x200004d4
 8000648:	0800c244 	.word	0x0800c244
 800064c:	080011c9 	.word	0x080011c9
 8000650:	200004d8 	.word	0x200004d8
 8000654:	0800c268 	.word	0x0800c268
 8000658:	080013c9 	.word	0x080013c9
 800065c:	200004dc 	.word	0x200004dc
 8000660:	0800c28c 	.word	0x0800c28c
 8000664:	080013f1 	.word	0x080013f1
 8000668:	200004e0 	.word	0x200004e0
 800066c:	0800c2b0 	.word	0x0800c2b0
 8000670:	0800146d 	.word	0x0800146d
 8000674:	200004e4 	.word	0x200004e4
 8000678:	0800c2e4 	.word	0x0800c2e4
 800067c:	200004ec 	.word	0x200004ec

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	@ 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00b f8b2 	bl	800b7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a26      	ldr	r2, [pc, #152]	@ (8000748 <SystemClock_Config+0xc8>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <SystemClock_Config+0xc8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a20      	ldr	r2, [pc, #128]	@ (800074c <SystemClock_Config+0xcc>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006f0:	2319      	movs	r3, #25
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006f4:	2390      	movs	r3, #144	@ 0x90
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f004 f89b 	bl	8004840 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 fed4 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fafd 	bl	8004d30 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800073c:	f000 febe 	bl	80014bc <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	@ 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f003 fa8b 	bl	8003ca8 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fe90 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000324 	.word	0x20000324
 80007a4:	40005400 	.word	0x40005400
 80007a8:	00061a80 	.word	0x00061a80

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <MX_SPI1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e0:	2220      	movs	r2, #32
 80007e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007fe:	f004 fca9 	bl	8005154 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 fe58 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000378 	.word	0x20000378
 8000814:	40013000 	.word	0x40013000

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_TIM3_Init+0x98>)
 8000838:	4a1e      	ldr	r2, [pc, #120]	@ (80008b4 <MX_TIM3_Init+0x9c>)
 800083a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_TIM3_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_TIM3_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_TIM3_Init+0x98>)
 800084a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_TIM3_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_TIM3_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800085c:	4814      	ldr	r0, [pc, #80]	@ (80008b0 <MX_TIM3_Init+0x98>)
 800085e:	f005 fa4f 	bl	8005d00 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000868:	f000 fe28 	bl	80014bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_TIM3_Init+0x98>)
 800087c:	f005 fbe2 	bl	8006044 <HAL_TIM_SlaveConfigSynchro>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000886:	f000 fe19 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_TIM3_Init+0x98>)
 8000898:	f005 fdda 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008a2:	f000 fe0b 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200003d0 	.word	0x200003d0
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <MX_USART1_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008f0:	f005 fe30 	bl	8006554 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 fddf 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000418 	.word	0x20000418
 8000908:	40011000 	.word	0x40011000

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_DMA_Init+0x3c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a0b      	ldr	r2, [pc, #44]	@ (8000948 <MX_DMA_Init+0x3c>)
 800091c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_DMA_Init+0x3c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	203a      	movs	r0, #58	@ 0x3a
 8000934:	f002 fbd6 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000938:	203a      	movs	r0, #58	@ 0x3a
 800093a:	f002 fbef 	bl	800311c <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a29      	ldr	r2, [pc, #164]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a22      	ldr	r2, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2118      	movs	r1, #24
 80009ba:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009bc:	f003 f942 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009d6:	f002 ffb1 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 80009da:	2318      	movs	r3, #24
 80009dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009f2:	f002 ffa3 	bl	800393c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2008      	movs	r0, #8
 80009fc:	f002 fb72 	bl	80030e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a00:	2008      	movs	r0, #8
 8000a02:	f002 fb8b 	bl	800311c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <HAL_UART_RxCpltCallback+0x1c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 f918 	bl	8007c74 <osEventFlagsSet>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200004ec 	.word	0x200004ec

08000a50 <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	@ 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	83fb      	strh	r3, [r7, #30]
	int16_t Local_CounterII = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	83bb      	strh	r3, [r7, #28]
	uint8_t Local_Zeros	= 0 ;
 8000a60:	2300      	movs	r3, #0
 8000a62:	76fb      	strb	r3, [r7, #27]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	83fb      	strh	r3, [r7, #30]
 8000a68:	e05b      	b.n	8000b22 <_CalcAvgDistance+0xd2>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 8000a6e:	8bfb      	ldrh	r3, [r7, #30]
 8000a70:	461a      	mov	r2, r3
 8000a72:	0052      	lsls	r2, r2, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3b03      	subs	r3, #3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	827b      	strh	r3, [r7, #18]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000a84:	8bfb      	ldrh	r3, [r7, #30]
 8000a86:	461a      	mov	r2, r3
 8000a88:	0052      	lsls	r2, r2, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3303      	adds	r3, #3
 8000a96:	823b      	strh	r3, [r7, #16]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a98:	8a7b      	ldrh	r3, [r7, #18]
 8000a9a:	83bb      	strh	r3, [r7, #28]
 8000a9c:	e02b      	b.n	8000af6 <_CalcAvgDistance+0xa6>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000a9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000aa2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000aa6:	4a24      	ldr	r2, [pc, #144]	@ (8000b38 <_CalcAvgDistance+0xe8>)
 8000aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aac:	441a      	add	r2, r3
 8000aae:	1211      	asrs	r1, r2, #8
 8000ab0:	17da      	asrs	r2, r3, #31
 8000ab2:	1a8a      	subs	r2, r1, r2
 8000ab4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ab8:	fb01 f202 	mul.w	r2, r1, r2
 8000abc:	1a9a      	subs	r2, r3, r2
 8000abe:	4613      	mov	r3, r2
 8000ac0:	81fb      	strh	r3, [r7, #14]

			if( 0==Data_Arr[Index] )
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <_CalcAvgDistance+0x88>
			{
				Local_Zeros++;
 8000ad0:	7efb      	ldrb	r3, [r7, #27]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	76fb      	strb	r3, [r7, #27]
 8000ad6:	e008      	b.n	8000aea <_CalcAvgDistance+0x9a>
			}
			else
			{
				Local_TempI += Data_Arr[Index];
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	617b      	str	r3, [r7, #20]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000aea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3301      	adds	r3, #1
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	83bb      	strh	r3, [r7, #28]
 8000af6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000afa:	8a3b      	ldrh	r3, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	ddce      	ble.n	8000a9e <_CalcAvgDistance+0x4e>
			}
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / (7-Local_Zeros);
 8000b00:	7efb      	ldrb	r3, [r7, #27]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	461a      	mov	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b0e:	8bfb      	ldrh	r3, [r7, #30]
 8000b10:	b291      	uxth	r1, r2
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <_CalcAvgDistance+0xec>)
 8000b14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Local_Zeros = 0 ;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	76fb      	strb	r3, [r7, #27]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000b1c:	8bfb      	ldrh	r3, [r7, #30]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	83fb      	strh	r3, [r7, #30]
 8000b22:	8bfb      	ldrh	r3, [r7, #30]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	d9a0      	bls.n	8000a6a <_CalcAvgDistance+0x1a>
	}

	return Local_AvgDistance;
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <_CalcAvgDistance+0xec>)
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	b60b60b7 	.word	0xb60b60b7
 8000b3c:	20000ed0 	.word	0x20000ed0

08000b40 <_vSSD1306_ForwardCollisionWarning>:

void _vSSD1306_ForwardCollisionWarning(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000b46:	2301      	movs	r3, #1
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2340      	movs	r3, #64	@ 0x40
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f001 f83f 	bl	8001bd4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-60,4) ;
 8000b56:	2104      	movs	r1, #4
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f000 fe87 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Forward Collision",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <_vSSD1306_ForwardCollisionWarning+0x58>)
 8000b64:	f000 ff16 	bl	8001994 <SSD1306_Puts>
	SSD1306_GotoXY(64-(25),15) ;
 8000b68:	210f      	movs	r1, #15
 8000b6a:	2027      	movs	r0, #39	@ 0x27
 8000b6c:	f000 fe7e 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Warning",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000b70:	2201      	movs	r2, #1
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <_vSSD1306_ForwardCollisionWarning+0x5c>)
 8000b76:	f000 ff0d 	bl	8001994 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-18 , 26  , ForwardCollision_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	2323      	movs	r3, #35	@ 0x23
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2323      	movs	r3, #35	@ 0x23
 8000b84:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <_vSSD1306_ForwardCollisionWarning+0x60>)
 8000b86:	211a      	movs	r1, #26
 8000b88:	202e      	movs	r0, #46	@ 0x2e
 8000b8a:	f000 fc9d 	bl	80014c8 <SSD1306_DrawBitmap>
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000274 	.word	0x20000274
 8000b98:	0800b928 	.word	0x0800b928
 8000b9c:	0800b93c 	.word	0x0800b93c
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <_vSSD1306_BlindSpotWarning>:

void _vSSD1306_BlindSpotWarning( BlindSpotDirection_t Copy_u8Direction )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2340      	movs	r3, #64	@ 0x40
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f001 f80b 	bl	8001bd4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-(35),4) ;
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	201d      	movs	r0, #29
 8000bc2:	f000 fe53 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Blind Spot",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4915      	ldr	r1, [pc, #84]	@ (8000c20 <_vSSD1306_BlindSpotWarning+0x7c>)
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <_vSSD1306_BlindSpotWarning+0x80>)
 8000bcc:	f000 fee2 	bl	8001994 <SSD1306_Puts>

	if( Copy_u8Direction == BlindSpotDirection_Right )
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b77      	cmp	r3, #119	@ 0x77
 8000bd4:	d109      	bne.n	8000bea <_vSSD1306_BlindSpotWarning+0x46>
	{
		SSD1306_GotoXY(64-(56),15) ;
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	2008      	movs	r0, #8
 8000bda:	f000 fe47 	bl	800186c <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	490f      	ldr	r1, [pc, #60]	@ (8000c20 <_vSSD1306_BlindSpotWarning+0x7c>)
 8000be2:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <_vSSD1306_BlindSpotWarning+0x84>)
 8000be4:	f000 fed6 	bl	8001994 <SSD1306_Puts>
 8000be8:	e00b      	b.n	8000c02 <_vSSD1306_BlindSpotWarning+0x5e>
	}
	else if( Copy_u8Direction == BlindSpotDirection_Left )
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b88      	cmp	r3, #136	@ 0x88
 8000bee:	d108      	bne.n	8000c02 <_vSSD1306_BlindSpotWarning+0x5e>
	{
		SSD1306_GotoXY(64-(53),15) ;
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	200b      	movs	r0, #11
 8000bf4:	f000 fe3a 	bl	800186c <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4909      	ldr	r1, [pc, #36]	@ (8000c20 <_vSSD1306_BlindSpotWarning+0x7c>)
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <_vSSD1306_BlindSpotWarning+0x88>)
 8000bfe:	f000 fec9 	bl	8001994 <SSD1306_Puts>
	}
	else
	{
		/* Do Nothing */
	}
	SSD1306_DrawBitmap(64-18 , 26  , BlindSpotWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	2323      	movs	r3, #35	@ 0x23
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2323      	movs	r3, #35	@ 0x23
 8000c0c:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <_vSSD1306_BlindSpotWarning+0x8c>)
 8000c0e:	211a      	movs	r1, #26
 8000c10:	202e      	movs	r0, #46	@ 0x2e
 8000c12:	f000 fc59 	bl	80014c8 <SSD1306_DrawBitmap>


}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000274 	.word	0x20000274
 8000c24:	0800b944 	.word	0x0800b944
 8000c28:	0800b950 	.word	0x0800b950
 8000c2c:	0800b964 	.word	0x0800b964
 8000c30:	200000b0 	.word	0x200000b0

08000c34 <_vSSD1306_EmergencyElectronicBrake>:

void _vSSD1306_EmergencyElectronicBrake(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 ffc5 	bl	8001bd4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-28,4) ;
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	2024      	movs	r0, #36	@ 0x24
 8000c4e:	f000 fe0d 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Warning!",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	4911      	ldr	r1, [pc, #68]	@ (8000c9c <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c56:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <_vSSD1306_EmergencyElectronicBrake+0x6c>)
 8000c58:	f000 fe9c 	bl	8001994 <SSD1306_Puts>
	SSD1306_GotoXY(64-46,15) ;
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	2012      	movs	r0, #18
 8000c60:	f000 fe04 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Front Vehicle",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c64:	2201      	movs	r2, #1
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c68:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <_vSSD1306_EmergencyElectronicBrake+0x70>)
 8000c6a:	f000 fe93 	bl	8001994 <SSD1306_Puts>
	SSD1306_GotoXY(64-42,26) ;
 8000c6e:	211a      	movs	r1, #26
 8000c70:	2016      	movs	r0, #22
 8000c72:	f000 fdfb 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Hard Braking",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c7a:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <_vSSD1306_EmergencyElectronicBrake+0x74>)
 8000c7c:	f000 fe8a 	bl	8001994 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-13 , 37  , EEBL_Bitmap , 25 , 25, SSD1306_COLOR_WHITE) ;
 8000c80:	2301      	movs	r3, #1
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2319      	movs	r3, #25
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2319      	movs	r3, #25
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <_vSSD1306_EmergencyElectronicBrake+0x78>)
 8000c8c:	2125      	movs	r1, #37	@ 0x25
 8000c8e:	2033      	movs	r0, #51	@ 0x33
 8000c90:	f000 fc1a 	bl	80014c8 <SSD1306_DrawBitmap>


}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000274 	.word	0x20000274
 8000ca0:	0800b974 	.word	0x0800b974
 8000ca4:	0800b980 	.word	0x0800b980
 8000ca8:	0800b990 	.word	0x0800b990
 8000cac:	20000160 	.word	0x20000160

08000cb0 <_vSSD1306_DontPassWarning>:

void _vSSD1306_DontPassWarning(DontPassWarningDirection_t Copy_u8Direction)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2340      	movs	r3, #64	@ 0x40
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 ff85 	bl	8001bd4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-53,4) ;
 8000cca:	2104      	movs	r1, #4
 8000ccc:	200b      	movs	r0, #11
 8000cce:	f000 fdcd 	bl	800186c <SSD1306_GotoXY>
	SSD1306_Puts("Don't Pass From",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4915      	ldr	r1, [pc, #84]	@ (8000d2c <_vSSD1306_DontPassWarning+0x7c>)
 8000cd6:	4816      	ldr	r0, [pc, #88]	@ (8000d30 <_vSSD1306_DontPassWarning+0x80>)
 8000cd8:	f000 fe5c 	bl	8001994 <SSD1306_Puts>

	if( Copy_u8Direction == DontPassWarningDirection_Right )
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2baa      	cmp	r3, #170	@ 0xaa
 8000ce0:	d109      	bne.n	8000cf6 <_vSSD1306_DontPassWarning+0x46>
	{
		SSD1306_GotoXY(64-18,15) ;
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	202e      	movs	r0, #46	@ 0x2e
 8000ce6:	f000 fdc1 	bl	800186c <SSD1306_GotoXY>
		SSD1306_Puts("Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	490f      	ldr	r1, [pc, #60]	@ (8000d2c <_vSSD1306_DontPassWarning+0x7c>)
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <_vSSD1306_DontPassWarning+0x84>)
 8000cf0:	f000 fe50 	bl	8001994 <SSD1306_Puts>
 8000cf4:	e00b      	b.n	8000d0e <_vSSD1306_DontPassWarning+0x5e>
	}
	else if( Copy_u8Direction == DontPassWarningDirection_Left )
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2bbb      	cmp	r3, #187	@ 0xbb
 8000cfa:	d108      	bne.n	8000d0e <_vSSD1306_DontPassWarning+0x5e>
	{
		SSD1306_GotoXY(64-14,15) ;
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	2032      	movs	r0, #50	@ 0x32
 8000d00:	f000 fdb4 	bl	800186c <SSD1306_GotoXY>
		SSD1306_Puts("Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	4909      	ldr	r1, [pc, #36]	@ (8000d2c <_vSSD1306_DontPassWarning+0x7c>)
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <_vSSD1306_DontPassWarning+0x88>)
 8000d0a:	f000 fe43 	bl	8001994 <SSD1306_Puts>
	else
	{
		/* Do Nothing */
	}

	SSD1306_DrawBitmap(64-18 , 26  , DontPassWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	2323      	movs	r3, #35	@ 0x23
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2323      	movs	r3, #35	@ 0x23
 8000d18:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <_vSSD1306_DontPassWarning+0x8c>)
 8000d1a:	211a      	movs	r1, #26
 8000d1c:	202e      	movs	r0, #46	@ 0x2e
 8000d1e:	f000 fbd3 	bl	80014c8 <SSD1306_DrawBitmap>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	0800b9a0 	.word	0x0800b9a0
 8000d34:	0800b9b0 	.word	0x0800b9b0
 8000d38:	0800b9b8 	.word	0x0800b9b8
 8000d3c:	200001c4 	.word	0x200001c4

08000d40 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b095      	sub	sp, #84	@ 0x54
 8000d44:	af12      	add	r7, sp, #72	@ 0x48
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Init_Task */

	/* Initializing SSD1306 ( OLED Display ) */
	SSD1306_Init();
 8000d48:	f000 fc26 	bl	8001598 <SSD1306_Init>
	/* NRF Module Initialization -> Less Then 0.5 Sec */
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <Init_Task+0x8c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	4618      	mov	r0, r3
 8000d56:	f007 f8ba 	bl	8007ece <osMutexAcquire>

	NRF24_begin(hspi1);
 8000d5a:	4c1d      	ldr	r4, [pc, #116]	@ (8000dd0 <Init_Task+0x90>)
 8000d5c:	4668      	mov	r0, sp
 8000d5e:	f104 0310 	add.w	r3, r4, #16
 8000d62:	2248      	movs	r2, #72	@ 0x48
 8000d64:	4619      	mov	r1, r3
 8000d66:	f00a fd79 	bl	800b85c <memcpy>
 8000d6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d6e:	f001 fc15 	bl	800259c <NRF24_begin>
	NRF24_setAutoAck(true);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f001 feda 	bl	8002b2c <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000d78:	2020      	movs	r0, #32
 8000d7a:	f001 fe33 	bl	80029e4 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000d7e:	f001 fe8b 	bl	8002a98 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000d82:	f001 fe5b 	bl	8002a3c <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <Init_Task+0x94>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f001 fdab 	bl	80028e8 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <Init_Task+0x94>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f001 fd80 	bl	80028a0 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000da0:	2220      	movs	r2, #32
 8000da2:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <Init_Task+0x98>)
 8000da4:	2001      	movs	r0, #1
 8000da6:	f002 f800 	bl	8002daa <NRF24_writeAckPayload>
	NRF24_startListening();
 8000daa:	f001 fcd3 	bl	8002754 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <Init_Task+0x8c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 f8d6 	bl	8007f64 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <Init_Task+0x9c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fed1 	bl	8007b64 <osThreadTerminate>

  /* USER CODE END Init_Task */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200004e8 	.word	0x200004e8
 8000dd0:	20000378 	.word	0x20000378
 8000dd4:	20000280 	.word	0x20000280
 8000dd8:	20000288 	.word	0x20000288
 8000ddc:	200004c0 	.word	0x200004c0

08000de0 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <Distance_Calc+0x64>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	f006 ff80 	bl	8007cf8 <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	e011      	b.n	8000e22 <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000dfe:	89fa      	ldrh	r2, [r7, #14]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <Distance_Calc+0x68>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00a fc6c 	bl	800b6e8 <atoi>
 8000e10:	4602      	mov	r2, r0
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	b291      	uxth	r1, r2
 8000e16:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <Distance_Calc+0x6c>)
 8000e18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	81fb      	strh	r3, [r7, #14]
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000e28:	d3e9      	bcc.n	8000dfe <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000e2a:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <Distance_Calc+0x6c>)
 8000e2c:	f7ff fe10 	bl	8000a50 <_CalcAvgDistance>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <Distance_Calc+0x70>)
 8000e34:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 8000e36:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <Distance_Calc+0x64>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 ff19 	bl	8007c74 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000e42:	e7d1      	b.n	8000de8 <Distance_Calc+0x8>
 8000e44:	200004ec 	.word	0x200004ec
 8000e48:	200004f0 	.word	0x200004f0
 8000e4c:	20000bf8 	.word	0x20000bf8
 8000e50:	20000ec8 	.word	0x20000ec8

08000e54 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e5c:	2311      	movs	r3, #17
 8000e5e:	733b      	strb	r3, [r7, #12]
 8000e60:	2301      	movs	r3, #1
 8000e62:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <Localization+0xa8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <Localization+0xa8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	330a      	adds	r3, #10
 8000e76:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <Localization+0xa8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3308      	adds	r3, #8
 8000e82:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <Localization+0xa8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <Localization+0xa8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <Localization+0xa8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <Localization+0xa8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Localization+0xa8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	330e      	adds	r3, #14
 8000ebc:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <Localization+0xac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f006 ffff 	bl	8007ece <osMutexAcquire>

		NRF24_stopListening();
 8000ed0:	f001 fc66 	bl	80027a0 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	210a      	movs	r1, #10
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fc6c 	bl	80027b8 <NRF24_write>
		NRF24_startListening();
 8000ee0:	f001 fc38 	bl	8002754 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <Localization+0xac>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f007 f83b 	bl	8007f64 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(1500);
 8000eee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ef2:	f006 fe64 	bl	8007bbe <osDelay>
	{
 8000ef6:	bf00      	nop
 8000ef8:	e7b0      	b.n	8000e5c <Localization+0x8>
 8000efa:	bf00      	nop
 8000efc:	20000ec8 	.word	0x20000ec8
 8000f00:	200004e8 	.word	0x200004e8

08000f04 <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Check_Algorithm */
	uint8_t Local_u8SendToRaspiContMov = RPI_MOVE ;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <Check_Algorithm+0x74>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f006 feec 	bl	8007cf8 <osEventFlagsWait>

		/* Checking on Front Threshold */
		if( ( Obstcales_Detection[FRONT] <= FCW_Threshold ) && (!( Obstcales_Detection[FRONT] <= EEBL_Threshold )) )
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <Check_Algorithm+0x78>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	330c      	adds	r3, #12
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f2c:	d80d      	bhi.n	8000f4a <Check_Algorithm+0x46>
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <Check_Algorithm+0x78>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	330c      	adds	r3, #12
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f3a:	d906      	bls.n	8000f4a <Check_Algorithm+0x46>
		{
			//Invoke FCW algorithm
			osEventFlagsSet( EventGroupHandle , FCW_ASSERTED ) ;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <Check_Algorithm+0x74>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2103      	movs	r1, #3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 fe96 	bl	8007c74 <osEventFlagsSet>
 8000f48:	e015      	b.n	8000f76 <Check_Algorithm+0x72>
		}
		else if( Obstcales_Detection[FRONT] <= EEBL_Threshold )
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <Check_Algorithm+0x78>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	330c      	adds	r3, #12
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f56:	d806      	bhi.n	8000f66 <Check_Algorithm+0x62>
		{
			//Invoke EEBL algorithm
			osEventFlagsSet( EventGroupHandle , EEBL_ASSERTED ) ;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <Check_Algorithm+0x74>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fe88 	bl	8007c74 <osEventFlagsSet>
 8000f64:	e7d4      	b.n	8000f10 <Check_Algorithm+0xc>
		}
		else
		{
			HAL_UART_Transmit(&huart1, &Local_u8SendToRaspiContMov, 1, HAL_MAX_DELAY ) ;
 8000f66:	f107 010f 	add.w	r1, r7, #15
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <Check_Algorithm+0x7c>)
 8000f72:	f005 fb3f 	bl	80065f4 <HAL_UART_Transmit>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000f76:	e7cb      	b.n	8000f10 <Check_Algorithm+0xc>
 8000f78:	200004ec 	.word	0x200004ec
 8000f7c:	20000ec8 	.word	0x20000ec8
 8000f80:	20000418 	.word	0x20000418

08000f84 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSW_Algorithm */
	bool Local_BSWLeft = false ;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 8000f94:	2300      	movs	r3, #0
 8000f96:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	@ (8001084 <BSW_Algorithm+0x100>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	f006 fea6 	bl	8007cf8 <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000fb4:	2387      	movs	r3, #135	@ 0x87
 8000fb6:	737b      	strb	r3, [r7, #13]
 8000fb8:	e012      	b.n	8000fe0 <BSW_Algorithm+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <BSW_Algorithm+0x104>)
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <BSW_Algorithm+0x56>
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001088 <BSW_Algorithm+0x104>)
 8000fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fce:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000fd2:	d802      	bhi.n	8000fda <BSW_Algorithm+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]

				break;
 8000fd8:	e005      	b.n	8000fe6 <BSW_Algorithm+0x62>
				Angle_Iterator--)
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	2b59      	cmp	r3, #89	@ 0x59
 8000fe4:	d8e9      	bhi.n	8000fba <BSW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8000fe6:	23e1      	movs	r3, #225	@ 0xe1
 8000fe8:	817b      	strh	r3, [r7, #10]
 8000fea:	e012      	b.n	8001012 <BSW_Algorithm+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8000fec:	897b      	ldrh	r3, [r7, #10]
 8000fee:	4a26      	ldr	r2, [pc, #152]	@ (8001088 <BSW_Algorithm+0x104>)
 8000ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <BSW_Algorithm+0x88>
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <BSW_Algorithm+0x104>)
 8000ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001000:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001004:	d802      	bhi.n	800100c <BSW_Algorithm+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8001006:	2301      	movs	r3, #1
 8001008:	73bb      	strb	r3, [r7, #14]

				break;
 800100a:	e006      	b.n	800101a <BSW_Algorithm+0x96>
				Angle_Iterator++)
 800100c:	897b      	ldrh	r3, [r7, #10]
 800100e:	3301      	adds	r3, #1
 8001010:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001018:	d9e8      	bls.n	8000fec <BSW_Algorithm+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <BSW_Algorithm+0xb4>
 8001020:	7a7b      	ldrb	r3, [r7, #9]
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <BSW_Algorithm+0xb4>
		{
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Left);
 800102c:	2088      	movs	r0, #136	@ 0x88
 800102e:	f7ff fdb9 	bl	8000ba4 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 8001032:	f000 fb75 	bl	8001720 <SSD1306_UpdateScreen>
 8001036:	e00a      	b.n	800104e <BSW_Algorithm+0xca>

		}
		else if ( ( Local_BSWLeft == false ) && ( Local_BSWL_LastState == true ) )
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <BSW_Algorithm+0xca>
 8001044:	7a7b      	ldrb	r3, [r7, #9]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <BSW_Algorithm+0xca>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 800104a:	f000 fe2d 	bl	8001ca8 <SSD1306_Clear>
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <BSW_Algorithm+0xe8>
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <BSW_Algorithm+0xe8>
		{
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Right);
 8001060:	2077      	movs	r0, #119	@ 0x77
 8001062:	f7ff fd9f 	bl	8000ba4 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 8001066:	f000 fb5b 	bl	8001720 <SSD1306_UpdateScreen>
 800106a:	e00a      	b.n	8001082 <BSW_Algorithm+0xfe>
		}
		else if ( ( Local_BSWRight == false ) && ( Local_BSWR_LastState == true ) )
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d091      	beq.n	8000f9c <BSW_Algorithm+0x18>
 8001078:	7a3b      	ldrb	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d08e      	beq.n	8000f9c <BSW_Algorithm+0x18>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 800107e:	f000 fe13 	bl	8001ca8 <SSD1306_Clear>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001082:	e78b      	b.n	8000f9c <BSW_Algorithm+0x18>
 8001084:	200004ec 	.word	0x200004ec
 8001088:	20000bf8 	.word	0x20000bf8

0800108c <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DPW_Algorithm */
	bool Local_DPWLeft = false ;
 8001094:	2300      	movs	r3, #0
 8001096:	75fb      	strb	r3, [r7, #23]
	bool Local_DPWRight= false ;
 8001098:	2300      	movs	r3, #0
 800109a:	75bb      	strb	r3, [r7, #22]
	bool Local_DPWL_LastState = false ;
 800109c:	2300      	movs	r3, #0
 800109e:	747b      	strb	r3, [r7, #17]
	bool Local_DPWR_LastState = false ;
 80010a0:	2300      	movs	r3, #0
 80010a2:	743b      	strb	r3, [r7, #16]


	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	747b      	strb	r3, [r7, #17]
		Local_DPWR_LastState = Local_DPWRight;
 80010a8:	7dbb      	ldrb	r3, [r7, #22]
 80010aa:	743b      	strb	r3, [r7, #16]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010ac:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <DPW_Algorithm+0x12c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	f006 fe1e 	bl	8007cf8 <osEventFlagsWait>

		uint8_t MessageToWarnBackCar[]={CAR_ID, 0 , Back_Car_ID};
 80010bc:	2311      	movs	r3, #17
 80010be:	733b      	strb	r3, [r7, #12]
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
 80010c4:	4b3d      	ldr	r3, [pc, #244]	@ (80011bc <DPW_Algorithm+0x130>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	73bb      	strb	r3, [r7, #14]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 80010ca:	232d      	movs	r3, #45	@ 0x2d
 80010cc:	757b      	strb	r3, [r7, #21]
 80010ce:	e012      	b.n	80010f6 <DPW_Algorithm+0x6a>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	4a3b      	ldr	r2, [pc, #236]	@ (80011c0 <DPW_Algorithm+0x134>)
 80010d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <DPW_Algorithm+0x64>
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <DPW_Algorithm+0x134>)
 80010e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010e8:	d802      	bhi.n	80010f0 <DPW_Algorithm+0x64>
			{
				/*break the loop and invoke DPW Left warning*/

				Local_DPWLeft = true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]

				break;
 80010ee:	e005      	b.n	80010fc <DPW_Algorithm+0x70>
				Angle_Iterator--)
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	757b      	strb	r3, [r7, #21]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 80010f6:	7d7b      	ldrb	r3, [r7, #21]
 80010f8:	2b0e      	cmp	r3, #14
 80010fa:	d8e9      	bhi.n	80010d0 <DPW_Algorithm+0x44>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 80010fc:	f240 133b 	movw	r3, #315	@ 0x13b
 8001100:	827b      	strh	r3, [r7, #18]
 8001102:	e012      	b.n	800112a <DPW_Algorithm+0x9e>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8001104:	8a7b      	ldrh	r3, [r7, #18]
 8001106:	4a2e      	ldr	r2, [pc, #184]	@ (80011c0 <DPW_Algorithm+0x134>)
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d009      	beq.n	8001124 <DPW_Algorithm+0x98>
 8001110:	8a7b      	ldrh	r3, [r7, #18]
 8001112:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <DPW_Algorithm+0x134>)
 8001114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001118:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800111c:	d802      	bhi.n	8001124 <DPW_Algorithm+0x98>
			{
				/*break the loop and invoke DPW Right warning*/
				Local_DPWRight = true;
 800111e:	2301      	movs	r3, #1
 8001120:	75bb      	strb	r3, [r7, #22]
				break;
 8001122:	e006      	b.n	8001132 <DPW_Algorithm+0xa6>
				Angle_Iterator++)
 8001124:	8a7b      	ldrh	r3, [r7, #18]
 8001126:	3301      	adds	r3, #1
 8001128:	827b      	strh	r3, [r7, #18]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 800112a:	8a7b      	ldrh	r3, [r7, #18]
 800112c:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 8001130:	d3e8      	bcc.n	8001104 <DPW_Algorithm+0x78>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01d      	beq.n	8001174 <DPW_Algorithm+0xe8>
 8001138:	7c7b      	ldrb	r3, [r7, #17]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d017      	beq.n	8001174 <DPW_Algorithm+0xe8>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_L_ID;
 8001144:	2357      	movs	r3, #87	@ 0x57
 8001146:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <DPW_Algorithm+0x138>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	4618      	mov	r0, r3
 8001152:	f006 febc 	bl	8007ece <osMutexAcquire>

			NRF24_stopListening();
 8001156:	f001 fb23 	bl	80027a0 <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2103      	movs	r1, #3
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fb29 	bl	80027b8 <NRF24_write>
			NRF24_startListening();
 8001166:	f001 faf5 	bl	8002754 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <DPW_Algorithm+0x138>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fef8 	bl	8007f64 <osMutexRelease>
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 8001174:	7dbb      	ldrb	r3, [r7, #22]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d094      	beq.n	80010a4 <DPW_Algorithm+0x18>
 800117a:	7c3b      	ldrb	r3, [r7, #16]
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d08e      	beq.n	80010a4 <DPW_Algorithm+0x18>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_R_ID;
 8001186:	2356      	movs	r3, #86	@ 0x56
 8001188:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <DPW_Algorithm+0x138>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f04f 31ff 	mov.w	r1, #4294967295
 8001192:	4618      	mov	r0, r3
 8001194:	f006 fe9b 	bl	8007ece <osMutexAcquire>

			NRF24_stopListening();
 8001198:	f001 fb02 	bl	80027a0 <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2103      	movs	r1, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fb08 	bl	80027b8 <NRF24_write>
			NRF24_startListening();
 80011a8:	f001 fad4 	bl	8002754 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <DPW_Algorithm+0x138>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fed7 	bl	8007f64 <osMutexRelease>
	{
 80011b6:	e775      	b.n	80010a4 <DPW_Algorithm+0x18>
 80011b8:	200004ec 	.word	0x200004ec
 80011bc:	20000ecd 	.word	0x20000ecd
 80011c0:	20000bf8 	.word	0x20000bf8
 80011c4:	200004e8 	.word	0x200004e8

080011c8 <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 80011d0:	f001 fb3e 	bl	8002850 <NRF24_available>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80e9 	beq.w	80013ae <Wireless_Receiving+0x1e6>
			uint8_t Received_Data[32] = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 80011f4:	4b70      	ldr	r3, [pc, #448]	@ (80013b8 <Wireless_Receiving+0x1f0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fe66 	bl	8007ece <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2120      	movs	r1, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fb29 	bl	8002860 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 800120e:	4b6a      	ldr	r3, [pc, #424]	@ (80013b8 <Wireless_Receiving+0x1f0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fea6 	bl	8007f64 <osMutexRelease>

			switch(Received_Data[1])
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	2b60      	cmp	r3, #96	@ 0x60
 800121c:	f000 8095 	beq.w	800134a <Wireless_Receiving+0x182>
 8001220:	2b60      	cmp	r3, #96	@ 0x60
 8001222:	f300 80bb 	bgt.w	800139c <Wireless_Receiving+0x1d4>
 8001226:	2b57      	cmp	r3, #87	@ 0x57
 8001228:	f000 809c 	beq.w	8001364 <Wireless_Receiving+0x19c>
 800122c:	2b57      	cmp	r3, #87	@ 0x57
 800122e:	f300 80b5 	bgt.w	800139c <Wireless_Receiving+0x1d4>
 8001232:	2b01      	cmp	r3, #1
 8001234:	d003      	beq.n	800123e <Wireless_Receiving+0x76>
 8001236:	2b56      	cmp	r3, #86	@ 0x56
 8001238:	f000 80a2 	beq.w	8001380 <Wireless_Receiving+0x1b8>
				{
					/* Do Nothing */
				}
				break ;
			default:
				break;
 800123c:	e0ae      	b.n	800139c <Wireless_Receiving+0x1d4>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800123e:	7c3b      	ldrb	r3, [r7, #16]
 8001240:	461a      	mov	r2, r3
 8001242:	4b5e      	ldr	r3, [pc, #376]	@ (80013bc <Wireless_Receiving+0x1f4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	330c      	adds	r3, #12
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	db09      	blt.n	8001266 <Wireless_Receiving+0x9e>
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	461a      	mov	r2, r3
 8001256:	4b59      	ldr	r3, [pc, #356]	@ (80013bc <Wireless_Receiving+0x1f4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	330c      	adds	r3, #12
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001262:	429a      	cmp	r2, r3
 8001264:	dd13      	ble.n	800128e <Wireless_Receiving+0xc6>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	461a      	mov	r2, r3
 800126a:	4b54      	ldr	r3, [pc, #336]	@ (80013bc <Wireless_Receiving+0x1f4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	330a      	adds	r3, #10
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001276:	429a      	cmp	r2, r3
 8001278:	db0b      	blt.n	8001292 <Wireless_Receiving+0xca>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 800127a:	7c7b      	ldrb	r3, [r7, #17]
 800127c:	461a      	mov	r2, r3
 800127e:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <Wireless_Receiving+0x1f4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	330e      	adds	r3, #14
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800128a:	429a      	cmp	r2, r3
 800128c:	dc01      	bgt.n	8001292 <Wireless_Receiving+0xca>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <Wireless_Receiving+0xcc>
 8001292:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012a4:	7d3b      	ldrb	r3, [r7, #20]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b44      	ldr	r3, [pc, #272]	@ (80013bc <Wireless_Receiving+0x1f4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3304      	adds	r3, #4
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	db09      	blt.n	80012cc <Wireless_Receiving+0x104>
 80012b8:	7d3b      	ldrb	r3, [r7, #20]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b3f      	ldr	r3, [pc, #252]	@ (80013bc <Wireless_Receiving+0x1f4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3304      	adds	r3, #4
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dd13      	ble.n	80012f4 <Wireless_Receiving+0x12c>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b3a      	ldr	r3, [pc, #232]	@ (80013bc <Wireless_Receiving+0x1f4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	330a      	adds	r3, #10
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	db0b      	blt.n	80012f8 <Wireless_Receiving+0x130>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 80012e0:	7c7b      	ldrb	r3, [r7, #17]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <Wireless_Receiving+0x1f4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	330e      	adds	r3, #14
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dc01      	bgt.n	80012f8 <Wireless_Receiving+0x130>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <Wireless_Receiving+0x132>
 80012f8:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(Is_Front){
 800130a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <Wireless_Receiving+0x162>
					Front_Car_ID = Received_Data[0];
 8001312:	7b3a      	ldrb	r2, [r7, #12]
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 8001316:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Back_Car_ID )
 8001318:	7b3a      	ldrb	r2, [r7, #12]
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <Wireless_Receiving+0x1fc>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d13e      	bne.n	80013a0 <Wireless_Receiving+0x1d8>
						Back_Car_ID = 0;
 8001322:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <Wireless_Receiving+0x1fc>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
				break;
 8001328:	e03a      	b.n	80013a0 <Wireless_Receiving+0x1d8>
				else if(Is_Back){
 800132a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800132e:	2b00      	cmp	r3, #0
 8001330:	d036      	beq.n	80013a0 <Wireless_Receiving+0x1d8>
					Back_Car_ID = Received_Data[0];
 8001332:	7b3a      	ldrb	r2, [r7, #12]
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <Wireless_Receiving+0x1fc>)
 8001336:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Front_Car_ID )
 8001338:	7b3a      	ldrb	r2, [r7, #12]
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d12e      	bne.n	80013a0 <Wireless_Receiving+0x1d8>
						Front_Car_ID = 0;
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
				break;
 8001348:	e02a      	b.n	80013a0 <Wireless_Receiving+0x1d8>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	2b11      	cmp	r3, #17
 800134e:	d129      	bne.n	80013a4 <Wireless_Receiving+0x1dc>
 8001350:	7b3a      	ldrb	r2, [r7, #12]
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d124      	bne.n	80013a4 <Wireless_Receiving+0x1dc>
					_vSSD1306_EmergencyElectronicBrake();
 800135a:	f7ff fc6b 	bl	8000c34 <_vSSD1306_EmergencyElectronicBrake>
					SSD1306_UpdateScreen();
 800135e:	f000 f9df 	bl	8001720 <SSD1306_UpdateScreen>
				break;
 8001362:	e01f      	b.n	80013a4 <Wireless_Receiving+0x1dc>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	2b11      	cmp	r3, #17
 8001368:	d11e      	bne.n	80013a8 <Wireless_Receiving+0x1e0>
 800136a:	7b3a      	ldrb	r2, [r7, #12]
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d119      	bne.n	80013a8 <Wireless_Receiving+0x1e0>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Left) ;
 8001374:	20bb      	movs	r0, #187	@ 0xbb
 8001376:	f7ff fc9b 	bl	8000cb0 <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 800137a:	f000 f9d1 	bl	8001720 <SSD1306_UpdateScreen>
				break ;
 800137e:	e013      	b.n	80013a8 <Wireless_Receiving+0x1e0>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	2b11      	cmp	r3, #17
 8001384:	d112      	bne.n	80013ac <Wireless_Receiving+0x1e4>
 8001386:	7b3a      	ldrb	r2, [r7, #12]
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <Wireless_Receiving+0x1f8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d10d      	bne.n	80013ac <Wireless_Receiving+0x1e4>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Right) ;
 8001390:	20aa      	movs	r0, #170	@ 0xaa
 8001392:	f7ff fc8d 	bl	8000cb0 <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 8001396:	f000 f9c3 	bl	8001720 <SSD1306_UpdateScreen>
				break ;
 800139a:	e007      	b.n	80013ac <Wireless_Receiving+0x1e4>
				break;
 800139c:	bf00      	nop
 800139e:	e006      	b.n	80013ae <Wireless_Receiving+0x1e6>
				break;
 80013a0:	bf00      	nop
 80013a2:	e004      	b.n	80013ae <Wireless_Receiving+0x1e6>
				break;
 80013a4:	bf00      	nop
 80013a6:	e002      	b.n	80013ae <Wireless_Receiving+0x1e6>
				break ;
 80013a8:	bf00      	nop
 80013aa:	e000      	b.n	80013ae <Wireless_Receiving+0x1e6>
				break ;
 80013ac:	bf00      	nop
			}

		}
		osDelay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f006 fc05 	bl	8007bbe <osDelay>
		if(NRF24_available()){
 80013b4:	e70c      	b.n	80011d0 <Wireless_Receiving+0x8>
 80013b6:	bf00      	nop
 80013b8:	200004e8 	.word	0x200004e8
 80013bc:	20000ec8 	.word	0x20000ec8
 80013c0:	20000ecc 	.word	0x20000ecc
 80013c4:	20000ecd 	.word	0x20000ecd

080013c8 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <FCW_Algorithm+0x24>)
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	2200      	movs	r2, #0
 80013da:	2103      	movs	r1, #3
 80013dc:	f006 fc8c 	bl	8007cf8 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		/* buzzer on as warning */
		_vSSD1306_ForwardCollisionWarning();
 80013e0:	f7ff fbae 	bl	8000b40 <_vSSD1306_ForwardCollisionWarning>
		SSD1306_UpdateScreen() ;
 80013e4:	f000 f99c 	bl	8001720 <SSD1306_UpdateScreen>
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80013e8:	bf00      	nop
 80013ea:	e7f1      	b.n	80013d0 <FCW_Algorithm+0x8>
 80013ec:	200004ec 	.word	0x200004ec

080013f0 <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EEBL_Algorithm */
	uint8_t Local_u8SendToRaspiStopNow = RPI_STOP ;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <EEBL_Algorithm+0x6c>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	f006 fc76 	bl	8007cf8 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		uint8_t MessageToWarnBackCar[]={CAR_ID,EEBL_ID,Back_Car_ID};
 800140c:	2311      	movs	r3, #17
 800140e:	733b      	strb	r3, [r7, #12]
 8001410:	2360      	movs	r3, #96	@ 0x60
 8001412:	737b      	strb	r3, [r7, #13]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <EEBL_Algorithm+0x70>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	73bb      	strb	r3, [r7, #14]
		/* Send Message to the Raspberry Pi to Take Actions and Stop Motor */
		HAL_UART_Transmit(&huart1, &Local_u8SendToRaspiStopNow, 1, HAL_MAX_DELAY ) ;
 800141a:	f107 010f 	add.w	r1, r7, #15
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2201      	movs	r2, #1
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <EEBL_Algorithm+0x74>)
 8001426:	f005 f8e5 	bl	80065f4 <HAL_UART_Transmit>

		/* Send warning to the Backward Vehicle to check on Algorithm via NRF */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <EEBL_Algorithm+0x78>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f04f 31ff 	mov.w	r1, #4294967295
 8001432:	4618      	mov	r0, r3
 8001434:	f006 fd4b 	bl	8007ece <osMutexAcquire>

		NRF24_stopListening();
 8001438:	f001 f9b2 	bl	80027a0 <NRF24_stopListening>
		NRF24_write( MessageToWarnBackCar , 3 ) ;
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2103      	movs	r1, #3
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f9b8 	bl	80027b8 <NRF24_write>
		NRF24_startListening();
 8001448:	f001 f984 	bl	8002754 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <EEBL_Algorithm+0x78>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f006 fd87 	bl	8007f64 <osMutexRelease>
	{
 8001456:	bf00      	nop
 8001458:	e7d0      	b.n	80013fc <EEBL_Algorithm+0xc>
 800145a:	bf00      	nop
 800145c:	200004ec 	.word	0x200004ec
 8001460:	20000ecd 	.word	0x20000ecd
 8001464:	20000418 	.word	0x20000418
 8001468:	200004e8 	.word	0x200004e8

0800146c <Ask_LidarData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ask_LidarData */
void Ask_LidarData(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ask_LidarData */
	uint8_t  Local_u8AskLidarForData = ASK_DATA ;
 8001474:	23f1      	movs	r3, #241	@ 0xf1
 8001476:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Transmit(&huart1, &Local_u8AskLidarForData, 1, HAL_MAX_DELAY ) ;
 8001478:	f107 010f 	add.w	r1, r7, #15
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	2201      	movs	r2, #1
 8001482:	4804      	ldr	r0, [pc, #16]	@ (8001494 <Ask_LidarData+0x28>)
 8001484:	f005 f8b6 	bl	80065f4 <HAL_UART_Transmit>

		osDelay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800148c:	f006 fb97 	bl	8007bbe <osDelay>
		HAL_UART_Transmit(&huart1, &Local_u8AskLidarForData, 1, HAL_MAX_DELAY ) ;
 8001490:	bf00      	nop
 8001492:	e7f1      	b.n	8001478 <Ask_LidarData+0xc>
 8001494:	20000418 	.word	0x20000418

08001498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014aa:	f001 fd1f 	bl	8002eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40000800 	.word	0x40000800

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	81fb      	strh	r3, [r7, #14]
 80014d6:	460b      	mov	r3, r1
 80014d8:	81bb      	strh	r3, [r7, #12]
 80014da:	4613      	mov	r3, r2
 80014dc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	3307      	adds	r3, #7
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da00      	bge.n	80014ea <SSD1306_DrawBitmap+0x22>
 80014e8:	3307      	adds	r3, #7
 80014ea:	10db      	asrs	r3, r3, #3
 80014ec:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	82bb      	strh	r3, [r7, #20]
 80014f6:	e044      	b.n	8001582 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	827b      	strh	r3, [r7, #18]
 80014fc:	e02f      	b.n	800155e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80014fe:	8a7b      	ldrh	r3, [r7, #18]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
 800150e:	e012      	b.n	8001536 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001510:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001514:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001518:	fb03 f202 	mul.w	r2, r3, r2
 800151c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da00      	bge.n	8001526 <SSD1306_DrawBitmap+0x5e>
 8001524:	3307      	adds	r3, #7
 8001526:	10db      	asrs	r3, r3, #3
 8001528:	b21b      	sxth	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001536:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da09      	bge.n	8001552 <SSD1306_DrawBitmap+0x8a>
 800153e:	89fa      	ldrh	r2, [r7, #14]
 8001540:	8a7b      	ldrh	r3, [r7, #18]
 8001542:	4413      	add	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	89b9      	ldrh	r1, [r7, #12]
 8001548:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f92d 	bl	80017ac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001552:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001556:	b29b      	uxth	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	827b      	strh	r3, [r7, #18]
 800155e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbc9      	blt.n	80014fe <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800156a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800156e:	b29b      	uxth	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	82bb      	strh	r3, [r7, #20]
 8001576:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800157a:	b29b      	uxth	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	81bb      	strh	r3, [r7, #12]
 8001582:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbb4      	blt.n	80014f8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800159e:	f000 fb8d 	bl	8001cbc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015a6:	2201      	movs	r2, #1
 80015a8:	2178      	movs	r1, #120	@ 0x78
 80015aa:	485b      	ldr	r0, [pc, #364]	@ (8001718 <SSD1306_Init+0x180>)
 80015ac:	f002 fdbe 	bl	800412c <HAL_I2C_IsDeviceReady>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e0a9      	b.n	800170e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015ba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80015be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015c0:	e002      	b.n	80015c8 <SSD1306_Init+0x30>
		p--;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015ce:	22ae      	movs	r2, #174	@ 0xae
 80015d0:	2100      	movs	r1, #0
 80015d2:	2078      	movs	r0, #120	@ 0x78
 80015d4:	f000 fbee 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	2078      	movs	r0, #120	@ 0x78
 80015de:	f000 fbe9 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015e2:	2210      	movs	r2, #16
 80015e4:	2100      	movs	r1, #0
 80015e6:	2078      	movs	r0, #120	@ 0x78
 80015e8:	f000 fbe4 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015ec:	22b0      	movs	r2, #176	@ 0xb0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2078      	movs	r0, #120	@ 0x78
 80015f2:	f000 fbdf 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015f6:	22c8      	movs	r2, #200	@ 0xc8
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	@ 0x78
 80015fc:	f000 fbda 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	@ 0x78
 8001606:	f000 fbd5 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800160a:	2210      	movs	r2, #16
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	@ 0x78
 8001610:	f000 fbd0 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001614:	2240      	movs	r2, #64	@ 0x40
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f000 fbcb 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800161e:	2281      	movs	r2, #129	@ 0x81
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	@ 0x78
 8001624:	f000 fbc6 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001628:	22ff      	movs	r2, #255	@ 0xff
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	@ 0x78
 800162e:	f000 fbc1 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001632:	22a1      	movs	r2, #161	@ 0xa1
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	@ 0x78
 8001638:	f000 fbbc 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800163c:	22a6      	movs	r2, #166	@ 0xa6
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	@ 0x78
 8001642:	f000 fbb7 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001646:	22a8      	movs	r2, #168	@ 0xa8
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	@ 0x78
 800164c:	f000 fbb2 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001650:	223f      	movs	r2, #63	@ 0x3f
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	@ 0x78
 8001656:	f000 fbad 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800165a:	22a4      	movs	r2, #164	@ 0xa4
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	@ 0x78
 8001660:	f000 fba8 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001664:	22d3      	movs	r2, #211	@ 0xd3
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	@ 0x78
 800166a:	f000 fba3 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	@ 0x78
 8001674:	f000 fb9e 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001678:	22d5      	movs	r2, #213	@ 0xd5
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	@ 0x78
 800167e:	f000 fb99 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001682:	22f0      	movs	r2, #240	@ 0xf0
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	@ 0x78
 8001688:	f000 fb94 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800168c:	22d9      	movs	r2, #217	@ 0xd9
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	@ 0x78
 8001692:	f000 fb8f 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001696:	2222      	movs	r2, #34	@ 0x22
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	@ 0x78
 800169c:	f000 fb8a 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016a0:	22da      	movs	r2, #218	@ 0xda
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	@ 0x78
 80016a6:	f000 fb85 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016aa:	2212      	movs	r2, #18
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	@ 0x78
 80016b0:	f000 fb80 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016b4:	22db      	movs	r2, #219	@ 0xdb
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	@ 0x78
 80016ba:	f000 fb7b 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016be:	2220      	movs	r2, #32
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	@ 0x78
 80016c4:	f000 fb76 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80016c8:	228d      	movs	r2, #141	@ 0x8d
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	@ 0x78
 80016ce:	f000 fb71 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016d2:	2214      	movs	r2, #20
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	@ 0x78
 80016d8:	f000 fb6c 	bl	8001db4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016dc:	22af      	movs	r2, #175	@ 0xaf
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	@ 0x78
 80016e2:	f000 fb67 	bl	8001db4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016e6:	222e      	movs	r2, #46	@ 0x2e
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	@ 0x78
 80016ec:	f000 fb62 	bl	8001db4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 f843 	bl	800177c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80016f6:	f000 f813 	bl	8001720 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <SSD1306_Init+0x184>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SSD1306_Init+0x184>)
 8001702:	2200      	movs	r2, #0
 8001704:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <SSD1306_Init+0x184>)
 8001708:	2201      	movs	r2, #1
 800170a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000324 	.word	0x20000324
 800171c:	200012e0 	.word	0x200012e0

08001720 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	e01d      	b.n	8001768 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	3b50      	subs	r3, #80	@ 0x50
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 fb3c 	bl	8001db4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	@ 0x78
 8001742:	f000 fb37 	bl	8001db4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001746:	2210      	movs	r2, #16
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 fb32 	bl	8001db4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <SSD1306_UpdateScreen+0x58>)
 8001756:	441a      	add	r2, r3
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	2140      	movs	r1, #64	@ 0x40
 800175c:	2078      	movs	r0, #120	@ 0x78
 800175e:	f000 fac3 	bl	8001ce8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3301      	adds	r3, #1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b07      	cmp	r3, #7
 800176c:	d9de      	bls.n	800172c <SSD1306_UpdateScreen+0xc>
	}
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000ee0 	.word	0x20000ee0

0800177c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <SSD1306_Fill+0x14>
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <SSD1306_Fill+0x16>
 8001790:	23ff      	movs	r3, #255	@ 0xff
 8001792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001796:	4619      	mov	r1, r3
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <SSD1306_Fill+0x2c>)
 800179a:	f00a f82d 	bl	800b7f8 <memset>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000ee0 	.word	0x20000ee0

080017ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	460b      	mov	r3, r1
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	70fb      	strb	r3, [r7, #3]
	if (
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80017c2:	d848      	bhi.n	8001856 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80017c8:	d845      	bhi.n	8001856 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <SSD1306_DrawPixel+0xb8>)
 80017cc:	791b      	ldrb	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d11a      	bne.n	800181c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	b298      	uxth	r0, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	01db      	lsls	r3, r3, #7
 80017f2:	4413      	add	r3, r2
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <SSD1306_DrawPixel+0xbc>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	b25b      	sxtb	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b259      	sxtb	r1, r3
 800180c:	88fa      	ldrh	r2, [r7, #6]
 800180e:	4603      	mov	r3, r0
 8001810:	01db      	lsls	r3, r3, #7
 8001812:	4413      	add	r3, r2
 8001814:	b2c9      	uxtb	r1, r1
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <SSD1306_DrawPixel+0xbc>)
 8001818:	54d1      	strb	r1, [r2, r3]
 800181a:	e01d      	b.n	8001858 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	b298      	uxth	r0, r3
 8001824:	4603      	mov	r3, r0
 8001826:	01db      	lsls	r3, r3, #7
 8001828:	4413      	add	r3, r2
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <SSD1306_DrawPixel+0xbc>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	b25a      	sxtb	r2, r3
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	b25b      	sxtb	r3, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	b25b      	sxtb	r3, r3
 8001842:	4013      	ands	r3, r2
 8001844:	b259      	sxtb	r1, r3
 8001846:	88fa      	ldrh	r2, [r7, #6]
 8001848:	4603      	mov	r3, r0
 800184a:	01db      	lsls	r3, r3, #7
 800184c:	4413      	add	r3, r2
 800184e:	b2c9      	uxtb	r1, r1
 8001850:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <SSD1306_DrawPixel+0xbc>)
 8001852:	54d1      	strb	r1, [r2, r3]
 8001854:	e000      	b.n	8001858 <SSD1306_DrawPixel+0xac>
		return;
 8001856:	bf00      	nop
	}
}
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200012e0 	.word	0x200012e0
 8001868:	20000ee0 	.word	0x20000ee0

0800186c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	460a      	mov	r2, r1
 8001876:	80fb      	strh	r3, [r7, #6]
 8001878:	4613      	mov	r3, r2
 800187a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <SSD1306_GotoXY+0x28>)
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <SSD1306_GotoXY+0x28>)
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	8053      	strh	r3, [r2, #2]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200012e0 	.word	0x200012e0

08001898 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018a8:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <SSD1306_Putc+0xf8>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
	if (
 80018b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018b6:	dc07      	bgt.n	80018c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018b8:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <SSD1306_Putc+0xf8>)
 80018ba:	885b      	ldrh	r3, [r3, #2]
 80018bc:	461a      	mov	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018c6:	dd01      	ble.n	80018cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e05d      	b.n	8001988 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e04b      	b.n	800196a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	3b20      	subs	r3, #32
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	7849      	ldrb	r1, [r1, #1]
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	440b      	add	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e030      	b.n	8001958 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d010      	beq.n	8001928 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <SSD1306_Putc+0xf8>)
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b298      	uxth	r0, r3
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <SSD1306_Putc+0xf8>)
 8001914:	885a      	ldrh	r2, [r3, #2]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	79ba      	ldrb	r2, [r7, #6]
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff ff43 	bl	80017ac <SSD1306_DrawPixel>
 8001926:	e014      	b.n	8001952 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <SSD1306_Putc+0xf8>)
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b298      	uxth	r0, r3
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <SSD1306_Putc+0xf8>)
 8001936:	885a      	ldrh	r2, [r3, #2]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4413      	add	r3, r2
 800193e:	b299      	uxth	r1, r3
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	f7ff ff2d 	bl	80017ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	3301      	adds	r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4293      	cmp	r3, r2
 8001962:	d3c8      	bcc.n	80018f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	461a      	mov	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4293      	cmp	r3, r2
 8001974:	d3ad      	bcc.n	80018d2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SSD1306_Putc+0xf8>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <SSD1306_Putc+0xf8>)
 8001984:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001986:	79fb      	ldrb	r3, [r7, #7]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200012e0 	.word	0x200012e0

08001994 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019a2:	e012      	b.n	80019ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff73 	bl	8001898 <SSD1306_Putc>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d002      	beq.n	80019c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	e008      	b.n	80019d6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1e8      	bne.n	80019a4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	781b      	ldrb	r3, [r3, #0]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4604      	mov	r4, r0
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	80fb      	strh	r3, [r7, #6]
 80019f0:	4603      	mov	r3, r0
 80019f2:	80bb      	strh	r3, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a00:	d901      	bls.n	8001a06 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001a02:	237f      	movs	r3, #127	@ 0x7f
 8001a04:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a0a:	d901      	bls.n	8001a10 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001a0c:	237f      	movs	r3, #127	@ 0x7f
 8001a0e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a14:	d901      	bls.n	8001a1a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001a16:	233f      	movs	r3, #63	@ 0x3f
 8001a18:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a1e:	d901      	bls.n	8001a24 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001a20:	233f      	movs	r3, #63	@ 0x3f
 8001a22:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d205      	bcs.n	8001a38 <SSD1306_DrawLine+0x5a>
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	e004      	b.n	8001a42 <SSD1306_DrawLine+0x64>
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001a44:	88ba      	ldrh	r2, [r7, #4]
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d205      	bcs.n	8001a58 <SSD1306_DrawLine+0x7a>
 8001a4c:	883a      	ldrh	r2, [r7, #0]
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	e004      	b.n	8001a62 <SSD1306_DrawLine+0x84>
 8001a58:	88ba      	ldrh	r2, [r7, #4]
 8001a5a:	883b      	ldrh	r3, [r7, #0]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d201      	bcs.n	8001a70 <SSD1306_DrawLine+0x92>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e001      	b.n	8001a74 <SSD1306_DrawLine+0x96>
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001a76:	88ba      	ldrh	r2, [r7, #4]
 8001a78:	883b      	ldrh	r3, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d201      	bcs.n	8001a82 <SSD1306_DrawLine+0xa4>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e001      	b.n	8001a86 <SSD1306_DrawLine+0xa8>
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001a88:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dd06      	ble.n	8001aa2 <SSD1306_DrawLine+0xc4>
 8001a94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a98:	0fda      	lsrs	r2, r3, #31
 8001a9a:	4413      	add	r3, r2
 8001a9c:	105b      	asrs	r3, r3, #1
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	e006      	b.n	8001ab0 <SSD1306_DrawLine+0xd2>
 8001aa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001aa6:	0fda      	lsrs	r2, r3, #31
 8001aa8:	4413      	add	r3, r2
 8001aaa:	105b      	asrs	r3, r3, #1
 8001aac:	425b      	negs	r3, r3
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001ab2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d129      	bne.n	8001b0e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001aba:	883a      	ldrh	r2, [r7, #0]
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d205      	bcs.n	8001ace <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001ac2:	883b      	ldrh	r3, [r7, #0]
 8001ac4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001aca:	893b      	ldrh	r3, [r7, #8]
 8001acc:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d205      	bcs.n	8001ae2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001ade:	893b      	ldrh	r3, [r7, #8]
 8001ae0:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	82bb      	strh	r3, [r7, #20]
 8001ae6:	e00c      	b.n	8001b02 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001ae8:	8ab9      	ldrh	r1, [r7, #20]
 8001aea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe5b 	bl	80017ac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001af6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	82bb      	strh	r3, [r7, #20]
 8001b02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b06:	883b      	ldrh	r3, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dded      	ble.n	8001ae8 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8001b0c:	e05f      	b.n	8001bce <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8001b0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d129      	bne.n	8001b6a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001b16:	883a      	ldrh	r2, [r7, #0]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d205      	bcs.n	8001b2a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001b1e:	883b      	ldrh	r3, [r7, #0]
 8001b20:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d205      	bcs.n	8001b3e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001b3a:	893b      	ldrh	r3, [r7, #8]
 8001b3c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	82bb      	strh	r3, [r7, #20]
 8001b42:	e00c      	b.n	8001b5e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001b44:	8abb      	ldrh	r3, [r7, #20]
 8001b46:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b4a:	88b9      	ldrh	r1, [r7, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe2d 	bl	80017ac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	82bb      	strh	r3, [r7, #20]
 8001b5e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dded      	ble.n	8001b44 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8001b68:	e031      	b.n	8001bce <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001b6a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b6e:	88b9      	ldrh	r1, [r7, #4]
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe1a 	bl	80017ac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d103      	bne.n	8001b88 <SSD1306_DrawLine+0x1aa>
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	883b      	ldrh	r3, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d021      	beq.n	8001bcc <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001b8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b94:	425b      	negs	r3, r3
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dd08      	ble.n	8001bac <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001b9a:	8afa      	ldrh	r2, [r7, #22]
 8001b9c:	8a3b      	ldrh	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ba4:	89fa      	ldrh	r2, [r7, #14]
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	4413      	add	r3, r2
 8001baa:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001bac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dad8      	bge.n	8001b6a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001bb8:	8afa      	ldrh	r2, [r7, #22]
 8001bba:	8a7b      	ldrh	r3, [r7, #18]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001bc2:	89ba      	ldrh	r2, [r7, #12]
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001bca:	e7ce      	b.n	8001b6a <SSD1306_DrawLine+0x18c>
			break;
 8001bcc:	bf00      	nop
		}
	}
}
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	4603      	mov	r3, r0
 8001be8:	80bb      	strh	r3, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf6:	d853      	bhi.n	8001ca0 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bfc:	d850      	bhi.n	8001ca0 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4413      	add	r3, r2
 8001c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c06:	dd03      	ble.n	8001c10 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001c0e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001c10:	88ba      	ldrh	r2, [r7, #4]
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c18:	dd03      	ble.n	8001c22 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001c1a:	88bb      	ldrh	r3, [r7, #4]
 8001c1c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001c20:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	4413      	add	r3, r2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	88bc      	ldrh	r4, [r7, #4]
 8001c2c:	88b9      	ldrh	r1, [r7, #4]
 8001c2e:	88f8      	ldrh	r0, [r7, #6]
 8001c30:	7e3b      	ldrb	r3, [r7, #24]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4623      	mov	r3, r4
 8001c36:	f7ff fed2 	bl	80019de <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001c3a:	88ba      	ldrh	r2, [r7, #4]
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b299      	uxth	r1, r3
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29c      	uxth	r4, r3
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	883b      	ldrh	r3, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	88f8      	ldrh	r0, [r7, #6]
 8001c54:	7e3b      	ldrb	r3, [r7, #24]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	f7ff febf 	bl	80019de <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29c      	uxth	r4, r3
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	88b9      	ldrh	r1, [r7, #4]
 8001c6c:	88f8      	ldrh	r0, [r7, #6]
 8001c6e:	7e3b      	ldrb	r3, [r7, #24]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	f7ff feb3 	bl	80019de <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b298      	uxth	r0, r3
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	4413      	add	r3, r2
 8001c86:	b29c      	uxth	r4, r3
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	883b      	ldrh	r3, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	88b9      	ldrh	r1, [r7, #4]
 8001c92:	7e3b      	ldrb	r3, [r7, #24]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	4622      	mov	r2, r4
 8001c9a:	f7ff fea0 	bl	80019de <SSD1306_DrawLine>
 8001c9e:	e000      	b.n	8001ca2 <SSD1306_DrawRectangle+0xce>
		return;
 8001ca0:	bf00      	nop
}
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}

08001ca8 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fd65 	bl	800177c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001cb2:	f7ff fd35 	bl	8001720 <SSD1306_UpdateScreen>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <ssd1306_I2C_Init+0x28>)
 8001cc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cc6:	e002      	b.n	8001cce <ssd1306_I2C_Init+0x12>
		p--;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	0003d090 	.word	0x0003d090

08001ce8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b0c7      	sub	sp, #284	@ 0x11c
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001cf6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001cfa:	600a      	str	r2, [r1, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d06:	4622      	mov	r2, r4
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d0e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001d12:	4602      	mov	r2, r0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d1e:	460a      	mov	r2, r1
 8001d20:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d2e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d3c:	e015      	b.n	8001d6a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d46:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	441a      	add	r2, r3
 8001d4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d52:	3301      	adds	r3, #1
 8001d54:	7811      	ldrb	r1, [r2, #0]
 8001d56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d5a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d5e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d64:	3301      	adds	r3, #1
 8001d66:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d74:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d8df      	bhi.n	8001d3e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	200a      	movs	r0, #10
 8001d9e:	9000      	str	r0, [sp, #0]
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001da2:	f002 f8c5 	bl	8003f30 <HAL_I2C_Master_Transmit>
}
 8001da6:	bf00      	nop
 8001da8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	20000324 	.word	0x20000324

08001db4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	71bb      	strb	r3, [r7, #6]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
 8001dc8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dca:	797b      	ldrb	r3, [r7, #5]
 8001dcc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <ssd1306_I2C_Write+0x38>)
 8001dde:	f002 f8a7 	bl	8003f30 <HAL_I2C_Master_Transmit>
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000324 	.word	0x20000324

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_MspInit+0x54>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <HAL_MspInit+0x54>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <HAL_MspInit+0x54>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_MspInit+0x54>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_MspInit+0x54>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_MspInit+0x54>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	210f      	movs	r1, #15
 8001e32:	f06f 0001 	mvn.w	r0, #1
 8001e36:	f001 f955 	bl	80030e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	@ (8001ecc <HAL_I2C_MspInit+0x84>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d12b      	bne.n	8001ec2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a17      	ldr	r2, [pc, #92]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e86:	23c0      	movs	r3, #192	@ 0xc0
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e96:	2304      	movs	r3, #4
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <HAL_I2C_MspInit+0x8c>)
 8001ea2:	f001 fd4b 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	@ 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <HAL_SPI_MspInit+0x84>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12b      	bne.n	8001f52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a17      	ldr	r2, [pc, #92]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23e0      	movs	r3, #224	@ 0xe0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f42:	2305      	movs	r3, #5
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <HAL_SPI_MspInit+0x8c>)
 8001f4e:	f001 fcf5 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	@ 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d115      	bne.n	8001fa6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	201d      	movs	r0, #29
 8001f9c:	f001 f8a2 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f001 f8bb 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_UART_MspInit+0xf4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d163      	bne.n	80020a2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b34      	ldr	r3, [pc, #208]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a33      	ldr	r2, [pc, #204]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <HAL_UART_MspInit+0xf8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002012:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002024:	2307      	movs	r3, #7
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4821      	ldr	r0, [pc, #132]	@ (80020b4 <HAL_UART_MspInit+0xfc>)
 8002030:	f001 fc84 	bl	800393c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002036:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <HAL_UART_MspInit+0x104>)
 8002038:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800203c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002040:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002050:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002054:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002068:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002076:	4810      	ldr	r0, [pc, #64]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 8002078:	f001 f85e 	bl	8003138 <HAL_DMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002082:	f7ff fa1b 	bl	80014bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800208a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800208c:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <HAL_UART_MspInit+0x100>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2105      	movs	r1, #5
 8002096:	2025      	movs	r0, #37	@ 0x25
 8002098:	f001 f824 	bl	80030e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800209c:	2025      	movs	r0, #37	@ 0x25
 800209e:	f001 f83d 	bl	800311c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40011000 	.word	0x40011000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	20000460 	.word	0x20000460
 80020bc:	40026440 	.word	0x40026440

080020c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08e      	sub	sp, #56	@ 0x38
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <HAL_InitTick+0xe4>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	4a32      	ldr	r2, [pc, #200]	@ (80021a4 <HAL_InitTick+0xe4>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e0:	4b30      	ldr	r3, [pc, #192]	@ (80021a4 <HAL_InitTick+0xe4>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ec:	f107 0210 	add.w	r2, r7, #16
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fffa 	bl	80050f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002106:	f002 ffcb 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 800210a:	6378      	str	r0, [r7, #52]	@ 0x34
 800210c:	e004      	b.n	8002118 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800210e:	f002 ffc7 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8002112:	4603      	mov	r3, r0
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211a:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_InitTick+0xe8>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	3b01      	subs	r3, #1
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <HAL_InitTick+0xec>)
 8002128:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <HAL_InitTick+0xf0>)
 800212a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_InitTick+0xec>)
 800212e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002132:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_InitTick+0xec>)
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800213a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <HAL_InitTick+0xec>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <HAL_InitTick+0xec>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_InitTick+0xec>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800214c:	4817      	ldr	r0, [pc, #92]	@ (80021ac <HAL_InitTick+0xec>)
 800214e:	f003 fdd7 	bl	8005d00 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11b      	bne.n	8002198 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002160:	4812      	ldr	r0, [pc, #72]	@ (80021ac <HAL_InitTick+0xec>)
 8002162:	f003 fe1d 	bl	8005da0 <HAL_TIM_Base_Start_IT>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002174:	201e      	movs	r0, #30
 8002176:	f000 ffd1 	bl	800311c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d808      	bhi.n	8002192 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	201e      	movs	r0, #30
 8002186:	f000 ffad 	bl	80030e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_InitTick+0xf4>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e002      	b.n	8002198 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002198:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800219c:	4618      	mov	r0, r3
 800219e:	3738      	adds	r7, #56	@ 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	431bde83 	.word	0x431bde83
 80021ac:	200012e8 	.word	0x200012e8
 80021b0:	40000800 	.word	0x40000800
 80021b4:	200002ac 	.word	0x200002ac

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <NMI_Handler+0x4>

080021c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <MemManage_Handler+0x4>

080021d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <UsageFault_Handler+0x4>

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021f2:	2004      	movs	r0, #4
 80021f4:	f001 fd40 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <TIM3_IRQHandler+0x10>)
 8002202:	f003 fe2f 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200003d0 	.word	0x200003d0

08002210 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <TIM4_IRQHandler+0x10>)
 8002216:	f003 fe25 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200012e8 	.word	0x200012e8

08002224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <USART1_IRQHandler+0x10>)
 800222a:	f004 fa93 	bl	8006754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000418 	.word	0x20000418

08002238 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <DMA2_Stream2_IRQHandler+0x10>)
 800223e:	f001 f913 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000460 	.word	0x20000460

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	@ (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002274:	f7ff ffea 	bl	800224c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	@ (80022ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	@ (80022b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	@ (80022bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f009 fab9 	bl	800b814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7fe f92b 	bl	80004fc <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80022b4:	0800c438 	.word	0x0800c438
  ldr r2, =_sbss
 80022b8:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80022bc:	20005e44 	.word	0x20005e44

080022c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC_IRQHandler>
	...

080022c4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <NRF24_DelayMicroSeconds+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <NRF24_DelayMicroSeconds+0x40>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9a      	lsrs	r2, r3, #18
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80022e4:	bf00      	nop
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1fa      	bne.n	80022e6 <NRF24_DelayMicroSeconds+0x22>
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200002a8 	.word	0x200002a8
 8002304:	165e9f81 	.word	0x165e9f81

08002308 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <NRF24_csn+0x20>
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <NRF24_csn+0x38>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <NRF24_csn+0x3c>)
 800231c:	8811      	ldrh	r1, [r2, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fc8f 	bl	8003c44 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002326:	e007      	b.n	8002338 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <NRF24_csn+0x38>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <NRF24_csn+0x3c>)
 800232e:	8811      	ldrh	r1, [r2, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fc86 	bl	8003c44 <HAL_GPIO_WritePin>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20001340 	.word	0x20001340
 8002344:	20001344 	.word	0x20001344

08002348 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <NRF24_ce+0x20>
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <NRF24_ce+0x38>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <NRF24_ce+0x3c>)
 800235c:	8811      	ldrh	r1, [r2, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fc6f 	bl	8003c44 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002366:	e007      	b.n	8002378 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <NRF24_ce+0x38>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <NRF24_ce+0x3c>)
 800236e:	8811      	ldrh	r1, [r2, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fc66 	bl	8003c44 <HAL_GPIO_WritePin>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20001340 	.word	0x20001340
 8002384:	20001346 	.word	0x20001346

08002388 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff ffb8 	bl	8002308 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80023a2:	f107 010c 	add.w	r1, r7, #12
 80023a6:	2364      	movs	r3, #100	@ 0x64
 80023a8:	2201      	movs	r2, #1
 80023aa:	480a      	ldr	r0, [pc, #40]	@ (80023d4 <NRF24_read_register+0x4c>)
 80023ac:	f002 ff5b 	bl	8005266 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	1c59      	adds	r1, r3, #1
 80023b6:	2364      	movs	r3, #100	@ 0x64
 80023b8:	2201      	movs	r2, #1
 80023ba:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <NRF24_read_register+0x4c>)
 80023bc:	f003 f896 	bl	80054ec <HAL_SPI_Receive>
	retData = spiBuf[1];
 80023c0:	7b7b      	ldrb	r3, [r7, #13]
 80023c2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff ff9f 	bl	8002308 <NRF24_csn>
	return retData;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20001348 	.word	0x20001348

080023d8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff8d 	bl	8002308 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80023f8:	f107 010c 	add.w	r1, r7, #12
 80023fc:	2364      	movs	r3, #100	@ 0x64
 80023fe:	2201      	movs	r2, #1
 8002400:	4808      	ldr	r0, [pc, #32]	@ (8002424 <NRF24_read_registerN+0x4c>)
 8002402:	f002 ff30 	bl	8005266 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	b29a      	uxth	r2, r3
 800240a:	2364      	movs	r3, #100	@ 0x64
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <NRF24_read_registerN+0x4c>)
 8002410:	f003 f86c 	bl	80054ec <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff ff77 	bl	8002308 <NRF24_csn>
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20001348 	.word	0x20001348

08002428 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff ff65 	bl	8002308 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f043 0320 	orr.w	r3, r3, #32
 8002444:	b2db      	uxtb	r3, r3
 8002446:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800244c:	f107 010c 	add.w	r1, r7, #12
 8002450:	2364      	movs	r3, #100	@ 0x64
 8002452:	2202      	movs	r2, #2
 8002454:	4804      	ldr	r0, [pc, #16]	@ (8002468 <NRF24_write_register+0x40>)
 8002456:	f002 ff06 	bl	8005266 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff ff54 	bl	8002308 <NRF24_csn>
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20001348 	.word	0x20001348

0800246c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	4613      	mov	r3, r2
 800247a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff ff43 	bl	8002308 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	b2db      	uxtb	r3, r3
 800248a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800248c:	f107 010c 	add.w	r1, r7, #12
 8002490:	2364      	movs	r3, #100	@ 0x64
 8002492:	2201      	movs	r2, #1
 8002494:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <NRF24_write_registerN+0x4c>)
 8002496:	f002 fee6 	bl	8005266 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	b29a      	uxth	r2, r3
 800249e:	2364      	movs	r3, #100	@ 0x64
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <NRF24_write_registerN+0x4c>)
 80024a4:	f002 fedf 	bl	8005266 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff ff2d 	bl	8002308 <NRF24_csn>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001348 	.word	0x20001348

080024bc <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff ff1d 	bl	8002308 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80024ce:	23a0      	movs	r3, #160	@ 0xa0
 80024d0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80024d2:	f107 010f 	add.w	r1, r7, #15
 80024d6:	2364      	movs	r3, #100	@ 0x64
 80024d8:	2201      	movs	r2, #1
 80024da:	4808      	ldr	r0, [pc, #32]	@ (80024fc <NRF24_write_payload+0x40>)
 80024dc:	f002 fec3 	bl	8005266 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2364      	movs	r3, #100	@ 0x64
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4804      	ldr	r0, [pc, #16]	@ (80024fc <NRF24_write_payload+0x40>)
 80024ea:	f002 febc 	bl	8005266 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff ff0a 	bl	8002308 <NRF24_csn>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20001348 	.word	0x20001348

08002500 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800250c:	f000 fa82 	bl	8002a14 <NRF24_getPayloadSize>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	4293      	cmp	r3, r2
 8002518:	d303      	bcc.n	8002522 <NRF24_read_payload+0x22>
 800251a:	f000 fa7b 	bl	8002a14 <NRF24_getPayloadSize>
 800251e:	4603      	mov	r3, r0
 8002520:	e000      	b.n	8002524 <NRF24_read_payload+0x24>
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff feee 	bl	8002308 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800252c:	2361      	movs	r3, #97	@ 0x61
 800252e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002530:	f107 010e 	add.w	r1, r7, #14
 8002534:	2364      	movs	r3, #100	@ 0x64
 8002536:	2201      	movs	r2, #1
 8002538:	4808      	ldr	r0, [pc, #32]	@ (800255c <NRF24_read_payload+0x5c>)
 800253a:	f002 fe94 	bl	8005266 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	b29a      	uxth	r2, r3
 8002542:	2364      	movs	r3, #100	@ 0x64
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <NRF24_read_payload+0x5c>)
 8002548:	f002 ffd0 	bl	80054ec <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff fedb 	bl	8002308 <NRF24_csn>
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20001348 	.word	0x20001348

08002560 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002564:	21ff      	movs	r1, #255	@ 0xff
 8002566:	20e1      	movs	r0, #225	@ 0xe1
 8002568:	f7ff ff5e 	bl	8002428 <NRF24_write_register>
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002574:	21ff      	movs	r1, #255	@ 0xff
 8002576:	20e2      	movs	r0, #226	@ 0xe2
 8002578:	f7ff ff56 	bl	8002428 <NRF24_write_register>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002586:	2007      	movs	r0, #7
 8002588:	f7ff fefe 	bl	8002388 <NRF24_read_register>
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8002590:	79fb      	ldrb	r3, [r7, #7]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 800259c:	b084      	sub	sp, #16
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	f107 0c10 	add.w	ip, r7, #16
 80025a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80025ac:	4b64      	ldr	r3, [pc, #400]	@ (8002740 <NRF24_begin+0x1a4>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	2258      	movs	r2, #88	@ 0x58
 80025b6:	4619      	mov	r1, r3
 80025b8:	f009 f950 	bl	800b85c <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 80025bc:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <NRF24_begin+0x1a8>)
 80025be:	4a62      	ldr	r2, [pc, #392]	@ (8002748 <NRF24_begin+0x1ac>)
 80025c0:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 80025c2:	4b62      	ldr	r3, [pc, #392]	@ (800274c <NRF24_begin+0x1b0>)
 80025c4:	2208      	movs	r2, #8
 80025c6:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 80025c8:	4b61      	ldr	r3, [pc, #388]	@ (8002750 <NRF24_begin+0x1b4>)
 80025ca:	2210      	movs	r2, #16
 80025cc:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff fe9a 	bl	8002308 <NRF24_csn>
	NRF24_ce(0);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff feb7 	bl	8002348 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80025da:	2005      	movs	r0, #5
 80025dc:	f000 fca6 	bl	8002f2c <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 80025e0:	2108      	movs	r1, #8
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff ff20 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 80025e8:	213f      	movs	r1, #63	@ 0x3f
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7ff ff1c 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 80025f0:	2103      	movs	r1, #3
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7ff ff18 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 80025f8:	2103      	movs	r1, #3
 80025fa:	2003      	movs	r0, #3
 80025fc:	f7ff ff14 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8002600:	2103      	movs	r1, #3
 8002602:	2004      	movs	r0, #4
 8002604:	f7ff ff10 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8002608:	2102      	movs	r1, #2
 800260a:	2005      	movs	r0, #5
 800260c:	f7ff ff0c 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8002610:	210f      	movs	r1, #15
 8002612:	2006      	movs	r0, #6
 8002614:	f7ff ff08 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8002618:	210e      	movs	r1, #14
 800261a:	2007      	movs	r0, #7
 800261c:	f7ff ff04 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8002620:	2100      	movs	r1, #0
 8002622:	2008      	movs	r0, #8
 8002624:	f7ff ff00 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 8002628:	2100      	movs	r1, #0
 800262a:	2009      	movs	r0, #9
 800262c:	f7ff fefc 	bl	8002428 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002630:	23e7      	movs	r3, #231	@ 0xe7
 8002632:	713b      	strb	r3, [r7, #4]
 8002634:	23e7      	movs	r3, #231	@ 0xe7
 8002636:	70fb      	strb	r3, [r7, #3]
 8002638:	23e7      	movs	r3, #231	@ 0xe7
 800263a:	70bb      	strb	r3, [r7, #2]
 800263c:	23e7      	movs	r3, #231	@ 0xe7
 800263e:	707b      	strb	r3, [r7, #1]
 8002640:	23e7      	movs	r3, #231	@ 0xe7
 8002642:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8002644:	463b      	mov	r3, r7
 8002646:	2205      	movs	r2, #5
 8002648:	4619      	mov	r1, r3
 800264a:	200a      	movs	r0, #10
 800264c:	f7ff ff0e 	bl	800246c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8002650:	23c2      	movs	r3, #194	@ 0xc2
 8002652:	713b      	strb	r3, [r7, #4]
 8002654:	23c2      	movs	r3, #194	@ 0xc2
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	23c2      	movs	r3, #194	@ 0xc2
 800265a:	70bb      	strb	r3, [r7, #2]
 800265c:	23c2      	movs	r3, #194	@ 0xc2
 800265e:	707b      	strb	r3, [r7, #1]
 8002660:	23c2      	movs	r3, #194	@ 0xc2
 8002662:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8002664:	463b      	mov	r3, r7
 8002666:	2205      	movs	r2, #5
 8002668:	4619      	mov	r1, r3
 800266a:	200b      	movs	r0, #11
 800266c:	f7ff fefe 	bl	800246c <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8002670:	21c3      	movs	r1, #195	@ 0xc3
 8002672:	200c      	movs	r0, #12
 8002674:	f7ff fed8 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 8002678:	21c4      	movs	r1, #196	@ 0xc4
 800267a:	200d      	movs	r0, #13
 800267c:	f7ff fed4 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 8002680:	21c5      	movs	r1, #197	@ 0xc5
 8002682:	200e      	movs	r0, #14
 8002684:	f7ff fed0 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 8002688:	21c6      	movs	r1, #198	@ 0xc6
 800268a:	200f      	movs	r0, #15
 800268c:	f7ff fecc 	bl	8002428 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002690:	23e7      	movs	r3, #231	@ 0xe7
 8002692:	713b      	strb	r3, [r7, #4]
 8002694:	23e7      	movs	r3, #231	@ 0xe7
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	23e7      	movs	r3, #231	@ 0xe7
 800269a:	70bb      	strb	r3, [r7, #2]
 800269c:	23e7      	movs	r3, #231	@ 0xe7
 800269e:	707b      	strb	r3, [r7, #1]
 80026a0:	23e7      	movs	r3, #231	@ 0xe7
 80026a2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80026a4:	463b      	mov	r3, r7
 80026a6:	2205      	movs	r2, #5
 80026a8:	4619      	mov	r1, r3
 80026aa:	2010      	movs	r0, #16
 80026ac:	f7ff fede 	bl	800246c <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 80026b0:	2100      	movs	r1, #0
 80026b2:	2011      	movs	r0, #17
 80026b4:	f7ff feb8 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 80026b8:	2100      	movs	r1, #0
 80026ba:	2012      	movs	r0, #18
 80026bc:	f7ff feb4 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80026c0:	2100      	movs	r1, #0
 80026c2:	2013      	movs	r0, #19
 80026c4:	f7ff feb0 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80026c8:	2100      	movs	r1, #0
 80026ca:	2014      	movs	r0, #20
 80026cc:	f7ff feac 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 80026d0:	2100      	movs	r1, #0
 80026d2:	2015      	movs	r0, #21
 80026d4:	f7ff fea8 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 80026d8:	2100      	movs	r1, #0
 80026da:	2016      	movs	r0, #22
 80026dc:	f7ff fea4 	bl	8002428 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80026e0:	f000 fbc8 	bl	8002e74 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 80026e4:	2100      	movs	r1, #0
 80026e6:	201c      	movs	r0, #28
 80026e8:	f7ff fe9e 	bl	8002428 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 80026ec:	2100      	movs	r1, #0
 80026ee:	201d      	movs	r0, #29
 80026f0:	f7ff fe9a 	bl	8002428 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80026f4:	210f      	movs	r1, #15
 80026f6:	200f      	movs	r0, #15
 80026f8:	f000 f944 	bl	8002984 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f000 fa2a 	bl	8002b56 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8002702:	2000      	movs	r0, #0
 8002704:	f000 fa60 	bl	8002bc8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8002708:	2002      	movs	r0, #2
 800270a:	f000 faa3 	bl	8002c54 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800270e:	f000 f9f5 	bl	8002afc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8002712:	2020      	movs	r0, #32
 8002714:	f000 f966 	bl	80029e4 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 8002718:	f000 fac4 	bl	8002ca4 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 800271c:	f000 fba2 	bl	8002e64 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8002720:	204c      	movs	r0, #76	@ 0x4c
 8002722:	f000 f94a 	bl	80029ba <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002726:	f7ff ff1b 	bl	8002560 <NRF24_flush_tx>
	NRF24_flush_rx();
 800272a:	f7ff ff21 	bl	8002570 <NRF24_flush_rx>

	NRF24_powerDown();
 800272e:	f000 face 	bl	8002cce <NRF24_powerDown>

}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800273c:	b004      	add	sp, #16
 800273e:	4770      	bx	lr
 8002740:	20001348 	.word	0x20001348
 8002744:	20001340 	.word	0x20001340
 8002748:	40020000 	.word	0x40020000
 800274c:	20001344 	.word	0x20001344
 8002750:	20001346 	.word	0x20001346

08002754 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002758:	2000      	movs	r0, #0
 800275a:	f7ff fe15 	bl	8002388 <NRF24_read_register>
 800275e:	4603      	mov	r3, r0
 8002760:	f043 0303 	orr.w	r3, r3, #3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fe5d 	bl	8002428 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <NRF24_startListening+0x48>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	4313      	orrs	r3, r2
 8002776:	d004      	beq.n	8002782 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002778:	2205      	movs	r2, #5
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <NRF24_startListening+0x48>)
 800277c:	200a      	movs	r0, #10
 800277e:	f7ff fe75 	bl	800246c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8002782:	f7ff feed 	bl	8002560 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002786:	f7ff fef3 	bl	8002570 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800278a:	2001      	movs	r0, #1
 800278c:	f7ff fddc 	bl	8002348 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002790:	2096      	movs	r0, #150	@ 0x96
 8002792:	f7ff fd97 	bl	80022c4 <NRF24_DelayMicroSeconds>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001330 	.word	0x20001330

080027a0 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff fdcf 	bl	8002348 <NRF24_ce>
	NRF24_flush_tx();
 80027aa:	f7ff fed9 	bl	8002560 <NRF24_flush_tx>
	NRF24_flush_rx();
 80027ae:	f7ff fedf 	bl	8002570 <NRF24_flush_rx>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80027c4:	f000 fb4e 	bl	8002e64 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fabd 	bl	8002d4c <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80027d2:	f000 fb9f 	bl	8002f14 <HAL_GetTick>
 80027d6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80027d8:	230a      	movs	r3, #10
 80027da:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80027dc:	f107 030d 	add.w	r3, r7, #13
 80027e0:	2201      	movs	r2, #1
 80027e2:	4619      	mov	r1, r3
 80027e4:	2008      	movs	r0, #8
 80027e6:	f7ff fdf7 	bl	80023d8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80027ea:	f7ff fec9 	bl	8002580 <NRF24_get_status>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <NRF24_write+0x54>
 80027fc:	f000 fb8a 	bl	8002f14 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8e7      	bhi.n	80027dc <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800280c:	f107 010b 	add.w	r1, r7, #11
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4a0c      	ldr	r2, [pc, #48]	@ (8002848 <NRF24_write+0x90>)
 8002816:	4618      	mov	r0, r3
 8002818:	f000 faf1 	bl	8002dfe <NRF24_whatHappened>
	retStatus = tx_ok;
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <NRF24_write+0x90>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8002828:	f000 f900 	bl	8002a2c <NRF24_getDynamicPayloadSize>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b06      	ldr	r3, [pc, #24]	@ (800284c <NRF24_write+0x94>)
 8002832:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8002834:	f000 f80c 	bl	8002850 <NRF24_available>
	NRF24_flush_tx();
 8002838:	f7ff fe92 	bl	8002560 <NRF24_flush_tx>
	return retStatus;
 800283c:	7bbb      	ldrb	r3, [r7, #14]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20001338 	.word	0x20001338
 800284c:	20001339 	.word	0x20001339

08002850 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002854:	2000      	movs	r0, #0
 8002856:	f000 fa49 	bl	8002cec <NRF24_availablePipe>
 800285a:	4603      	mov	r3, r0
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}

08002860 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fe45 	bl	8002500 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002876:	2017      	movs	r0, #23
 8002878:	f7ff fd86 	bl	8002388 <NRF24_read_register>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8002884:	f7ff fe74 	bl	8002570 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8002888:	f000 f8d0 	bl	8002a2c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80028aa:	463b      	mov	r3, r7
 80028ac:	2205      	movs	r2, #5
 80028ae:	4619      	mov	r1, r3
 80028b0:	200a      	movs	r0, #10
 80028b2:	f7ff fddb 	bl	800246c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80028b6:	463b      	mov	r3, r7
 80028b8:	2205      	movs	r2, #5
 80028ba:	4619      	mov	r1, r3
 80028bc:	2010      	movs	r0, #16
 80028be:	f7ff fdd5 	bl	800246c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80028c2:	2320      	movs	r3, #32
 80028c4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80028c6:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <NRF24_openWritingPipe+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf28      	it	cs
 80028d0:	4613      	movcs	r3, r2
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	2011      	movs	r0, #17
 80028d8:	f7ff fda6 	bl	8002428 <NRF24_write_register>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	2000133a 	.word	0x2000133a

080028e8 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4601      	mov	r1, r0
 80028f0:	e9c7 2300 	strd	r2, r3, [r7]
 80028f4:	460b      	mov	r3, r1
 80028f6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80028fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002902:	491c      	ldr	r1, [pc, #112]	@ (8002974 <NRF24_openReadingPipe+0x8c>)
 8002904:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d82d      	bhi.n	800296a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d808      	bhi.n	8002926 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <NRF24_openReadingPipe+0x90>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	4639      	mov	r1, r7
 800291c:	2205      	movs	r2, #5
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fda4 	bl	800246c <NRF24_write_registerN>
 8002924:	e007      	b.n	8002936 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <NRF24_openReadingPipe+0x90>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	4639      	mov	r1, r7
 800292e:	2201      	movs	r2, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd9b 	bl	800246c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	4a10      	ldr	r2, [pc, #64]	@ (800297c <NRF24_openReadingPipe+0x94>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <NRF24_openReadingPipe+0x98>)
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fd70 	bl	8002428 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002948:	2002      	movs	r0, #2
 800294a:	f7ff fd1d 	bl	8002388 <NRF24_read_register>
 800294e:	4603      	mov	r3, r0
 8002950:	b25a      	sxtb	r2, r3
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	b25b      	sxtb	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b25b      	sxtb	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	2002      	movs	r0, #2
 8002966:	f7ff fd5f 	bl	8002428 <NRF24_write_register>
	}

}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20001330 	.word	0x20001330
 8002978:	0800c30c 	.word	0x0800c30c
 800297c:	0800c314 	.word	0x0800c314
 8002980:	2000133a 	.word	0x2000133a

08002984 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	460a      	mov	r2, r1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4613      	mov	r3, r2
 8002992:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	b25a      	sxtb	r2, r3
 800299a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	2004      	movs	r0, #4
 80029ae:	f7ff fd3b 	bl	8002428 <NRF24_write_register>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80029c4:	237f      	movs	r3, #127	@ 0x7f
 80029c6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf28      	it	cs
 80029d0:	4613      	movcs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	2005      	movs	r0, #5
 80029d8:	f7ff fd26 	bl	8002428 <NRF24_write_register>
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80029ee:	2320      	movs	r3, #32
 80029f0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bf28      	it	cs
 80029fa:	4613      	movcs	r3, r2
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <NRF24_setPayloadSize+0x2c>)
 8002a00:	701a      	strb	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000133a 	.word	0x2000133a

08002a14 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	return payload_size;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <NRF24_getPayloadSize+0x14>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000133a 	.word	0x2000133a

08002a2c <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002a30:	2060      	movs	r0, #96	@ 0x60
 8002a32:	f7ff fca9 	bl	8002388 <NRF24_read_register>
 8002a36:	4603      	mov	r3, r0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002a40:	201d      	movs	r0, #29
 8002a42:	f7ff fca1 	bl	8002388 <NRF24_read_register>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f043 0306 	orr.w	r3, r3, #6
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	201d      	movs	r0, #29
 8002a52:	f7ff fce9 	bl	8002428 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002a56:	201d      	movs	r0, #29
 8002a58:	f7ff fc96 	bl	8002388 <NRF24_read_register>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8002a62:	f000 fa07 	bl	8002e74 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002a66:	201d      	movs	r0, #29
 8002a68:	f7ff fc8e 	bl	8002388 <NRF24_read_register>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f043 0306 	orr.w	r3, r3, #6
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	201d      	movs	r0, #29
 8002a78:	f7ff fcd6 	bl	8002428 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002a7c:	201c      	movs	r0, #28
 8002a7e:	f7ff fc83 	bl	8002388 <NRF24_read_register>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f043 0303 	orr.w	r3, r3, #3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	201c      	movs	r0, #28
 8002a8e:	f7ff fccb 	bl	8002428 <NRF24_write_register>
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8002a9c:	201d      	movs	r0, #29
 8002a9e:	f7ff fc73 	bl	8002388 <NRF24_read_register>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	201d      	movs	r0, #29
 8002aae:	f7ff fcbb 	bl	8002428 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002ab2:	201d      	movs	r0, #29
 8002ab4:	f7ff fc68 	bl	8002388 <NRF24_read_register>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8002abe:	f000 f9d9 	bl	8002e74 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8002ac2:	201d      	movs	r0, #29
 8002ac4:	f7ff fc60 	bl	8002388 <NRF24_read_register>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	201d      	movs	r0, #29
 8002ad4:	f7ff fca8 	bl	8002428 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002ad8:	201c      	movs	r0, #28
 8002ada:	f7ff fc55 	bl	8002388 <NRF24_read_register>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	201c      	movs	r0, #28
 8002aea:	f7ff fc9d 	bl	8002428 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8002aee:	4b02      	ldr	r3, [pc, #8]	@ (8002af8 <NRF24_enableDynamicPayloads+0x60>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]

}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	2000133b 	.word	0x2000133b

08002afc <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002b00:	201d      	movs	r0, #29
 8002b02:	f7ff fc41 	bl	8002388 <NRF24_read_register>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	201d      	movs	r0, #29
 8002b12:	f7ff fc89 	bl	8002428 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002b16:	2100      	movs	r1, #0
 8002b18:	201c      	movs	r0, #28
 8002b1a:	f7ff fc85 	bl	8002428 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002b1e:	4b02      	ldr	r3, [pc, #8]	@ (8002b28 <NRF24_disableDynamicPayloads+0x2c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000133b 	.word	0x2000133b

08002b2c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8002b3c:	213f      	movs	r1, #63	@ 0x3f
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff fc72 	bl	8002428 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002b44:	e003      	b.n	8002b4e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002b46:	2100      	movs	r1, #0
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fc6d 	bl	8002428 <NRF24_write_register>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002b60:	2006      	movs	r0, #6
 8002b62:	f7ff fc11 	bl	8002388 <NRF24_read_register>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	f023 0306 	bic.w	r3, r3, #6
 8002b70:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d104      	bne.n	8002b82 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	f043 0306 	orr.w	r3, r3, #6
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e019      	b.n	8002bb6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d104      	bne.n	8002b92 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e011      	b.n	8002bb6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d104      	bne.n	8002ba2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e009      	b.n	8002bb6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d103      	bne.n	8002bb6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	f043 0306 	orr.w	r3, r3, #6
 8002bb4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	2006      	movs	r0, #6
 8002bbc:	f7ff fc34 	bl	8002428 <NRF24_write_register>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002bd6:	2006      	movs	r0, #6
 8002bd8:	f7ff fbd6 	bl	8002388 <NRF24_read_register>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <NRF24_setDataRate+0x88>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002bec:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d107      	bne.n	8002c04 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <NRF24_setDataRate+0x88>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	f043 0320 	orr.w	r3, r3, #32
 8002c00:	73bb      	strb	r3, [r7, #14]
 8002c02:	e00d      	b.n	8002c20 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <NRF24_setDataRate+0x88>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	73bb      	strb	r3, [r7, #14]
 8002c18:	e002      	b.n	8002c20 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <NRF24_setDataRate+0x88>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	4619      	mov	r1, r3
 8002c24:	2006      	movs	r0, #6
 8002c26:	f7ff fbff 	bl	8002428 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002c2a:	2006      	movs	r0, #6
 8002c2c:	f7ff fbac 	bl	8002388 <NRF24_read_register>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d102      	bne.n	8002c40 <NRF24_setDataRate+0x78>
  {
    result = true;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e002      	b.n	8002c46 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <NRF24_setDataRate+0x88>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000133c 	.word	0x2000133c

08002c54 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff fb92 	bl	8002388 <NRF24_read_register>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f023 030c 	bic.w	r3, r3, #12
 8002c6a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00f      	beq.n	8002c92 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d104      	bne.n	8002c82 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	f043 0308 	orr.w	r3, r3, #8
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e007      	b.n	8002c92 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	4619      	mov	r1, r3
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7ff fbc6 	bl	8002428 <NRF24_write_register>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7ff fb6c 	bl	8002388 <NRF24_read_register>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cba:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff fbb1 	bl	8002428 <NRF24_write_register>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff fb58 	bl	8002388 <NRF24_read_register>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f023 0302 	bic.w	r3, r3, #2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff fba0 	bl	8002428 <NRF24_write_register>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002cf4:	f7ff fc44 	bl	8002580 <NRF24_get_status>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d017      	beq.n	8002d42 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002d28:	2140      	movs	r1, #64	@ 0x40
 8002d2a:	2007      	movs	r0, #7
 8002d2c:	f7ff fb7c 	bl	8002428 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	2007      	movs	r0, #7
 8002d3e:	f7ff fb73 	bl	8002428 <NRF24_write_register>
    }
  }
  return result;
 8002d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff faf5 	bl	8002348 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7ff fb12 	bl	8002388 <NRF24_read_register>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff fb57 	bl	8002428 <NRF24_write_register>
  NRF24_ce(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7ff fae4 	bl	8002348 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002d80:	2096      	movs	r0, #150	@ 0x96
 8002d82:	f7ff fa9f 	bl	80022c4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fb96 	bl	80024bc <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7ff fad9 	bl	8002348 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002d96:	200f      	movs	r0, #15
 8002d98:	f7ff fa94 	bl	80022c4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fad3 	bl	8002348 <NRF24_ce>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	6039      	str	r1, [r7, #0]
 8002db4:	71fb      	strb	r3, [r7, #7]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8002dc2:	7afa      	ldrb	r2, [r7, #11]
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	bf28      	it	cs
 8002dca:	4613      	movcs	r3, r2
 8002dcc:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fa9a 	bl	8002308 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f063 0357 	orn	r3, r3, #87	@ 0x57
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	7aba      	ldrb	r2, [r7, #10]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fb3e 	bl	800246c <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff fa89 	bl	8002308 <NRF24_csn>
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002e0a:	f7ff fbb9 	bl	8002580 <NRF24_get_status>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002e18:	2170      	movs	r1, #112	@ 0x70
 8002e1a:	2007      	movs	r0, #7
 8002e1c:	f7ff fb04 	bl	8002428 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	701a      	strb	r2, [r3, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002e68:	2170      	movs	r1, #112	@ 0x70
 8002e6a:	2007      	movs	r0, #7
 8002e6c:	f7ff fadc 	bl	8002428 <NRF24_write_register>
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff fa44 	bl	8002308 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002e80:	2350      	movs	r3, #80	@ 0x50
 8002e82:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002e84:	2373      	movs	r3, #115	@ 0x73
 8002e86:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002e88:	1d39      	adds	r1, r7, #4
 8002e8a:	2364      	movs	r3, #100	@ 0x64
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4805      	ldr	r0, [pc, #20]	@ (8002ea4 <NRF24_ACTIVATE_cmd+0x30>)
 8002e90:	f002 f9e9 	bl	8005266 <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8002e94:	2001      	movs	r0, #1
 8002e96:	f7ff fa37 	bl	8002308 <NRF24_csn>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20001348 	.word	0x20001348

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_Init+0x40>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <HAL_Init+0x40>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	@ (8002ee8 <HAL_Init+0x40>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 f8fc 	bl	80030ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f7ff f8f2 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7fe ff88 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200002b0 	.word	0x200002b0
 8002f10:	200013a0 	.word	0x200013a0

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200013a0 	.word	0x200013a0

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200002b0 	.word	0x200002b0

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	@ (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	@ (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff4c 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f6:	f7ff ff61 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 80030fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ffb1 	bl	8003068 <NVIC_EncodePriority>
 8003106:	4602      	mov	r2, r0
 8003108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff80 	bl	8003014 <__NVIC_SetPriority>
}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff54 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff fee6 	bl	8002f14 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e099      	b.n	8003288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003174:	e00f      	b.n	8003196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003176:	f7ff fecd 	bl	8002f14 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b05      	cmp	r3, #5
 8003182:	d908      	bls.n	8003196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e078      	b.n	8003288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e8      	bne.n	8003176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <HAL_DMA_Init+0x158>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b04      	cmp	r3, #4
 8003228:	d117      	bne.n	800325a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb01 	bl	8003844 <DMA_CheckFifoParam>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003256:	2301      	movs	r3, #1
 8003258:	e016      	b.n	8003288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fab8 	bl	80037d8 <DMA_CalcBaseAndBitshift>
 8003268:	4603      	mov	r3, r0
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	223f      	movs	r2, #63	@ 0x3f
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	f010803f 	.word	0xf010803f

08003294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_Start_IT+0x26>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e040      	b.n	800333c <HAL_DMA_Start_IT+0xa8>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d12f      	bne.n	800332e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa4a 	bl	800377c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	223f      	movs	r2, #63	@ 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0216 	orr.w	r2, r2, #22
 8003302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0208 	orr.w	r2, r2, #8
 800331a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e005      	b.n	800333a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7ff fddf 	bl	8002f14 <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e052      	b.n	800341c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_Abort+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c6:	e013      	b.n	80033f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c8:	f7ff fda4 	bl	8002f14 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d90c      	bls.n	80033f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2203      	movs	r2, #3
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e015      	b.n	800341c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e4      	bne.n	80033c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	223f      	movs	r2, #63	@ 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	@ 0x80
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003474:	4b8e      	ldr	r3, [pc, #568]	@ (80036b0 <HAL_DMA_IRQHandler+0x248>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a8e      	ldr	r2, [pc, #568]	@ (80036b4 <HAL_DMA_IRQHandler+0x24c>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2208      	movs	r2, #8
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	2208      	movs	r2, #8
 80034c2:	409a      	lsls	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	2201      	movs	r2, #1
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	f043 0202 	orr.w	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	2204      	movs	r2, #4
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d012      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	2210      	movs	r2, #16
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d043      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2210      	movs	r2, #16
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d018      	beq.n	80035aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d024      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
 8003596:	e01f      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
 80035a8:	e016      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	2220      	movs	r2, #32
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 808f 	beq.w	8003708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8087 	beq.w	8003708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	2220      	movs	r2, #32
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b05      	cmp	r3, #5
 8003610:	d136      	bne.n	8003680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_IRQHandler+0x1da>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	223f      	movs	r2, #63	@ 0x3f
 8003658:	409a      	lsls	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d07e      	beq.n	8003774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
        }
        return;
 800367e:	e079      	b.n	8003774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01d      	beq.n	80036ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e02c      	b.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
 80036ae:	bf00      	nop
 80036b0:	200002a8 	.word	0x200002a8
 80036b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
 80036c8:	e01e      	b.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d032      	beq.n	8003776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2205      	movs	r2, #5
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d307      	bcc.n	8003750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_DMA_IRQHandler+0x2cc>
 800374e:	e000      	b.n	8003752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e000      	b.n	8003776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003774:	bf00      	nop
    }
  }
}
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d108      	bne.n	80037bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ba:	e007      	b.n	80037cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3b10      	subs	r3, #16
 80037e8:	4a14      	ldr	r2, [pc, #80]	@ (800383c <DMA_CalcBaseAndBitshift+0x64>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037f2:	4a13      	ldr	r2, [pc, #76]	@ (8003840 <DMA_CalcBaseAndBitshift+0x68>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d909      	bls.n	800381a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	1d1a      	adds	r2, r3, #4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	659a      	str	r2, [r3, #88]	@ 0x58
 8003818:	e007      	b.n	800382a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	aaaaaaab 	.word	0xaaaaaaab
 8003840:	0800c31c 	.word	0x0800c31c

08003844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11f      	bne.n	800389e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d856      	bhi.n	8003912 <DMA_CheckFifoParam+0xce>
 8003864:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <DMA_CheckFifoParam+0x28>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388f 	.word	0x0800388f
 8003874:	0800387d 	.word	0x0800387d
 8003878:	08003913 	.word	0x08003913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d046      	beq.n	8003916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388c:	e043      	b.n	8003916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003896:	d140      	bne.n	800391a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389c:	e03d      	b.n	800391a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a6:	d121      	bne.n	80038ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d837      	bhi.n	800391e <DMA_CheckFifoParam+0xda>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <DMA_CheckFifoParam+0x70>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038cb 	.word	0x080038cb
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	080038dd 	.word	0x080038dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e030      	b.n	800392c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d025      	beq.n	8003922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038da:	e022      	b.n	8003922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ea:	e01c      	b.n	8003926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d903      	bls.n	80038fa <DMA_CheckFifoParam+0xb6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d003      	beq.n	8003900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038f8:	e018      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      break;
 80038fe:	e015      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e00b      	b.n	800392a <DMA_CheckFifoParam+0xe6>
      break;
 8003912:	bf00      	nop
 8003914:	e00a      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e008      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e006      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;   
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
    }
  } 
  
  return status; 
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e159      	b.n	8003c0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	f040 8148 	bne.w	8003c06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d005      	beq.n	800398e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398a:	2b02      	cmp	r3, #2
 800398c:	d130      	bne.n	80039f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c4:	2201      	movs	r2, #1
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 0201 	and.w	r2, r3, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d017      	beq.n	8003a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d123      	bne.n	8003a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a2 	beq.w	8003c06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b57      	ldr	r3, [pc, #348]	@ (8003c24 <HAL_GPIO_Init+0x2e8>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_GPIO_Init+0x2e8>)
 8003acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad2:	4b54      	ldr	r3, [pc, #336]	@ (8003c24 <HAL_GPIO_Init+0x2e8>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ade:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a49      	ldr	r2, [pc, #292]	@ (8003c2c <HAL_GPIO_Init+0x2f0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d019      	beq.n	8003b3e <HAL_GPIO_Init+0x202>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a48      	ldr	r2, [pc, #288]	@ (8003c30 <HAL_GPIO_Init+0x2f4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <HAL_GPIO_Init+0x1fe>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a47      	ldr	r2, [pc, #284]	@ (8003c34 <HAL_GPIO_Init+0x2f8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00d      	beq.n	8003b36 <HAL_GPIO_Init+0x1fa>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a46      	ldr	r2, [pc, #280]	@ (8003c38 <HAL_GPIO_Init+0x2fc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <HAL_GPIO_Init+0x1f6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a45      	ldr	r2, [pc, #276]	@ (8003c3c <HAL_GPIO_Init+0x300>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <HAL_GPIO_Init+0x1f2>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	e008      	b.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b2e:	2307      	movs	r3, #7
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b32:	2303      	movs	r3, #3
 8003b34:	e004      	b.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e002      	b.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_GPIO_Init+0x204>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	f002 0203 	and.w	r2, r2, #3
 8003b46:	0092      	lsls	r2, r2, #2
 8003b48:	4093      	lsls	r3, r2
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b50:	4935      	ldr	r1, [pc, #212]	@ (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	3302      	adds	r3, #2
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b5e:	4b38      	ldr	r3, [pc, #224]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b82:	4a2f      	ldr	r2, [pc, #188]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bac:	4a24      	ldr	r2, [pc, #144]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bb2:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bdc:	4b18      	ldr	r3, [pc, #96]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c00:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <HAL_GPIO_Init+0x304>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	f67f aea2 	bls.w	8003958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020c00 	.word	0x40020c00
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40013c00 	.word	0x40013c00

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc febe 	bl	8000a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013c00 	.word	0x40013c00

08003ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e12b      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fe f8ba 	bl	8001e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f001 f9c8 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a81      	ldr	r2, [pc, #516]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d807      	bhi.n	8003d2c <HAL_I2C_Init+0x84>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a80      	ldr	r2, [pc, #512]	@ (8003f20 <HAL_I2C_Init+0x278>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bf94      	ite	ls
 8003d24:	2301      	movls	r3, #1
 8003d26:	2300      	movhi	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e006      	b.n	8003d3a <HAL_I2C_Init+0x92>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f24 <HAL_I2C_Init+0x27c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bf94      	ite	ls
 8003d34:	2301      	movls	r3, #1
 8003d36:	2300      	movhi	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0e7      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a78      	ldr	r2, [pc, #480]	@ (8003f28 <HAL_I2C_Init+0x280>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9b      	lsrs	r3, r3, #18
 8003d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a6a      	ldr	r2, [pc, #424]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <HAL_I2C_Init+0xd4>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	e009      	b.n	8003d90 <HAL_I2C_Init+0xe8>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	4a69      	ldr	r2, [pc, #420]	@ (8003f2c <HAL_I2C_Init+0x284>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	3301      	adds	r3, #1
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	495c      	ldr	r1, [pc, #368]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003dac:	428b      	cmp	r3, r1
 8003dae:	d819      	bhi.n	8003de4 <HAL_I2C_Init+0x13c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e59      	subs	r1, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_I2C_Init+0x138>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1e59      	subs	r1, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	e051      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e04f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d111      	bne.n	8003e10 <HAL_I2C_Init+0x168>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e58      	subs	r0, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e012      	b.n	8003e36 <HAL_I2C_Init+0x18e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e58      	subs	r0, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	0099      	lsls	r1, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Init+0x196>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e022      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <HAL_I2C_Init+0x1bc>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1e58      	subs	r0, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	440b      	add	r3, r1
 8003e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	0099      	lsls	r1, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	6809      	ldr	r1, [r1, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6911      	ldr	r1, [r2, #16]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	000186a0 	.word	0x000186a0
 8003f20:	001e847f 	.word	0x001e847f
 8003f24:	003d08ff 	.word	0x003d08ff
 8003f28:	431bde83 	.word	0x431bde83
 8003f2c:	10624dd3 	.word	0x10624dd3

08003f30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	817b      	strh	r3, [r7, #10]
 8003f40:	4613      	mov	r3, r2
 8003f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7fe ffe6 	bl	8002f14 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 80e0 	bne.w	8004118 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4970      	ldr	r1, [pc, #448]	@ (8004124 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa92 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0d3      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2C_Master_Transmit+0x50>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0cc      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d007      	beq.n	8003fa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	@ 0x21
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	893a      	ldrh	r2, [r7, #8]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a50      	ldr	r2, [pc, #320]	@ (8004128 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fe8:	8979      	ldrh	r1, [r7, #10]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f9ca 	bl	8004388 <I2C_MasterRequestWrite>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e08d      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004014:	e066      	b.n	80040e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6a39      	ldr	r1, [r7, #32]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fb50 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	2b04      	cmp	r3, #4
 800402c:	d107      	bne.n	800403e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06b      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d11b      	bne.n	80040b8 <HAL_I2C_Master_Transmit+0x188>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fb47 	bl	8004750 <I2C_WaitOnBTFFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d107      	bne.n	80040e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e01a      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d194      	bne.n	8004016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000

0800412c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	460b      	mov	r3, r1
 800413a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7fe feea 	bl	8002f14 <HAL_GetTick>
 8004140:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 8111 	bne.w	8004376 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2319      	movs	r3, #25
 800415a:	2201      	movs	r2, #1
 800415c:	4988      	ldr	r1, [pc, #544]	@ (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f994 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	e104      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2C_IsDeviceReady+0x50>
 8004178:	2302      	movs	r3, #2
 800417a:	e0fd      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d007      	beq.n	80041a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2224      	movs	r2, #36	@ 0x24
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a70      	ldr	r2, [pc, #448]	@ (8004384 <HAL_I2C_IsDeviceReady+0x258>)
 80041c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f952 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fc:	d103      	bne.n	8004206 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004204:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0b6      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004218:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800421a:	f7fe fe7b 	bl	8002f14 <HAL_GetTick>
 800421e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800424e:	e025      	b.n	800429c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004250:	f7fe fe60 	bl	8002f14 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <HAL_I2C_IsDeviceReady+0x13a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22a0      	movs	r2, #160	@ 0xa0
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80042a6:	d005      	beq.n	80042b4 <HAL_I2C_IsDeviceReady+0x188>
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_I2C_IsDeviceReady+0x188>
 80042ae:	7dbb      	ldrb	r3, [r7, #22]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0cd      	beq.n	8004250 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d129      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	4921      	ldr	r1, [pc, #132]	@ (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8c6 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e036      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e02c      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004336:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2319      	movs	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	490f      	ldr	r1, [pc, #60]	@ (8004380 <HAL_I2C_IsDeviceReady+0x254>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8a2 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e012      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	3301      	adds	r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	f4ff af32 	bcc.w	80041c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d006      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b0:	d108      	bne.n	80043c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e00b      	b.n	80043dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d107      	bne.n	80043dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f84f 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004402:	d103      	bne.n	800440c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e035      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004418:	d108      	bne.n	800442c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	e01b      	b.n	8004464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	11db      	asrs	r3, r3, #7
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f063 030f 	orn	r3, r3, #15
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	490e      	ldr	r1, [pc, #56]	@ (8004484 <I2C_MasterRequestWrite+0xfc>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f898 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e010      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4907      	ldr	r1, [pc, #28]	@ (8004488 <I2C_MasterRequestWrite+0x100>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f888 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010008 	.word	0x00010008
 8004488:	00010002 	.word	0x00010002

0800448c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800449c:	e048      	b.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d044      	beq.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fe fd35 	bl	8002f14 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d139      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10d      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	43da      	mvns	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	e00c      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d116      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e023      	b.n	8004578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10d      	bne.n	8004556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	e00c      	b.n	8004570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	43da      	mvns	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d093      	beq.n	800449e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458e:	e071      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d123      	bne.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e067      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d041      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fe fc90 	bl	8002f14 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d136      	bne.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10c      	bne.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e00b      	b.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	43da      	mvns	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4013      	ands	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e021      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10c      	bne.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e00b      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af6d 	bne.w	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046cc:	e034      	b.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f886 	bl	80047e0 <I2C_IsAcknowledgeFailed>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e034      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d028      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fc15 	bl	8002f14 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d016      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d1c3      	bne.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800475c:	e034      	b.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f83e 	bl	80047e0 <I2C_IsAcknowledgeFailed>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e034      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d028      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fbcd 	bl	8002f14 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11d      	bne.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d016      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e007      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d1c3      	bne.n	800475e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d11b      	bne.n	8004830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e267      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d075      	beq.n	800494a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485e:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b04      	cmp	r3, #4
 8004868:	d00c      	beq.n	8004884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800486a:	4b85      	ldr	r3, [pc, #532]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004872:	2b08      	cmp	r3, #8
 8004874:	d112      	bne.n	800489c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4b82      	ldr	r3, [pc, #520]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004882:	d10b      	bne.n	800489c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d05b      	beq.n	8004948 <HAL_RCC_OscConfig+0x108>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d157      	bne.n	8004948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e242      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_OscConfig+0x74>
 80048a6:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a75      	ldr	r2, [pc, #468]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e01d      	b.n	80048f0 <HAL_RCC_OscConfig+0xb0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x98>
 80048be:	4b70      	ldr	r3, [pc, #448]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0xb0>
 80048d8:	4b69      	ldr	r3, [pc, #420]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a68      	ldr	r2, [pc, #416]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fb0c 	bl	8002f14 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004900:	f7fe fb08 	bl	8002f14 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	@ 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e207      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b5b      	ldr	r3, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0xc0>
 800491e:	e014      	b.n	800494a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe faf8 	bl	8002f14 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fe faf4 	bl	8002f14 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	@ 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e1f3      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	4b51      	ldr	r3, [pc, #324]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0xe8>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d063      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004956:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004962:	4b47      	ldr	r3, [pc, #284]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800496a:	2b08      	cmp	r3, #8
 800496c:	d11c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b44      	ldr	r3, [pc, #272]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d116      	bne.n	80049a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497a:	4b41      	ldr	r3, [pc, #260]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x152>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e1c7      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4937      	ldr	r1, [pc, #220]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	e03a      	b.n	8004a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b0:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <HAL_RCC_OscConfig+0x244>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fe faad 	bl	8002f14 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049be:	f7fe faa9 	bl	8002f14 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e1a8      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	4b28      	ldr	r3, [pc, #160]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4925      	ldr	r1, [pc, #148]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f2:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <HAL_RCC_OscConfig+0x244>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fa8c 	bl	8002f14 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a00:	f7fe fa88 	bl	8002f14 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e187      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d036      	beq.n	8004a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a32:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <HAL_RCC_OscConfig+0x248>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fe fa6c 	bl	8002f14 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fe fa68 	bl	8002f14 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e167      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x200>
 8004a5e:	e01b      	b.n	8004a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <HAL_RCC_OscConfig+0x248>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a66:	f7fe fa55 	bl	8002f14 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	e00e      	b.n	8004a8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6e:	f7fe fa51 	bl	8002f14 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d907      	bls.n	8004a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e150      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	42470000 	.word	0x42470000
 8004a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ea      	bne.n	8004a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8097 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b81      	ldr	r3, [pc, #516]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	4b77      	ldr	r3, [pc, #476]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d118      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae2:	4b74      	ldr	r3, [pc, #464]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a73      	ldr	r2, [pc, #460]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aee:	f7fe fa11 	bl	8002f14 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af6:	f7fe fa0d 	bl	8002f14 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e10c      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCC_OscConfig+0x2ea>
 8004b1c:	4b64      	ldr	r3, [pc, #400]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	4a63      	ldr	r2, [pc, #396]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b28:	e01c      	b.n	8004b64 <HAL_RCC_OscConfig+0x324>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x30c>
 8004b32:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	4a5b      	ldr	r2, [pc, #364]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0x324>
 8004b4c:	4b58      	ldr	r3, [pc, #352]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b50:	4a57      	ldr	r2, [pc, #348]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b58:	4b55      	ldr	r3, [pc, #340]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f023 0304 	bic.w	r3, r3, #4
 8004b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fe f9d2 	bl	8002f14 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b74:	f7fe f9ce 	bl	8002f14 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0cb      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	4b49      	ldr	r3, [pc, #292]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ee      	beq.n	8004b74 <HAL_RCC_OscConfig+0x334>
 8004b96:	e014      	b.n	8004bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fe f9bc 	bl	8002f14 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fe f9b8 	bl	8002f14 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0b5      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ee      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc8:	4b39      	ldr	r3, [pc, #228]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	4a38      	ldr	r2, [pc, #224]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80a1 	beq.w	8004d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d05c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d141      	bne.n	8004c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe f98c 	bl	8002f14 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fe f988 	bl	8002f14 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e087      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c12:	4b27      	ldr	r3, [pc, #156]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	491b      	ldr	r1, [pc, #108]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fe f961 	bl	8002f14 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fe f95d 	bl	8002f14 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e05c      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c68:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x416>
 8004c74:	e054      	b.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe f94a 	bl	8002f14 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fe f946 	bl	8002f14 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e045      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x444>
 8004ca2:	e03d      	b.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d107      	bne.n	8004cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e038      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x4ec>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d028      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d121      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d11a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	3b01      	subs	r3, #1
 8004d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800

08004d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0cc      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b68      	ldr	r3, [pc, #416]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d90c      	bls.n	8004d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b65      	ldr	r3, [pc, #404]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0b8      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d84:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a58      	ldr	r2, [pc, #352]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d9c:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4a52      	ldr	r2, [pc, #328]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b50      	ldr	r3, [pc, #320]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	494d      	ldr	r1, [pc, #308]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d044      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d119      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e07f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	4b3f      	ldr	r3, [pc, #252]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e06f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e067      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	4b37      	ldr	r3, [pc, #220]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4934      	ldr	r1, [pc, #208]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e20:	f7fe f878 	bl	8002f14 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e28:	f7fe f874 	bl	8002f14 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e04f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 020c 	and.w	r2, r3, #12
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1eb      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d20c      	bcs.n	8004e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e032      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e84:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4916      	ldr	r1, [pc, #88]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	490e      	ldr	r1, [pc, #56]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eb6:	f000 f821 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	490a      	ldr	r1, [pc, #40]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec8:	5ccb      	ldrb	r3, [r1, r3]
 8004eca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ece:	4a09      	ldr	r2, [pc, #36]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fd f8f2 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023c00 	.word	0x40023c00
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800c2f4 	.word	0x0800c2f4
 8004ef4:	200002a8 	.word	0x200002a8
 8004ef8:	200002ac 	.word	0x200002ac

08004efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f00:	b090      	sub	sp, #64	@ 0x40
 8004f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f14:	4b59      	ldr	r3, [pc, #356]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d00d      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x40>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	f200 80a1 	bhi.w	8005068 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2e:	e09b      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f30:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004f34:	e09b      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f3a:	e098      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f46:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	2200      	movs	r2, #0
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f64:	2100      	movs	r1, #0
 8004f66:	4b47      	ldr	r3, [pc, #284]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f68:	fb03 f201 	mul.w	r2, r3, r1
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	fb00 f303 	mul.w	r3, r0, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	4a43      	ldr	r2, [pc, #268]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f76:	fba0 1202 	umull	r1, r2, r0, r2
 8004f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f82:	4413      	add	r3, r2
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f88:	2200      	movs	r2, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	61fa      	str	r2, [r7, #28]
 8004f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f96:	f7fb f923 	bl	80001e0 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa2:	e053      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa4:	4b35      	ldr	r3, [pc, #212]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	2200      	movs	r2, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	617a      	str	r2, [r7, #20]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fb6:	f04f 0b00 	mov.w	fp, #0
 8004fba:	4652      	mov	r2, sl
 8004fbc:	465b      	mov	r3, fp
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	0159      	lsls	r1, r3, #5
 8004fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fcc:	0150      	lsls	r0, r2, #5
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	ebb2 080a 	subs.w	r8, r2, sl
 8004fd6:	eb63 090b 	sbc.w	r9, r3, fp
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fe6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fee:	ebb2 0408 	subs.w	r4, r2, r8
 8004ff2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	00eb      	lsls	r3, r5, #3
 8005000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005004:	00e2      	lsls	r2, r4, #3
 8005006:	4614      	mov	r4, r2
 8005008:	461d      	mov	r5, r3
 800500a:	eb14 030a 	adds.w	r3, r4, sl
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	eb45 030b 	adc.w	r3, r5, fp
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005022:	4629      	mov	r1, r5
 8005024:	028b      	lsls	r3, r1, #10
 8005026:	4621      	mov	r1, r4
 8005028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800502c:	4621      	mov	r1, r4
 800502e:	028a      	lsls	r2, r1, #10
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	2200      	movs	r2, #0
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	60fa      	str	r2, [r7, #12]
 800503c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005040:	f7fb f8ce 	bl	80001e0 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	3301      	adds	r3, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800505c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005066:	e002      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x184>)
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800506c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005070:	4618      	mov	r0, r3
 8005072:	3740      	adds	r7, #64	@ 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400
 8005084:	017d7840 	.word	0x017d7840

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b03      	ldr	r3, [pc, #12]	@ (800509c <HAL_RCC_GetHCLKFreq+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	200002a8 	.word	0x200002a8

080050a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a4:	f7ff fff0 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	@ (80050c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800c304 	.word	0x0800c304

080050c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050cc:	f7ff ffdc 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0b5b      	lsrs	r3, r3, #13
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	@ (80050ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800c304 	.word	0x0800c304

080050f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	220f      	movs	r2, #15
 80050fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005100:	4b12      	ldr	r3, [pc, #72]	@ (800514c <HAL_RCC_GetClockConfig+0x5c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0203 	and.w	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800510c:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <HAL_RCC_GetClockConfig+0x5c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005118:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <HAL_RCC_GetClockConfig+0x5c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <HAL_RCC_GetClockConfig+0x5c>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	08db      	lsrs	r3, r3, #3
 800512a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005132:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <HAL_RCC_GetClockConfig+0x60>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0207 	and.w	r2, r3, #7
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	601a      	str	r2, [r3, #0]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
 8005150:	40023c00 	.word	0x40023c00

08005154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e07b      	b.n	800525e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005176:	d009      	beq.n	800518c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
 800517e:	e005      	b.n	800518c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc fe96 	bl	8001ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005210:	ea42 0103 	orr.w	r1, r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0104 	and.w	r1, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	f003 0210 	and.w	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800524c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_Transmit+0x22>
 8005284:	2302      	movs	r3, #2
 8005286:	e12d      	b.n	80054e4 <HAL_SPI_Transmit+0x27e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005290:	f7fd fe40 	bl	8002f14 <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052aa:	e116      	b.n	80054da <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Transmit+0x52>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052bc:	e10d      	b.n	80054da <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2203      	movs	r2, #3
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005304:	d10f      	bne.n	8005326 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005330:	2b40      	cmp	r3, #64	@ 0x40
 8005332:	d007      	beq.n	8005344 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800534c:	d14f      	bne.n	80053ee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_SPI_Transmit+0xf6>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d142      	bne.n	80053e2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005380:	e02f      	b.n	80053e2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d112      	bne.n	80053b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053b4:	e015      	b.n	80053e2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fd fdad 	bl	8002f14 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_Transmit+0x168>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Transmit+0x16e>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80053e0:	e07b      	b.n	80054da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ca      	bne.n	8005382 <HAL_SPI_Transmit+0x11c>
 80053ec:	e050      	b.n	8005490 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_Transmit+0x196>
 80053f6:	8afb      	ldrh	r3, [r7, #22]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d144      	bne.n	8005486 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005422:	e030      	b.n	8005486 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d113      	bne.n	800545a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005458:	e015      	b.n	8005486 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545a:	f7fd fd5b 	bl	8002f14 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d803      	bhi.n	8005472 <HAL_SPI_Transmit+0x20c>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d102      	bne.n	8005478 <HAL_SPI_Transmit+0x212>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005484:	e029      	b.n	80054da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1c9      	bne.n	8005424 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fbdf 	bl	8005c58 <SPI_EndRxTxTransaction>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e003      	b.n	80054da <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005510:	e0fb      	b.n	800570a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800551a:	d112      	bne.n	8005542 <HAL_SPI_Receive+0x56>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10e      	bne.n	8005542 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f8ef 	bl	800571c <HAL_SPI_TransmitReceive>
 800553e:	4603      	mov	r3, r0
 8005540:	e0e8      	b.n	8005714 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_SPI_Receive+0x64>
 800554c:	2302      	movs	r3, #2
 800554e:	e0e1      	b.n	8005714 <HAL_SPI_Receive+0x228>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005558:	f7fd fcdc 	bl	8002f14 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_Receive+0x7e>
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800556e:	e0cc      	b.n	800570a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2204      	movs	r2, #4
 8005574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b6:	d10f      	bne.n	80055d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e2:	2b40      	cmp	r3, #64	@ 0x40
 80055e4:	d007      	beq.n	80055f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d16a      	bne.n	80056d4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055fe:	e032      	b.n	8005666 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d115      	bne.n	800563a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f103 020c 	add.w	r2, r3, #12
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005638:	e015      	b.n	8005666 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563a:	f7fd fc6b 	bl	8002f14 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d803      	bhi.n	8005652 <HAL_SPI_Receive+0x166>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Receive+0x16c>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005664:	e051      	b.n	800570a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1c7      	bne.n	8005600 <HAL_SPI_Receive+0x114>
 8005670:	e035      	b.n	80056de <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d113      	bne.n	80056a8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568a:	b292      	uxth	r2, r2
 800568c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a6:	e015      	b.n	80056d4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a8:	f7fd fc34 	bl	8002f14 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d803      	bhi.n	80056c0 <HAL_SPI_Receive+0x1d4>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Receive+0x1da>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80056d2:	e01a      	b.n	800570a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1c9      	bne.n	8005672 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fa52 	bl	8005b8c <SPI_EndRxTransaction>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
 8005700:	e003      	b.n	800570a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	@ 0x30
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800572a:	2301      	movs	r3, #1
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x26>
 800573e:	2302      	movs	r3, #2
 8005740:	e198      	b.n	8005a74 <HAL_SPI_TransmitReceive+0x358>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574a:	f7fd fbe3 	bl	8002f14 <HAL_GetTick>
 800574e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005760:	887b      	ldrh	r3, [r7, #2]
 8005762:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005768:	2b01      	cmp	r3, #1
 800576a:	d00f      	beq.n	800578c <HAL_SPI_TransmitReceive+0x70>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005772:	d107      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d103      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x68>
 800577c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005780:	2b04      	cmp	r3, #4
 8005782:	d003      	beq.n	800578c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005784:	2302      	movs	r3, #2
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800578a:	e16d      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_SPI_TransmitReceive+0x82>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_SPI_TransmitReceive+0x82>
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80057a4:	e160      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d003      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2205      	movs	r2, #5
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	887a      	ldrh	r2, [r7, #2]
 80057ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	887a      	ldrh	r2, [r7, #2]
 80057dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d007      	beq.n	800580e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005816:	d17c      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x10a>
 8005820:	8b7b      	ldrh	r3, [r7, #26]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d16a      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	881a      	ldrh	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584a:	e057      	b.n	80058fc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d11b      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x176>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d016      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x176>
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d113      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d119      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x1b8>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d014      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	b292      	uxth	r2, r2
 80058b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058d0:	2301      	movs	r3, #1
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058d4:	f7fd fb1e 	bl	8002f14 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d80b      	bhi.n	80058fc <HAL_SPI_TransmitReceive+0x1e0>
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d007      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80058fa:	e0b5      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1a2      	bne.n	800584c <HAL_SPI_TransmitReceive+0x130>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d19d      	bne.n	800584c <HAL_SPI_TransmitReceive+0x130>
 8005910:	e080      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x204>
 800591a:	8b7b      	ldrh	r3, [r7, #26]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d16f      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005946:	e05b      	b.n	8005a00 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d11c      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x274>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <HAL_SPI_TransmitReceive+0x274>
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d114      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d119      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x2b6>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d014      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ce:	2301      	movs	r3, #1
 80059d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059d2:	f7fd fa9f 	bl	8002f14 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059de:	429a      	cmp	r2, r3
 80059e0:	d803      	bhi.n	80059ea <HAL_SPI_TransmitReceive+0x2ce>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d102      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x2d4>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80059fe:	e033      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d19e      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x22c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d199      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f91d 	bl	8005c58 <SPI_EndRxTxTransaction>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005a30:	e01a      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e003      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	@ 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a8c:	f7fd fa42 	bl	8002f14 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a9c:	f7fd fa3a 	bl	8002f14 <HAL_GetTick>
 8005aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa2:	4b39      	ldr	r3, [pc, #228]	@ (8005b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	015b      	lsls	r3, r3, #5
 8005aa8:	0d1b      	lsrs	r3, r3, #20
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab2:	e054      	b.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d050      	beq.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005abc:	f7fd fa2a 	bl	8002f14 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d902      	bls.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d13d      	bne.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aea:	d111      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af4:	d004      	beq.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afe:	d107      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d10f      	bne.n	8005b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e017      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d19b      	bne.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200002a8 	.word	0x200002a8

08005b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba0:	d111      	bne.n	8005bc6 <SPI_EndRxTransaction+0x3a>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005baa:	d004      	beq.n	8005bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d107      	bne.n	8005bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bce:	d12a      	bne.n	8005c26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd8:	d012      	beq.n	8005c00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ff49 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02d      	beq.n	8005c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf4:	f043 0220 	orr.w	r2, r3, #32
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e026      	b.n	8005c4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	2101      	movs	r1, #1
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff ff36 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01a      	beq.n	8005c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	f043 0220 	orr.w	r2, r3, #32
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e013      	b.n	8005c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2101      	movs	r1, #1
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ff23 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e000      	b.n	8005c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff ff04 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e032      	b.n	8005cf0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <SPI_EndRxTxTransaction+0xa0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <SPI_EndRxTxTransaction+0xa4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	0d5b      	lsrs	r3, r3, #21
 8005c96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca8:	d112      	bne.n	8005cd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2180      	movs	r1, #128	@ 0x80
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fee1 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d016      	beq.n	8005cee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e00f      	b.n	8005cf0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b80      	cmp	r3, #128	@ 0x80
 8005ce8:	d0f2      	beq.n	8005cd0 <SPI_EndRxTxTransaction+0x78>
 8005cea:	e000      	b.n	8005cee <SPI_EndRxTxTransaction+0x96>
        break;
 8005cec:	bf00      	nop
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	200002a8 	.word	0x200002a8
 8005cfc:	165e9f81 	.word	0x165e9f81

08005d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e041      	b.n	8005d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fc f91e 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 f9ea 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e044      	b.n	8005e42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a19      	ldr	r2, [pc, #100]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xb8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xbc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x6c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d111      	bne.n	8005e30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d010      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	e007      	b.n	8005e40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000

08005e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01b      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0202 	mvn.w	r2, #2
 8005e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f914 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f906 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f917 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0204 	mvn.w	r2, #4
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8ee 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8e0 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8f1 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0208 	mvn.w	r2, #8
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8c8 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8ba 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8cb 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0210 	mvn.w	r2, #16
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2208      	movs	r2, #8
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8a2 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f894 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8a5 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0201 	mvn.w	r2, #1
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb fa64 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 faa6 	bl	8006540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f876 	bl	8006104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0220 	mvn.w	r2, #32
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa78 	bl	800652c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e031      	b.n	80060c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8de 	bl	8006230 <TIM_SlaveTimer_SetConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e018      	b.n	80060c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3a      	ldr	r2, [pc, #232]	@ (8006214 <TIM_Base_SetConfig+0xfc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a37      	ldr	r2, [pc, #220]	@ (8006218 <TIM_Base_SetConfig+0x100>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a36      	ldr	r2, [pc, #216]	@ (800621c <TIM_Base_SetConfig+0x104>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a35      	ldr	r2, [pc, #212]	@ (8006220 <TIM_Base_SetConfig+0x108>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2b      	ldr	r2, [pc, #172]	@ (8006214 <TIM_Base_SetConfig+0xfc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01b      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006170:	d017      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a28      	ldr	r2, [pc, #160]	@ (8006218 <TIM_Base_SetConfig+0x100>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a27      	ldr	r2, [pc, #156]	@ (800621c <TIM_Base_SetConfig+0x104>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <TIM_Base_SetConfig+0x108>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a25      	ldr	r2, [pc, #148]	@ (8006224 <TIM_Base_SetConfig+0x10c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a24      	ldr	r2, [pc, #144]	@ (8006228 <TIM_Base_SetConfig+0x110>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a23      	ldr	r2, [pc, #140]	@ (800622c <TIM_Base_SetConfig+0x114>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a0e      	ldr	r2, [pc, #56]	@ (8006214 <TIM_Base_SetConfig+0xfc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f023 0201 	bic.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	611a      	str	r2, [r3, #16]
  }
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800

08006230 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b70      	cmp	r3, #112	@ 0x70
 8006278:	d01a      	beq.n	80062b0 <TIM_SlaveTimer_SetConfig+0x80>
 800627a:	2b70      	cmp	r3, #112	@ 0x70
 800627c:	d860      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 800627e:	2b60      	cmp	r3, #96	@ 0x60
 8006280:	d054      	beq.n	800632c <TIM_SlaveTimer_SetConfig+0xfc>
 8006282:	2b60      	cmp	r3, #96	@ 0x60
 8006284:	d85c      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 8006286:	2b50      	cmp	r3, #80	@ 0x50
 8006288:	d046      	beq.n	8006318 <TIM_SlaveTimer_SetConfig+0xe8>
 800628a:	2b50      	cmp	r3, #80	@ 0x50
 800628c:	d858      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 800628e:	2b40      	cmp	r3, #64	@ 0x40
 8006290:	d019      	beq.n	80062c6 <TIM_SlaveTimer_SetConfig+0x96>
 8006292:	2b40      	cmp	r3, #64	@ 0x40
 8006294:	d854      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 8006296:	2b30      	cmp	r3, #48	@ 0x30
 8006298:	d055      	beq.n	8006346 <TIM_SlaveTimer_SetConfig+0x116>
 800629a:	2b30      	cmp	r3, #48	@ 0x30
 800629c:	d850      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d051      	beq.n	8006346 <TIM_SlaveTimer_SetConfig+0x116>
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d84c      	bhi.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d04d      	beq.n	8006346 <TIM_SlaveTimer_SetConfig+0x116>
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d04b      	beq.n	8006346 <TIM_SlaveTimer_SetConfig+0x116>
 80062ae:	e047      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80062c0:	f000 f8a6 	bl	8006410 <TIM_ETR_SetConfig>
      break;
 80062c4:	e040      	b.n	8006348 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d101      	bne.n	80062d2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e03b      	b.n	800634a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	4313      	orrs	r3, r2
 8006304:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
      break;
 8006316:	e017      	b.n	8006348 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006324:	461a      	mov	r2, r3
 8006326:	f000 f814 	bl	8006352 <TIM_TI1_ConfigInputStage>
      break;
 800632a:	e00d      	b.n	8006348 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006338:	461a      	mov	r2, r3
 800633a:	f000 f839 	bl	80063b0 <TIM_TI2_ConfigInputStage>
      break;
 800633e:	e003      	b.n	8006348 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e000      	b.n	8006348 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006346:	bf00      	nop
  }

  return status;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f023 0201 	bic.w	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800637c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 030a 	bic.w	r3, r3, #10
 800638e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0210 	bic.w	r2, r3, #16
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800642a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	431a      	orrs	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4313      	orrs	r3, r2
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006464:	2302      	movs	r3, #2
 8006466:	e050      	b.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d013      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a18      	ldr	r2, [pc, #96]	@ (800651c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a16      	ldr	r2, [pc, #88]	@ (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a15      	ldr	r2, [pc, #84]	@ (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a13      	ldr	r2, [pc, #76]	@ (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10c      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40010000 	.word	0x40010000
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40000c00 	.word	0x40000c00
 8006528:	40014000 	.word	0x40014000

0800652c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e042      	b.n	80065ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fb fd1c 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2224      	movs	r2, #36	@ 0x24
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ff4f 	bl	800743c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	@ 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	4613      	mov	r3, r2
 8006602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b20      	cmp	r3, #32
 8006612:	d175      	bne.n	8006700 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_UART_Transmit+0x2c>
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e06e      	b.n	8006702 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2221      	movs	r2, #33	@ 0x21
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006632:	f7fc fc6f 	bl	8002f14 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664c:	d108      	bne.n	8006660 <HAL_UART_Transmit+0x6c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e003      	b.n	8006668 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006668:	e02e      	b.n	80066c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	@ 0x80
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fc27 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e03a      	b.n	8006702 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3302      	adds	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	e007      	b.n	80066ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1cb      	bne.n	800666a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2200      	movs	r2, #0
 80066da:	2140      	movs	r1, #64	@ 0x40
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fbf3 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	4613      	mov	r3, r2
 8006716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b20      	cmp	r3, #32
 8006722:	d112      	bne.n	800674a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_UART_Receive_DMA+0x26>
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e00b      	b.n	800674c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	461a      	mov	r2, r3
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fc1b 	bl	8006f7c <UART_Start_Receive_DMA>
 8006746:	4603      	mov	r3, r0
 8006748:	e000      	b.n	800674c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
  }
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b0ba      	sub	sp, #232	@ 0xe8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800677a:	2300      	movs	r3, #0
 800677c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10f      	bne.n	80067ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_UART_IRQHandler+0x66>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd83 	bl	80072be <UART_Receive_IT>
      return;
 80067b8:	e25b      	b.n	8006c72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80de 	beq.w	8006980 <HAL_UART_IRQHandler+0x22c>
 80067c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80d1 	beq.w	8006980 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0xae>
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <HAL_UART_IRQHandler+0xd2>
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	f043 0202 	orr.w	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_UART_IRQHandler+0xf6>
 8006832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006842:	f043 0204 	orr.w	r2, r3, #4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800684a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <HAL_UART_IRQHandler+0x126>
 8006856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	f043 0208 	orr.w	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 81f2 	beq.w	8006c68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_UART_IRQHandler+0x14e>
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fd0e 	bl	80072be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b40      	cmp	r3, #64	@ 0x40
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <HAL_UART_IRQHandler+0x17a>
 80068c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d04f      	beq.n	800696e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc16 	bl	8007100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d141      	bne.n	8006966 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800690e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800691a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1d9      	bne.n	80068e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d013      	beq.n	800695e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b34 <HAL_UART_IRQHandler+0x3e0>)
 800693c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006942:	4618      	mov	r0, r3
 8006944:	f7fc fd6e 	bl	8003424 <HAL_DMA_Abort_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e00e      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f99e 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00a      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f99a 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e006      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f996 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800697a:	e175      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	bf00      	nop
    return;
 800697e:	e173      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	2b01      	cmp	r3, #1
 8006986:	f040 814f 	bne.w	8006c28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8148 	beq.w	8006c28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8141 	beq.w	8006c28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	f040 80b6 	bne.w	8006b38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8145 	beq.w	8006c6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ea:	429a      	cmp	r2, r3
 80069ec:	f080 813e 	bcs.w	8006c6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a02:	f000 8088 	beq.w	8006b16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d9      	bne.n	8006a06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e1      	bne.n	8006a52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ab2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ab8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006af8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e3      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc fc17 	bl	8003344 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8c1 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b32:	e09b      	b.n	8006c6c <HAL_UART_IRQHandler+0x518>
 8006b34:	080071c7 	.word	0x080071c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 808e 	beq.w	8006c70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8089 	beq.w	8006c70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e3      	bne.n	8006b5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3314      	adds	r3, #20
 8006bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c00:	61fa      	str	r2, [r7, #28]
 8006c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f847 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c26:	e023      	b.n	8006c70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <HAL_UART_IRQHandler+0x4f4>
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fad4 	bl	80071ee <UART_Transmit_IT>
    return;
 8006c46:	e014      	b.n	8006c72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00e      	beq.n	8006c72 <HAL_UART_IRQHandler+0x51e>
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb14 	bl	800728e <UART_EndTransmit_IT>
    return;
 8006c66:	e004      	b.n	8006c72 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c70:	bf00      	nop
  }
}
 8006c72:	37e8      	adds	r7, #232	@ 0xe8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b09c      	sub	sp, #112	@ 0x70
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d172      	bne.n	8006dce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cea:	2200      	movs	r2, #0
 8006cec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d10:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3314      	adds	r3, #20
 8006d40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d42:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d76:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d119      	bne.n	8006dce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 0310 	bic.w	r3, r3, #16
 8006db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dba:	61fa      	str	r2, [r7, #28]
 8006dbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	69b9      	ldr	r1, [r7, #24]
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006de0:	4619      	mov	r1, r3
 8006de2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006de4:	f7ff ff66 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006de8:	e002      	b.n	8006df0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006dea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dec:	f7f9 fe20 	bl	8000a30 <HAL_UART_RxCpltCallback>
}
 8006df0:	bf00      	nop
 8006df2:	3770      	adds	r7, #112	@ 0x70
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d108      	bne.n	8006e26 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff ff48 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e24:	e002      	b.n	8006e2c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ff30 	bl	8006c8c <HAL_UART_RxHalfCpltCallback>
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e50:	2b80      	cmp	r3, #128	@ 0x80
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b21      	cmp	r3, #33	@ 0x21
 8006e66:	d108      	bne.n	8006e7a <UART_DMAError+0x46>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	f000 f91b 	bl	80070b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e84:	2b40      	cmp	r3, #64	@ 0x40
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b22      	cmp	r3, #34	@ 0x22
 8006e9a:	d108      	bne.n	8006eae <UART_DMAError+0x7a>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f000 f929 	bl	8007100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb2:	f043 0210 	orr.w	r2, r3, #16
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f7ff fef0 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed8:	e03b      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d037      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee2:	f7fc f817 	bl	8002f14 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e03a      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d023      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b80      	cmp	r3, #128	@ 0x80
 8006f0e:	d020      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b40      	cmp	r3, #64	@ 0x40
 8006f14:	d01d      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d116      	bne.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f8e0 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2208      	movs	r2, #8
 8006f44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e00f      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d0b4      	beq.n	8006eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b098      	sub	sp, #96	@ 0x60
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2222      	movs	r2, #34	@ 0x22
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80070a4 <UART_Start_Receive_DMA+0x128>)
 8006faa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb0:	4a3d      	ldr	r2, [pc, #244]	@ (80070a8 <UART_Start_Receive_DMA+0x12c>)
 8006fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <UART_Start_Receive_DMA+0x130>)
 8006fba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fc4:	f107 0308 	add.w	r3, r7, #8
 8006fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	f7fc f95a 	bl	8003294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d019      	beq.n	8007032 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800700e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800701e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800702c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	657b      	str	r3, [r7, #84]	@ 0x54
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007052:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3314      	adds	r3, #20
 800706c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	617b      	str	r3, [r7, #20]
   return(result);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800707c:	653b      	str	r3, [r7, #80]	@ 0x50
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3314      	adds	r3, #20
 8007084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007086:	627a      	str	r2, [r7, #36]	@ 0x24
 8007088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6a39      	ldr	r1, [r7, #32]
 800708c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	61fb      	str	r3, [r7, #28]
   return(result);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3760      	adds	r7, #96	@ 0x60
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08006ccd 	.word	0x08006ccd
 80070a8:	08006df9 	.word	0x08006df9
 80070ac:	08006e35 	.word	0x08006e35

080070b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b089      	sub	sp, #36	@ 0x24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	61ba      	str	r2, [r7, #24]
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6979      	ldr	r1, [r7, #20]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	613b      	str	r3, [r7, #16]
   return(result);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80070f4:	bf00      	nop
 80070f6:	3724      	adds	r7, #36	@ 0x24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b095      	sub	sp, #84	@ 0x54
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007128:	643a      	str	r2, [r7, #64]	@ 0x40
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3314      	adds	r3, #20
 8007142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	61fb      	str	r3, [r7, #28]
   return(result);
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	2b01      	cmp	r3, #1
 8007176:	d119      	bne.n	80071ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007198:	61ba      	str	r2, [r7, #24]
 800719a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071ba:	bf00      	nop
 80071bc:	3754      	adds	r7, #84	@ 0x54
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fd5d 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b21      	cmp	r3, #33	@ 0x21
 8007200:	d13e      	bne.n	8007280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720a:	d114      	bne.n	8007236 <UART_Transmit_IT+0x48>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d110      	bne.n	8007236 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	621a      	str	r2, [r3, #32]
 8007234:	e008      	b.n	8007248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6211      	str	r1, [r2, #32]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29b      	uxth	r3, r3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4619      	mov	r1, r3
 8007256:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10f      	bne.n	800727c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800726a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800727a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fce2 	bl	8006c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08c      	sub	sp, #48	@ 0x30
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b22      	cmp	r3, #34	@ 0x22
 80072d0:	f040 80ae 	bne.w	8007430 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d117      	bne.n	800730e <UART_Receive_IT+0x50>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	@ 0x28
 800730c:	e026      	b.n	800735c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007320:	d007      	beq.n	8007332 <UART_Receive_IT+0x74>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <UART_Receive_IT+0x82>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e008      	b.n	8007352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4619      	mov	r1, r3
 800736a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800736c:	2b00      	cmp	r3, #0
 800736e:	d15d      	bne.n	800742c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0220 	bic.w	r2, r2, #32
 800737e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800738e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d135      	bne.n	8007422 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	613b      	str	r3, [r7, #16]
   return(result);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073dc:	623a      	str	r2, [r7, #32]
 80073de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d10a      	bne.n	8007414 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fc4a 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
 8007420:	e002      	b.n	8007428 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7f9 fb04 	bl	8000a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e002      	b.n	8007432 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3730      	adds	r7, #48	@ 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007440:	b0c0      	sub	sp, #256	@ 0x100
 8007442:	af00      	add	r7, sp, #0
 8007444:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	68d9      	ldr	r1, [r3, #12]
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	ea40 0301 	orr.w	r3, r0, r1
 8007464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	431a      	orrs	r2, r3
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	431a      	orrs	r2, r3
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007494:	f021 010c 	bic.w	r1, r1, #12
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074a2:	430b      	orrs	r3, r1
 80074a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b6:	6999      	ldr	r1, [r3, #24]
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	ea40 0301 	orr.w	r3, r0, r1
 80074c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007708 <UART_SetConfig+0x2cc>)
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d005      	beq.n	80074dc <UART_SetConfig+0xa0>
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b8d      	ldr	r3, [pc, #564]	@ (800770c <UART_SetConfig+0x2d0>)
 80074d8:	429a      	cmp	r2, r3
 80074da:	d104      	bne.n	80074e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074dc:	f7fd fdf4 	bl	80050c8 <HAL_RCC_GetPCLK2Freq>
 80074e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074e4:	e003      	b.n	80074ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074e6:	f7fd fddb 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 80074ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074f8:	f040 810c 	bne.w	8007714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007500:	2200      	movs	r2, #0
 8007502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007506:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800750a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	1891      	adds	r1, r2, r2
 8007514:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007516:	415b      	adcs	r3, r3
 8007518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800751a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800751e:	4621      	mov	r1, r4
 8007520:	eb12 0801 	adds.w	r8, r2, r1
 8007524:	4629      	mov	r1, r5
 8007526:	eb43 0901 	adc.w	r9, r3, r1
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800753a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800753e:	4690      	mov	r8, r2
 8007540:	4699      	mov	r9, r3
 8007542:	4623      	mov	r3, r4
 8007544:	eb18 0303 	adds.w	r3, r8, r3
 8007548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800754c:	462b      	mov	r3, r5
 800754e:	eb49 0303 	adc.w	r3, r9, r3
 8007552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007562:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800756a:	460b      	mov	r3, r1
 800756c:	18db      	adds	r3, r3, r3
 800756e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007570:	4613      	mov	r3, r2
 8007572:	eb42 0303 	adc.w	r3, r2, r3
 8007576:	657b      	str	r3, [r7, #84]	@ 0x54
 8007578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800757c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007580:	f7f8 fe2e 	bl	80001e0 <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4b61      	ldr	r3, [pc, #388]	@ (8007710 <UART_SetConfig+0x2d4>)
 800758a:	fba3 2302 	umull	r2, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	011c      	lsls	r4, r3, #4
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800759c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	1891      	adds	r1, r2, r2
 80075aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075ac:	415b      	adcs	r3, r3
 80075ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075b4:	4641      	mov	r1, r8
 80075b6:	eb12 0a01 	adds.w	sl, r2, r1
 80075ba:	4649      	mov	r1, r9
 80075bc:	eb43 0b01 	adc.w	fp, r3, r1
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075d4:	4692      	mov	sl, r2
 80075d6:	469b      	mov	fp, r3
 80075d8:	4643      	mov	r3, r8
 80075da:	eb1a 0303 	adds.w	r3, sl, r3
 80075de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075e2:	464b      	mov	r3, r9
 80075e4:	eb4b 0303 	adc.w	r3, fp, r3
 80075e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007600:	460b      	mov	r3, r1
 8007602:	18db      	adds	r3, r3, r3
 8007604:	643b      	str	r3, [r7, #64]	@ 0x40
 8007606:	4613      	mov	r3, r2
 8007608:	eb42 0303 	adc.w	r3, r2, r3
 800760c:	647b      	str	r3, [r7, #68]	@ 0x44
 800760e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007616:	f7f8 fde3 	bl	80001e0 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4611      	mov	r1, r2
 8007620:	4b3b      	ldr	r3, [pc, #236]	@ (8007710 <UART_SetConfig+0x2d4>)
 8007622:	fba3 2301 	umull	r2, r3, r3, r1
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	2264      	movs	r2, #100	@ 0x64
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	1acb      	subs	r3, r1, r3
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007636:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <UART_SetConfig+0x2d4>)
 8007638:	fba3 2302 	umull	r2, r3, r3, r2
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007644:	441c      	add	r4, r3
 8007646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007650:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	1891      	adds	r1, r2, r2
 800765e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007660:	415b      	adcs	r3, r3
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007668:	4641      	mov	r1, r8
 800766a:	1851      	adds	r1, r2, r1
 800766c:	6339      	str	r1, [r7, #48]	@ 0x30
 800766e:	4649      	mov	r1, r9
 8007670:	414b      	adcs	r3, r1
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007680:	4659      	mov	r1, fp
 8007682:	00cb      	lsls	r3, r1, #3
 8007684:	4651      	mov	r1, sl
 8007686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800768a:	4651      	mov	r1, sl
 800768c:	00ca      	lsls	r2, r1, #3
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	4603      	mov	r3, r0
 8007694:	4642      	mov	r2, r8
 8007696:	189b      	adds	r3, r3, r2
 8007698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800769c:	464b      	mov	r3, r9
 800769e:	460a      	mov	r2, r1
 80076a0:	eb42 0303 	adc.w	r3, r2, r3
 80076a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076bc:	460b      	mov	r3, r1
 80076be:	18db      	adds	r3, r3, r3
 80076c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076c2:	4613      	mov	r3, r2
 80076c4:	eb42 0303 	adc.w	r3, r2, r3
 80076c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076d2:	f7f8 fd85 	bl	80001e0 <__aeabi_uldivmod>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <UART_SetConfig+0x2d4>)
 80076dc:	fba3 1302 	umull	r1, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	2164      	movs	r1, #100	@ 0x64
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	3332      	adds	r3, #50	@ 0x32
 80076ee:	4a08      	ldr	r2, [pc, #32]	@ (8007710 <UART_SetConfig+0x2d4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 0207 	and.w	r2, r3, #7
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4422      	add	r2, r4
 8007702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007704:	e106      	b.n	8007914 <UART_SetConfig+0x4d8>
 8007706:	bf00      	nop
 8007708:	40011000 	.word	0x40011000
 800770c:	40011400 	.word	0x40011400
 8007710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007718:	2200      	movs	r2, #0
 800771a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800771e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007726:	4642      	mov	r2, r8
 8007728:	464b      	mov	r3, r9
 800772a:	1891      	adds	r1, r2, r2
 800772c:	6239      	str	r1, [r7, #32]
 800772e:	415b      	adcs	r3, r3
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
 8007732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007736:	4641      	mov	r1, r8
 8007738:	1854      	adds	r4, r2, r1
 800773a:	4649      	mov	r1, r9
 800773c:	eb43 0501 	adc.w	r5, r3, r1
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	00eb      	lsls	r3, r5, #3
 800774a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800774e:	00e2      	lsls	r2, r4, #3
 8007750:	4614      	mov	r4, r2
 8007752:	461d      	mov	r5, r3
 8007754:	4643      	mov	r3, r8
 8007756:	18e3      	adds	r3, r4, r3
 8007758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800775c:	464b      	mov	r3, r9
 800775e:	eb45 0303 	adc.w	r3, r5, r3
 8007762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007782:	4629      	mov	r1, r5
 8007784:	008b      	lsls	r3, r1, #2
 8007786:	4621      	mov	r1, r4
 8007788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800778c:	4621      	mov	r1, r4
 800778e:	008a      	lsls	r2, r1, #2
 8007790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007794:	f7f8 fd24 	bl	80001e0 <__aeabi_uldivmod>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4b60      	ldr	r3, [pc, #384]	@ (8007920 <UART_SetConfig+0x4e4>)
 800779e:	fba3 2302 	umull	r2, r3, r3, r2
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	011c      	lsls	r4, r3, #4
 80077a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077b8:	4642      	mov	r2, r8
 80077ba:	464b      	mov	r3, r9
 80077bc:	1891      	adds	r1, r2, r2
 80077be:	61b9      	str	r1, [r7, #24]
 80077c0:	415b      	adcs	r3, r3
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077c8:	4641      	mov	r1, r8
 80077ca:	1851      	adds	r1, r2, r1
 80077cc:	6139      	str	r1, [r7, #16]
 80077ce:	4649      	mov	r1, r9
 80077d0:	414b      	adcs	r3, r1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077e0:	4659      	mov	r1, fp
 80077e2:	00cb      	lsls	r3, r1, #3
 80077e4:	4651      	mov	r1, sl
 80077e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ea:	4651      	mov	r1, sl
 80077ec:	00ca      	lsls	r2, r1, #3
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	4642      	mov	r2, r8
 80077f6:	189b      	adds	r3, r3, r2
 80077f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077fc:	464b      	mov	r3, r9
 80077fe:	460a      	mov	r2, r1
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007812:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007820:	4649      	mov	r1, r9
 8007822:	008b      	lsls	r3, r1, #2
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800782a:	4641      	mov	r1, r8
 800782c:	008a      	lsls	r2, r1, #2
 800782e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007832:	f7f8 fcd5 	bl	80001e0 <__aeabi_uldivmod>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4611      	mov	r1, r2
 800783c:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <UART_SetConfig+0x4e4>)
 800783e:	fba3 2301 	umull	r2, r3, r3, r1
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2264      	movs	r2, #100	@ 0x64
 8007846:	fb02 f303 	mul.w	r3, r2, r3
 800784a:	1acb      	subs	r3, r1, r3
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	3332      	adds	r3, #50	@ 0x32
 8007850:	4a33      	ldr	r2, [pc, #204]	@ (8007920 <UART_SetConfig+0x4e4>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800785c:	441c      	add	r4, r3
 800785e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007862:	2200      	movs	r2, #0
 8007864:	673b      	str	r3, [r7, #112]	@ 0x70
 8007866:	677a      	str	r2, [r7, #116]	@ 0x74
 8007868:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	1891      	adds	r1, r2, r2
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	415b      	adcs	r3, r3
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800787c:	4641      	mov	r1, r8
 800787e:	1851      	adds	r1, r2, r1
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	4649      	mov	r1, r9
 8007884:	414b      	adcs	r3, r1
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007894:	4659      	mov	r1, fp
 8007896:	00cb      	lsls	r3, r1, #3
 8007898:	4651      	mov	r1, sl
 800789a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800789e:	4651      	mov	r1, sl
 80078a0:	00ca      	lsls	r2, r1, #3
 80078a2:	4610      	mov	r0, r2
 80078a4:	4619      	mov	r1, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	4642      	mov	r2, r8
 80078aa:	189b      	adds	r3, r3, r2
 80078ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078ae:	464b      	mov	r3, r9
 80078b0:	460a      	mov	r2, r1
 80078b2:	eb42 0303 	adc.w	r3, r2, r3
 80078b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80078c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078d0:	4649      	mov	r1, r9
 80078d2:	008b      	lsls	r3, r1, #2
 80078d4:	4641      	mov	r1, r8
 80078d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078da:	4641      	mov	r1, r8
 80078dc:	008a      	lsls	r2, r1, #2
 80078de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078e2:	f7f8 fc7d 	bl	80001e0 <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <UART_SetConfig+0x4e4>)
 80078ec:	fba3 1302 	umull	r1, r3, r3, r2
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	2164      	movs	r1, #100	@ 0x64
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	3332      	adds	r3, #50	@ 0x32
 80078fe:	4a08      	ldr	r2, [pc, #32]	@ (8007920 <UART_SetConfig+0x4e4>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	f003 020f 	and.w	r2, r3, #15
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4422      	add	r2, r4
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800791a:	46bd      	mov	sp, r7
 800791c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007920:	51eb851f 	.word	0x51eb851f

08007924 <__NVIC_SetPriority>:
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007934:	2b00      	cmp	r3, #0
 8007936:	db0a      	blt.n	800794e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	b2da      	uxtb	r2, r3
 800793c:	490c      	ldr	r1, [pc, #48]	@ (8007970 <__NVIC_SetPriority+0x4c>)
 800793e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007942:	0112      	lsls	r2, r2, #4
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	440b      	add	r3, r1
 8007948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800794c:	e00a      	b.n	8007964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	4908      	ldr	r1, [pc, #32]	@ (8007974 <__NVIC_SetPriority+0x50>)
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	3b04      	subs	r3, #4
 800795c:	0112      	lsls	r2, r2, #4
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	440b      	add	r3, r1
 8007962:	761a      	strb	r2, [r3, #24]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	e000e100 	.word	0xe000e100
 8007974:	e000ed00 	.word	0xe000ed00

08007978 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <SysTick_Handler+0x1c>)
 800797e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007980:	f002 fd00 	bl	800a384 <xTaskGetSchedulerState>
 8007984:	4603      	mov	r3, r0
 8007986:	2b01      	cmp	r3, #1
 8007988:	d001      	beq.n	800798e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800798a:	f003 fc2d 	bl	800b1e8 <xPortSysTickHandler>
  }
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	e000e010 	.word	0xe000e010

08007998 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800799c:	2100      	movs	r1, #0
 800799e:	f06f 0004 	mvn.w	r0, #4
 80079a2:	f7ff ffbf 	bl	8007924 <__NVIC_SetPriority>
#endif
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b2:	f3ef 8305 	mrs	r3, IPSR
 80079b6:	603b      	str	r3, [r7, #0]
  return(result);
 80079b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079be:	f06f 0305 	mvn.w	r3, #5
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	e00c      	b.n	80079e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079c6:	4b0a      	ldr	r3, [pc, #40]	@ (80079f0 <osKernelInitialize+0x44>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079ce:	4b08      	ldr	r3, [pc, #32]	@ (80079f0 <osKernelInitialize+0x44>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	607b      	str	r3, [r7, #4]
 80079d8:	e002      	b.n	80079e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079e0:	687b      	ldr	r3, [r7, #4]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	200013a4 	.word	0x200013a4

080079f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079fa:	f3ef 8305 	mrs	r3, IPSR
 80079fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007a00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a06:	f06f 0305 	mvn.w	r3, #5
 8007a0a:	607b      	str	r3, [r7, #4]
 8007a0c:	e010      	b.n	8007a30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <osKernelStart+0x48>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d109      	bne.n	8007a2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a16:	f7ff ffbf 	bl	8007998 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a1a:	4b08      	ldr	r3, [pc, #32]	@ (8007a3c <osKernelStart+0x48>)
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a20:	f001 ff90 	bl	8009944 <vTaskStartScheduler>
      stat = osOK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	e002      	b.n	8007a30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a30:	687b      	ldr	r3, [r7, #4]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200013a4 	.word	0x200013a4

08007a40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08e      	sub	sp, #56	@ 0x38
 8007a44:	af04      	add	r7, sp, #16
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a50:	f3ef 8305 	mrs	r3, IPSR
 8007a54:	617b      	str	r3, [r7, #20]
  return(result);
 8007a56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d17e      	bne.n	8007b5a <osThreadNew+0x11a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d07b      	beq.n	8007b5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a62:	2380      	movs	r3, #128	@ 0x80
 8007a64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a66:	2318      	movs	r3, #24
 8007a68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d045      	beq.n	8007b06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <osThreadNew+0x48>
        name = attr->name;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <osThreadNew+0x6e>
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b38      	cmp	r3, #56	@ 0x38
 8007aa0:	d805      	bhi.n	8007aae <osThreadNew+0x6e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <osThreadNew+0x72>
        return (NULL);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e054      	b.n	8007b5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	089b      	lsrs	r3, r3, #2
 8007ac0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <osThreadNew+0xa8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b63      	cmp	r3, #99	@ 0x63
 8007ad0:	d90a      	bls.n	8007ae8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d006      	beq.n	8007ae8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <osThreadNew+0xa8>
        mem = 1;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	e010      	b.n	8007b0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <osThreadNew+0xca>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <osThreadNew+0xca>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <osThreadNew+0xca>
          mem = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	e001      	b.n	8007b0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d110      	bne.n	8007b32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b18:	9202      	str	r2, [sp, #8]
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f001 fc4e 	bl	80093c8 <xTaskCreateStatic>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	e013      	b.n	8007b5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d110      	bne.n	8007b5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f107 0310 	add.w	r3, r7, #16
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f001 fc9c 	bl	8009488 <xTaskCreate>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d001      	beq.n	8007b5a <osThreadNew+0x11a>
            hTask = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b5a:	693b      	ldr	r3, [r7, #16]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3728      	adds	r7, #40	@ 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b70:	f3ef 8305 	mrs	r3, IPSR
 8007b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007b7c:	f06f 0305 	mvn.w	r3, #5
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e017      	b.n	8007bb4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d103      	bne.n	8007b92 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007b8a:	f06f 0303 	mvn.w	r3, #3
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	e010      	b.n	8007bb4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f001 fe6e 	bl	8009874 <eTaskGetState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d005      	beq.n	8007bae <osThreadTerminate+0x4a>
      stat = osOK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007ba6:	6938      	ldr	r0, [r7, #16]
 8007ba8:	f001 fdba 	bl	8009720 <vTaskDelete>
 8007bac:	e002      	b.n	8007bb4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007bae:	f06f 0302 	mvn.w	r3, #2
 8007bb2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007bb4:	697b      	ldr	r3, [r7, #20]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc6:	f3ef 8305 	mrs	r3, IPSR
 8007bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <osDelay+0x1c>
    stat = osErrorISR;
 8007bd2:	f06f 0305 	mvn.w	r3, #5
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e007      	b.n	8007bea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <osDelay+0x2c>
      vTaskDelay(ticks);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fe0f 	bl	8009808 <vTaskDelay>
    }
  }

  return (stat);
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c00:	f3ef 8305 	mrs	r3, IPSR
 8007c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c06:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d12d      	bne.n	8007c68 <osEventFlagsNew+0x74>
    mem = -1;
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d015      	beq.n	8007c44 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <osEventFlagsNew+0x3a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b1f      	cmp	r3, #31
 8007c26:	d902      	bls.n	8007c2e <osEventFlagsNew+0x3a>
        mem = 1;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	e00c      	b.n	8007c48 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <osEventFlagsNew+0x54>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <osEventFlagsNew+0x54>
          mem = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	e001      	b.n	8007c48 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d106      	bne.n	8007c5c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f9f8 	bl	8008048 <xEventGroupCreateStatic>
 8007c58:	6178      	str	r0, [r7, #20]
 8007c5a:	e005      	b.n	8007c68 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007c62:	f000 fa2a 	bl	80080ba <xEventGroupCreate>
 8007c66:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007c68:	697b      	ldr	r3, [r7, #20]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <osEventFlagsSet+0x1c>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c8e:	d303      	bcc.n	8007c98 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007c90:	f06f 0303 	mvn.w	r3, #3
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e028      	b.n	8007cea <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c98:	f3ef 8305 	mrs	r3, IPSR
 8007c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01d      	beq.n	8007ce0 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	461a      	mov	r2, r3
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f000 fbab 	bl	800840c <xEventGroupSetBitsFromISR>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007cbc:	f06f 0302 	mvn.w	r3, #2
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e012      	b.n	8007cea <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00d      	beq.n	8007cea <osEventFlagsSet+0x76>
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <osEventFlagsSet+0x80>)
 8007cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	e004      	b.n	8007cea <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f000 fad6 	bl	8008294 <xEventGroupSetBits>
 8007ce8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007cea:	697b      	ldr	r3, [r7, #20]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	e000ed04 	.word	0xe000ed04

08007cf8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	@ 0x30
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <osEventFlagsWait+0x20>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d16:	d303      	bcc.n	8007d20 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007d18:	f06f 0303 	mvn.w	r3, #3
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e04b      	b.n	8007db8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d20:	f3ef 8305 	mrs	r3, IPSR
 8007d24:	617b      	str	r3, [r7, #20]
  return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007d2c:	f06f 0305 	mvn.w	r3, #5
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e041      	b.n	8007db8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d42:	e001      	b.n	8007d48 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	623b      	str	r3, [r7, #32]
 8007d56:	e001      	b.n	8007d5c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	69b8      	ldr	r0, [r7, #24]
 8007d68:	f000 f9c2 	bl	80080f0 <xEventGroupWaitBits>
 8007d6c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d010      	beq.n	8007d9a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d019      	beq.n	8007db8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007d8a:	f06f 0301 	mvn.w	r3, #1
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	e012      	b.n	8007db8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007d92:	f06f 0302 	mvn.w	r3, #2
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	e00e      	b.n	8007db8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007daa:	f06f 0301 	mvn.w	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e002      	b.n	8007db8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007db2:	f06f 0302 	mvn.w	r3, #2
 8007db6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007db8:	69fb      	ldr	r3, [r7, #28]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3728      	adds	r7, #40	@ 0x28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b088      	sub	sp, #32
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dce:	f3ef 8305 	mrs	r3, IPSR
 8007dd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dd4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d174      	bne.n	8007ec4 <osMutexNew+0x102>
    if (attr != NULL) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e001      	b.n	8007dec <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <osMutexNew+0x3a>
      rmtx = 1U;
 8007df6:	2301      	movs	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	e001      	b.n	8007e00 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d15c      	bne.n	8007ec4 <osMutexNew+0x102>
      mem = -1;
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d015      	beq.n	8007e42 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <osMutexNew+0x6a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e24:	d902      	bls.n	8007e2c <osMutexNew+0x6a>
          mem = 1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	e00c      	b.n	8007e46 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d108      	bne.n	8007e46 <osMutexNew+0x84>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <osMutexNew+0x84>
            mem = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	e001      	b.n	8007e46 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d112      	bne.n	8007e72 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d007      	beq.n	8007e62 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	4619      	mov	r1, r3
 8007e58:	2004      	movs	r0, #4
 8007e5a:	f000 fd16 	bl	800888a <xQueueCreateMutexStatic>
 8007e5e:	61f8      	str	r0, [r7, #28]
 8007e60:	e016      	b.n	8007e90 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	4619      	mov	r1, r3
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f000 fd0e 	bl	800888a <xQueueCreateMutexStatic>
 8007e6e:	61f8      	str	r0, [r7, #28]
 8007e70:	e00e      	b.n	8007e90 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10b      	bne.n	8007e90 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e7e:	2004      	movs	r0, #4
 8007e80:	f000 fceb 	bl	800885a <xQueueCreateMutex>
 8007e84:	61f8      	str	r0, [r7, #28]
 8007e86:	e003      	b.n	8007e90 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f000 fce6 	bl	800885a <xQueueCreateMutex>
 8007e8e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00c      	beq.n	8007eb0 <osMutexNew+0xee>
        if (attr != NULL) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <osMutexNew+0xe2>
          name = attr->name;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e001      	b.n	8007ea8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	69f8      	ldr	r0, [r7, #28]
 8007eac:	f001 fa2e 	bl	800930c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d006      	beq.n	8007ec4 <osMutexNew+0x102>
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007ec4:	69fb      	ldr	r3, [r7, #28]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eec:	f3ef 8305 	mrs	r3, IPSR
 8007ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ef2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007ef8:	f06f 0305 	mvn.w	r3, #5
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e02c      	b.n	8007f5a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007f06:	f06f 0303 	mvn.w	r3, #3
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e025      	b.n	8007f5a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d011      	beq.n	8007f38 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6938      	ldr	r0, [r7, #16]
 8007f18:	f000 fd07 	bl	800892a <xQueueTakeMutexRecursive>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d01b      	beq.n	8007f5a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007f28:	f06f 0301 	mvn.w	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e014      	b.n	8007f5a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f30:	f06f 0302 	mvn.w	r3, #2
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e010      	b.n	8007f5a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f000 ffae 	bl	8008e9c <xQueueSemaphoreTake>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d009      	beq.n	8007f5a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007f4c:	f06f 0301 	mvn.w	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	e002      	b.n	8007f5a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f54:	f06f 0302 	mvn.w	r3, #2
 8007f58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f80:	f3ef 8305 	mrs	r3, IPSR
 8007f84:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f86:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f8c:	f06f 0305 	mvn.w	r3, #5
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e01f      	b.n	8007fd4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007f9a:	f06f 0303 	mvn.w	r3, #3
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e018      	b.n	8007fd4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d009      	beq.n	8007fbc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007fa8:	6938      	ldr	r0, [r7, #16]
 8007faa:	f000 fc89 	bl	80088c0 <xQueueGiveMutexRecursive>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d00f      	beq.n	8007fd4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fb4:	f06f 0302 	mvn.w	r3, #2
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	e00b      	b.n	8007fd4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6938      	ldr	r0, [r7, #16]
 8007fc4:	f000 fce8 	bl	8008998 <xQueueGenericSend>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d002      	beq.n	8007fd4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fce:	f06f 0302 	mvn.w	r3, #2
 8007fd2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007fd4:	697b      	ldr	r3, [r7, #20]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a07      	ldr	r2, [pc, #28]	@ (800800c <vApplicationGetIdleTaskMemory+0x2c>)
 8007ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	4a06      	ldr	r2, [pc, #24]	@ (8008010 <vApplicationGetIdleTaskMemory+0x30>)
 8007ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2280      	movs	r2, #128	@ 0x80
 8007ffc:	601a      	str	r2, [r3, #0]
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	200013a8 	.word	0x200013a8
 8008010:	2000140c 	.word	0x2000140c

08008014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a07      	ldr	r2, [pc, #28]	@ (8008040 <vApplicationGetTimerTaskMemory+0x2c>)
 8008024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4a06      	ldr	r2, [pc, #24]	@ (8008044 <vApplicationGetTimerTaskMemory+0x30>)
 800802a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	2000160c 	.word	0x2000160c
 8008044:	20001670 	.word	0x20001670

08008048 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800806e:	2320      	movs	r3, #32
 8008070:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b20      	cmp	r3, #32
 8008076:	d00b      	beq.n	8008090 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 f9c5 	bl	8008434 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2201      	movs	r2, #1
 80080ae:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80080b0:	697b      	ldr	r3, [r7, #20]
	}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80080c0:	2020      	movs	r0, #32
 80080c2:	f003 f923 	bl	800b30c <pvPortMalloc>
 80080c6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f9ab 	bl	8008434 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80080e4:	687b      	ldr	r3, [r7, #4]
	}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b090      	sub	sp, #64	@ 0x40
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <xEventGroupWaitBits+0x38>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	623b      	str	r3, [r7, #32]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800812e:	d30b      	bcc.n	8008148 <xEventGroupWaitBits+0x58>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	61fb      	str	r3, [r7, #28]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10b      	bne.n	8008166 <xEventGroupWaitBits+0x76>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61bb      	str	r3, [r7, #24]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008166:	f002 f90d 	bl	800a384 <xTaskGetSchedulerState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <xEventGroupWaitBits+0x86>
 8008170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <xEventGroupWaitBits+0x8a>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <xEventGroupWaitBits+0x8c>
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	617b      	str	r3, [r7, #20]
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	e7fd      	b.n	8008194 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8008198:	f001 fc3e 	bl	8009a18 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081a8:	f000 f90d 	bl	80083c6 <prvTestWaitCondition>
 80081ac:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d028      	beq.n	8008214 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	401a      	ands	r2, r3
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e020      	b.n	8008214 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80081d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	633b      	str	r3, [r7, #48]	@ 0x30
 80081e0:	e018      	b.n	8008214 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80081e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081ee:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081fc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80081fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008200:	1d18      	adds	r0, r3, #4
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	4313      	orrs	r3, r2
 8008208:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800820a:	4619      	mov	r1, r3
 800820c:	f001 fe1a 	bl	8009e44 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008214:	f001 fc0e 	bl	8009a34 <xTaskResumeAll>
 8008218:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800821a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821c:	2b00      	cmp	r3, #0
 800821e:	d031      	beq.n	8008284 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8008220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8008226:	4b1a      	ldr	r3, [pc, #104]	@ (8008290 <xEventGroupWaitBits+0x1a0>)
 8008228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008236:	f002 fa1f 	bl	800a678 <uxTaskResetEventItemValue>
 800823a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800823c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11a      	bne.n	800827c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8008246:	f002 ff3f 	bl	800b0c8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800824a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008256:	f000 f8b6 	bl	80083c6 <prvTestWaitCondition>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	43db      	mvns	r3, r3
 800826e:	401a      	ands	r2, r3
 8008270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008272:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8008278:	f002 ff58 	bl	800b12c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800827c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008286:	4618      	mov	r0, r3
 8008288:	3740      	adds	r7, #64	@ 0x40
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08e      	sub	sp, #56	@ 0x38
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800829e:	2300      	movs	r3, #0
 80082a0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <xEventGroupSetBits+0x34>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	613b      	str	r3, [r7, #16]
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	e7fd      	b.n	80082c4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ce:	d30b      	bcc.n	80082e8 <xEventGroupSetBits+0x54>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	3304      	adds	r3, #4
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	3308      	adds	r3, #8
 80082f2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80082f4:	f001 fb90 	bl	8009a18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	431a      	orrs	r2, r3
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800830a:	e03c      	b.n	8008386 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800830c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008322:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800832a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d108      	bne.n	8008348 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008342:	2301      	movs	r3, #1
 8008344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008346:	e008      	b.n	800835a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	4013      	ands	r3, r2
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	429a      	cmp	r2, r3
 8008354:	d101      	bne.n	800835a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800836a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	4313      	orrs	r3, r2
 8008370:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800837a:	4619      	mov	r1, r3
 800837c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800837e:	f001 fe2f 	bl	8009fe0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8008386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1be      	bne.n	800830c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800839c:	f001 fb4a 	bl	8009a34 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	681b      	ldr	r3, [r3, #0]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3738      	adds	r7, #56	@ 0x38
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ff6b 	bl	8008294 <xEventGroupSetBits>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80083c6:	b480      	push	{r7}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e007      	b.n	80083fc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4013      	ands	r3, r2
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d101      	bne.n	80083fc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80083fc:	697b      	ldr	r3, [r7, #20]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	68f9      	ldr	r1, [r7, #12]
 800841e:	4804      	ldr	r0, [pc, #16]	@ (8008430 <xEventGroupSetBitsFromISR+0x24>)
 8008420:	f002 fd04 	bl	800ae2c <xTimerPendFunctionCallFromISR>
 8008424:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008426:	697b      	ldr	r3, [r7, #20]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	080083ad 	.word	0x080083ad

08008434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f103 0208 	add.w	r2, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e00c      	b.n	8008510 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3308      	adds	r3, #8
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e002      	b.n	8008504 <vListInsert+0x2e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d2f6      	bcs.n	80084fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6892      	ldr	r2, [r2, #8]
 800855e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <xQueueGenericReset+0x2c>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60bb      	str	r3, [r7, #8]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085c8:	f002 fd7e 	bl	800b0c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	441a      	add	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	441a      	add	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	22ff      	movs	r2, #255	@ 0xff
 800860c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	22ff      	movs	r2, #255	@ 0xff
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d114      	bne.n	8008648 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01a      	beq.n	800865c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3310      	adds	r3, #16
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fc74 	bl	8009f18 <xTaskRemoveFromEventList>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d012      	beq.n	800865c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008636:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <xQueueGenericReset+0xd0>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	e009      	b.n	800865c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3310      	adds	r3, #16
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fef1 	bl	8008434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3324      	adds	r3, #36	@ 0x24
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff feec 	bl	8008434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800865c:	f002 fd66 	bl	800b12c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008660:	2301      	movs	r3, #1
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	@ 0x38
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10b      	bne.n	800869c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	e7fd      	b.n	8008698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <xQueueGenericCreateStatic+0x56>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <xQueueGenericCreateStatic+0x5a>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueGenericCreateStatic+0x5c>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <xQueueGenericCreateStatic+0x84>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <xQueueGenericCreateStatic+0x88>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <xQueueGenericCreateStatic+0x8a>
 80086f8:	2300      	movs	r3, #0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008716:	2350      	movs	r3, #80	@ 0x50
 8008718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b50      	cmp	r3, #80	@ 0x50
 800871e:	d00b      	beq.n	8008738 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61bb      	str	r3, [r7, #24]
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008738:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800874c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f840 	bl	80087e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3730      	adds	r7, #48	@ 0x30
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800876a:	b580      	push	{r7, lr}
 800876c:	b08a      	sub	sp, #40	@ 0x28
 800876e:	af02      	add	r7, sp, #8
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <xQueueGenericCreate+0x2c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	613b      	str	r3, [r7, #16]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	3350      	adds	r3, #80	@ 0x50
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 fdb1 	bl	800b30c <pvPortMalloc>
 80087aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d011      	beq.n	80087d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3350      	adds	r3, #80	@ 0x50
 80087ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c4:	79fa      	ldrb	r2, [r7, #7]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f805 	bl	80087e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087d6:	69bb      	ldr	r3, [r7, #24]
	}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e002      	b.n	8008802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800880e:	2101      	movs	r1, #1
 8008810:	69b8      	ldr	r0, [r7, #24]
 8008812:	f7ff fec3 	bl	800859c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00e      	beq.n	8008852 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f8a3 	bl	8008998 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	4603      	mov	r3, r0
 8008862:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008864:	2301      	movs	r3, #1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	2300      	movs	r3, #0
 800886a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	461a      	mov	r2, r3
 8008870:	6939      	ldr	r1, [r7, #16]
 8008872:	6978      	ldr	r0, [r7, #20]
 8008874:	f7ff ff79 	bl	800876a <xQueueGenericCreate>
 8008878:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ffd3 	bl	8008826 <prvInitialiseMutex>

		return xNewQueue;
 8008880:	68fb      	ldr	r3, [r7, #12]
	}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af02      	add	r7, sp, #8
 8008890:	4603      	mov	r3, r0
 8008892:	6039      	str	r1, [r7, #0]
 8008894:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008896:	2301      	movs	r3, #1
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	6939      	ldr	r1, [r7, #16]
 80088a8:	6978      	ldr	r0, [r7, #20]
 80088aa:	f7ff fee1 	bl	8008670 <xQueueGenericCreateStatic>
 80088ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7ff ffb8 	bl	8008826 <prvInitialiseMutex>

		return xNewQueue;
 80088b6:	68fb      	ldr	r3, [r7, #12]
	}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60fb      	str	r3, [r7, #12]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	689c      	ldr	r4, [r3, #8]
 80088ee:	f001 fd39 	bl	800a364 <xTaskGetCurrentTaskHandle>
 80088f2:	4603      	mov	r3, r0
 80088f4:	429c      	cmp	r4, r3
 80088f6:	d111      	bne.n	800891c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	1e5a      	subs	r2, r3, #1
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800890a:	2300      	movs	r3, #0
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	6938      	ldr	r0, [r7, #16]
 8008912:	f000 f841 	bl	8008998 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e001      	b.n	8008920 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008920:	697b      	ldr	r3, [r7, #20]
	}
 8008922:	4618      	mov	r0, r3
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	bd90      	pop	{r4, r7, pc}

0800892a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800892a:	b590      	push	{r4, r7, lr}
 800892c:	b087      	sub	sp, #28
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60fb      	str	r3, [r7, #12]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	689c      	ldr	r4, [r3, #8]
 800895a:	f001 fd03 	bl	800a364 <xTaskGetCurrentTaskHandle>
 800895e:	4603      	mov	r3, r0
 8008960:	429c      	cmp	r4, r3
 8008962:	d107      	bne.n	8008974 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800896e:	2301      	movs	r3, #1
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e00c      	b.n	800898e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6938      	ldr	r0, [r7, #16]
 8008978:	f000 fa90 	bl	8008e9c <xQueueSemaphoreTake>
 800897c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800898e:	697b      	ldr	r3, [r7, #20]
	}
 8008990:	4618      	mov	r0, r3
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	bd90      	pop	{r4, r7, pc}

08008998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08e      	sub	sp, #56	@ 0x38
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089a6:	2300      	movs	r3, #0
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <xQueueGenericSend+0x34>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <xQueueGenericSend+0x42>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <xQueueGenericSend+0x46>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSend+0x48>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10b      	bne.n	80089fc <xQueueGenericSend+0x64>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x72>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <xQueueGenericSend+0x76>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueGenericSend+0x78>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <xQueueGenericSend+0x94>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	623b      	str	r3, [r7, #32]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a2c:	f001 fcaa 	bl	800a384 <xTaskGetSchedulerState>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <xQueueGenericSend+0xa4>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <xQueueGenericSend+0xa8>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <xQueueGenericSend+0xaa>
 8008a40:	2300      	movs	r3, #0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	61fb      	str	r3, [r7, #28]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a5e:	f002 fb33 	bl	800b0c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d302      	bcc.n	8008a74 <xQueueGenericSend+0xdc>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d129      	bne.n	8008ac8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a7a:	f000 fb37 	bl	80090ec <prvCopyDataToQueue>
 8008a7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d010      	beq.n	8008aaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	3324      	adds	r3, #36	@ 0x24
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 fa43 	bl	8009f18 <xTaskRemoveFromEventList>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d013      	beq.n	8008ac0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a98:	4b3f      	ldr	r3, [pc, #252]	@ (8008b98 <xQueueGenericSend+0x200>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	e00a      	b.n	8008ac0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d007      	beq.n	8008ac0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ab0:	4b39      	ldr	r3, [pc, #228]	@ (8008b98 <xQueueGenericSend+0x200>)
 8008ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ac0:	f002 fb34 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e063      	b.n	8008b90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ace:	f002 fb2d 	bl	800b12c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e05c      	b.n	8008b90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 fae1 	bl	800a0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aea:	f002 fb1f 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aee:	f000 ff93 	bl	8009a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af2:	f002 fae9 	bl	800b0c8 <vPortEnterCritical>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d103      	bne.n	8008b0c <xQueueGenericSend+0x174>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b12:	b25b      	sxtb	r3, r3
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d103      	bne.n	8008b22 <xQueueGenericSend+0x18a>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b22:	f002 fb03 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b26:	1d3a      	adds	r2, r7, #4
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fad0 	bl	800a0d4 <xTaskCheckForTimeOut>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d124      	bne.n	8008b84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b3c:	f000 fbce 	bl	80092dc <prvIsQueueFull>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d018      	beq.n	8008b78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	3310      	adds	r3, #16
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 f952 	bl	8009df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b56:	f000 fb59 	bl	800920c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b5a:	f000 ff6b 	bl	8009a34 <xTaskResumeAll>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f47f af7c 	bne.w	8008a5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b66:	4b0c      	ldr	r3, [pc, #48]	@ (8008b98 <xQueueGenericSend+0x200>)
 8008b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	e772      	b.n	8008a5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b7a:	f000 fb47 	bl	800920c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b7e:	f000 ff59 	bl	8009a34 <xTaskResumeAll>
 8008b82:	e76c      	b.n	8008a5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b86:	f000 fb41 	bl	800920c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b8a:	f000 ff53 	bl	8009a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3738      	adds	r7, #56	@ 0x38
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b090      	sub	sp, #64	@ 0x40
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10b      	bne.n	8008bcc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bc6:	bf00      	nop
 8008bc8:	bf00      	nop
 8008bca:	e7fd      	b.n	8008bc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <xQueueGenericSendFromISR+0x3e>
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <xQueueGenericSendFromISR+0x42>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e000      	b.n	8008be0 <xQueueGenericSendFromISR+0x44>
 8008bde:	2300      	movs	r3, #0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d103      	bne.n	8008c0a <xQueueGenericSendFromISR+0x6e>
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d101      	bne.n	8008c0e <xQueueGenericSendFromISR+0x72>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueGenericSendFromISR+0x74>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	623b      	str	r3, [r7, #32]
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	e7fd      	b.n	8008c28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c2c:	f002 fb2c 	bl	800b288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c30:	f3ef 8211 	mrs	r2, BASEPRI
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fa      	str	r2, [r7, #28]
 8008c46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d302      	bcc.n	8008c5e <xQueueGenericSendFromISR+0xc2>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d12f      	bne.n	8008cbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c74:	f000 fa3a 	bl	80090ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d112      	bne.n	8008ca8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	3324      	adds	r3, #36	@ 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 f942 	bl	8009f18 <xTaskRemoveFromEventList>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00e      	beq.n	8008cb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	e007      	b.n	8008cb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cac:	3301      	adds	r3, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	b25a      	sxtb	r2, r3
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cbc:	e001      	b.n	8008cc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ccc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3740      	adds	r7, #64	@ 0x40
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08c      	sub	sp, #48	@ 0x30
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <xQueueReceive+0x32>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	623b      	str	r3, [r7, #32]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <xQueueReceive+0x40>
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <xQueueReceive+0x44>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <xQueueReceive+0x46>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <xQueueReceive+0x62>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	61fb      	str	r3, [r7, #28]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d3a:	f001 fb23 	bl	800a384 <xTaskGetSchedulerState>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <xQueueReceive+0x72>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <xQueueReceive+0x76>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e000      	b.n	8008d50 <xQueueReceive+0x78>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <xQueueReceive+0x94>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	61bb      	str	r3, [r7, #24]
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d6c:	f002 f9ac 	bl	800b0c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01f      	beq.n	8008dbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d80:	f000 fa1e 	bl	80091c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	1e5a      	subs	r2, r3, #1
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00f      	beq.n	8008db4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	3310      	adds	r3, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f8bd 	bl	8009f18 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008da4:	4b3c      	ldr	r3, [pc, #240]	@ (8008e98 <xQueueReceive+0x1c0>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008db4:	f002 f9ba 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e069      	b.n	8008e90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dc2:	f002 f9b3 	bl	800b12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e062      	b.n	8008e90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 f967 	bl	800a0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dde:	f002 f9a5 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de2:	f000 fe19 	bl	8009a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008de6:	f002 f96f 	bl	800b0c8 <vPortEnterCritical>
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <xQueueReceive+0x128>
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d103      	bne.n	8008e16 <xQueueReceive+0x13e>
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e16:	f002 f989 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1a:	1d3a      	adds	r2, r7, #4
 8008e1c:	f107 0310 	add.w	r3, r7, #16
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 f956 	bl	800a0d4 <xTaskCheckForTimeOut>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d123      	bne.n	8008e76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e30:	f000 fa3e 	bl	80092b0 <prvIsQueueEmpty>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d017      	beq.n	8008e6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	3324      	adds	r3, #36	@ 0x24
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 ffd8 	bl	8009df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4a:	f000 f9df 	bl	800920c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e4e:	f000 fdf1 	bl	8009a34 <xTaskResumeAll>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d189      	bne.n	8008d6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e58:	4b0f      	ldr	r3, [pc, #60]	@ (8008e98 <xQueueReceive+0x1c0>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	e780      	b.n	8008d6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6c:	f000 f9ce 	bl	800920c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e70:	f000 fde0 	bl	8009a34 <xTaskResumeAll>
 8008e74:	e77a      	b.n	8008d6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e78:	f000 f9c8 	bl	800920c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e7c:	f000 fdda 	bl	8009a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e82:	f000 fa15 	bl	80092b0 <prvIsQueueEmpty>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f43f af6f 	beq.w	8008d6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3730      	adds	r7, #48	@ 0x30
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08e      	sub	sp, #56	@ 0x38
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	623b      	str	r3, [r7, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	61fb      	str	r3, [r7, #28]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef0:	f001 fa48 	bl	800a384 <xTaskGetSchedulerState>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <xQueueSemaphoreTake+0x64>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <xQueueSemaphoreTake+0x68>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <xQueueSemaphoreTake+0x6a>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	61bb      	str	r3, [r7, #24]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f22:	f002 f8d1 	bl	800b0c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d024      	beq.n	8008f7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f42:	f001 fbb1 	bl	800a6a8 <pvTaskIncrementMutexHeldCount>
 8008f46:	4602      	mov	r2, r0
 8008f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	3310      	adds	r3, #16
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 ffdd 	bl	8009f18 <xTaskRemoveFromEventList>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f64:	4b54      	ldr	r3, [pc, #336]	@ (80090b8 <xQueueSemaphoreTake+0x21c>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f74:	f002 f8da 	bl	800b12c <vPortExitCritical>
				return pdPASS;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e098      	b.n	80090ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d112      	bne.n	8008fa8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00b      	beq.n	8008fa0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	617b      	str	r3, [r7, #20]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fa0:	f002 f8c4 	bl	800b12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e082      	b.n	80090ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f878 	bl	800a0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fbc:	f002 f8b6 	bl	800b12c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fc0:	f000 fd2a 	bl	8009a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fc4:	f002 f880 	bl	800b0c8 <vPortEnterCritical>
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fce:	b25b      	sxtb	r3, r3
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d103      	bne.n	8008fde <xQueueSemaphoreTake+0x142>
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d103      	bne.n	8008ff4 <xQueueSemaphoreTake+0x158>
 8008fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ff4:	f002 f89a 	bl	800b12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f001 f867 	bl	800a0d4 <xTaskCheckForTimeOut>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d132      	bne.n	8009072 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800900c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800900e:	f000 f94f 	bl	80092b0 <prvIsQueueEmpty>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d026      	beq.n	8009066 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009020:	f002 f852 	bl	800b0c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f9c9 	bl	800a3c0 <xTaskPriorityInherit>
 800902e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009030:	f002 f87c 	bl	800b12c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009036:	3324      	adds	r3, #36	@ 0x24
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fedb 	bl	8009df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009044:	f000 f8e2 	bl	800920c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009048:	f000 fcf4 	bl	8009a34 <xTaskResumeAll>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	f47f af67 	bne.w	8008f22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009054:	4b18      	ldr	r3, [pc, #96]	@ (80090b8 <xQueueSemaphoreTake+0x21c>)
 8009056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	e75d      	b.n	8008f22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009068:	f000 f8d0 	bl	800920c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800906c:	f000 fce2 	bl	8009a34 <xTaskResumeAll>
 8009070:	e757      	b.n	8008f22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009074:	f000 f8ca 	bl	800920c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009078:	f000 fcdc 	bl	8009a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800907c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800907e:	f000 f917 	bl	80092b0 <prvIsQueueEmpty>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	f43f af4c 	beq.w	8008f22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009090:	f002 f81a 	bl	800b0c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009096:	f000 f811 	bl	80090bc <prvGetDisinheritPriorityAfterTimeout>
 800909a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800909c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fa64 	bl	800a570 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090a8:	f002 f840 	bl	800b12c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3738      	adds	r7, #56	@ 0x38
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d006      	beq.n	80090da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	e001      	b.n	80090de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090de:	68fb      	ldr	r3, [r7, #12]
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10d      	bne.n	8009126 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d14d      	bne.n	80091ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f9ba 	bl	800a490 <xTaskPriorityDisinherit>
 800911c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	609a      	str	r2, [r3, #8]
 8009124:	e043      	b.n	80091ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d119      	bne.n	8009160 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6858      	ldr	r0, [r3, #4]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009134:	461a      	mov	r2, r3
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	f002 fb90 	bl	800b85c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	441a      	add	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	429a      	cmp	r2, r3
 8009154:	d32b      	bcc.n	80091ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	e026      	b.n	80091ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68d8      	ldr	r0, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009168:	461a      	mov	r2, r3
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	f002 fb76 	bl	800b85c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009178:	425b      	negs	r3, r3
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d207      	bcs.n	800919c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009194:	425b      	negs	r3, r3
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d105      	bne.n	80091ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80091b6:	697b      	ldr	r3, [r7, #20]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d018      	beq.n	8009204 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091da:	441a      	add	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d303      	bcc.n	80091f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68d9      	ldr	r1, [r3, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fc:	461a      	mov	r2, r3
 80091fe:	6838      	ldr	r0, [r7, #0]
 8009200:	f002 fb2c 	bl	800b85c <memcpy>
	}
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009214:	f001 ff58 	bl	800b0c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800921e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009220:	e011      	b.n	8009246 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d012      	beq.n	8009250 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3324      	adds	r3, #36	@ 0x24
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fe72 	bl	8009f18 <xTaskRemoveFromEventList>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800923a:	f000 ffaf 	bl	800a19c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	3b01      	subs	r3, #1
 8009242:	b2db      	uxtb	r3, r3
 8009244:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924a:	2b00      	cmp	r3, #0
 800924c:	dce9      	bgt.n	8009222 <prvUnlockQueue+0x16>
 800924e:	e000      	b.n	8009252 <prvUnlockQueue+0x46>
					break;
 8009250:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	22ff      	movs	r2, #255	@ 0xff
 8009256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800925a:	f001 ff67 	bl	800b12c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800925e:	f001 ff33 	bl	800b0c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009268:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800926a:	e011      	b.n	8009290 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d012      	beq.n	800929a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3310      	adds	r3, #16
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fe4d 	bl	8009f18 <xTaskRemoveFromEventList>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009284:	f000 ff8a 	bl	800a19c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	3b01      	subs	r3, #1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dce9      	bgt.n	800926c <prvUnlockQueue+0x60>
 8009298:	e000      	b.n	800929c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800929a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	22ff      	movs	r2, #255	@ 0xff
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092a4:	f001 ff42 	bl	800b12c <vPortExitCritical>
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092b8:	f001 ff06 	bl	800b0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092c4:	2301      	movs	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e001      	b.n	80092ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ce:	f001 ff2d 	bl	800b12c <vPortExitCritical>

	return xReturn;
 80092d2:	68fb      	ldr	r3, [r7, #12]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092e4:	f001 fef0 	bl	800b0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d102      	bne.n	80092fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	e001      	b.n	80092fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092fe:	f001 ff15 	bl	800b12c <vPortExitCritical>

	return xReturn;
 8009302:	68fb      	ldr	r3, [r7, #12]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e014      	b.n	8009346 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800931c:	4a0f      	ldr	r2, [pc, #60]	@ (800935c <vQueueAddToRegistry+0x50>)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10b      	bne.n	8009340 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009328:	490c      	ldr	r1, [pc, #48]	@ (800935c <vQueueAddToRegistry+0x50>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009332:	4a0a      	ldr	r2, [pc, #40]	@ (800935c <vQueueAddToRegistry+0x50>)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	4413      	add	r3, r2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800933e:	e006      	b.n	800934e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3301      	adds	r3, #1
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b07      	cmp	r3, #7
 800934a:	d9e7      	bls.n	800931c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20001a70 	.word	0x20001a70

08009360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009370:	f001 feaa 	bl	800b0c8 <vPortEnterCritical>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800937a:	b25b      	sxtb	r3, r3
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d103      	bne.n	800938a <vQueueWaitForMessageRestricted+0x2a>
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009390:	b25b      	sxtb	r3, r3
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009396:	d103      	bne.n	80093a0 <vQueueWaitForMessageRestricted+0x40>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093a0:	f001 fec4 	bl	800b12c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	3324      	adds	r3, #36	@ 0x24
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fd83 	bl	8009ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f7ff ff26 	bl	800920c <prvUnlockQueue>
	}
 80093c0:	bf00      	nop
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08e      	sub	sp, #56	@ 0x38
 80093cc:	af04      	add	r7, sp, #16
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	623b      	str	r3, [r7, #32]
}
 80093ee:	bf00      	nop
 80093f0:	bf00      	nop
 80093f2:	e7fd      	b.n	80093f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <xTaskCreateStatic+0x4a>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	61fb      	str	r3, [r7, #28]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009412:	2364      	movs	r3, #100	@ 0x64
 8009414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2b64      	cmp	r3, #100	@ 0x64
 800941a:	d00b      	beq.n	8009434 <xTaskCreateStatic+0x6c>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	61bb      	str	r3, [r7, #24]
}
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009434:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01e      	beq.n	800947a <xTaskCreateStatic+0xb2>
 800943c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01b      	beq.n	800947a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800944a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009454:	2300      	movs	r3, #0
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	f107 0314 	add.w	r3, r7, #20
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f850 	bl	8009512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009474:	f000 f8e4 	bl	8009640 <prvAddNewTaskToReadyList>
 8009478:	e001      	b.n	800947e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800947e:	697b      	ldr	r3, [r7, #20]
	}
 8009480:	4618      	mov	r0, r3
 8009482:	3728      	adds	r7, #40	@ 0x28
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08c      	sub	sp, #48	@ 0x30
 800948c:	af04      	add	r7, sp, #16
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4618      	mov	r0, r3
 800949e:	f001 ff35 	bl	800b30c <pvPortMalloc>
 80094a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00e      	beq.n	80094c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094aa:	2064      	movs	r0, #100	@ 0x64
 80094ac:	f001 ff2e 	bl	800b30c <pvPortMalloc>
 80094b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80094be:	e005      	b.n	80094cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094c0:	6978      	ldr	r0, [r7, #20]
 80094c2:	f001 fff1 	bl	800b4a8 <vPortFree>
 80094c6:	e001      	b.n	80094cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d017      	beq.n	8009502 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	2300      	movs	r3, #0
 80094de:	9303      	str	r3, [sp, #12]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	9302      	str	r3, [sp, #8]
 80094e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f80e 	bl	8009512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094f6:	69f8      	ldr	r0, [r7, #28]
 80094f8:	f000 f8a2 	bl	8009640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094fc:	2301      	movs	r3, #1
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	e002      	b.n	8009508 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009502:	f04f 33ff 	mov.w	r3, #4294967295
 8009506:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009508:	69bb      	ldr	r3, [r7, #24]
	}
 800950a:	4618      	mov	r0, r3
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b088      	sub	sp, #32
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	461a      	mov	r2, r3
 800952a:	21a5      	movs	r1, #165	@ 0xa5
 800952c:	f002 f964 	bl	800b7f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800953a:	3b01      	subs	r3, #1
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f023 0307 	bic.w	r3, r3, #7
 8009548:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	617b      	str	r3, [r7, #20]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01f      	beq.n	80095b8 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e012      	b.n	80095a4 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	7819      	ldrb	r1, [r3, #0]
 8009586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	3334      	adds	r3, #52	@ 0x34
 800958e:	460a      	mov	r2, r1
 8009590:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d006      	beq.n	80095ac <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d9e9      	bls.n	800957e <prvInitialiseNewTask+0x6c>
 80095aa:	e000      	b.n	80095ae <prvInitialiseNewTask+0x9c>
			{
				break;
 80095ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095b6:	e003      	b.n	80095c0 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	2b37      	cmp	r3, #55	@ 0x37
 80095c4:	d901      	bls.n	80095ca <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095c6:	2337      	movs	r3, #55	@ 0x37
 80095c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095d4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	2200      	movs	r2, #0
 80095da:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe ff47 	bl	8008474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	3318      	adds	r3, #24
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe ff42 	bl	8008474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009604:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	2200      	movs	r2, #0
 800960a:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	2200      	movs	r2, #0
 8009610:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	68f9      	ldr	r1, [r7, #12]
 800961e:	69b8      	ldr	r0, [r7, #24]
 8009620:	f001 fc24 	bl	800ae6c <pxPortInitialiseStack>
 8009624:	4602      	mov	r2, r0
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009636:	bf00      	nop
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009648:	f001 fd3e 	bl	800b0c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800964c:	4b2d      	ldr	r3, [pc, #180]	@ (8009704 <prvAddNewTaskToReadyList+0xc4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	4a2c      	ldr	r2, [pc, #176]	@ (8009704 <prvAddNewTaskToReadyList+0xc4>)
 8009654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009656:	4b2c      	ldr	r3, [pc, #176]	@ (8009708 <prvAddNewTaskToReadyList+0xc8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800965e:	4a2a      	ldr	r2, [pc, #168]	@ (8009708 <prvAddNewTaskToReadyList+0xc8>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009664:	4b27      	ldr	r3, [pc, #156]	@ (8009704 <prvAddNewTaskToReadyList+0xc4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d110      	bne.n	800968e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800966c:	f000 fdbc 	bl	800a1e8 <prvInitialiseTaskLists>
 8009670:	e00d      	b.n	800968e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009672:	4b26      	ldr	r3, [pc, #152]	@ (800970c <prvAddNewTaskToReadyList+0xcc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d109      	bne.n	800968e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800967a:	4b23      	ldr	r3, [pc, #140]	@ (8009708 <prvAddNewTaskToReadyList+0xc8>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	429a      	cmp	r2, r3
 8009686:	d802      	bhi.n	800968e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009688:	4a1f      	ldr	r2, [pc, #124]	@ (8009708 <prvAddNewTaskToReadyList+0xc8>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800968e:	4b20      	ldr	r3, [pc, #128]	@ (8009710 <prvAddNewTaskToReadyList+0xd0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	4a1e      	ldr	r2, [pc, #120]	@ (8009710 <prvAddNewTaskToReadyList+0xd0>)
 8009696:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009698:	4b1d      	ldr	r3, [pc, #116]	@ (8009710 <prvAddNewTaskToReadyList+0xd0>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009714 <prvAddNewTaskToReadyList+0xd4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d903      	bls.n	80096b4 <prvAddNewTaskToReadyList+0x74>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b0:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <prvAddNewTaskToReadyList+0xd4>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4a15      	ldr	r2, [pc, #84]	@ (8009718 <prvAddNewTaskToReadyList+0xd8>)
 80096c2:	441a      	add	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f7fe fedf 	bl	800848e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096d0:	f001 fd2c 	bl	800b12c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096d4:	4b0d      	ldr	r3, [pc, #52]	@ (800970c <prvAddNewTaskToReadyList+0xcc>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00e      	beq.n	80096fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009708 <prvAddNewTaskToReadyList+0xc8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d207      	bcs.n	80096fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096ea:	4b0c      	ldr	r3, [pc, #48]	@ (800971c <prvAddNewTaskToReadyList+0xdc>)
 80096ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20001f84 	.word	0x20001f84
 8009708:	20001ab0 	.word	0x20001ab0
 800970c:	20001f90 	.word	0x20001f90
 8009710:	20001fa0 	.word	0x20001fa0
 8009714:	20001f8c 	.word	0x20001f8c
 8009718:	20001ab4 	.word	0x20001ab4
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009728:	f001 fcce 	bl	800b0c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <vTaskDelete+0x18>
 8009732:	4b2d      	ldr	r3, [pc, #180]	@ (80097e8 <vTaskDelete+0xc8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	e000      	b.n	800973a <vTaskDelete+0x1a>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe ff01 	bl	8008548 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fef8 	bl	8008548 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009758:	4b24      	ldr	r3, [pc, #144]	@ (80097ec <vTaskDelete+0xcc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3301      	adds	r3, #1
 800975e:	4a23      	ldr	r2, [pc, #140]	@ (80097ec <vTaskDelete+0xcc>)
 8009760:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009762:	4b21      	ldr	r3, [pc, #132]	@ (80097e8 <vTaskDelete+0xc8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	429a      	cmp	r2, r3
 800976a:	d10b      	bne.n	8009784 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	481f      	ldr	r0, [pc, #124]	@ (80097f0 <vTaskDelete+0xd0>)
 8009774:	f7fe fe8b 	bl	800848e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009778:	4b1e      	ldr	r3, [pc, #120]	@ (80097f4 <vTaskDelete+0xd4>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	4a1d      	ldr	r2, [pc, #116]	@ (80097f4 <vTaskDelete+0xd4>)
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	e009      	b.n	8009798 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009784:	4b1c      	ldr	r3, [pc, #112]	@ (80097f8 <vTaskDelete+0xd8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3b01      	subs	r3, #1
 800978a:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <vTaskDelete+0xd8>)
 800978c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fd98 	bl	800a2c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009794:	f000 fdc6 	bl	800a324 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009798:	f001 fcc8 	bl	800b12c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800979c:	4b17      	ldr	r3, [pc, #92]	@ (80097fc <vTaskDelete+0xdc>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01c      	beq.n	80097de <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80097a4:	4b10      	ldr	r3, [pc, #64]	@ (80097e8 <vTaskDelete+0xc8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d117      	bne.n	80097de <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80097ae:	4b14      	ldr	r3, [pc, #80]	@ (8009800 <vTaskDelete+0xe0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00b      	beq.n	80097ce <vTaskDelete+0xae>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	60bb      	str	r3, [r7, #8]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <vTaskDelete+0xe4>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20001ab0 	.word	0x20001ab0
 80097ec:	20001fa0 	.word	0x20001fa0
 80097f0:	20001f58 	.word	0x20001f58
 80097f4:	20001f6c 	.word	0x20001f6c
 80097f8:	20001f84 	.word	0x20001f84
 80097fc:	20001f90 	.word	0x20001f90
 8009800:	20001fac 	.word	0x20001fac
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d018      	beq.n	800984c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800981a:	4b14      	ldr	r3, [pc, #80]	@ (800986c <vTaskDelay+0x64>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <vTaskDelay+0x32>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	60bb      	str	r3, [r7, #8]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800983a:	f000 f8ed 	bl	8009a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800983e:	2100      	movs	r1, #0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 ff45 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009846:	f000 f8f5 	bl	8009a34 <xTaskResumeAll>
 800984a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d107      	bne.n	8009862 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009852:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <vTaskDelay+0x68>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20001fac 	.word	0x20001fac
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <eTaskGetState+0x2a>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60bb      	str	r3, [r7, #8]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800989e:	4b24      	ldr	r3, [pc, #144]	@ (8009930 <eTaskGetState+0xbc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d102      	bne.n	80098ae <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80098a8:	2300      	movs	r3, #0
 80098aa:	77fb      	strb	r3, [r7, #31]
 80098ac:	e03a      	b.n	8009924 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80098ae:	f001 fc0b 	bl	800b0c8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80098b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009934 <eTaskGetState+0xc0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098be:	4b1e      	ldr	r3, [pc, #120]	@ (8009938 <eTaskGetState+0xc4>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80098c4:	f001 fc32 	bl	800b12c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d003      	beq.n	80098d8 <eTaskGetState+0x64>
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d102      	bne.n	80098de <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80098d8:	2302      	movs	r3, #2
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e022      	b.n	8009924 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4a16      	ldr	r2, [pc, #88]	@ (800993c <eTaskGetState+0xc8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d112      	bne.n	800990c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10b      	bne.n	8009906 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d102      	bne.n	8009900 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80098fa:	2302      	movs	r3, #2
 80098fc:	77fb      	strb	r3, [r7, #31]
 80098fe:	e011      	b.n	8009924 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8009900:	2303      	movs	r3, #3
 8009902:	77fb      	strb	r3, [r7, #31]
 8009904:	e00e      	b.n	8009924 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009906:	2302      	movs	r3, #2
 8009908:	77fb      	strb	r3, [r7, #31]
 800990a:	e00b      	b.n	8009924 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	4a0c      	ldr	r2, [pc, #48]	@ (8009940 <eTaskGetState+0xcc>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d002      	beq.n	800991a <eTaskGetState+0xa6>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800991a:	2304      	movs	r3, #4
 800991c:	77fb      	strb	r3, [r7, #31]
 800991e:	e001      	b.n	8009924 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009920:	2301      	movs	r3, #1
 8009922:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009924:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009926:	4618      	mov	r0, r3
 8009928:	3720      	adds	r7, #32
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20001ab0 	.word	0x20001ab0
 8009934:	20001f3c 	.word	0x20001f3c
 8009938:	20001f40 	.word	0x20001f40
 800993c:	20001f70 	.word	0x20001f70
 8009940:	20001f58 	.word	0x20001f58

08009944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	@ 0x28
 8009948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009952:	463a      	mov	r2, r7
 8009954:	1d39      	adds	r1, r7, #4
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fb40 	bl	8007fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	9202      	str	r2, [sp, #8]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	2300      	movs	r3, #0
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	2300      	movs	r3, #0
 8009970:	460a      	mov	r2, r1
 8009972:	4923      	ldr	r1, [pc, #140]	@ (8009a00 <vTaskStartScheduler+0xbc>)
 8009974:	4823      	ldr	r0, [pc, #140]	@ (8009a04 <vTaskStartScheduler+0xc0>)
 8009976:	f7ff fd27 	bl	80093c8 <xTaskCreateStatic>
 800997a:	4603      	mov	r3, r0
 800997c:	4a22      	ldr	r2, [pc, #136]	@ (8009a08 <vTaskStartScheduler+0xc4>)
 800997e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009980:	4b21      	ldr	r3, [pc, #132]	@ (8009a08 <vTaskStartScheduler+0xc4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009988:	2301      	movs	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	e001      	b.n	8009992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d102      	bne.n	800999e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009998:	f000 feee 	bl	800a778 <xTimerCreateTimerTask>
 800999c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d118      	bne.n	80099d6 <vTaskStartScheduler+0x92>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	613b      	str	r3, [r7, #16]
}
 80099b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099b8:	4b14      	ldr	r3, [pc, #80]	@ (8009a0c <vTaskStartScheduler+0xc8>)
 80099ba:	f04f 32ff 	mov.w	r2, #4294967295
 80099be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099c0:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <vTaskStartScheduler+0xcc>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099c6:	4b13      	ldr	r3, [pc, #76]	@ (8009a14 <vTaskStartScheduler+0xd0>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80099cc:	f7f6 fd80 	bl	80004d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099d0:	f001 fad6 	bl	800af80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099d4:	e00f      	b.n	80099f6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d10b      	bne.n	80099f6 <vTaskStartScheduler+0xb2>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	60fb      	str	r3, [r7, #12]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <vTaskStartScheduler+0xae>
}
 80099f6:	bf00      	nop
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	0800b9c0 	.word	0x0800b9c0
 8009a04:	0800a1b5 	.word	0x0800a1b5
 8009a08:	20001fa8 	.word	0x20001fa8
 8009a0c:	20001fa4 	.word	0x20001fa4
 8009a10:	20001f90 	.word	0x20001f90
 8009a14:	20001f88 	.word	0x20001f88

08009a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a1c:	4b04      	ldr	r3, [pc, #16]	@ (8009a30 <vTaskSuspendAll+0x18>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	4a03      	ldr	r2, [pc, #12]	@ (8009a30 <vTaskSuspendAll+0x18>)
 8009a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a26:	bf00      	nop
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20001fac 	.word	0x20001fac

08009a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a42:	4b42      	ldr	r3, [pc, #264]	@ (8009b4c <xTaskResumeAll+0x118>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <xTaskResumeAll+0x2e>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	603b      	str	r3, [r7, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	e7fd      	b.n	8009a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a62:	f001 fb31 	bl	800b0c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a66:	4b39      	ldr	r3, [pc, #228]	@ (8009b4c <xTaskResumeAll+0x118>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4a37      	ldr	r2, [pc, #220]	@ (8009b4c <xTaskResumeAll+0x118>)
 8009a6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a70:	4b36      	ldr	r3, [pc, #216]	@ (8009b4c <xTaskResumeAll+0x118>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d162      	bne.n	8009b3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a78:	4b35      	ldr	r3, [pc, #212]	@ (8009b50 <xTaskResumeAll+0x11c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d05e      	beq.n	8009b3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a80:	e02f      	b.n	8009ae2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a82:	4b34      	ldr	r3, [pc, #208]	@ (8009b54 <xTaskResumeAll+0x120>)
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fd5a 	bl	8008548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fd55 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8009b58 <xTaskResumeAll+0x124>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d903      	bls.n	8009ab2 <xTaskResumeAll+0x7e>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aae:	4a2a      	ldr	r2, [pc, #168]	@ (8009b58 <xTaskResumeAll+0x124>)
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4a27      	ldr	r2, [pc, #156]	@ (8009b5c <xTaskResumeAll+0x128>)
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fe fce0 	bl	800848e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad2:	4b23      	ldr	r3, [pc, #140]	@ (8009b60 <xTaskResumeAll+0x12c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d302      	bcc.n	8009ae2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009adc:	4b21      	ldr	r3, [pc, #132]	@ (8009b64 <xTaskResumeAll+0x130>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8009b54 <xTaskResumeAll+0x120>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1cb      	bne.n	8009a82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009af0:	f000 fc18 	bl	800a324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009af4:	4b1c      	ldr	r3, [pc, #112]	@ (8009b68 <xTaskResumeAll+0x134>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d010      	beq.n	8009b22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b00:	f000 f846 	bl	8009b90 <xTaskIncrementTick>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b0a:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <xTaskResumeAll+0x130>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1f1      	bne.n	8009b00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b1c:	4b12      	ldr	r3, [pc, #72]	@ (8009b68 <xTaskResumeAll+0x134>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b22:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <xTaskResumeAll+0x130>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <xTaskResumeAll+0x138>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b3e:	f001 faf5 	bl	800b12c <vPortExitCritical>

	return xAlreadyYielded;
 8009b42:	68bb      	ldr	r3, [r7, #8]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20001fac 	.word	0x20001fac
 8009b50:	20001f84 	.word	0x20001f84
 8009b54:	20001f44 	.word	0x20001f44
 8009b58:	20001f8c 	.word	0x20001f8c
 8009b5c:	20001ab4 	.word	0x20001ab4
 8009b60:	20001ab0 	.word	0x20001ab0
 8009b64:	20001f98 	.word	0x20001f98
 8009b68:	20001f94 	.word	0x20001f94
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b76:	4b05      	ldr	r3, [pc, #20]	@ (8009b8c <xTaskGetTickCount+0x1c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b7c:	687b      	ldr	r3, [r7, #4]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20001f88 	.word	0x20001f88

08009b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd8 <xTaskIncrementTick+0x148>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f040 8090 	bne.w	8009cc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8009cdc <xTaskIncrementTick+0x14c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bac:	4a4b      	ldr	r2, [pc, #300]	@ (8009cdc <xTaskIncrementTick+0x14c>)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d121      	bne.n	8009bfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bb8:	4b49      	ldr	r3, [pc, #292]	@ (8009ce0 <xTaskIncrementTick+0x150>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <xTaskIncrementTick+0x4a>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	603b      	str	r3, [r7, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	e7fd      	b.n	8009bd6 <xTaskIncrementTick+0x46>
 8009bda:	4b41      	ldr	r3, [pc, #260]	@ (8009ce0 <xTaskIncrementTick+0x150>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	4b40      	ldr	r3, [pc, #256]	@ (8009ce4 <xTaskIncrementTick+0x154>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ce0 <xTaskIncrementTick+0x150>)
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ce4 <xTaskIncrementTick+0x154>)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	4b3e      	ldr	r3, [pc, #248]	@ (8009ce8 <xTaskIncrementTick+0x158>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ce8 <xTaskIncrementTick+0x158>)
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	f000 fb94 	bl	800a324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8009cec <xTaskIncrementTick+0x15c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d349      	bcc.n	8009c9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c06:	4b36      	ldr	r3, [pc, #216]	@ (8009ce0 <xTaskIncrementTick+0x150>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c10:	4b36      	ldr	r3, [pc, #216]	@ (8009cec <xTaskIncrementTick+0x15c>)
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	601a      	str	r2, [r3, #0]
					break;
 8009c18:	e03f      	b.n	8009c9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	4b31      	ldr	r3, [pc, #196]	@ (8009ce0 <xTaskIncrementTick+0x150>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d203      	bcs.n	8009c3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c32:	4a2e      	ldr	r2, [pc, #184]	@ (8009cec <xTaskIncrementTick+0x15c>)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c38:	e02f      	b.n	8009c9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fc82 	bl	8008548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3318      	adds	r3, #24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fc79 	bl	8008548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5a:	4b25      	ldr	r3, [pc, #148]	@ (8009cf0 <xTaskIncrementTick+0x160>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d903      	bls.n	8009c6a <xTaskIncrementTick+0xda>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c66:	4a22      	ldr	r2, [pc, #136]	@ (8009cf0 <xTaskIncrementTick+0x160>)
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf4 <xTaskIncrementTick+0x164>)
 8009c78:	441a      	add	r2, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7fe fc04 	bl	800848e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf8 <xTaskIncrementTick+0x168>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3b8      	bcc.n	8009c06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c98:	e7b5      	b.n	8009c06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c9a:	4b17      	ldr	r3, [pc, #92]	@ (8009cf8 <xTaskIncrementTick+0x168>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	4914      	ldr	r1, [pc, #80]	@ (8009cf4 <xTaskIncrementTick+0x164>)
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d901      	bls.n	8009cb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cb6:	4b11      	ldr	r3, [pc, #68]	@ (8009cfc <xTaskIncrementTick+0x16c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e004      	b.n	8009cce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d00 <xTaskIncrementTick+0x170>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	4a0d      	ldr	r2, [pc, #52]	@ (8009d00 <xTaskIncrementTick+0x170>)
 8009ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cce:	697b      	ldr	r3, [r7, #20]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20001fac 	.word	0x20001fac
 8009cdc:	20001f88 	.word	0x20001f88
 8009ce0:	20001f3c 	.word	0x20001f3c
 8009ce4:	20001f40 	.word	0x20001f40
 8009ce8:	20001f9c 	.word	0x20001f9c
 8009cec:	20001fa4 	.word	0x20001fa4
 8009cf0:	20001f8c 	.word	0x20001f8c
 8009cf4:	20001ab4 	.word	0x20001ab4
 8009cf8:	20001ab0 	.word	0x20001ab0
 8009cfc:	20001f98 	.word	0x20001f98
 8009d00:	20001f94 	.word	0x20001f94

08009d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d0a:	4b34      	ldr	r3, [pc, #208]	@ (8009ddc <vTaskSwitchContext+0xd8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d12:	4b33      	ldr	r3, [pc, #204]	@ (8009de0 <vTaskSwitchContext+0xdc>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d18:	e05b      	b.n	8009dd2 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 8009d1a:	4b31      	ldr	r3, [pc, #196]	@ (8009de0 <vTaskSwitchContext+0xdc>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009d20:	f7f6 fbdd 	bl	80004de <getRunTimeCounterValue>
 8009d24:	4603      	mov	r3, r0
 8009d26:	4a2f      	ldr	r2, [pc, #188]	@ (8009de4 <vTaskSwitchContext+0xe0>)
 8009d28:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8009de4 <vTaskSwitchContext+0xe0>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8009de8 <vTaskSwitchContext+0xe4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d909      	bls.n	8009d4a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009d36:	4b2d      	ldr	r3, [pc, #180]	@ (8009dec <vTaskSwitchContext+0xe8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009d3c:	4a29      	ldr	r2, [pc, #164]	@ (8009de4 <vTaskSwitchContext+0xe0>)
 8009d3e:	6810      	ldr	r0, [r2, #0]
 8009d40:	4a29      	ldr	r2, [pc, #164]	@ (8009de8 <vTaskSwitchContext+0xe4>)
 8009d42:	6812      	ldr	r2, [r2, #0]
 8009d44:	1a82      	subs	r2, r0, r2
 8009d46:	440a      	add	r2, r1
 8009d48:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d4a:	4b26      	ldr	r3, [pc, #152]	@ (8009de4 <vTaskSwitchContext+0xe0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a26      	ldr	r2, [pc, #152]	@ (8009de8 <vTaskSwitchContext+0xe4>)
 8009d50:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d52:	4b27      	ldr	r3, [pc, #156]	@ (8009df0 <vTaskSwitchContext+0xec>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	e011      	b.n	8009d7e <vTaskSwitchContext+0x7a>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10b      	bne.n	8009d78 <vTaskSwitchContext+0x74>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	607b      	str	r3, [r7, #4]
}
 8009d72:	bf00      	nop
 8009d74:	bf00      	nop
 8009d76:	e7fd      	b.n	8009d74 <vTaskSwitchContext+0x70>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	60fb      	str	r3, [r7, #12]
 8009d7e:	491d      	ldr	r1, [pc, #116]	@ (8009df4 <vTaskSwitchContext+0xf0>)
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0e3      	beq.n	8009d5a <vTaskSwitchContext+0x56>
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4a15      	ldr	r2, [pc, #84]	@ (8009df4 <vTaskSwitchContext+0xf0>)
 8009d9e:	4413      	add	r3, r2
 8009da0:	60bb      	str	r3, [r7, #8]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	605a      	str	r2, [r3, #4]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	3308      	adds	r3, #8
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d104      	bne.n	8009dc2 <vTaskSwitchContext+0xbe>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4a08      	ldr	r2, [pc, #32]	@ (8009dec <vTaskSwitchContext+0xe8>)
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	4a08      	ldr	r2, [pc, #32]	@ (8009df0 <vTaskSwitchContext+0xec>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6013      	str	r3, [r2, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20001fac 	.word	0x20001fac
 8009de0:	20001f98 	.word	0x20001f98
 8009de4:	20001fb4 	.word	0x20001fb4
 8009de8:	20001fb0 	.word	0x20001fb0
 8009dec:	20001ab0 	.word	0x20001ab0
 8009df0:	20001f8c 	.word	0x20001f8c
 8009df4:	20001ab4 	.word	0x20001ab4

08009df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10b      	bne.n	8009e20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e20:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <vTaskPlaceOnEventList+0x48>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3318      	adds	r3, #24
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7fe fb54 	bl	80084d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e2e:	2101      	movs	r1, #1
 8009e30:	6838      	ldr	r0, [r7, #0]
 8009e32:	f000 fc4d 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001ab0 	.word	0x20001ab0

08009e44 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	617b      	str	r3, [r7, #20]
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	e7fd      	b.n	8009e6a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009e6e:	4b12      	ldr	r3, [pc, #72]	@ (8009eb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	613b      	str	r3, [r7, #16]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <vTaskPlaceOnUnorderedEventList+0x78>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009e98:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9a:	4b08      	ldr	r3, [pc, #32]	@ (8009ebc <vTaskPlaceOnUnorderedEventList+0x78>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3318      	adds	r3, #24
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7fe faf3 	bl	800848e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc10 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
}
 8009eb0:	bf00      	nop
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20001fac 	.word	0x20001fac
 8009ebc:	20001ab0 	.word	0x20001ab0

08009ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10b      	bne.n	8009eea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eea:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <vTaskPlaceOnEventListRestricted+0x54>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3318      	adds	r3, #24
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7fe facb 	bl	800848e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	68b8      	ldr	r0, [r7, #8]
 8009f08:	f000 fbe2 	bl	800a6d0 <prvAddCurrentTaskToDelayedList>
	}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20001ab0 	.word	0x20001ab0

08009f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	60fb      	str	r3, [r7, #12]
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	e7fd      	b.n	8009f42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3318      	adds	r3, #24
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fafc 	bl	8008548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f50:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc8 <xTaskRemoveFromEventList+0xb0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d11d      	bne.n	8009f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe faf3 	bl	8008548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f66:	4b19      	ldr	r3, [pc, #100]	@ (8009fcc <xTaskRemoveFromEventList+0xb4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d903      	bls.n	8009f76 <xTaskRemoveFromEventList+0x5e>
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f72:	4a16      	ldr	r2, [pc, #88]	@ (8009fcc <xTaskRemoveFromEventList+0xb4>)
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a13      	ldr	r2, [pc, #76]	@ (8009fd0 <xTaskRemoveFromEventList+0xb8>)
 8009f84:	441a      	add	r2, r3
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe fa7e 	bl	800848e <vListInsertEnd>
 8009f92:	e005      	b.n	8009fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	3318      	adds	r3, #24
 8009f98:	4619      	mov	r1, r3
 8009f9a:	480e      	ldr	r0, [pc, #56]	@ (8009fd4 <xTaskRemoveFromEventList+0xbc>)
 8009f9c:	f7fe fa77 	bl	800848e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd8 <xTaskRemoveFromEventList+0xc0>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d905      	bls.n	8009fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <xTaskRemoveFromEventList+0xc4>)
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	e001      	b.n	8009fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fbe:	697b      	ldr	r3, [r7, #20]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001fac 	.word	0x20001fac
 8009fcc:	20001f8c 	.word	0x20001f8c
 8009fd0:	20001ab4 	.word	0x20001ab4
 8009fd4:	20001f44 	.word	0x20001f44
 8009fd8:	20001ab0 	.word	0x20001ab0
 8009fdc:	20001f98 	.word	0x20001f98

08009fe0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009fea:	4b2a      	ldr	r3, [pc, #168]	@ (800a094 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	613b      	str	r3, [r7, #16]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fe fa85 	bl	8008548 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3304      	adds	r3, #4
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fa80 	bl	8008548 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04c:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <vTaskRemoveFromUnorderedEventList+0x7c>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a058:	4a0f      	ldr	r2, [pc, #60]	@ (800a098 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4a0c      	ldr	r2, [pc, #48]	@ (800a09c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a06a:	441a      	add	r2, r3
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f7fe fa0b 	bl	800848e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07c:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a082:	429a      	cmp	r2, r3
 800a084:	d902      	bls.n	800a08c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a086:	4b07      	ldr	r3, [pc, #28]	@ (800a0a4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a088:	2201      	movs	r2, #1
 800a08a:	601a      	str	r2, [r3, #0]
	}
}
 800a08c:	bf00      	nop
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	20001fac 	.word	0x20001fac
 800a098:	20001f8c 	.word	0x20001f8c
 800a09c:	20001ab4 	.word	0x20001ab4
 800a0a0:	20001ab0 	.word	0x20001ab0
 800a0a4:	20001f98 	.word	0x20001f98

0800a0a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0b0:	4b06      	ldr	r3, [pc, #24]	@ (800a0cc <vTaskInternalSetTimeOutState+0x24>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0b8:	4b05      	ldr	r3, [pc, #20]	@ (800a0d0 <vTaskInternalSetTimeOutState+0x28>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	605a      	str	r2, [r3, #4]
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	20001f9c 	.word	0x20001f9c
 800a0d0:	20001f88 	.word	0x20001f88

0800a0d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10b      	bne.n	800a0fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	613b      	str	r3, [r7, #16]
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	e7fd      	b.n	800a0f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10b      	bne.n	800a11a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60fb      	str	r3, [r7, #12]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a11a:	f000 ffd5 	bl	800b0c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a11e:	4b1d      	ldr	r3, [pc, #116]	@ (800a194 <xTaskCheckForTimeOut+0xc0>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d102      	bne.n	800a13e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a138:	2300      	movs	r3, #0
 800a13a:	61fb      	str	r3, [r7, #28]
 800a13c:	e023      	b.n	800a186 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4b15      	ldr	r3, [pc, #84]	@ (800a198 <xTaskCheckForTimeOut+0xc4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d007      	beq.n	800a15a <xTaskCheckForTimeOut+0x86>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	429a      	cmp	r2, r3
 800a152:	d302      	bcc.n	800a15a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e015      	b.n	800a186 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	429a      	cmp	r2, r3
 800a162:	d20b      	bcs.n	800a17c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ff99 	bl	800a0a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	61fb      	str	r3, [r7, #28]
 800a17a:	e004      	b.n	800a186 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a182:	2301      	movs	r3, #1
 800a184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f000 ffd1 	bl	800b12c <vPortExitCritical>

	return xReturn;
 800a18a:	69fb      	ldr	r3, [r7, #28]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20001f88 	.word	0x20001f88
 800a198:	20001f9c 	.word	0x20001f9c

0800a19c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1a0:	4b03      	ldr	r3, [pc, #12]	@ (800a1b0 <vTaskMissedYield+0x14>)
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]
}
 800a1a6:	bf00      	nop
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	20001f98 	.word	0x20001f98

0800a1b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1bc:	f000 f854 	bl	800a268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1c0:	4b07      	ldr	r3, [pc, #28]	@ (800a1e0 <prvIdleTask+0x2c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d907      	bls.n	800a1d8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a1c8:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <prvIdleTask+0x30>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a1d8:	f7f6 f989 	bl	80004ee <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a1dc:	e7ee      	b.n	800a1bc <prvIdleTask+0x8>
 800a1de:	bf00      	nop
 800a1e0:	20001ab4 	.word	0x20001ab4
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	e00c      	b.n	800a20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4a12      	ldr	r2, [pc, #72]	@ (800a248 <prvInitialiseTaskLists+0x60>)
 800a200:	4413      	add	r3, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe f916 	bl	8008434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b37      	cmp	r3, #55	@ 0x37
 800a212:	d9ef      	bls.n	800a1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a214:	480d      	ldr	r0, [pc, #52]	@ (800a24c <prvInitialiseTaskLists+0x64>)
 800a216:	f7fe f90d 	bl	8008434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a21a:	480d      	ldr	r0, [pc, #52]	@ (800a250 <prvInitialiseTaskLists+0x68>)
 800a21c:	f7fe f90a 	bl	8008434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a220:	480c      	ldr	r0, [pc, #48]	@ (800a254 <prvInitialiseTaskLists+0x6c>)
 800a222:	f7fe f907 	bl	8008434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a226:	480c      	ldr	r0, [pc, #48]	@ (800a258 <prvInitialiseTaskLists+0x70>)
 800a228:	f7fe f904 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a22c:	480b      	ldr	r0, [pc, #44]	@ (800a25c <prvInitialiseTaskLists+0x74>)
 800a22e:	f7fe f901 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a232:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <prvInitialiseTaskLists+0x78>)
 800a234:	4a05      	ldr	r2, [pc, #20]	@ (800a24c <prvInitialiseTaskLists+0x64>)
 800a236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a238:	4b0a      	ldr	r3, [pc, #40]	@ (800a264 <prvInitialiseTaskLists+0x7c>)
 800a23a:	4a05      	ldr	r2, [pc, #20]	@ (800a250 <prvInitialiseTaskLists+0x68>)
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20001ab4 	.word	0x20001ab4
 800a24c:	20001f14 	.word	0x20001f14
 800a250:	20001f28 	.word	0x20001f28
 800a254:	20001f44 	.word	0x20001f44
 800a258:	20001f58 	.word	0x20001f58
 800a25c:	20001f70 	.word	0x20001f70
 800a260:	20001f3c 	.word	0x20001f3c
 800a264:	20001f40 	.word	0x20001f40

0800a268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a26e:	e019      	b.n	800a2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a270:	f000 ff2a 	bl	800b0c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	4b10      	ldr	r3, [pc, #64]	@ (800a2b8 <prvCheckTasksWaitingTermination+0x50>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe f961 	bl	8008548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	4a0b      	ldr	r2, [pc, #44]	@ (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a290:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3b01      	subs	r3, #1
 800a296:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a29a:	f000 ff47 	bl	800b12c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f810 	bl	800a2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e1      	bne.n	800a270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001f58 	.word	0x20001f58
 800a2bc:	20001f84 	.word	0x20001f84
 800a2c0:	20001f6c 	.word	0x20001f6c

0800a2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d108      	bne.n	800a2e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f001 f8e4 	bl	800b4a8 <vPortFree>
				vPortFree( pxTCB );
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 f8e1 	bl	800b4a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2e6:	e019      	b.n	800a31c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d103      	bne.n	800a2fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 f8d8 	bl	800b4a8 <vPortFree>
	}
 800a2f8:	e010      	b.n	800a31c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a300:	2b02      	cmp	r3, #2
 800a302:	d00b      	beq.n	800a31c <prvDeleteTCB+0x58>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	60fb      	str	r3, [r7, #12]
}
 800a316:	bf00      	nop
 800a318:	bf00      	nop
 800a31a:	e7fd      	b.n	800a318 <prvDeleteTCB+0x54>
	}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32a:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a334:	4b0a      	ldr	r3, [pc, #40]	@ (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a33c:	e008      	b.n	800a350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33e:	4b07      	ldr	r3, [pc, #28]	@ (800a35c <prvResetNextTaskUnblockTime+0x38>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4a04      	ldr	r2, [pc, #16]	@ (800a360 <prvResetNextTaskUnblockTime+0x3c>)
 800a34e:	6013      	str	r3, [r2, #0]
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	20001f3c 	.word	0x20001f3c
 800a360:	20001fa4 	.word	0x20001fa4

0800a364 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a36a:	4b05      	ldr	r3, [pc, #20]	@ (800a380 <xTaskGetCurrentTaskHandle+0x1c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a370:	687b      	ldr	r3, [r7, #4]
	}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20001ab0 	.word	0x20001ab0

0800a384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a38a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <xTaskGetSchedulerState+0x34>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a392:	2301      	movs	r3, #1
 800a394:	607b      	str	r3, [r7, #4]
 800a396:	e008      	b.n	800a3aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a398:	4b08      	ldr	r3, [pc, #32]	@ (800a3bc <xTaskGetSchedulerState+0x38>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	607b      	str	r3, [r7, #4]
 800a3a4:	e001      	b.n	800a3aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3aa:	687b      	ldr	r3, [r7, #4]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	20001f90 	.word	0x20001f90
 800a3bc:	20001fac 	.word	0x20001fac

0800a3c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d051      	beq.n	800a47a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3da:	4b2a      	ldr	r3, [pc, #168]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d241      	bcs.n	800a468 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db06      	blt.n	800a3fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ec:	4b25      	ldr	r3, [pc, #148]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6959      	ldr	r1, [r3, #20]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4a1f      	ldr	r2, [pc, #124]	@ (800a488 <xTaskPriorityInherit+0xc8>)
 800a40c:	4413      	add	r3, r2
 800a40e:	4299      	cmp	r1, r3
 800a410:	d122      	bne.n	800a458 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	3304      	adds	r3, #4
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe f896 	bl	8008548 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a41c:	4b19      	ldr	r3, [pc, #100]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42a:	4b18      	ldr	r3, [pc, #96]	@ (800a48c <xTaskPriorityInherit+0xcc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d903      	bls.n	800a43a <xTaskPriorityInherit+0x7a>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	4a15      	ldr	r2, [pc, #84]	@ (800a48c <xTaskPriorityInherit+0xcc>)
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4a10      	ldr	r2, [pc, #64]	@ (800a488 <xTaskPriorityInherit+0xc8>)
 800a448:	441a      	add	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f7fe f81c 	bl	800848e <vListInsertEnd>
 800a456:	e004      	b.n	800a462 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a458:	4b0a      	ldr	r3, [pc, #40]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a462:	2301      	movs	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e008      	b.n	800a47a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <xTaskPriorityInherit+0xc4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	429a      	cmp	r2, r3
 800a474:	d201      	bcs.n	800a47a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a47a:	68fb      	ldr	r3, [r7, #12]
	}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20001ab0 	.word	0x20001ab0
 800a488:	20001ab4 	.word	0x20001ab4
 800a48c:	20001f8c 	.word	0x20001f8c

0800a490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d058      	beq.n	800a558 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a564 <xTaskPriorityDisinherit+0xd4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d00b      	beq.n	800a4c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60bb      	str	r3, [r7, #8]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d02c      	beq.n	800a558 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a502:	2b00      	cmp	r3, #0
 800a504:	d128      	bne.n	800a558 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3304      	adds	r3, #4
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe f81c 	bl	8008548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4b0f      	ldr	r3, [pc, #60]	@ (800a568 <xTaskPriorityDisinherit+0xd8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d903      	bls.n	800a538 <xTaskPriorityDisinherit+0xa8>
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a534:	4a0c      	ldr	r2, [pc, #48]	@ (800a568 <xTaskPriorityDisinherit+0xd8>)
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <xTaskPriorityDisinherit+0xdc>)
 800a546:	441a      	add	r2, r3
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7fd ff9d 	bl	800848e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a558:	697b      	ldr	r3, [r7, #20]
	}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20001ab0 	.word	0x20001ab0
 800a568:	20001f8c 	.word	0x20001f8c
 800a56c:	20001ab4 	.word	0x20001ab4

0800a570 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d06c      	beq.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10b      	bne.n	800a5a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60fb      	str	r3, [r7, #12]
}
 800a5a2:	bf00      	nop
 800a5a4:	bf00      	nop
 800a5a6:	e7fd      	b.n	800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d902      	bls.n	800a5b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	e002      	b.n	800a5be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d04c      	beq.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d147      	bne.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5d2:	4b26      	ldr	r3, [pc, #152]	@ (800a66c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d10b      	bne.n	800a5f4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	db04      	blt.n	800a612 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	6959      	ldr	r1, [r3, #20]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4a13      	ldr	r2, [pc, #76]	@ (800a670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a622:	4413      	add	r3, r2
 800a624:	4299      	cmp	r1, r3
 800a626:	d11c      	bne.n	800a662 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd ff8b 	bl	8008548 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a636:	4b0f      	ldr	r3, [pc, #60]	@ (800a674 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d903      	bls.n	800a646 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a642:	4a0c      	ldr	r2, [pc, #48]	@ (800a674 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4a07      	ldr	r2, [pc, #28]	@ (800a670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a654:	441a      	add	r2, r3
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	3304      	adds	r3, #4
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7fd ff16 	bl	800848e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a662:	bf00      	nop
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20001ab0 	.word	0x20001ab0
 800a670:	20001ab4 	.word	0x20001ab4
 800a674:	20001f8c 	.word	0x20001f8c

0800a678 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a67e:	4b09      	ldr	r3, [pc, #36]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68c:	4b05      	ldr	r3, [pc, #20]	@ (800a6a4 <uxTaskResetEventItemValue+0x2c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a694:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a696:	687b      	ldr	r3, [r7, #4]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20001ab0 	.word	0x20001ab0

0800a6a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6ac:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d004      	beq.n	800a6be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6b4:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800a6be:	4b03      	ldr	r3, [pc, #12]	@ (800a6cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
	}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20001ab0 	.word	0x20001ab0

0800a6d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6da:	4b21      	ldr	r3, [pc, #132]	@ (800a760 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e0:	4b20      	ldr	r3, [pc, #128]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd ff2e 	bl	8008548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d10a      	bne.n	800a70a <prvAddCurrentTaskToDelayedList+0x3a>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4819      	ldr	r0, [pc, #100]	@ (800a768 <prvAddCurrentTaskToDelayedList+0x98>)
 800a704:	f7fd fec3 	bl	800848e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a708:	e026      	b.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4413      	add	r3, r2
 800a710:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d209      	bcs.n	800a736 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a722:	4b12      	ldr	r3, [pc, #72]	@ (800a76c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fd fed1 	bl	80084d6 <vListInsert>
}
 800a734:	e010      	b.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a736:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b0a      	ldr	r3, [pc, #40]	@ (800a764 <prvAddCurrentTaskToDelayedList+0x94>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fd fec7 	bl	80084d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a748:	4b0a      	ldr	r3, [pc, #40]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d202      	bcs.n	800a758 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a752:	4a08      	ldr	r2, [pc, #32]	@ (800a774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6013      	str	r3, [r2, #0]
}
 800a758:	bf00      	nop
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20001f88 	.word	0x20001f88
 800a764:	20001ab0 	.word	0x20001ab0
 800a768:	20001f70 	.word	0x20001f70
 800a76c:	20001f40 	.word	0x20001f40
 800a770:	20001f3c 	.word	0x20001f3c
 800a774:	20001fa4 	.word	0x20001fa4

0800a778 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	@ 0x28
 800a77c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a782:	f000 fb13 	bl	800adac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a786:	4b1d      	ldr	r3, [pc, #116]	@ (800a7fc <xTimerCreateTimerTask+0x84>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d021      	beq.n	800a7d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a796:	1d3a      	adds	r2, r7, #4
 800a798:	f107 0108 	add.w	r1, r7, #8
 800a79c:	f107 030c 	add.w	r3, r7, #12
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fc37 	bl	8008014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	9202      	str	r2, [sp, #8]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	4911      	ldr	r1, [pc, #68]	@ (800a800 <xTimerCreateTimerTask+0x88>)
 800a7ba:	4812      	ldr	r0, [pc, #72]	@ (800a804 <xTimerCreateTimerTask+0x8c>)
 800a7bc:	f7fe fe04 	bl	80093c8 <xTaskCreateStatic>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4a11      	ldr	r2, [pc, #68]	@ (800a808 <xTimerCreateTimerTask+0x90>)
 800a7c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7c6:	4b10      	ldr	r3, [pc, #64]	@ (800a808 <xTimerCreateTimerTask+0x90>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10b      	bne.n	800a7f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	613b      	str	r3, [r7, #16]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a7f0:	697b      	ldr	r3, [r7, #20]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20001fe8 	.word	0x20001fe8
 800a800:	0800b9f0 	.word	0x0800b9f0
 800a804:	0800a945 	.word	0x0800a945
 800a808:	20001fec 	.word	0x20001fec

0800a80c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	@ 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xTimerGenericCommand+0x30>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	623b      	str	r3, [r7, #32]
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a83c:	4b19      	ldr	r3, [pc, #100]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d02a      	beq.n	800a89a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b05      	cmp	r3, #5
 800a854:	dc18      	bgt.n	800a888 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a856:	f7ff fd95 	bl	800a384 <xTaskGetSchedulerState>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d109      	bne.n	800a874 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a860:	4b10      	ldr	r3, [pc, #64]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	f107 0110 	add.w	r1, r7, #16
 800a868:	2300      	movs	r3, #0
 800a86a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a86c:	f7fe f894 	bl	8008998 <xQueueGenericSend>
 800a870:	6278      	str	r0, [r7, #36]	@ 0x24
 800a872:	e012      	b.n	800a89a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a874:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	f107 0110 	add.w	r1, r7, #16
 800a87c:	2300      	movs	r3, #0
 800a87e:	2200      	movs	r2, #0
 800a880:	f7fe f88a 	bl	8008998 <xQueueGenericSend>
 800a884:	6278      	str	r0, [r7, #36]	@ 0x24
 800a886:	e008      	b.n	800a89a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a888:	4b06      	ldr	r3, [pc, #24]	@ (800a8a4 <xTimerGenericCommand+0x98>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	f107 0110 	add.w	r1, r7, #16
 800a890:	2300      	movs	r3, #0
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	f7fe f982 	bl	8008b9c <xQueueGenericSendFromISR>
 800a898:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3728      	adds	r7, #40	@ 0x28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	20001fe8 	.word	0x20001fe8

0800a8a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b2:	4b23      	ldr	r3, [pc, #140]	@ (800a940 <prvProcessExpiredTimer+0x98>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fd fe41 	bl	8008548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d023      	beq.n	800a91c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	18d1      	adds	r1, r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	6978      	ldr	r0, [r7, #20]
 800a8e2:	f000 f8d5 	bl	800aa90 <prvInsertTimerInActiveList>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d020      	beq.n	800a92e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6978      	ldr	r0, [r7, #20]
 800a8f8:	f7ff ff88 	bl	800a80c <xTimerGenericCommand>
 800a8fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d114      	bne.n	800a92e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60fb      	str	r3, [r7, #12]
}
 800a916:	bf00      	nop
 800a918:	bf00      	nop
 800a91a:	e7fd      	b.n	800a918 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	4798      	blx	r3
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20001fe0 	.word	0x20001fe0

0800a944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a94c:	f107 0308 	add.w	r3, r7, #8
 800a950:	4618      	mov	r0, r3
 800a952:	f000 f859 	bl	800aa08 <prvGetNextExpireTime>
 800a956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f805 	bl	800a96c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a962:	f000 f8d7 	bl	800ab14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a966:	bf00      	nop
 800a968:	e7f0      	b.n	800a94c <prvTimerTask+0x8>
	...

0800a96c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a976:	f7ff f84f 	bl	8009a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f866 	bl	800aa50 <prvSampleTimeNow>
 800a984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d130      	bne.n	800a9ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	429a      	cmp	r2, r3
 800a998:	d806      	bhi.n	800a9a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a99a:	f7ff f84b 	bl	8009a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ff81 	bl	800a8a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9a6:	e024      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ae:	4b13      	ldr	r3, [pc, #76]	@ (800a9fc <prvProcessTimerOrBlockTask+0x90>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <prvProcessTimerOrBlockTask+0x50>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <prvProcessTimerOrBlockTask+0x52>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa00 <prvProcessTimerOrBlockTask+0x94>)
 800a9c2:	6818      	ldr	r0, [r3, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f7fe fcc7 	bl	8009360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9d2:	f7ff f82f 	bl	8009a34 <xTaskResumeAll>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9dc:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <prvProcessTimerOrBlockTask+0x98>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	f3bf 8f6f 	isb	sy
}
 800a9ec:	e001      	b.n	800a9f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a9ee:	f7ff f821 	bl	8009a34 <xTaskResumeAll>
}
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20001fe4 	.word	0x20001fe4
 800aa00:	20001fe8 	.word	0x20001fe8
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa10:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <prvGetNextExpireTime+0x44>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <prvGetNextExpireTime+0x16>
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	e000      	b.n	800aa20 <prvGetNextExpireTime+0x18>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa2c:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <prvGetNextExpireTime+0x44>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	e001      	b.n	800aa3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20001fe0 	.word	0x20001fe0

0800aa50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa58:	f7ff f88a 	bl	8009b70 <xTaskGetTickCount>
 800aa5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa8c <prvSampleTimeNow+0x3c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d205      	bcs.n	800aa74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa68:	f000 f93a 	bl	800ace0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa7a:	4a04      	ldr	r2, [pc, #16]	@ (800aa8c <prvSampleTimeNow+0x3c>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20001ff0 	.word	0x20001ff0

0800aa90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d812      	bhi.n	800aadc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	1ad2      	subs	r2, r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d302      	bcc.n	800aaca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aac4:	2301      	movs	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	e01b      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaca:	4b10      	ldr	r3, [pc, #64]	@ (800ab0c <prvInsertTimerInActiveList+0x7c>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f7fd fcfe 	bl	80084d6 <vListInsert>
 800aada:	e012      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d206      	bcs.n	800aaf2 <prvInsertTimerInActiveList+0x62>
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d302      	bcc.n	800aaf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aaec:	2301      	movs	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
 800aaf0:	e007      	b.n	800ab02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf2:	4b07      	ldr	r3, [pc, #28]	@ (800ab10 <prvInsertTimerInActiveList+0x80>)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7fd fcea 	bl	80084d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab02:	697b      	ldr	r3, [r7, #20]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20001fe4 	.word	0x20001fe4
 800ab10:	20001fe0 	.word	0x20001fe0

0800ab14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	@ 0x38
 800ab18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab1a:	e0ce      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	da19      	bge.n	800ab56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab22:	1d3b      	adds	r3, r7, #4
 800ab24:	3304      	adds	r3, #4
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61fb      	str	r3, [r7, #28]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab4c:	6850      	ldr	r0, [r2, #4]
 800ab4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab50:	6892      	ldr	r2, [r2, #8]
 800ab52:	4611      	mov	r1, r2
 800ab54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f2c0 80ae 	blt.w	800acba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fcea 	bl	8008548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab74:	463b      	mov	r3, r7
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff ff6a 	bl	800aa50 <prvSampleTimeNow>
 800ab7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	f200 8097 	bhi.w	800acb4 <prvProcessReceivedCommands+0x1a0>
 800ab86:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <prvProcessReceivedCommands+0x78>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800ac2b 	.word	0x0800ac2b
 800ab9c:	0800ac3f 	.word	0x0800ac3f
 800aba0:	0800ac8b 	.word	0x0800ac8b
 800aba4:	0800abb5 	.word	0x0800abb5
 800aba8:	0800abb5 	.word	0x0800abb5
 800abac:	0800ac2b 	.word	0x0800ac2b
 800abb0:	0800ac3f 	.word	0x0800ac3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	18d1      	adds	r1, r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd4:	f7ff ff5c 	bl	800aa90 <prvInsertTimerInActiveList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d06c      	beq.n	800acb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d061      	beq.n	800acb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	441a      	add	r2, r3
 800abfc:	2300      	movs	r3, #0
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	2100      	movs	r1, #0
 800ac04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac06:	f7ff fe01 	bl	800a80c <xTimerGenericCommand>
 800ac0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d152      	bne.n	800acb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	61bb      	str	r3, [r7, #24]
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	e7fd      	b.n	800ac26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac30:	f023 0301 	bic.w	r3, r3, #1
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac3c:	e03d      	b.n	800acba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617b      	str	r3, [r7, #20]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	18d1      	adds	r1, r2, r3
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac84:	f7ff ff04 	bl	800aa90 <prvInsertTimerInActiveList>
					break;
 800ac88:	e017      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ac98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac9a:	f000 fc05 	bl	800b4a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac9e:	e00c      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aca6:	f023 0301 	bic.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acb2:	e002      	b.n	800acba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <prvProcessReceivedCommands+0x1a6>
					break;
 800acb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acba:	4b08      	ldr	r3, [pc, #32]	@ (800acdc <prvProcessReceivedCommands+0x1c8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	1d39      	adds	r1, r7, #4
 800acc0:	2200      	movs	r2, #0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe f808 	bl	8008cd8 <xQueueReceive>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f47f af26 	bne.w	800ab1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	3730      	adds	r7, #48	@ 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20001fe8 	.word	0x20001fe8

0800ace0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ace6:	e049      	b.n	800ad7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ace8:	4b2e      	ldr	r3, [pc, #184]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf2:	4b2c      	ldr	r3, [pc, #176]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd fc21 	bl	8008548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02f      	beq.n	800ad7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	4413      	add	r3, r2
 800ad24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d90e      	bls.n	800ad4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad3a:	4b1a      	ldr	r3, [pc, #104]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4619      	mov	r1, r3
 800ad44:	4610      	mov	r0, r2
 800ad46:	f7fd fbc6 	bl	80084d6 <vListInsert>
 800ad4a:	e017      	b.n	800ad7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	2300      	movs	r3, #0
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	2100      	movs	r1, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7ff fd58 	bl	800a80c <xTimerGenericCommand>
 800ad5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	603b      	str	r3, [r7, #0]
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	e7fd      	b.n	800ad78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad7c:	4b09      	ldr	r3, [pc, #36]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1b0      	bne.n	800ace8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad86:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad8c:	4b06      	ldr	r3, [pc, #24]	@ (800ada8 <prvSwitchTimerLists+0xc8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a04      	ldr	r2, [pc, #16]	@ (800ada4 <prvSwitchTimerLists+0xc4>)
 800ad92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad94:	4a04      	ldr	r2, [pc, #16]	@ (800ada8 <prvSwitchTimerLists+0xc8>)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	6013      	str	r3, [r2, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20001fe0 	.word	0x20001fe0
 800ada8:	20001fe4 	.word	0x20001fe4

0800adac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adb2:	f000 f989 	bl	800b0c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adb6:	4b15      	ldr	r3, [pc, #84]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d120      	bne.n	800ae00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adbe:	4814      	ldr	r0, [pc, #80]	@ (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adc0:	f7fd fb38 	bl	8008434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adc4:	4813      	ldr	r0, [pc, #76]	@ (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800adc6:	f7fd fb35 	bl	8008434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adca:	4b13      	ldr	r3, [pc, #76]	@ (800ae18 <prvCheckForValidListAndQueue+0x6c>)
 800adcc:	4a10      	ldr	r2, [pc, #64]	@ (800ae10 <prvCheckForValidListAndQueue+0x64>)
 800adce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800add0:	4b12      	ldr	r3, [pc, #72]	@ (800ae1c <prvCheckForValidListAndQueue+0x70>)
 800add2:	4a10      	ldr	r2, [pc, #64]	@ (800ae14 <prvCheckForValidListAndQueue+0x68>)
 800add4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800add6:	2300      	movs	r3, #0
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4b11      	ldr	r3, [pc, #68]	@ (800ae20 <prvCheckForValidListAndQueue+0x74>)
 800addc:	4a11      	ldr	r2, [pc, #68]	@ (800ae24 <prvCheckForValidListAndQueue+0x78>)
 800adde:	2110      	movs	r1, #16
 800ade0:	200a      	movs	r0, #10
 800ade2:	f7fd fc45 	bl	8008670 <xQueueGenericCreateStatic>
 800ade6:	4603      	mov	r3, r0
 800ade8:	4a08      	ldr	r2, [pc, #32]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adec:	4b07      	ldr	r3, [pc, #28]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adf4:	4b05      	ldr	r3, [pc, #20]	@ (800ae0c <prvCheckForValidListAndQueue+0x60>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	490b      	ldr	r1, [pc, #44]	@ (800ae28 <prvCheckForValidListAndQueue+0x7c>)
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fa86 	bl	800930c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae00:	f000 f994 	bl	800b12c <vPortExitCritical>
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20001fe8 	.word	0x20001fe8
 800ae10:	20001fb8 	.word	0x20001fb8
 800ae14:	20001fcc 	.word	0x20001fcc
 800ae18:	20001fe0 	.word	0x20001fe0
 800ae1c:	20001fe4 	.word	0x20001fe4
 800ae20:	20002094 	.word	0x20002094
 800ae24:	20001ff4 	.word	0x20001ff4
 800ae28:	0800b9f8 	.word	0x0800b9f8

0800ae2c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08a      	sub	sp, #40	@ 0x28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ae3a:	f06f 0301 	mvn.w	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae4c:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <xTimerPendFunctionCallFromISR+0x3c>)
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	f107 0114 	add.w	r1, r7, #20
 800ae54:	2300      	movs	r3, #0
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	f7fd fea0 	bl	8008b9c <xQueueGenericSendFromISR>
 800ae5c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3728      	adds	r7, #40	@ 0x28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20001fe8 	.word	0x20001fe8

0800ae6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3b04      	subs	r3, #4
 800ae7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	f023 0201 	bic.w	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3b04      	subs	r3, #4
 800ae9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae9c:	4a0c      	ldr	r2, [pc, #48]	@ (800aed0 <pxPortInitialiseStack+0x64>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3b14      	subs	r3, #20
 800aea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3b04      	subs	r3, #4
 800aeb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f06f 0202 	mvn.w	r2, #2
 800aeba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3b20      	subs	r3, #32
 800aec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aec2:	68fb      	ldr	r3, [r7, #12]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	0800aed5 	.word	0x0800aed5

0800aed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aede:	4b13      	ldr	r3, [pc, #76]	@ (800af2c <prvTaskExitError+0x58>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee6:	d00b      	beq.n	800af00 <prvTaskExitError+0x2c>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	60fb      	str	r3, [r7, #12]
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	e7fd      	b.n	800aefc <prvTaskExitError+0x28>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60bb      	str	r3, [r7, #8]
}
 800af12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af14:	bf00      	nop
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0fc      	beq.n	800af16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	200002b4 	.word	0x200002b4

0800af30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af30:	4b07      	ldr	r3, [pc, #28]	@ (800af50 <pxCurrentTCBConst2>)
 800af32:	6819      	ldr	r1, [r3, #0]
 800af34:	6808      	ldr	r0, [r1, #0]
 800af36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3a:	f380 8809 	msr	PSP, r0
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f04f 0000 	mov.w	r0, #0
 800af46:	f380 8811 	msr	BASEPRI, r0
 800af4a:	4770      	bx	lr
 800af4c:	f3af 8000 	nop.w

0800af50 <pxCurrentTCBConst2>:
 800af50:	20001ab0 	.word	0x20001ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop

0800af58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af58:	4808      	ldr	r0, [pc, #32]	@ (800af7c <prvPortStartFirstTask+0x24>)
 800af5a:	6800      	ldr	r0, [r0, #0]
 800af5c:	6800      	ldr	r0, [r0, #0]
 800af5e:	f380 8808 	msr	MSP, r0
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8814 	msr	CONTROL, r0
 800af6a:	b662      	cpsie	i
 800af6c:	b661      	cpsie	f
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	df00      	svc	0
 800af78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af7a:	bf00      	nop
 800af7c:	e000ed08 	.word	0xe000ed08

0800af80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af86:	4b47      	ldr	r3, [pc, #284]	@ (800b0a4 <xPortStartScheduler+0x124>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a47      	ldr	r2, [pc, #284]	@ (800b0a8 <xPortStartScheduler+0x128>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d10b      	bne.n	800afa8 <xPortStartScheduler+0x28>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	613b      	str	r3, [r7, #16]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afa8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0a4 <xPortStartScheduler+0x124>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a3f      	ldr	r2, [pc, #252]	@ (800b0ac <xPortStartScheduler+0x12c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d10b      	bne.n	800afca <xPortStartScheduler+0x4a>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	60fb      	str	r3, [r7, #12]
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	e7fd      	b.n	800afc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afca:	4b39      	ldr	r3, [pc, #228]	@ (800b0b0 <xPortStartScheduler+0x130>)
 800afcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	22ff      	movs	r2, #255	@ 0xff
 800afda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afec:	b2da      	uxtb	r2, r3
 800afee:	4b31      	ldr	r3, [pc, #196]	@ (800b0b4 <xPortStartScheduler+0x134>)
 800aff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aff2:	4b31      	ldr	r3, [pc, #196]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800aff4:	2207      	movs	r2, #7
 800aff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aff8:	e009      	b.n	800b00e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800affa:	4b2f      	ldr	r3, [pc, #188]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	4a2d      	ldr	r2, [pc, #180]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b00e:	78fb      	ldrb	r3, [r7, #3]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b016:	2b80      	cmp	r3, #128	@ 0x80
 800b018:	d0ef      	beq.n	800affa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b01a:	4b27      	ldr	r3, [pc, #156]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1c3 0307 	rsb	r3, r3, #7
 800b022:	2b04      	cmp	r3, #4
 800b024:	d00b      	beq.n	800b03e <xPortStartScheduler+0xbe>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	60bb      	str	r3, [r7, #8]
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	e7fd      	b.n	800b03a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b03e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	4a1c      	ldr	r2, [pc, #112]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b048:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b050:	4a19      	ldr	r2, [pc, #100]	@ (800b0b8 <xPortStartScheduler+0x138>)
 800b052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b05c:	4b17      	ldr	r3, [pc, #92]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a16      	ldr	r2, [pc, #88]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b068:	4b14      	ldr	r3, [pc, #80]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a13      	ldr	r2, [pc, #76]	@ (800b0bc <xPortStartScheduler+0x13c>)
 800b06e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b074:	f000 f8da 	bl	800b22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b078:	4b11      	ldr	r3, [pc, #68]	@ (800b0c0 <xPortStartScheduler+0x140>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b07e:	f000 f8f9 	bl	800b274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <xPortStartScheduler+0x144>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a0f      	ldr	r2, [pc, #60]	@ (800b0c4 <xPortStartScheduler+0x144>)
 800b088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b08c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b08e:	f7ff ff63 	bl	800af58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b092:	f7fe fe37 	bl	8009d04 <vTaskSwitchContext>
	prvTaskExitError();
 800b096:	f7ff ff1d 	bl	800aed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	e000ed00 	.word	0xe000ed00
 800b0a8:	410fc271 	.word	0x410fc271
 800b0ac:	410fc270 	.word	0x410fc270
 800b0b0:	e000e400 	.word	0xe000e400
 800b0b4:	200020e4 	.word	0x200020e4
 800b0b8:	200020e8 	.word	0x200020e8
 800b0bc:	e000ed20 	.word	0xe000ed20
 800b0c0:	200002b4 	.word	0x200002b4
 800b0c4:	e000ef34 	.word	0xe000ef34

0800b0c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	607b      	str	r3, [r7, #4]
}
 800b0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <vPortEnterCritical+0x5c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d110      	bne.n	800b116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <vPortEnterCritical+0x60>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00b      	beq.n	800b116 <vPortEnterCritical+0x4e>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	603b      	str	r3, [r7, #0]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <vPortEnterCritical+0x4a>
	}
}
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	200002b4 	.word	0x200002b4
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b132:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <vPortExitCritical+0x50>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10b      	bne.n	800b152 <vPortExitCritical+0x26>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	607b      	str	r3, [r7, #4]
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	e7fd      	b.n	800b14e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b152:	4b0a      	ldr	r3, [pc, #40]	@ (800b17c <vPortExitCritical+0x50>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3b01      	subs	r3, #1
 800b158:	4a08      	ldr	r2, [pc, #32]	@ (800b17c <vPortExitCritical+0x50>)
 800b15a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b15c:	4b07      	ldr	r3, [pc, #28]	@ (800b17c <vPortExitCritical+0x50>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <vPortExitCritical+0x44>
 800b164:	2300      	movs	r3, #0
 800b166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f383 8811 	msr	BASEPRI, r3
}
 800b16e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	200002b4 	.word	0x200002b4

0800b180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b180:	f3ef 8009 	mrs	r0, PSP
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	4b15      	ldr	r3, [pc, #84]	@ (800b1e0 <pxCurrentTCBConst>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	f01e 0f10 	tst.w	lr, #16
 800b190:	bf08      	it	eq
 800b192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	6010      	str	r0, [r2, #0]
 800b19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b1a4:	f380 8811 	msr	BASEPRI, r0
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f7fe fda8 	bl	8009d04 <vTaskSwitchContext>
 800b1b4:	f04f 0000 	mov.w	r0, #0
 800b1b8:	f380 8811 	msr	BASEPRI, r0
 800b1bc:	bc09      	pop	{r0, r3}
 800b1be:	6819      	ldr	r1, [r3, #0]
 800b1c0:	6808      	ldr	r0, [r1, #0]
 800b1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c6:	f01e 0f10 	tst.w	lr, #16
 800b1ca:	bf08      	it	eq
 800b1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1d0:	f380 8809 	msr	PSP, r0
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	f3af 8000 	nop.w

0800b1e0 <pxCurrentTCBConst>:
 800b1e0:	20001ab0 	.word	0x20001ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop

0800b1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	607b      	str	r3, [r7, #4]
}
 800b200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b202:	f7fe fcc5 	bl	8009b90 <xTaskIncrementTick>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <xPortSysTickHandler+0x40>)
 800b20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	2300      	movs	r3, #0
 800b216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f383 8811 	msr	BASEPRI, r3
}
 800b21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b230:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <vPortSetupTimerInterrupt+0x34>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b236:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <vPortSetupTimerInterrupt+0x38>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	@ (800b268 <vPortSetupTimerInterrupt+0x3c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0a      	ldr	r2, [pc, #40]	@ (800b26c <vPortSetupTimerInterrupt+0x40>)
 800b242:	fba2 2303 	umull	r2, r3, r2, r3
 800b246:	099b      	lsrs	r3, r3, #6
 800b248:	4a09      	ldr	r2, [pc, #36]	@ (800b270 <vPortSetupTimerInterrupt+0x44>)
 800b24a:	3b01      	subs	r3, #1
 800b24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b24e:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <vPortSetupTimerInterrupt+0x34>)
 800b250:	2207      	movs	r2, #7
 800b252:	601a      	str	r2, [r3, #0]
}
 800b254:	bf00      	nop
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	e000e010 	.word	0xe000e010
 800b264:	e000e018 	.word	0xe000e018
 800b268:	200002a8 	.word	0x200002a8
 800b26c:	10624dd3 	.word	0x10624dd3
 800b270:	e000e014 	.word	0xe000e014

0800b274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b284 <vPortEnableVFP+0x10>
 800b278:	6801      	ldr	r1, [r0, #0]
 800b27a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b27e:	6001      	str	r1, [r0, #0]
 800b280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b282:	bf00      	nop
 800b284:	e000ed88 	.word	0xe000ed88

0800b288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b28e:	f3ef 8305 	mrs	r3, IPSR
 800b292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b0f      	cmp	r3, #15
 800b298:	d915      	bls.n	800b2c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b29a:	4a18      	ldr	r2, [pc, #96]	@ (800b2fc <vPortValidateInterruptPriority+0x74>)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2a4:	4b16      	ldr	r3, [pc, #88]	@ (800b300 <vPortValidateInterruptPriority+0x78>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	7afa      	ldrb	r2, [r7, #11]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d20b      	bcs.n	800b2c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b304 <vPortValidateInterruptPriority+0x7c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b308 <vPortValidateInterruptPriority+0x80>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d90b      	bls.n	800b2ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	603b      	str	r3, [r7, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <vPortValidateInterruptPriority+0x62>
	}
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	e000e3f0 	.word	0xe000e3f0
 800b300:	200020e4 	.word	0x200020e4
 800b304:	e000ed0c 	.word	0xe000ed0c
 800b308:	200020e8 	.word	0x200020e8

0800b30c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	@ 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b318:	f7fe fb7e 	bl	8009a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b31c:	4b5c      	ldr	r3, [pc, #368]	@ (800b490 <pvPortMalloc+0x184>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b324:	f000 f924 	bl	800b570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b328:	4b5a      	ldr	r3, [pc, #360]	@ (800b494 <pvPortMalloc+0x188>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4013      	ands	r3, r2
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 8095 	bne.w	800b460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01e      	beq.n	800b37a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b33c:	2208      	movs	r2, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4413      	add	r3, r2
 800b342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d015      	beq.n	800b37a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f023 0307 	bic.w	r3, r3, #7
 800b354:	3308      	adds	r3, #8
 800b356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <pvPortMalloc+0x6e>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	617b      	str	r3, [r7, #20]
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop
 800b378:	e7fd      	b.n	800b376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d06f      	beq.n	800b460 <pvPortMalloc+0x154>
 800b380:	4b45      	ldr	r3, [pc, #276]	@ (800b498 <pvPortMalloc+0x18c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d86a      	bhi.n	800b460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b38a:	4b44      	ldr	r3, [pc, #272]	@ (800b49c <pvPortMalloc+0x190>)
 800b38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b38e:	4b43      	ldr	r3, [pc, #268]	@ (800b49c <pvPortMalloc+0x190>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b394:	e004      	b.n	800b3a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d903      	bls.n	800b3b2 <pvPortMalloc+0xa6>
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f1      	bne.n	800b396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3b2:	4b37      	ldr	r3, [pc, #220]	@ (800b490 <pvPortMalloc+0x184>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d051      	beq.n	800b460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4413      	add	r3, r2
 800b3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	1ad2      	subs	r2, r2, r3
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d920      	bls.n	800b420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <pvPortMalloc+0xfc>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
}
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	e7fd      	b.n	800b404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b41a:	69b8      	ldr	r0, [r7, #24]
 800b41c:	f000 f90a 	bl	800b634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b420:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <pvPortMalloc+0x18c>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	4a1b      	ldr	r2, [pc, #108]	@ (800b498 <pvPortMalloc+0x18c>)
 800b42c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b42e:	4b1a      	ldr	r3, [pc, #104]	@ (800b498 <pvPortMalloc+0x18c>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a0 <pvPortMalloc+0x194>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d203      	bcs.n	800b442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b43a:	4b17      	ldr	r3, [pc, #92]	@ (800b498 <pvPortMalloc+0x18c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a18      	ldr	r2, [pc, #96]	@ (800b4a0 <pvPortMalloc+0x194>)
 800b440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	4b13      	ldr	r3, [pc, #76]	@ (800b494 <pvPortMalloc+0x188>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b456:	4b13      	ldr	r3, [pc, #76]	@ (800b4a4 <pvPortMalloc+0x198>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	4a11      	ldr	r2, [pc, #68]	@ (800b4a4 <pvPortMalloc+0x198>)
 800b45e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b460:	f7fe fae8 	bl	8009a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00b      	beq.n	800b486 <pvPortMalloc+0x17a>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	60fb      	str	r3, [r7, #12]
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	e7fd      	b.n	800b482 <pvPortMalloc+0x176>
	return pvReturn;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3728      	adds	r7, #40	@ 0x28
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20005cf4 	.word	0x20005cf4
 800b494:	20005d08 	.word	0x20005d08
 800b498:	20005cf8 	.word	0x20005cf8
 800b49c:	20005cec 	.word	0x20005cec
 800b4a0:	20005cfc 	.word	0x20005cfc
 800b4a4:	20005d00 	.word	0x20005d00

0800b4a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d04f      	beq.n	800b55a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	425b      	negs	r3, r3
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	4b25      	ldr	r3, [pc, #148]	@ (800b564 <vPortFree+0xbc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <vPortFree+0x46>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	60fb      	str	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	e7fd      	b.n	800b4ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00b      	beq.n	800b50e <vPortFree+0x66>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60bb      	str	r3, [r7, #8]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	4b14      	ldr	r3, [pc, #80]	@ (800b564 <vPortFree+0xbc>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4013      	ands	r3, r2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01e      	beq.n	800b55a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11a      	bne.n	800b55a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <vPortFree+0xbc>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	43db      	mvns	r3, r3
 800b52e:	401a      	ands	r2, r3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b534:	f7fe fa70 	bl	8009a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	4b0a      	ldr	r3, [pc, #40]	@ (800b568 <vPortFree+0xc0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4413      	add	r3, r2
 800b542:	4a09      	ldr	r2, [pc, #36]	@ (800b568 <vPortFree+0xc0>)
 800b544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b546:	6938      	ldr	r0, [r7, #16]
 800b548:	f000 f874 	bl	800b634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b54c:	4b07      	ldr	r3, [pc, #28]	@ (800b56c <vPortFree+0xc4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	4a06      	ldr	r2, [pc, #24]	@ (800b56c <vPortFree+0xc4>)
 800b554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b556:	f7fe fa6d 	bl	8009a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b55a:	bf00      	nop
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20005d08 	.word	0x20005d08
 800b568:	20005cf8 	.word	0x20005cf8
 800b56c:	20005d04 	.word	0x20005d04

0800b570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b57a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b57c:	4b27      	ldr	r3, [pc, #156]	@ (800b61c <prvHeapInit+0xac>)
 800b57e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00c      	beq.n	800b5a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3307      	adds	r3, #7
 800b58e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0307 	bic.w	r3, r3, #7
 800b596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	4a1f      	ldr	r2, [pc, #124]	@ (800b61c <prvHeapInit+0xac>)
 800b5a0:	4413      	add	r3, r2
 800b5a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b620 <prvHeapInit+0xb0>)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b620 <prvHeapInit+0xb0>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5bc:	2208      	movs	r2, #8
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <prvHeapInit+0xb4>)
 800b5d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5d2:	4b14      	ldr	r3, [pc, #80]	@ (800b624 <prvHeapInit+0xb4>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5da:	4b12      	ldr	r3, [pc, #72]	@ (800b624 <prvHeapInit+0xb4>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b624 <prvHeapInit+0xb4>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800b628 <prvHeapInit+0xb8>)
 800b5fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4a09      	ldr	r2, [pc, #36]	@ (800b62c <prvHeapInit+0xbc>)
 800b606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b608:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <prvHeapInit+0xc0>)
 800b60a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	200020ec 	.word	0x200020ec
 800b620:	20005cec 	.word	0x20005cec
 800b624:	20005cf4 	.word	0x20005cf4
 800b628:	20005cfc 	.word	0x20005cfc
 800b62c:	20005cf8 	.word	0x20005cf8
 800b630:	20005d08 	.word	0x20005d08

0800b634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b63c:	4b28      	ldr	r3, [pc, #160]	@ (800b6e0 <prvInsertBlockIntoFreeList+0xac>)
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	e002      	b.n	800b648 <prvInsertBlockIntoFreeList+0x14>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d8f7      	bhi.n	800b642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	4413      	add	r3, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	429a      	cmp	r2, r3
 800b662:	d108      	bne.n	800b676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	441a      	add	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	441a      	add	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d118      	bne.n	800b6bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d00d      	beq.n	800b6b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	441a      	add	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e008      	b.n	800b6c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e003      	b.n	800b6c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d002      	beq.n	800b6d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20005cec 	.word	0x20005cec
 800b6e4:	20005cf4 	.word	0x20005cf4

0800b6e8 <atoi>:
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	f000 b87a 	b.w	800b7e4 <strtol>

0800b6f0 <_strtol_l.constprop.0>:
 800b6f0:	2b24      	cmp	r3, #36	@ 0x24
 800b6f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f6:	4686      	mov	lr, r0
 800b6f8:	4690      	mov	r8, r2
 800b6fa:	d801      	bhi.n	800b700 <_strtol_l.constprop.0+0x10>
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d106      	bne.n	800b70e <_strtol_l.constprop.0+0x1e>
 800b700:	f000 f882 	bl	800b808 <__errno>
 800b704:	2316      	movs	r3, #22
 800b706:	6003      	str	r3, [r0, #0]
 800b708:	2000      	movs	r0, #0
 800b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70e:	4834      	ldr	r0, [pc, #208]	@ (800b7e0 <_strtol_l.constprop.0+0xf0>)
 800b710:	460d      	mov	r5, r1
 800b712:	462a      	mov	r2, r5
 800b714:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b718:	5d06      	ldrb	r6, [r0, r4]
 800b71a:	f016 0608 	ands.w	r6, r6, #8
 800b71e:	d1f8      	bne.n	800b712 <_strtol_l.constprop.0+0x22>
 800b720:	2c2d      	cmp	r4, #45	@ 0x2d
 800b722:	d12d      	bne.n	800b780 <_strtol_l.constprop.0+0x90>
 800b724:	782c      	ldrb	r4, [r5, #0]
 800b726:	2601      	movs	r6, #1
 800b728:	1c95      	adds	r5, r2, #2
 800b72a:	f033 0210 	bics.w	r2, r3, #16
 800b72e:	d109      	bne.n	800b744 <_strtol_l.constprop.0+0x54>
 800b730:	2c30      	cmp	r4, #48	@ 0x30
 800b732:	d12a      	bne.n	800b78a <_strtol_l.constprop.0+0x9a>
 800b734:	782a      	ldrb	r2, [r5, #0]
 800b736:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b73a:	2a58      	cmp	r2, #88	@ 0x58
 800b73c:	d125      	bne.n	800b78a <_strtol_l.constprop.0+0x9a>
 800b73e:	786c      	ldrb	r4, [r5, #1]
 800b740:	2310      	movs	r3, #16
 800b742:	3502      	adds	r5, #2
 800b744:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b748:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b74c:	2200      	movs	r2, #0
 800b74e:	fbbc f9f3 	udiv	r9, ip, r3
 800b752:	4610      	mov	r0, r2
 800b754:	fb03 ca19 	mls	sl, r3, r9, ip
 800b758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b75c:	2f09      	cmp	r7, #9
 800b75e:	d81b      	bhi.n	800b798 <_strtol_l.constprop.0+0xa8>
 800b760:	463c      	mov	r4, r7
 800b762:	42a3      	cmp	r3, r4
 800b764:	dd27      	ble.n	800b7b6 <_strtol_l.constprop.0+0xc6>
 800b766:	1c57      	adds	r7, r2, #1
 800b768:	d007      	beq.n	800b77a <_strtol_l.constprop.0+0x8a>
 800b76a:	4581      	cmp	r9, r0
 800b76c:	d320      	bcc.n	800b7b0 <_strtol_l.constprop.0+0xc0>
 800b76e:	d101      	bne.n	800b774 <_strtol_l.constprop.0+0x84>
 800b770:	45a2      	cmp	sl, r4
 800b772:	db1d      	blt.n	800b7b0 <_strtol_l.constprop.0+0xc0>
 800b774:	fb00 4003 	mla	r0, r0, r3, r4
 800b778:	2201      	movs	r2, #1
 800b77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b77e:	e7eb      	b.n	800b758 <_strtol_l.constprop.0+0x68>
 800b780:	2c2b      	cmp	r4, #43	@ 0x2b
 800b782:	bf04      	itt	eq
 800b784:	782c      	ldrbeq	r4, [r5, #0]
 800b786:	1c95      	addeq	r5, r2, #2
 800b788:	e7cf      	b.n	800b72a <_strtol_l.constprop.0+0x3a>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1da      	bne.n	800b744 <_strtol_l.constprop.0+0x54>
 800b78e:	2c30      	cmp	r4, #48	@ 0x30
 800b790:	bf0c      	ite	eq
 800b792:	2308      	moveq	r3, #8
 800b794:	230a      	movne	r3, #10
 800b796:	e7d5      	b.n	800b744 <_strtol_l.constprop.0+0x54>
 800b798:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b79c:	2f19      	cmp	r7, #25
 800b79e:	d801      	bhi.n	800b7a4 <_strtol_l.constprop.0+0xb4>
 800b7a0:	3c37      	subs	r4, #55	@ 0x37
 800b7a2:	e7de      	b.n	800b762 <_strtol_l.constprop.0+0x72>
 800b7a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7a8:	2f19      	cmp	r7, #25
 800b7aa:	d804      	bhi.n	800b7b6 <_strtol_l.constprop.0+0xc6>
 800b7ac:	3c57      	subs	r4, #87	@ 0x57
 800b7ae:	e7d8      	b.n	800b762 <_strtol_l.constprop.0+0x72>
 800b7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b4:	e7e1      	b.n	800b77a <_strtol_l.constprop.0+0x8a>
 800b7b6:	1c53      	adds	r3, r2, #1
 800b7b8:	d108      	bne.n	800b7cc <_strtol_l.constprop.0+0xdc>
 800b7ba:	2322      	movs	r3, #34	@ 0x22
 800b7bc:	f8ce 3000 	str.w	r3, [lr]
 800b7c0:	4660      	mov	r0, ip
 800b7c2:	f1b8 0f00 	cmp.w	r8, #0
 800b7c6:	d0a0      	beq.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7c8:	1e69      	subs	r1, r5, #1
 800b7ca:	e006      	b.n	800b7da <_strtol_l.constprop.0+0xea>
 800b7cc:	b106      	cbz	r6, 800b7d0 <_strtol_l.constprop.0+0xe0>
 800b7ce:	4240      	negs	r0, r0
 800b7d0:	f1b8 0f00 	cmp.w	r8, #0
 800b7d4:	d099      	beq.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d1f6      	bne.n	800b7c8 <_strtol_l.constprop.0+0xd8>
 800b7da:	f8c8 1000 	str.w	r1, [r8]
 800b7de:	e794      	b.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7e0:	0800c325 	.word	0x0800c325

0800b7e4 <strtol>:
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	460a      	mov	r2, r1
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	4802      	ldr	r0, [pc, #8]	@ (800b7f4 <strtol+0x10>)
 800b7ec:	6800      	ldr	r0, [r0, #0]
 800b7ee:	f7ff bf7f 	b.w	800b6f0 <_strtol_l.constprop.0>
 800b7f2:	bf00      	nop
 800b7f4:	200002b8 	.word	0x200002b8

0800b7f8 <memset>:
 800b7f8:	4402      	add	r2, r0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d100      	bne.n	800b802 <memset+0xa>
 800b800:	4770      	bx	lr
 800b802:	f803 1b01 	strb.w	r1, [r3], #1
 800b806:	e7f9      	b.n	800b7fc <memset+0x4>

0800b808 <__errno>:
 800b808:	4b01      	ldr	r3, [pc, #4]	@ (800b810 <__errno+0x8>)
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	200002b8 	.word	0x200002b8

0800b814 <__libc_init_array>:
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	4d0d      	ldr	r5, [pc, #52]	@ (800b84c <__libc_init_array+0x38>)
 800b818:	4c0d      	ldr	r4, [pc, #52]	@ (800b850 <__libc_init_array+0x3c>)
 800b81a:	1b64      	subs	r4, r4, r5
 800b81c:	10a4      	asrs	r4, r4, #2
 800b81e:	2600      	movs	r6, #0
 800b820:	42a6      	cmp	r6, r4
 800b822:	d109      	bne.n	800b838 <__libc_init_array+0x24>
 800b824:	4d0b      	ldr	r5, [pc, #44]	@ (800b854 <__libc_init_array+0x40>)
 800b826:	4c0c      	ldr	r4, [pc, #48]	@ (800b858 <__libc_init_array+0x44>)
 800b828:	f000 f826 	bl	800b878 <_init>
 800b82c:	1b64      	subs	r4, r4, r5
 800b82e:	10a4      	asrs	r4, r4, #2
 800b830:	2600      	movs	r6, #0
 800b832:	42a6      	cmp	r6, r4
 800b834:	d105      	bne.n	800b842 <__libc_init_array+0x2e>
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	f855 3b04 	ldr.w	r3, [r5], #4
 800b83c:	4798      	blx	r3
 800b83e:	3601      	adds	r6, #1
 800b840:	e7ee      	b.n	800b820 <__libc_init_array+0xc>
 800b842:	f855 3b04 	ldr.w	r3, [r5], #4
 800b846:	4798      	blx	r3
 800b848:	3601      	adds	r6, #1
 800b84a:	e7f2      	b.n	800b832 <__libc_init_array+0x1e>
 800b84c:	0800c430 	.word	0x0800c430
 800b850:	0800c430 	.word	0x0800c430
 800b854:	0800c430 	.word	0x0800c430
 800b858:	0800c434 	.word	0x0800c434

0800b85c <memcpy>:
 800b85c:	440a      	add	r2, r1
 800b85e:	4291      	cmp	r1, r2
 800b860:	f100 33ff 	add.w	r3, r0, #4294967295
 800b864:	d100      	bne.n	800b868 <memcpy+0xc>
 800b866:	4770      	bx	lr
 800b868:	b510      	push	{r4, lr}
 800b86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b872:	4291      	cmp	r1, r2
 800b874:	d1f9      	bne.n	800b86a <memcpy+0xe>
 800b876:	bd10      	pop	{r4, pc}

0800b878 <_init>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	bf00      	nop
 800b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87e:	bc08      	pop	{r3}
 800b880:	469e      	mov	lr, r3
 800b882:	4770      	bx	lr

0800b884 <_fini>:
 800b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b886:	bf00      	nop
 800b888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88a:	bc08      	pop	{r3}
 800b88c:	469e      	mov	lr, r3
 800b88e:	4770      	bx	lr
