
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc30  0800cc30  0000e448  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc30  0800cc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc38  0800cc38  0000e448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc38  0800cc38  0000dc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc3c  0800cc3c  0000dc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  0800cc40  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b44  20000448  0800d088  0000e448  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005f8c  0800d088  0000ef8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fffd  00000000  00000000  0000e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cb  00000000  00000000  0002e475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f3  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a028  00000000  00000000  00035d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002100e  00000000  00000000  0004fdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb82  00000000  00000000  00070dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec0  00000000  00000000  0010f988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00117848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000448 	.word	0x20000448
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bff8 	.word	0x0800bff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000044c 	.word	0x2000044c
 80001dc:	0800bff8 	.word	0x0800bff8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000500:	f002 fda6 	bl	8003050 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000504:	f000 f8d6 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000508:	f000 fa3a 	bl	8000980 <MX_GPIO_Init>
	MX_DMA_Init();
 800050c:	f000 fa18 	bl	8000940 <MX_DMA_Init>
	MX_SPI1_Init();
 8000510:	f000 f966 	bl	80007e0 <MX_SPI1_Init>
	MX_TIM3_Init();
 8000514:	f000 f99a 	bl	800084c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000518:	f000 f9e8 	bl	80008ec <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800051c:	f000 f932 	bl	8000784 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000520:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000524:	493a      	ldr	r1, [pc, #232]	@ (8000610 <main+0x114>)
 8000526:	483b      	ldr	r0, [pc, #236]	@ (8000614 <main+0x118>)
 8000528:	f006 f9c3 	bl	80068b2 <HAL_UART_Receive_DMA>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800052c:	f007 fb12 	bl	8007b54 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 8000530:	4839      	ldr	r0, [pc, #228]	@ (8000618 <main+0x11c>)
 8000532:	f007 fd1a 	bl	8007f6a <osMutexNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a38      	ldr	r2, [pc, #224]	@ (800061c <main+0x120>)
 800053a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of myCountingSem01 */
	myCountingSem01Handle = osSemaphoreNew(3, 0, &myCountingSem01_attributes);
 800053c:	4a38      	ldr	r2, [pc, #224]	@ (8000620 <main+0x124>)
 800053e:	2100      	movs	r1, #0
 8000540:	2003      	movs	r0, #3
 8000542:	f007 fe20 	bl	8008186 <osSemaphoreNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a36      	ldr	r2, [pc, #216]	@ (8000624 <main+0x128>)
 800054a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800054c:	4a36      	ldr	r2, [pc, #216]	@ (8000628 <main+0x12c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4836      	ldr	r0, [pc, #216]	@ (800062c <main+0x130>)
 8000552:	f007 fb49 	bl	8007be8 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a35      	ldr	r2, [pc, #212]	@ (8000630 <main+0x134>)
 800055a:	6013      	str	r3, [r2, #0]

	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 800055c:	4a35      	ldr	r2, [pc, #212]	@ (8000634 <main+0x138>)
 800055e:	2100      	movs	r1, #0
 8000560:	4835      	ldr	r0, [pc, #212]	@ (8000638 <main+0x13c>)
 8000562:	f007 fb41 	bl	8007be8 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a34      	ldr	r2, [pc, #208]	@ (800063c <main+0x140>)
 800056a:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 800056c:	4a34      	ldr	r2, [pc, #208]	@ (8000640 <main+0x144>)
 800056e:	2100      	movs	r1, #0
 8000570:	4834      	ldr	r0, [pc, #208]	@ (8000644 <main+0x148>)
 8000572:	f007 fb39 	bl	8007be8 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a33      	ldr	r2, [pc, #204]	@ (8000648 <main+0x14c>)
 800057a:	6013      	str	r3, [r2, #0]

	/* creation of Local_Task */
	Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 800057c:	4a33      	ldr	r2, [pc, #204]	@ (800064c <main+0x150>)
 800057e:	2100      	movs	r1, #0
 8000580:	4833      	ldr	r0, [pc, #204]	@ (8000650 <main+0x154>)
 8000582:	f007 fb31 	bl	8007be8 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a32      	ldr	r2, [pc, #200]	@ (8000654 <main+0x158>)
 800058a:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 800058c:	4a32      	ldr	r2, [pc, #200]	@ (8000658 <main+0x15c>)
 800058e:	2100      	movs	r1, #0
 8000590:	4832      	ldr	r0, [pc, #200]	@ (800065c <main+0x160>)
 8000592:	f007 fb29 	bl	8007be8 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a31      	ldr	r2, [pc, #196]	@ (8000660 <main+0x164>)
 800059a:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 800059c:	4a31      	ldr	r2, [pc, #196]	@ (8000664 <main+0x168>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4831      	ldr	r0, [pc, #196]	@ (8000668 <main+0x16c>)
 80005a2:	f007 fb21 	bl	8007be8 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a30      	ldr	r2, [pc, #192]	@ (800066c <main+0x170>)
 80005aa:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 80005ac:	4a30      	ldr	r2, [pc, #192]	@ (8000670 <main+0x174>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4830      	ldr	r0, [pc, #192]	@ (8000674 <main+0x178>)
 80005b2:	f007 fb19 	bl	8007be8 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000678 <main+0x17c>)
 80005ba:	6013      	str	r3, [r2, #0]

	/* creation of Receiveing */
	ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 80005bc:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <main+0x180>)
 80005be:	2100      	movs	r1, #0
 80005c0:	482f      	ldr	r0, [pc, #188]	@ (8000680 <main+0x184>)
 80005c2:	f007 fb11 	bl	8007be8 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000684 <main+0x188>)
 80005ca:	6013      	str	r3, [r2, #0]

	/* creation of FCW_Algo */
	FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000688 <main+0x18c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	482e      	ldr	r0, [pc, #184]	@ (800068c <main+0x190>)
 80005d2:	f007 fb09 	bl	8007be8 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000690 <main+0x194>)
 80005da:	6013      	str	r3, [r2, #0]

	/* creation of EEBL_Algo */
	EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000694 <main+0x198>)
 80005de:	2100      	movs	r1, #0
 80005e0:	482d      	ldr	r0, [pc, #180]	@ (8000698 <main+0x19c>)
 80005e2:	f007 fb01 	bl	8007be8 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a2c      	ldr	r2, [pc, #176]	@ (800069c <main+0x1a0>)
 80005ea:	6013      	str	r3, [r2, #0]

	/* creation of Task_LidarData */
	Task_LidarDataHandle = osThreadNew(Ask_LidarData, NULL, &Task_LidarData_attributes);
 80005ec:	4a2c      	ldr	r2, [pc, #176]	@ (80006a0 <main+0x1a4>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	482c      	ldr	r0, [pc, #176]	@ (80006a4 <main+0x1a8>)
 80005f2:	f007 faf9 	bl	8007be8 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a2b      	ldr	r2, [pc, #172]	@ (80006a8 <main+0x1ac>)
 80005fa:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005fc:	482b      	ldr	r0, [pc, #172]	@ (80006ac <main+0x1b0>)
 80005fe:	f007 fbcd 	bl	8007d9c <osEventFlagsNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a2a      	ldr	r2, [pc, #168]	@ (80006b0 <main+0x1b4>)
 8000606:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000608:	f007 fac8 	bl	8007b9c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x110>
 8000610:	20000638 	.word	0x20000638
 8000614:	20000558 	.word	0x20000558
 8000618:	0800cacc 	.word	0x0800cacc
 800061c:	2000062c 	.word	0x2000062c
 8000620:	0800cadc 	.word	0x0800cadc
 8000624:	20000630 	.word	0x20000630
 8000628:	0800c940 	.word	0x0800c940
 800062c:	08000ea1 	.word	0x08000ea1
 8000630:	20000600 	.word	0x20000600
 8000634:	0800c964 	.word	0x0800c964
 8000638:	08000eb1 	.word	0x08000eb1
 800063c:	20000604 	.word	0x20000604
 8000640:	0800c988 	.word	0x0800c988
 8000644:	08000f39 	.word	0x08000f39
 8000648:	20000608 	.word	0x20000608
 800064c:	0800c9ac 	.word	0x0800c9ac
 8000650:	08000f4d 	.word	0x08000f4d
 8000654:	2000060c 	.word	0x2000060c
 8000658:	0800c9d0 	.word	0x0800c9d0
 800065c:	08000ffd 	.word	0x08000ffd
 8000660:	20000610 	.word	0x20000610
 8000664:	0800c9f4 	.word	0x0800c9f4
 8000668:	08001119 	.word	0x08001119
 800066c:	20000614 	.word	0x20000614
 8000670:	0800ca18 	.word	0x0800ca18
 8000674:	08001245 	.word	0x08001245
 8000678:	20000618 	.word	0x20000618
 800067c:	0800ca3c 	.word	0x0800ca3c
 8000680:	0800140d 	.word	0x0800140d
 8000684:	2000061c 	.word	0x2000061c
 8000688:	0800ca60 	.word	0x0800ca60
 800068c:	08001679 	.word	0x08001679
 8000690:	20000620 	.word	0x20000620
 8000694:	0800ca84 	.word	0x0800ca84
 8000698:	080016ad 	.word	0x080016ad
 800069c:	20000624 	.word	0x20000624
 80006a0:	0800caa8 	.word	0x0800caa8
 80006a4:	08001729 	.word	0x08001729
 80006a8:	20000628 	.word	0x20000628
 80006ac:	0800caec 	.word	0x0800caec
 80006b0:	20000634 	.word	0x20000634

080006b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00b fc58 	bl	800bf78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a26      	ldr	r2, [pc, #152]	@ (800077c <SystemClock_Config+0xc8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <SystemClock_Config+0xcc>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000724:	2319      	movs	r3, #25
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000728:	2390      	movs	r3, #144	@ 0x90
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f004 f955 	bl	80049e8 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000744:	f001 f818 	bl	8001778 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2102      	movs	r1, #2
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fbb7 	bl	8004ed8 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000770:	f001 f802 	bl	8001778 <Error_Handler>
	}
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	@ 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f003 fb45 	bl	8003e50 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007cc:	f000 ffd4 	bl	8001778 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000464 	.word	0x20000464
 80007d8:	40005400 	.word	0x40005400
 80007dc:	00061a80 	.word	0x00061a80

080007e0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2220      	movs	r2, #32
 8000816:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f004 fd63 	bl	80052fc <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800083c:	f000 ff9c 	bl	8001778 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200004b8 	.word	0x200004b8
 8000848:	40013000 	.word	0x40013000

0800084c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_TIM3_Init+0x98>)
 800086c:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <MX_TIM3_Init+0x9c>)
 800086e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_TIM3_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_TIM3_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_TIM3_Init+0x98>)
 800087e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000882:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_TIM3_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_TIM3_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000890:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <MX_TIM3_Init+0x98>)
 8000892:	f005 fb09 	bl	8005ea8 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800089c:	f000 ff6c 	bl	8001778 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_TIM3_Init+0x98>)
 80008b0:	f005 fc9c 	bl	80061ec <HAL_TIM_SlaveConfigSynchro>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 80008ba:	f000 ff5d 	bl	8001778 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_TIM3_Init+0x98>)
 80008cc:	f005 fe94 	bl	80065f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 80008d6:	f000 ff4f 	bl	8001778 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000510 	.word	0x20000510
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <MX_USART1_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000924:	f005 feea 	bl	80066fc <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800092e:	f000 ff23 	bl	8001778 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000558 	.word	0x20000558
 800093c:	40011000 	.word	0x40011000

08000940 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	203a      	movs	r0, #58	@ 0x3a
 8000968:	f002 fc90 	bl	800328c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800096c:	203a      	movs	r0, #58	@ 0x3a
 800096e:	f002 fca9 	bl	80032c4 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a29      	ldr	r2, [pc, #164]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_GPIO_Init+0xc4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2118      	movs	r1, #24
 80009ee:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <MX_GPIO_Init+0xc8>)
 80009f0:	f003 f9fc 	bl	8003dec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f4:	2304      	movs	r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0xc8>)
 8000a0a:	f003 f86b 	bl	8003ae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000a0e:	2318      	movs	r3, #24
 8000a10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <MX_GPIO_Init+0xc8>)
 8000a26:	f003 f85d 	bl	8003ae4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f002 fc2c 	bl	800328c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a34:	2008      	movs	r0, #8
 8000a36:	f002 fc45 	bl	80032c4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 8000a54:	2300      	movs	r3, #0
 8000a56:	83fb      	strh	r3, [r7, #30]
	int16_t Local_CounterII = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	83bb      	strh	r3, [r7, #28]
	uint8_t Local_Zeros	= 0 ;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	76fb      	strb	r3, [r7, #27]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	83fb      	strh	r3, [r7, #30]
 8000a64:	e061      	b.n	8000b2a <_CalcAvgDistance+0xde>
	{
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 8000a6a:	8bfb      	ldrh	r3, [r7, #30]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	461a      	mov	r2, r3
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	3b03      	subs	r3, #3
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	827b      	strh	r3, [r7, #18]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000a80:	8bfb      	ldrh	r3, [r7, #30]
 8000a82:	461a      	mov	r2, r3
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3303      	adds	r3, #3
 8000a92:	823b      	strh	r3, [r7, #16]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++)
 8000a94:	8a7b      	ldrh	r3, [r7, #18]
 8000a96:	83bb      	strh	r3, [r7, #28]
 8000a98:	e02b      	b.n	8000af2 <_CalcAvgDistance+0xa6>
		{
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000a9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000aa2:	4a27      	ldr	r2, [pc, #156]	@ (8000b40 <_CalcAvgDistance+0xf4>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	441a      	add	r2, r3
 8000aaa:	1211      	asrs	r1, r2, #8
 8000aac:	17da      	asrs	r2, r3, #31
 8000aae:	1a8a      	subs	r2, r1, r2
 8000ab0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ab4:	fb01 f202 	mul.w	r2, r1, r2
 8000ab8:	1a9a      	subs	r2, r3, r2
 8000aba:	4613      	mov	r3, r2
 8000abc:	81fb      	strh	r3, [r7, #14]

			if( 0==Data_Arr[Index] )
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <_CalcAvgDistance+0x88>
			{
				Local_Zeros++;
 8000acc:	7efb      	ldrb	r3, [r7, #27]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	76fb      	strb	r3, [r7, #27]
 8000ad2:	e008      	b.n	8000ae6 <_CalcAvgDistance+0x9a>
			}
			else
			{
				Local_TempI += Data_Arr[Index];
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++)
 8000ae6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	83bb      	strh	r3, [r7, #28]
 8000af2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000af6:	8a3b      	ldrh	r3, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	ddce      	ble.n	8000a9a <_CalcAvgDistance+0x4e>
			}
		}

		// Calculate average for this angle

		if(Local_Zeros == 7)
 8000afc:	7efb      	ldrb	r3, [r7, #27]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d102      	bne.n	8000b08 <_CalcAvgDistance+0xbc>
		{
			Local_Zeros = 0 ;
 8000b02:	2300      	movs	r3, #0
 8000b04:	76fb      	strb	r3, [r7, #27]

			continue;
 8000b06:	e00d      	b.n	8000b24 <_CalcAvgDistance+0xd8>
		}
		Local_AvgDistance[Local_CounterI] = Local_TempI / (7-Local_Zeros);
 8000b08:	7efb      	ldrb	r3, [r7, #27]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	461a      	mov	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b16:	8bfb      	ldrh	r3, [r7, #30]
 8000b18:	b291      	uxth	r1, r2
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <_CalcAvgDistance+0xf8>)
 8000b1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Local_Zeros = 0 ;
 8000b20:	2300      	movs	r3, #0
 8000b22:	76fb      	strb	r3, [r7, #27]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++)
 8000b24:	8bfb      	ldrh	r3, [r7, #30]
 8000b26:	3301      	adds	r3, #1
 8000b28:	83fb      	strh	r3, [r7, #30]
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d99a      	bls.n	8000a66 <_CalcAvgDistance+0x1a>

	}

	return Local_AvgDistance;
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <_CalcAvgDistance+0xf8>)
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	@ 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	b60b60b7 	.word	0xb60b60b7
 8000b44:	20001014 	.word	0x20001014

08000b48 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	//osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
	/* Convert Strings to Integers */
	for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81fb      	strh	r3, [r7, #14]
 8000b6c:	e011      	b.n	8000b92 <HAL_UART_RxCpltCallback+0x32>
	{
		Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000b6e:	89fa      	ldrh	r2, [r7, #14]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <HAL_UART_RxCpltCallback+0x6c>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00b f974 	bl	800be68 <atoi>
 8000b80:	4602      	mov	r2, r0
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	b291      	uxth	r1, r2
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x70>)
 8000b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b98:	d3e9      	bcc.n	8000b6e <HAL_UART_RxCpltCallback+0xe>
	}
	/* Arrange distances returned from the function to be :
	 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
	Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x70>)
 8000b9c:	f7ff ff56 	bl	8000a4c <_CalcAvgDistance>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x74>)
 8000ba4:	6013      	str	r3, [r2, #0]

	osSemaphoreRelease(myCountingSem01Handle);
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x78>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f007 fbc6 	bl	800833c <osSemaphoreRelease>
	osSemaphoreRelease(myCountingSem01Handle);
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x78>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fbc1 	bl	800833c <osSemaphoreRelease>
	osSemaphoreRelease(myCountingSem01Handle);
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x78>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 fbbc 	bl	800833c <osSemaphoreRelease>
	//osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000638 	.word	0x20000638
 8000bd0:	20000d40 	.word	0x20000d40
 8000bd4:	20001010 	.word	0x20001010
 8000bd8:	20000630 	.word	0x20000630

08000bdc <_vSSD1306_ForwardCollisionWarning>:


void _vSSD1306_ForwardCollisionWarning(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000be2:	2301      	movs	r3, #1
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f001 f94f 	bl	8001e90 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-60,4) ;
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	2004      	movs	r0, #4
 8000bf6:	f000 ff97 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Forward Collision",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <_vSSD1306_ForwardCollisionWarning+0x58>)
 8000c00:	f001 f826 	bl	8001c50 <SSD1306_Puts>
	SSD1306_GotoXY(64-(25),15) ;
 8000c04:	210f      	movs	r1, #15
 8000c06:	2027      	movs	r0, #39	@ 0x27
 8000c08:	f000 ff8e 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Warning",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <_vSSD1306_ForwardCollisionWarning+0x5c>)
 8000c12:	f001 f81d 	bl	8001c50 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-18 , 26  , ForwardCollision_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	2323      	movs	r3, #35	@ 0x23
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2323      	movs	r3, #35	@ 0x23
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <_vSSD1306_ForwardCollisionWarning+0x60>)
 8000c22:	211a      	movs	r1, #26
 8000c24:	202e      	movs	r0, #46	@ 0x2e
 8000c26:	f000 fdad 	bl	8001784 <SSD1306_DrawBitmap>
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200003d4 	.word	0x200003d4
 8000c34:	0800c0c4 	.word	0x0800c0c4
 8000c38:	0800c0d8 	.word	0x0800c0d8
 8000c3c:	20000000 	.word	0x20000000

08000c40 <_vSSD1306_BlindSpotWarning>:

void _vSSD1306_BlindSpotWarning( BlindSpotDirection_t Copy_u8Direction )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2340      	movs	r3, #64	@ 0x40
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f001 f91b 	bl	8001e90 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-(35),4) ;
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	201d      	movs	r0, #29
 8000c5e:	f000 ff63 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Blind Spot",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	491b      	ldr	r1, [pc, #108]	@ (8000cd4 <_vSSD1306_BlindSpotWarning+0x94>)
 8000c66:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <_vSSD1306_BlindSpotWarning+0x98>)
 8000c68:	f000 fff2 	bl	8001c50 <SSD1306_Puts>

	if( Copy_u8Direction == BlindSpotDirection_Right )
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b77      	cmp	r3, #119	@ 0x77
 8000c70:	d109      	bne.n	8000c86 <_vSSD1306_BlindSpotWarning+0x46>
	{
		SSD1306_GotoXY(64-(56),15) ;
 8000c72:	210f      	movs	r1, #15
 8000c74:	2008      	movs	r0, #8
 8000c76:	f000 ff57 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4915      	ldr	r1, [pc, #84]	@ (8000cd4 <_vSSD1306_BlindSpotWarning+0x94>)
 8000c7e:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <_vSSD1306_BlindSpotWarning+0x9c>)
 8000c80:	f000 ffe6 	bl	8001c50 <SSD1306_Puts>
 8000c84:	e018      	b.n	8000cb8 <_vSSD1306_BlindSpotWarning+0x78>
	}
	else if( Copy_u8Direction == BlindSpotDirection_Left )
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b88      	cmp	r3, #136	@ 0x88
 8000c8a:	d109      	bne.n	8000ca0 <_vSSD1306_BlindSpotWarning+0x60>
	{
		SSD1306_GotoXY(64-(53),15) ;
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f000 ff4a 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	490f      	ldr	r1, [pc, #60]	@ (8000cd4 <_vSSD1306_BlindSpotWarning+0x94>)
 8000c98:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <_vSSD1306_BlindSpotWarning+0xa0>)
 8000c9a:	f000 ffd9 	bl	8001c50 <SSD1306_Puts>
 8000c9e:	e00b      	b.n	8000cb8 <_vSSD1306_BlindSpotWarning+0x78>
	}
	else if( Copy_u8Direction == BlindSpodDirection_Both )
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b99      	cmp	r3, #153	@ 0x99
 8000ca4:	d108      	bne.n	8000cb8 <_vSSD1306_BlindSpotWarning+0x78>
	{
		SSD1306_GotoXY(64-(53),15) ;
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f000 ff3d 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Both",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <_vSSD1306_BlindSpotWarning+0x94>)
 8000cb2:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <_vSSD1306_BlindSpotWarning+0xa4>)
 8000cb4:	f000 ffcc 	bl	8001c50 <SSD1306_Puts>
	}
	SSD1306_DrawBitmap(64-18 , 26  , BlindSpotWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	2323      	movs	r3, #35	@ 0x23
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2323      	movs	r3, #35	@ 0x23
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <_vSSD1306_BlindSpotWarning+0xa8>)
 8000cc4:	211a      	movs	r1, #26
 8000cc6:	202e      	movs	r0, #46	@ 0x2e
 8000cc8:	f000 fd5c 	bl	8001784 <SSD1306_DrawBitmap>


}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200003d4 	.word	0x200003d4
 8000cd8:	0800c0e0 	.word	0x0800c0e0
 8000cdc:	0800c0ec 	.word	0x0800c0ec
 8000ce0:	0800c100 	.word	0x0800c100
 8000ce4:	0800c110 	.word	0x0800c110
 8000ce8:	200000b0 	.word	0x200000b0

08000cec <_vSSD1306_EmergencyElectronicBrake>:

void _vSSD1306_EmergencyElectronicBrake(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f001 f8c7 	bl	8001e90 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-28,4) ;
 8000d02:	2104      	movs	r1, #4
 8000d04:	2024      	movs	r0, #36	@ 0x24
 8000d06:	f000 ff0f 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Warning!",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4911      	ldr	r1, [pc, #68]	@ (8000d54 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000d0e:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <_vSSD1306_EmergencyElectronicBrake+0x6c>)
 8000d10:	f000 ff9e 	bl	8001c50 <SSD1306_Puts>
	SSD1306_GotoXY(64-46,15) ;
 8000d14:	210f      	movs	r1, #15
 8000d16:	2012      	movs	r0, #18
 8000d18:	f000 ff06 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Front Vehicle",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000d20:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <_vSSD1306_EmergencyElectronicBrake+0x70>)
 8000d22:	f000 ff95 	bl	8001c50 <SSD1306_Puts>
	SSD1306_GotoXY(64-42,26) ;
 8000d26:	211a      	movs	r1, #26
 8000d28:	2016      	movs	r0, #22
 8000d2a:	f000 fefd 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Hard Braking",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <_vSSD1306_EmergencyElectronicBrake+0x74>)
 8000d34:	f000 ff8c 	bl	8001c50 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-13 , 37  , EEBL_Bitmap , 25 , 25, SSD1306_COLOR_WHITE) ;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2319      	movs	r3, #25
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2319      	movs	r3, #25
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <_vSSD1306_EmergencyElectronicBrake+0x78>)
 8000d44:	2125      	movs	r1, #37	@ 0x25
 8000d46:	2033      	movs	r0, #51	@ 0x33
 8000d48:	f000 fd1c 	bl	8001784 <SSD1306_DrawBitmap>


}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200003d4 	.word	0x200003d4
 8000d58:	0800c120 	.word	0x0800c120
 8000d5c:	0800c12c 	.word	0x0800c12c
 8000d60:	0800c13c 	.word	0x0800c13c
 8000d64:	20000160 	.word	0x20000160

08000d68 <_vSSD1306_SafeToPass>:

void _vSSD1306_SafeToPass(DontPassWarningDirection_t Copy_u8Direction)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000d72:	2301      	movs	r3, #1
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2340      	movs	r3, #64	@ 0x40
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f001 f887 	bl	8001e90 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-42,4) ;
 8000d82:	2104      	movs	r1, #4
 8000d84:	2016      	movs	r0, #22
 8000d86:	f000 fecf 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Safe To Pass",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	491a      	ldr	r1, [pc, #104]	@ (8000df8 <_vSSD1306_SafeToPass+0x90>)
 8000d8e:	481b      	ldr	r0, [pc, #108]	@ (8000dfc <_vSSD1306_SafeToPass+0x94>)
 8000d90:	f000 ff5e 	bl	8001c50 <SSD1306_Puts>

	if( Copy_u8Direction == DontPassWarningDirection_Right )
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2baa      	cmp	r3, #170	@ 0xaa
 8000d98:	d113      	bne.n	8000dc2 <_vSSD1306_SafeToPass+0x5a>
	{
		SSD1306_GotoXY(64-35,15) ;
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	201d      	movs	r0, #29
 8000d9e:	f000 fec3 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("From Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	4914      	ldr	r1, [pc, #80]	@ (8000df8 <_vSSD1306_SafeToPass+0x90>)
 8000da6:	4816      	ldr	r0, [pc, #88]	@ (8000e00 <_vSSD1306_SafeToPass+0x98>)
 8000da8:	f000 ff52 	bl	8001c50 <SSD1306_Puts>
		SSD1306_DrawBitmap(64-18 , 26  , SafeToPassVisualFromRight_Bitmap , 25 , 25, SSD1306_COLOR_WHITE) ;
 8000dac:	2301      	movs	r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	2319      	movs	r3, #25
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2319      	movs	r3, #25
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <_vSSD1306_SafeToPass+0x9c>)
 8000db8:	211a      	movs	r1, #26
 8000dba:	202e      	movs	r0, #46	@ 0x2e
 8000dbc:	f000 fce2 	bl	8001784 <SSD1306_DrawBitmap>
		// Do Nothing
	}



}
 8000dc0:	e015      	b.n	8000dee <_vSSD1306_SafeToPass+0x86>
	else if( Copy_u8Direction == DontPassWarningDirection_Left )
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2bbb      	cmp	r3, #187	@ 0xbb
 8000dc6:	d112      	bne.n	8000dee <_vSSD1306_SafeToPass+0x86>
		SSD1306_GotoXY(64-32,15) ;
 8000dc8:	210f      	movs	r1, #15
 8000dca:	2020      	movs	r0, #32
 8000dcc:	f000 feac 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("From Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4909      	ldr	r1, [pc, #36]	@ (8000df8 <_vSSD1306_SafeToPass+0x90>)
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <_vSSD1306_SafeToPass+0xa0>)
 8000dd6:	f000 ff3b 	bl	8001c50 <SSD1306_Puts>
		SSD1306_DrawBitmap(64-18 , 26  , SafeToPassVisualFromLeft_Bitmap , 25 , 25, SSD1306_COLOR_WHITE) ;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	2319      	movs	r3, #25
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2319      	movs	r3, #25
 8000de4:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <_vSSD1306_SafeToPass+0xa4>)
 8000de6:	211a      	movs	r1, #26
 8000de8:	202e      	movs	r0, #46	@ 0x2e
 8000dea:	f000 fccb 	bl	8001784 <SSD1306_DrawBitmap>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200003d4 	.word	0x200003d4
 8000dfc:	0800c14c 	.word	0x0800c14c
 8000e00:	0800c15c 	.word	0x0800c15c
 8000e04:	200001c4 	.word	0x200001c4
 8000e08:	0800c168 	.word	0x0800c168
 8000e0c:	20000274 	.word	0x20000274

08000e10 <_vSSD1306_DontPassWarning>:

void _vSSD1306_DontPassWarning(DontPassWarningDirection_t Copy_u8Direction)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	2100      	movs	r1, #0
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 f833 	bl	8001e90 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-53,4) ;
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f000 fe7b 	bl	8001b28 <SSD1306_GotoXY>
	SSD1306_Puts("Don't Pass From",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	4915      	ldr	r1, [pc, #84]	@ (8000e8c <_vSSD1306_DontPassWarning+0x7c>)
 8000e36:	4816      	ldr	r0, [pc, #88]	@ (8000e90 <_vSSD1306_DontPassWarning+0x80>)
 8000e38:	f000 ff0a 	bl	8001c50 <SSD1306_Puts>

	if( Copy_u8Direction == DontPassWarningDirection_Right )
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2baa      	cmp	r3, #170	@ 0xaa
 8000e40:	d109      	bne.n	8000e56 <_vSSD1306_DontPassWarning+0x46>
	{
		SSD1306_GotoXY(64-18,15) ;
 8000e42:	210f      	movs	r1, #15
 8000e44:	202e      	movs	r0, #46	@ 0x2e
 8000e46:	f000 fe6f 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	490f      	ldr	r1, [pc, #60]	@ (8000e8c <_vSSD1306_DontPassWarning+0x7c>)
 8000e4e:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <_vSSD1306_DontPassWarning+0x84>)
 8000e50:	f000 fefe 	bl	8001c50 <SSD1306_Puts>
 8000e54:	e00b      	b.n	8000e6e <_vSSD1306_DontPassWarning+0x5e>
	}
	else if( Copy_u8Direction == DontPassWarningDirection_Left )
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2bbb      	cmp	r3, #187	@ 0xbb
 8000e5a:	d108      	bne.n	8000e6e <_vSSD1306_DontPassWarning+0x5e>
	{
		SSD1306_GotoXY(64-14,15) ;
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	2032      	movs	r0, #50	@ 0x32
 8000e60:	f000 fe62 	bl	8001b28 <SSD1306_GotoXY>
		SSD1306_Puts("Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	4909      	ldr	r1, [pc, #36]	@ (8000e8c <_vSSD1306_DontPassWarning+0x7c>)
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <_vSSD1306_DontPassWarning+0x88>)
 8000e6a:	f000 fef1 	bl	8001c50 <SSD1306_Puts>
	else
	{
		/* Do Nothing */
	}

	SSD1306_DrawBitmap(64-18 , 26  , DontPassWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	2323      	movs	r3, #35	@ 0x23
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2323      	movs	r3, #35	@ 0x23
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <_vSSD1306_DontPassWarning+0x8c>)
 8000e7a:	211a      	movs	r1, #26
 8000e7c:	202e      	movs	r0, #46	@ 0x2e
 8000e7e:	f000 fc81 	bl	8001784 <SSD1306_DrawBitmap>

}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200003d4 	.word	0x200003d4
 8000e90:	0800c174 	.word	0x0800c174
 8000e94:	0800c184 	.word	0x0800c184
 8000e98:	0800c18c 	.word	0x0800c18c
 8000e9c:	20000324 	.word	0x20000324

08000ea0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 ff5c 	bl	8007d66 <osDelay>
 8000eae:	e7fb      	b.n	8000ea8 <StartDefaultTask+0x8>

08000eb0 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b095      	sub	sp, #84	@ 0x54
 8000eb4:	af12      	add	r7, sp, #72	@ 0x48
 8000eb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Init_Task */

	/* Initializing SSD1306 ( OLED Display ) */
	SSD1306_Init();
 8000eb8:	f000 fccc 	bl	8001854 <SSD1306_Init>
	/* NRF Module Initialization -> Less Then 0.5 Sec */
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <Init_Task+0x78>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 f8d6 	bl	8008076 <osMutexAcquire>

	NRF24_begin(hspi1);
 8000eca:	4c18      	ldr	r4, [pc, #96]	@ (8000f2c <Init_Task+0x7c>)
 8000ecc:	4668      	mov	r0, sp
 8000ece:	f104 0310 	add.w	r3, r4, #16
 8000ed2:	2248      	movs	r2, #72	@ 0x48
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f00b f881 	bl	800bfdc <memcpy>
 8000eda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ede:	f001 fcbb 	bl	8002858 <NRF24_begin>
	NRF24_setAutoAck(true);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f001 ff20 	bl	8002d28 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000ee8:	2020      	movs	r0, #32
 8000eea:	f001 fed9 	bl	8002ca0 <NRF24_setPayloadSize>
	//NRF24_enableDynamicPayloads();
	//NRF24_enableAckPayload();
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <Init_Task+0x80>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fe55 	bl	8002ba4 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <Init_Task+0x80>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f001 fe2a 	bl	8002b5c <NRF24_openWritingPipe>
	//NRF24_writeAckPayload(1, AckPayload, 32);
	NRF24_startListening();
 8000f08:	f001 fd82 	bl	8002a10 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <Init_Task+0x78>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f007 f8fb 	bl	800810c <osMutexRelease>


	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <Init_Task+0x84>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fef6 	bl	8007d0c <osThreadTerminate>

	/* USER CODE END Init_Task */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	2000062c 	.word	0x2000062c
 8000f2c:	200004b8 	.word	0x200004b8
 8000f30:	200003e0 	.word	0x200003e0
 8000f34:	20000604 	.word	0x20000604

08000f38 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		//osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
		osDelay(5000);
 8000f40:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f44:	f006 ff0f 	bl	8007d66 <osDelay>
 8000f48:	e7fa      	b.n	8000f40 <Distance_Calc+0x8>
	...

08000f4c <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f54:	2311      	movs	r3, #17
 8000f56:	733b      	strb	r3, [r7, #12]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <Localization+0xa8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	330c      	adds	r3, #12
 8000f62:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <Localization+0xa8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	330a      	adds	r3, #10
 8000f6e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <Localization+0xa8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <Localization+0xa8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3306      	adds	r3, #6
 8000f86:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <Localization+0xa8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3304      	adds	r3, #4
 8000f92:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <Localization+0xa8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <Localization+0xa8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <Localization+0xa8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	330e      	adds	r3, #14
 8000fb4:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <Localization+0xac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 f857 	bl	8008076 <osMutexAcquire>

		NRF24_stopListening();
 8000fc8:	f001 fd48 	bl	8002a5c <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fd4e 	bl	8002a74 <NRF24_write>
		NRF24_startListening();
 8000fd8:	f001 fd1a 	bl	8002a10 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <Localization+0xac>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 f893 	bl	800810c <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(1500);
 8000fe6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fea:	f006 febc 	bl	8007d66 <osDelay>
	{
 8000fee:	bf00      	nop
 8000ff0:	e7b0      	b.n	8000f54 <Localization+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	20001010 	.word	0x20001010
 8000ff8:	2000062c 	.word	0x2000062c

08000ffc <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Check_Algorithm */
	uint8_t Local_u8SendToRaspiContMov = RPI_MOVE ;
 8001004:	2301      	movs	r3, #1
 8001006:	72fb      	strb	r3, [r7, #11]

	bool Local_FCW_LastState = false ;
 8001008:	2300      	movs	r3, #0
 800100a:	72bb      	strb	r3, [r7, #10]
	bool Local_EEBL_LastState = false ;
 800100c:	2300      	movs	r3, #0
 800100e:	727b      	strb	r3, [r7, #9]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osSemaphoreAcquire(myCountingSem01Handle,HAL_MAX_DELAY );
 8001010:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <Check_Algorithm+0x110>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	4618      	mov	r0, r3
 800101a:	f007 f93d 	bl	8008298 <osSemaphoreAcquire>
		//osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
		bool Local_FCW = false ;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
		bool Local_EEBL=false;
 8001022:	2300      	movs	r3, #0
 8001024:	73bb      	strb	r3, [r7, #14]
		/* Checking on Front Threshold */
		for (uint16_t Angle_Iterator = 280 ;
 8001026:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800102a:	81bb      	strh	r3, [r7, #12]
 800102c:	e029      	b.n	8001082 <Check_Algorithm+0x86>
				Angle_Iterator >= 260 ;
				Angle_Iterator--)
		{
			if ( ( ( 0 != Distances_Buffer[Angle_Iterator] ) &&
 800102e:	89bb      	ldrh	r3, [r7, #12]
 8001030:	4a37      	ldr	r2, [pc, #220]	@ (8001110 <Check_Algorithm+0x114>)
 8001032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d010      	beq.n	800105c <Check_Algorithm+0x60>
					((Distances_Buffer[Angle_Iterator] >= EEBL_Threshold )&&(Distances_Buffer[Angle_Iterator] <= FCW_Threshold )) ) )
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	4a34      	ldr	r2, [pc, #208]	@ (8001110 <Check_Algorithm+0x114>)
 800103e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			if ( ( ( 0 != Distances_Buffer[Angle_Iterator] ) &&
 8001042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001046:	d309      	bcc.n	800105c <Check_Algorithm+0x60>
					((Distances_Buffer[Angle_Iterator] >= EEBL_Threshold )&&(Distances_Buffer[Angle_Iterator] <= FCW_Threshold )) ) )
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <Check_Algorithm+0x114>)
 800104c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001050:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001054:	d802      	bhi.n	800105c <Check_Algorithm+0x60>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_FCW = true ;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]

				break;
 800105a:	e016      	b.n	800108a <Check_Algorithm+0x8e>
			}

			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= EEBL_Threshold ) )
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <Check_Algorithm+0x114>)
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <Check_Algorithm+0x80>
 8001068:	89bb      	ldrh	r3, [r7, #12]
 800106a:	4a29      	ldr	r2, [pc, #164]	@ (8001110 <Check_Algorithm+0x114>)
 800106c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001074:	d802      	bhi.n	800107c <Check_Algorithm+0x80>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_EEBL = true ;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]

				break;
 800107a:	e006      	b.n	800108a <Check_Algorithm+0x8e>
				Angle_Iterator--)
 800107c:	89bb      	ldrh	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	81bb      	strh	r3, [r7, #12]
				Angle_Iterator >= 260 ;
 8001082:	89bb      	ldrh	r3, [r7, #12]
 8001084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001088:	d2d1      	bcs.n	800102e <Check_Algorithm+0x32>
			}
		}

		if ( ( Local_FCW == true ) && ( Local_FCW_LastState != true ) )
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <Check_Algorithm+0xae>
 8001090:	7abb      	ldrb	r3, [r7, #10]
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <Check_Algorithm+0xae>
		{
			//Invoke FCW algorithm
			osEventFlagsSet( EventGroupHandle , FCW_ASSERTED ) ;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <Check_Algorithm+0x118>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2103      	movs	r1, #3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 feba 	bl	8007e1c <osEventFlagsSet>
 80010a8:	e00d      	b.n	80010c6 <Check_Algorithm+0xca>

		}
		else if ( ( Local_FCW == false ) && ( Local_FCW_LastState == true ) )
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f083 0301 	eor.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <Check_Algorithm+0xc6>
 80010b6:	7abb      	ldrb	r3, [r7, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <Check_Algorithm+0xc6>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 80010bc:	f000 ff52 	bl	8001f64 <SSD1306_Clear>
 80010c0:	e001      	b.n	80010c6 <Check_Algorithm+0xca>
		}
		else
		{
			/* Do Nothing */
			SSD1306_Clear();
 80010c2:	f000 ff4f 	bl	8001f64 <SSD1306_Clear>
		}



		if ( ( Local_EEBL == true ) && ( Local_EEBL_LastState != true ) )
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00c      	beq.n	80010e6 <Check_Algorithm+0xea>
 80010cc:	7a7b      	ldrb	r3, [r7, #9]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <Check_Algorithm+0xea>
		{
			//Invoke FCW algorithm
			osEventFlagsSet( EventGroupHandle , EEBL_ASSERTED ) ;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <Check_Algorithm+0x118>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fe9c 	bl	8007e1c <osEventFlagsSet>
 80010e4:	e00d      	b.n	8001102 <Check_Algorithm+0x106>

		}
		else if ( ( Local_EEBL == false ) && ( Local_EEBL_LastState == true ) )
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	f083 0301 	eor.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <Check_Algorithm+0x102>
 80010f2:	7a7b      	ldrb	r3, [r7, #9]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <Check_Algorithm+0x102>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 80010f8:	f000 ff34 	bl	8001f64 <SSD1306_Clear>
 80010fc:	e001      	b.n	8001102 <Check_Algorithm+0x106>
		}
		else
		{
			/* Do Nothing */
			SSD1306_Clear();
 80010fe:	f000 ff31 	bl	8001f64 <SSD1306_Clear>
		}

		osDelay(200);
 8001102:	20c8      	movs	r0, #200	@ 0xc8
 8001104:	f006 fe2f 	bl	8007d66 <osDelay>
	{
 8001108:	e782      	b.n	8001010 <Check_Algorithm+0x14>
 800110a:	bf00      	nop
 800110c:	20000630 	.word	0x20000630
 8001110:	20000d40 	.word	0x20000d40
 8001114:	20000634 	.word	0x20000634

08001118 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Algorithm */

	bool Local_BSWL_LastState = false ;
 8001120:	2300      	movs	r3, #0
 8001122:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8001124:	2300      	movs	r3, #0
 8001126:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osSemaphoreAcquire(myCountingSem01Handle,HAL_MAX_DELAY );
 8001128:	4b44      	ldr	r3, [pc, #272]	@ (800123c <BSW_Algorithm+0x124>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	4618      	mov	r0, r3
 8001132:	f007 f8b1 	bl	8008298 <osSemaphoreAcquire>
		//osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny , HAL_MAX_DELAY ) ;
		bool Local_BSWLeft = false ;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
		bool Local_BSWRight= false ;
 800113a:	2300      	movs	r3, #0
 800113c:	73bb      	strb	r3, [r7, #14]
		Local_BSWL_LastState = Local_BSWLeft  ;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint16_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8001146:	2396      	movs	r3, #150	@ 0x96
 8001148:	81bb      	strh	r3, [r7, #12]
 800114a:	e012      	b.n	8001172 <BSW_Algorithm+0x5a>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 800114c:	89bb      	ldrh	r3, [r7, #12]
 800114e:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <BSW_Algorithm+0x128>)
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <BSW_Algorithm+0x54>
 8001158:	89bb      	ldrh	r3, [r7, #12]
 800115a:	4a39      	ldr	r2, [pc, #228]	@ (8001240 <BSW_Algorithm+0x128>)
 800115c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001160:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001164:	d802      	bhi.n	800116c <BSW_Algorithm+0x54>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]

				break;
 800116a:	e005      	b.n	8001178 <BSW_Algorithm+0x60>
				Angle_Iterator--)
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	3b01      	subs	r3, #1
 8001170:	81bb      	strh	r3, [r7, #12]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8001172:	89bb      	ldrh	r3, [r7, #12]
 8001174:	2b77      	cmp	r3, #119	@ 0x77
 8001176:	d8e9      	bhi.n	800114c <BSW_Algorithm+0x34>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8001178:	231e      	movs	r3, #30
 800117a:	817b      	strh	r3, [r7, #10]
 800117c:	e012      	b.n	80011a4 <BSW_Algorithm+0x8c>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <BSW_Algorithm+0x128>)
 8001182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <BSW_Algorithm+0x86>
 800118a:	897b      	ldrh	r3, [r7, #10]
 800118c:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <BSW_Algorithm+0x128>)
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001196:	d802      	bhi.n	800119e <BSW_Algorithm+0x86>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8001198:	2301      	movs	r3, #1
 800119a:	73bb      	strb	r3, [r7, #14]

				break;
 800119c:	e005      	b.n	80011aa <BSW_Algorithm+0x92>
				Angle_Iterator++)
 800119e:	897b      	ldrh	r3, [r7, #10]
 80011a0:	3301      	adds	r3, #1
 80011a2:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	2b3c      	cmp	r3, #60	@ 0x3c
 80011a8:	d9e9      	bls.n	800117e <BSW_Algorithm+0x66>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00d      	beq.n	80011cc <BSW_Algorithm+0xb4>
 80011b0:	7a7b      	ldrb	r3, [r7, #9]
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <BSW_Algorithm+0xb4>
		{
			SSD1306_Clear();
 80011bc:	f000 fed2 	bl	8001f64 <SSD1306_Clear>
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Left);
 80011c0:	2088      	movs	r0, #136	@ 0x88
 80011c2:	f7ff fd3d 	bl	8000c40 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 80011c6:	f000 fc09 	bl	80019dc <SSD1306_UpdateScreen>
 80011ca:	e00a      	b.n	80011e2 <BSW_Algorithm+0xca>

		}
		else if ( ( Local_BSWLeft == false ) && ( Local_BSWL_LastState == true ) )
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <BSW_Algorithm+0xca>
 80011d8:	7a7b      	ldrb	r3, [r7, #9]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <BSW_Algorithm+0xca>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 80011de:	f000 fec1 	bl	8001f64 <SSD1306_Clear>
		{
			/* Do Nothing */
			//SSD1306_Clear();
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <BSW_Algorithm+0xec>
 80011e8:	7a3b      	ldrb	r3, [r7, #8]
 80011ea:	f083 0301 	eor.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <BSW_Algorithm+0xec>
		{
			SSD1306_Clear();
 80011f4:	f000 feb6 	bl	8001f64 <SSD1306_Clear>
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Right);
 80011f8:	2077      	movs	r0, #119	@ 0x77
 80011fa:	f7ff fd21 	bl	8000c40 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 80011fe:	f000 fbed 	bl	80019dc <SSD1306_UpdateScreen>
 8001202:	e00a      	b.n	800121a <BSW_Algorithm+0x102>
		}
		else if ( ( Local_BSWRight == false ) && ( Local_BSWR_LastState == true ) )
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <BSW_Algorithm+0x102>
 8001210:	7a3b      	ldrb	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <BSW_Algorithm+0x102>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 8001216:	f000 fea5 	bl	8001f64 <SSD1306_Clear>
		{
			/* Do Nothing */
			//SSD1306_Clear();
		}

		if( ( Local_BSWRight == true ) && ( Local_BSWLeft == true ) )
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <BSW_Algorithm+0x11c>
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <BSW_Algorithm+0x11c>
		{
			SSD1306_Clear();
 8001226:	f000 fe9d 	bl	8001f64 <SSD1306_Clear>
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Right);
 800122a:	2077      	movs	r0, #119	@ 0x77
 800122c:	f7ff fd08 	bl	8000c40 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 8001230:	f000 fbd4 	bl	80019dc <SSD1306_UpdateScreen>
		}

		osDelay(200);
 8001234:	20c8      	movs	r0, #200	@ 0xc8
 8001236:	f006 fd96 	bl	8007d66 <osDelay>
	{
 800123a:	e775      	b.n	8001128 <BSW_Algorithm+0x10>
 800123c:	20000630 	.word	0x20000630
 8001240:	20000d40 	.word	0x20000d40

08001244 <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Algorithm */

	bool Local_DPWL_LastState = false ;
 800124c:	2300      	movs	r3, #0
 800124e:	747b      	strb	r3, [r7, #17]
	bool Local_DPWR_LastState = false ;
 8001250:	2300      	movs	r3, #0
 8001252:	743b      	strb	r3, [r7, #16]


	/* Infinite loop */
	for(;;)
	{
		bool Local_DPWLeft = false ;
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]
		bool Local_DPWRight= false ;
 8001258:	2300      	movs	r3, #0
 800125a:	75bb      	strb	r3, [r7, #22]
		Local_DPWL_LastState = Local_DPWLeft ;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	747b      	strb	r3, [r7, #17]
		Local_DPWR_LastState = Local_DPWRight;
 8001260:	7dbb      	ldrb	r3, [r7, #22]
 8001262:	743b      	strb	r3, [r7, #16]

		/* Wait on DMA Interrupt On Receive to Come */
		//osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny , HAL_MAX_DELAY ) ;
		osSemaphoreAcquire(myCountingSem01Handle,HAL_MAX_DELAY );
 8001264:	4b65      	ldr	r3, [pc, #404]	@ (80013fc <DPW_Algorithm+0x1b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	4618      	mov	r0, r3
 800126e:	f007 f813 	bl	8008298 <osSemaphoreAcquire>
		uint8_t MessageToWarnBackCar[]={CAR_ID, 0 , Back_Car_ID};
 8001272:	2311      	movs	r3, #17
 8001274:	733b      	strb	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	737b      	strb	r3, [r7, #13]
 800127a:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <DPW_Algorithm+0x1bc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	73bb      	strb	r3, [r7, #14]

		/*Check the Left Angles*/
		for (uint16_t Angle_Iterator = DPW_Maximium_Angle_L ;
 8001280:	23f0      	movs	r3, #240	@ 0xf0
 8001282:	82bb      	strh	r3, [r7, #20]
 8001284:	e012      	b.n	80012ac <DPW_Algorithm+0x68>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 8001286:	8abb      	ldrh	r3, [r7, #20]
 8001288:	4a5e      	ldr	r2, [pc, #376]	@ (8001404 <DPW_Algorithm+0x1c0>)
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <DPW_Algorithm+0x62>
 8001292:	8abb      	ldrh	r3, [r7, #20]
 8001294:	4a5b      	ldr	r2, [pc, #364]	@ (8001404 <DPW_Algorithm+0x1c0>)
 8001296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800129e:	d802      	bhi.n	80012a6 <DPW_Algorithm+0x62>
			{
				/*break the loop and invoke DPW Left warning*/

				Local_DPWLeft = true;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]

				break;
 80012a4:	e005      	b.n	80012b2 <DPW_Algorithm+0x6e>
				Angle_Iterator--)
 80012a6:	8abb      	ldrh	r3, [r7, #20]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	82bb      	strh	r3, [r7, #20]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 80012ac:	8abb      	ldrh	r3, [r7, #20]
 80012ae:	2bd6      	cmp	r3, #214	@ 0xd6
 80012b0:	d8e9      	bhi.n	8001286 <DPW_Algorithm+0x42>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 80012b2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80012b6:	827b      	strh	r3, [r7, #18]
 80012b8:	e012      	b.n	80012e0 <DPW_Algorithm+0x9c>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 80012ba:	8a7b      	ldrh	r3, [r7, #18]
 80012bc:	4a51      	ldr	r2, [pc, #324]	@ (8001404 <DPW_Algorithm+0x1c0>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <DPW_Algorithm+0x96>
 80012c6:	8a7b      	ldrh	r3, [r7, #18]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <DPW_Algorithm+0x1c0>)
 80012ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012d2:	d802      	bhi.n	80012da <DPW_Algorithm+0x96>
			{
				/*break the loop and invoke DPW Right warning*/
				Local_DPWRight = true;
 80012d4:	2301      	movs	r3, #1
 80012d6:	75bb      	strb	r3, [r7, #22]
				break;
 80012d8:	e006      	b.n	80012e8 <DPW_Algorithm+0xa4>
				Angle_Iterator++)
 80012da:	8a7b      	ldrh	r3, [r7, #18]
 80012dc:	3301      	adds	r3, #1
 80012de:	827b      	strh	r3, [r7, #18]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 80012e0:	8a7b      	ldrh	r3, [r7, #18]
 80012e2:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80012e6:	d9e8      	bls.n	80012ba <DPW_Algorithm+0x76>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01e      	beq.n	800132c <DPW_Algorithm+0xe8>
 80012ee:	7c7b      	ldrb	r3, [r7, #17]
 80012f0:	f083 0301 	eor.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d018      	beq.n	800132c <DPW_Algorithm+0xe8>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_L_ID;
 80012fa:	2357      	movs	r3, #87	@ 0x57
 80012fc:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80012fe:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <DPW_Algorithm+0x1c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f04f 31ff 	mov.w	r1, #4294967295
 8001306:	4618      	mov	r0, r3
 8001308:	f006 feb5 	bl	8008076 <osMutexAcquire>

			NRF24_stopListening();
 800130c:	f001 fba6 	bl	8002a5c <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2103      	movs	r1, #3
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fbac 	bl	8002a74 <NRF24_write>
			NRF24_startListening();
 800131c:	f001 fb78 	bl	8002a10 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8001320:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <DPW_Algorithm+0x1c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fef1 	bl	800810c <osMutexRelease>
 800132a:	e020      	b.n	800136e <DPW_Algorithm+0x12a>
		}
		else if ( ( Local_DPWLeft == false ) && ( Local_DPWL_LastState == true ) )
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	f083 0301 	eor.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01a      	beq.n	800136e <DPW_Algorithm+0x12a>
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d017      	beq.n	800136e <DPW_Algorithm+0x12a>
		{
			/*Abort the Algorithm*/
			MessageToWarnBackCar[1]=SAFE_PASS_L_ID;
 800133e:	23fa      	movs	r3, #250	@ 0xfa
 8001340:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001342:	4b31      	ldr	r3, [pc, #196]	@ (8001408 <DPW_Algorithm+0x1c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	4618      	mov	r0, r3
 800134c:	f006 fe93 	bl	8008076 <osMutexAcquire>

			NRF24_stopListening();
 8001350:	f001 fb84 	bl	8002a5c <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2103      	movs	r1, #3
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb8a 	bl	8002a74 <NRF24_write>
			NRF24_startListening();
 8001360:	f001 fb56 	bl	8002a10 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <DPW_Algorithm+0x1c4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f006 fecf 	bl	800810c <osMutexRelease>
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01e      	beq.n	80013b2 <DPW_Algorithm+0x16e>
 8001374:	7c3b      	ldrb	r3, [r7, #16]
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d018      	beq.n	80013b2 <DPW_Algorithm+0x16e>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_R_ID;
 8001380:	2356      	movs	r3, #86	@ 0x56
 8001382:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <DPW_Algorithm+0x1c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fe72 	bl	8008076 <osMutexAcquire>

			NRF24_stopListening();
 8001392:	f001 fb63 	bl	8002a5c <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2103      	movs	r1, #3
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fb69 	bl	8002a74 <NRF24_write>
			NRF24_startListening();
 80013a2:	f001 fb35 	bl	8002a10 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <DPW_Algorithm+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 feae 	bl	800810c <osMutexRelease>
 80013b0:	e020      	b.n	80013f4 <DPW_Algorithm+0x1b0>

		}
		else if ( ( Local_DPWRight == false ) && ( Local_DPWR_LastState == true ) )
 80013b2:	7dbb      	ldrb	r3, [r7, #22]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01a      	beq.n	80013f4 <DPW_Algorithm+0x1b0>
 80013be:	7c3b      	ldrb	r3, [r7, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d017      	beq.n	80013f4 <DPW_Algorithm+0x1b0>
		{
			/*Abort the Algorithm*/
			MessageToWarnBackCar[1]=SAFE_PASS_R_ID;
 80013c4:	23fb      	movs	r3, #251	@ 0xfb
 80013c6:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <DPW_Algorithm+0x1c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fe50 	bl	8008076 <osMutexAcquire>

			NRF24_stopListening();
 80013d6:	f001 fb41 	bl	8002a5c <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2103      	movs	r1, #3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fb47 	bl	8002a74 <NRF24_write>
			NRF24_startListening();
 80013e6:	f001 fb13 	bl	8002a10 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <DPW_Algorithm+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fe8c 	bl	800810c <osMutexRelease>
		}
		else
		{
			/* Do Nothing */
		}
		osDelay(200);
 80013f4:	20c8      	movs	r0, #200	@ 0xc8
 80013f6:	f006 fcb6 	bl	8007d66 <osDelay>
	{
 80013fa:	e72b      	b.n	8001254 <DPW_Algorithm+0x10>
 80013fc:	20000630 	.word	0x20000630
 8001400:	200003dd 	.word	0x200003dd
 8001404:	20000d40 	.word	0x20000d40
 8001408:	2000062c 	.word	0x2000062c

0800140c <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	@ 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 8001414:	f001 fb7a 	bl	8002b0c <NRF24_available>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 811f 	beq.w	800165e <Wireless_Receiving+0x252>
			uint8_t Received_Data[32] = {0};
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8001438:	4b8b      	ldr	r3, [pc, #556]	@ (8001668 <Wireless_Receiving+0x25c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	4618      	mov	r0, r3
 8001442:	f006 fe18 	bl	8008076 <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2120      	movs	r1, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fb65 	bl	8002b1c <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 8001452:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <Wireless_Receiving+0x25c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fe58 	bl	800810c <osMutexRelease>

			switch(Received_Data[1])
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001460:	f000 80e0 	beq.w	8001624 <Wireless_Receiving+0x218>
 8001464:	2bfb      	cmp	r3, #251	@ 0xfb
 8001466:	f300 80ed 	bgt.w	8001644 <Wireless_Receiving+0x238>
 800146a:	2bfa      	cmp	r3, #250	@ 0xfa
 800146c:	f000 80ca 	beq.w	8001604 <Wireless_Receiving+0x1f8>
 8001470:	2bfa      	cmp	r3, #250	@ 0xfa
 8001472:	f300 80e7 	bgt.w	8001644 <Wireless_Receiving+0x238>
 8001476:	2b60      	cmp	r3, #96	@ 0x60
 8001478:	f000 8095 	beq.w	80015a6 <Wireless_Receiving+0x19a>
 800147c:	2b60      	cmp	r3, #96	@ 0x60
 800147e:	f300 80e1 	bgt.w	8001644 <Wireless_Receiving+0x238>
 8001482:	2b57      	cmp	r3, #87	@ 0x57
 8001484:	f000 809e 	beq.w	80015c4 <Wireless_Receiving+0x1b8>
 8001488:	2b57      	cmp	r3, #87	@ 0x57
 800148a:	f300 80db 	bgt.w	8001644 <Wireless_Receiving+0x238>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d003      	beq.n	800149a <Wireless_Receiving+0x8e>
 8001492:	2b56      	cmp	r3, #86	@ 0x56
 8001494:	f000 80a6 	beq.w	80015e4 <Wireless_Receiving+0x1d8>
				{
					/* Do Nothing */
				}
				break ;
			default:
				break;
 8001498:	e0d4      	b.n	8001644 <Wireless_Receiving+0x238>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800149a:	7c3b      	ldrb	r3, [r7, #16]
 800149c:	461a      	mov	r2, r3
 800149e:	4b73      	ldr	r3, [pc, #460]	@ (800166c <Wireless_Receiving+0x260>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	330c      	adds	r3, #12
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	db09      	blt.n	80014c2 <Wireless_Receiving+0xb6>
 80014ae:	7c3b      	ldrb	r3, [r7, #16]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b6e      	ldr	r3, [pc, #440]	@ (800166c <Wireless_Receiving+0x260>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	330c      	adds	r3, #12
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80014be:	429a      	cmp	r2, r3
 80014c0:	dd13      	ble.n	80014ea <Wireless_Receiving+0xde>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b69      	ldr	r3, [pc, #420]	@ (800166c <Wireless_Receiving+0x260>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	330a      	adds	r3, #10
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	db0b      	blt.n	80014ee <Wireless_Receiving+0xe2>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 80014d6:	7c7b      	ldrb	r3, [r7, #17]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b64      	ldr	r3, [pc, #400]	@ (800166c <Wireless_Receiving+0x260>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	330e      	adds	r3, #14
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dc01      	bgt.n	80014ee <Wireless_Receiving+0xe2>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <Wireless_Receiving+0xe4>
 80014ee:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80014f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001500:	7d3b      	ldrb	r3, [r7, #20]
 8001502:	461a      	mov	r2, r3
 8001504:	4b59      	ldr	r3, [pc, #356]	@ (800166c <Wireless_Receiving+0x260>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3304      	adds	r3, #4
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	db09      	blt.n	8001528 <Wireless_Receiving+0x11c>
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	461a      	mov	r2, r3
 8001518:	4b54      	ldr	r3, [pc, #336]	@ (800166c <Wireless_Receiving+0x260>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3304      	adds	r3, #4
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001524:	429a      	cmp	r2, r3
 8001526:	dd13      	ble.n	8001550 <Wireless_Receiving+0x144>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	461a      	mov	r2, r3
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <Wireless_Receiving+0x260>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	330a      	adds	r3, #10
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	db0b      	blt.n	8001554 <Wireless_Receiving+0x148>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 800153c:	7c7b      	ldrb	r3, [r7, #17]
 800153e:	461a      	mov	r2, r3
 8001540:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <Wireless_Receiving+0x260>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	330e      	adds	r3, #14
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800154c:	429a      	cmp	r2, r3
 800154e:	dc01      	bgt.n	8001554 <Wireless_Receiving+0x148>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <Wireless_Receiving+0x14a>
 8001554:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001556:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800155a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(Is_Front){
 8001566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <Wireless_Receiving+0x17a>
					Front_Car_ID = Received_Data[0];
 800156e:	7b3a      	ldrb	r2, [r7, #12]
 8001570:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <Wireless_Receiving+0x264>)
 8001572:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Back_Car_ID )
 8001574:	7b3a      	ldrb	r2, [r7, #12]
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <Wireless_Receiving+0x268>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d164      	bne.n	8001648 <Wireless_Receiving+0x23c>
						Back_Car_ID = 0;
 800157e:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <Wireless_Receiving+0x268>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
				break;
 8001584:	e060      	b.n	8001648 <Wireless_Receiving+0x23c>
				else if(Is_Back){
 8001586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800158a:	2b00      	cmp	r3, #0
 800158c:	d05c      	beq.n	8001648 <Wireless_Receiving+0x23c>
					Back_Car_ID = Received_Data[0];
 800158e:	7b3a      	ldrb	r2, [r7, #12]
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <Wireless_Receiving+0x268>)
 8001592:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Front_Car_ID )
 8001594:	7b3a      	ldrb	r2, [r7, #12]
 8001596:	4b36      	ldr	r3, [pc, #216]	@ (8001670 <Wireless_Receiving+0x264>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d154      	bne.n	8001648 <Wireless_Receiving+0x23c>
						Front_Car_ID = 0;
 800159e:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <Wireless_Receiving+0x264>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
				break;
 80015a4:	e050      	b.n	8001648 <Wireless_Receiving+0x23c>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d14f      	bne.n	800164c <Wireless_Receiving+0x240>
 80015ac:	7b3a      	ldrb	r2, [r7, #12]
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <Wireless_Receiving+0x264>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d14a      	bne.n	800164c <Wireless_Receiving+0x240>
					SSD1306_Clear();
 80015b6:	f000 fcd5 	bl	8001f64 <SSD1306_Clear>
					_vSSD1306_EmergencyElectronicBrake();
 80015ba:	f7ff fb97 	bl	8000cec <_vSSD1306_EmergencyElectronicBrake>
					SSD1306_UpdateScreen();
 80015be:	f000 fa0d 	bl	80019dc <SSD1306_UpdateScreen>
				break;
 80015c2:	e043      	b.n	800164c <Wireless_Receiving+0x240>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	2b11      	cmp	r3, #17
 80015c8:	d142      	bne.n	8001650 <Wireless_Receiving+0x244>
 80015ca:	7b3a      	ldrb	r2, [r7, #12]
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <Wireless_Receiving+0x264>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d13d      	bne.n	8001650 <Wireless_Receiving+0x244>
					SSD1306_Clear();
 80015d4:	f000 fcc6 	bl	8001f64 <SSD1306_Clear>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Left) ;
 80015d8:	20bb      	movs	r0, #187	@ 0xbb
 80015da:	f7ff fc19 	bl	8000e10 <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 80015de:	f000 f9fd 	bl	80019dc <SSD1306_UpdateScreen>
				break ;
 80015e2:	e035      	b.n	8001650 <Wireless_Receiving+0x244>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d134      	bne.n	8001654 <Wireless_Receiving+0x248>
 80015ea:	7b3a      	ldrb	r2, [r7, #12]
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <Wireless_Receiving+0x264>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d12f      	bne.n	8001654 <Wireless_Receiving+0x248>
					SSD1306_Clear();
 80015f4:	f000 fcb6 	bl	8001f64 <SSD1306_Clear>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Right) ;
 80015f8:	20aa      	movs	r0, #170	@ 0xaa
 80015fa:	f7ff fc09 	bl	8000e10 <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 80015fe:	f000 f9ed 	bl	80019dc <SSD1306_UpdateScreen>
				break ;
 8001602:	e027      	b.n	8001654 <Wireless_Receiving+0x248>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b11      	cmp	r3, #17
 8001608:	d126      	bne.n	8001658 <Wireless_Receiving+0x24c>
 800160a:	7b3a      	ldrb	r2, [r7, #12]
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <Wireless_Receiving+0x264>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d121      	bne.n	8001658 <Wireless_Receiving+0x24c>
					SSD1306_Clear();
 8001614:	f000 fca6 	bl	8001f64 <SSD1306_Clear>
					_vSSD1306_SafeToPass(DontPassWarningDirection_Left) ;
 8001618:	20bb      	movs	r0, #187	@ 0xbb
 800161a:	f7ff fba5 	bl	8000d68 <_vSSD1306_SafeToPass>
					SSD1306_UpdateScreen() ;
 800161e:	f000 f9dd 	bl	80019dc <SSD1306_UpdateScreen>
				break ;
 8001622:	e019      	b.n	8001658 <Wireless_Receiving+0x24c>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	2b11      	cmp	r3, #17
 8001628:	d118      	bne.n	800165c <Wireless_Receiving+0x250>
 800162a:	7b3a      	ldrb	r2, [r7, #12]
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <Wireless_Receiving+0x264>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d113      	bne.n	800165c <Wireless_Receiving+0x250>
					SSD1306_Clear();
 8001634:	f000 fc96 	bl	8001f64 <SSD1306_Clear>
					_vSSD1306_SafeToPass(DontPassWarningDirection_Right) ;
 8001638:	20aa      	movs	r0, #170	@ 0xaa
 800163a:	f7ff fb95 	bl	8000d68 <_vSSD1306_SafeToPass>
					SSD1306_UpdateScreen() ;
 800163e:	f000 f9cd 	bl	80019dc <SSD1306_UpdateScreen>
				break ;
 8001642:	e00b      	b.n	800165c <Wireless_Receiving+0x250>
				break;
 8001644:	bf00      	nop
 8001646:	e00a      	b.n	800165e <Wireless_Receiving+0x252>
				break;
 8001648:	bf00      	nop
 800164a:	e008      	b.n	800165e <Wireless_Receiving+0x252>
				break;
 800164c:	bf00      	nop
 800164e:	e006      	b.n	800165e <Wireless_Receiving+0x252>
				break ;
 8001650:	bf00      	nop
 8001652:	e004      	b.n	800165e <Wireless_Receiving+0x252>
				break ;
 8001654:	bf00      	nop
 8001656:	e002      	b.n	800165e <Wireless_Receiving+0x252>
				break ;
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <Wireless_Receiving+0x252>
				break ;
 800165c:	bf00      	nop
			}

		}
		osDelay(200);
 800165e:	20c8      	movs	r0, #200	@ 0xc8
 8001660:	f006 fb81 	bl	8007d66 <osDelay>
		if(NRF24_available()){
 8001664:	e6d6      	b.n	8001414 <Wireless_Receiving+0x8>
 8001666:	bf00      	nop
 8001668:	2000062c 	.word	0x2000062c
 800166c:	20001010 	.word	0x20001010
 8001670:	200003dc 	.word	0x200003dc
 8001674:	200003dd 	.word	0x200003dd

08001678 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <FCW_Algorithm+0x30>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	2200      	movs	r2, #0
 800168a:	2103      	movs	r1, #3
 800168c:	f006 fc08 	bl	8007ea0 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		/* buzzer on as warning */
		SSD1306_Clear();
 8001690:	f000 fc68 	bl	8001f64 <SSD1306_Clear>
		_vSSD1306_ForwardCollisionWarning();
 8001694:	f7ff faa2 	bl	8000bdc <_vSSD1306_ForwardCollisionWarning>
		SSD1306_UpdateScreen() ;
 8001698:	f000 f9a0 	bl	80019dc <SSD1306_UpdateScreen>

		osDelay(200);
 800169c:	20c8      	movs	r0, #200	@ 0xc8
 800169e:	f006 fb62 	bl	8007d66 <osDelay>
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80016a2:	bf00      	nop
 80016a4:	e7ec      	b.n	8001680 <FCW_Algorithm+0x8>
 80016a6:	bf00      	nop
 80016a8:	20000634 	.word	0x20000634

080016ac <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Algorithm */
	uint8_t Local_u8SendToRaspiStopNow = RPI_STOP ;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <EEBL_Algorithm+0x6c>)
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	2200      	movs	r2, #0
 80016c2:	2102      	movs	r1, #2
 80016c4:	f006 fbec 	bl	8007ea0 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		uint8_t MessageToWarnBackCar[]={CAR_ID,EEBL_ID,Back_Car_ID};
 80016c8:	2311      	movs	r3, #17
 80016ca:	733b      	strb	r3, [r7, #12]
 80016cc:	2360      	movs	r3, #96	@ 0x60
 80016ce:	737b      	strb	r3, [r7, #13]
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <EEBL_Algorithm+0x70>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	73bb      	strb	r3, [r7, #14]
		/* Send Message to the Raspberry Pi to Take Actions and Stop Motor */
		HAL_UART_Transmit(&huart1, &Local_u8SendToRaspiStopNow, 1, HAL_MAX_DELAY ) ;
 80016d6:	f107 010f 	add.w	r1, r7, #15
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2201      	movs	r2, #1
 80016e0:	480f      	ldr	r0, [pc, #60]	@ (8001720 <EEBL_Algorithm+0x74>)
 80016e2:	f005 f85b 	bl	800679c <HAL_UART_Transmit>

		/* Send warning to the Backward Vehicle to check on Algorithm via NRF */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <EEBL_Algorithm+0x78>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 31ff 	mov.w	r1, #4294967295
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fcc1 	bl	8008076 <osMutexAcquire>

		NRF24_stopListening();
 80016f4:	f001 f9b2 	bl	8002a5c <NRF24_stopListening>
		NRF24_write( MessageToWarnBackCar , 3 ) ;
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2103      	movs	r1, #3
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 f9b8 	bl	8002a74 <NRF24_write>
		NRF24_startListening();
 8001704:	f001 f984 	bl	8002a10 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <EEBL_Algorithm+0x78>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f006 fcfd 	bl	800810c <osMutexRelease>
	{
 8001712:	bf00      	nop
 8001714:	e7d0      	b.n	80016b8 <EEBL_Algorithm+0xc>
 8001716:	bf00      	nop
 8001718:	20000634 	.word	0x20000634
 800171c:	200003dd 	.word	0x200003dd
 8001720:	20000558 	.word	0x20000558
 8001724:	2000062c 	.word	0x2000062c

08001728 <Ask_LidarData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ask_LidarData */
void Ask_LidarData(void *argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Ask_LidarData */
	uint8_t  Local_u8AskLidarForData = ASK_DATA ;
 8001730:	23f1      	movs	r3, #241	@ 0xf1
 8001732:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Transmit(&huart1, &Local_u8AskLidarForData, 1, HAL_MAX_DELAY ) ;
 8001734:	f107 010f 	add.w	r1, r7, #15
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	2201      	movs	r2, #1
 800173e:	4804      	ldr	r0, [pc, #16]	@ (8001750 <Ask_LidarData+0x28>)
 8001740:	f005 f82c 	bl	800679c <HAL_UART_Transmit>

		osDelay(1000);
 8001744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001748:	f006 fb0d 	bl	8007d66 <osDelay>
		HAL_UART_Transmit(&huart1, &Local_u8AskLidarForData, 1, HAL_MAX_DELAY ) ;
 800174c:	bf00      	nop
 800174e:	e7f1      	b.n	8001734 <Ask_LidarData+0xc>
 8001750:	20000558 	.word	0x20000558

08001754 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001766:	f001 fc95 	bl	8003094 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40000800 	.word	0x40000800

08001778 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60ba      	str	r2, [r7, #8]
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	81fb      	strh	r3, [r7, #14]
 8001792:	460b      	mov	r3, r1
 8001794:	81bb      	strh	r3, [r7, #12]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	3307      	adds	r3, #7
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da00      	bge.n	80017a6 <SSD1306_DrawBitmap+0x22>
 80017a4:	3307      	adds	r3, #7
 80017a6:	10db      	asrs	r3, r3, #3
 80017a8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	82bb      	strh	r3, [r7, #20]
 80017b2:	e044      	b.n	800183e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	827b      	strh	r3, [r7, #18]
 80017b8:	e02f      	b.n	800181a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
 80017ca:	e012      	b.n	80017f2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80017cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80017d4:	fb03 f202 	mul.w	r2, r3, r2
 80017d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da00      	bge.n	80017e2 <SSD1306_DrawBitmap+0x5e>
 80017e0:	3307      	adds	r3, #7
 80017e2:	10db      	asrs	r3, r3, #3
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80017f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da09      	bge.n	800180e <SSD1306_DrawBitmap+0x8a>
 80017fa:	89fa      	ldrh	r2, [r7, #14]
 80017fc:	8a7b      	ldrh	r3, [r7, #18]
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	89b9      	ldrh	r1, [r7, #12]
 8001804:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f92d 	bl	8001a68 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800180e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001812:	b29b      	uxth	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	827b      	strh	r3, [r7, #18]
 800181a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbc9      	blt.n	80017ba <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001826:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800182a:	b29b      	uxth	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	82bb      	strh	r3, [r7, #20]
 8001832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001836:	b29b      	uxth	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	81bb      	strh	r3, [r7, #12]
 800183e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001842:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbb4      	blt.n	80017b4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800185a:	f000 fb8d 	bl	8001f78 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800185e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001862:	2201      	movs	r2, #1
 8001864:	2178      	movs	r1, #120	@ 0x78
 8001866:	485b      	ldr	r0, [pc, #364]	@ (80019d4 <SSD1306_Init+0x180>)
 8001868:	f002 fd34 	bl	80042d4 <HAL_I2C_IsDeviceReady>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e0a9      	b.n	80019ca <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001876:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800187a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800187c:	e002      	b.n	8001884 <SSD1306_Init+0x30>
		p--;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3b01      	subs	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800188a:	22ae      	movs	r2, #174	@ 0xae
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	@ 0x78
 8001890:	f000 fbee 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001894:	2220      	movs	r2, #32
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	@ 0x78
 800189a:	f000 fbe9 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	@ 0x78
 80018a4:	f000 fbe4 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018a8:	22b0      	movs	r2, #176	@ 0xb0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	@ 0x78
 80018ae:	f000 fbdf 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80018b2:	22c8      	movs	r2, #200	@ 0xc8
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 fbda 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	@ 0x78
 80018c2:	f000 fbd5 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018c6:	2210      	movs	r2, #16
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	@ 0x78
 80018cc:	f000 fbd0 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018d0:	2240      	movs	r2, #64	@ 0x40
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	@ 0x78
 80018d6:	f000 fbcb 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018da:	2281      	movs	r2, #129	@ 0x81
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	@ 0x78
 80018e0:	f000 fbc6 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018e4:	22ff      	movs	r2, #255	@ 0xff
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	@ 0x78
 80018ea:	f000 fbc1 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018ee:	22a1      	movs	r2, #161	@ 0xa1
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	@ 0x78
 80018f4:	f000 fbbc 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018f8:	22a6      	movs	r2, #166	@ 0xa6
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	@ 0x78
 80018fe:	f000 fbb7 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001902:	22a8      	movs	r2, #168	@ 0xa8
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	@ 0x78
 8001908:	f000 fbb2 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800190c:	223f      	movs	r2, #63	@ 0x3f
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	@ 0x78
 8001912:	f000 fbad 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001916:	22a4      	movs	r2, #164	@ 0xa4
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	@ 0x78
 800191c:	f000 fba8 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001920:	22d3      	movs	r2, #211	@ 0xd3
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	@ 0x78
 8001926:	f000 fba3 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	@ 0x78
 8001930:	f000 fb9e 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001934:	22d5      	movs	r2, #213	@ 0xd5
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	@ 0x78
 800193a:	f000 fb99 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800193e:	22f0      	movs	r2, #240	@ 0xf0
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	@ 0x78
 8001944:	f000 fb94 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001948:	22d9      	movs	r2, #217	@ 0xd9
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	@ 0x78
 800194e:	f000 fb8f 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001952:	2222      	movs	r2, #34	@ 0x22
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	@ 0x78
 8001958:	f000 fb8a 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800195c:	22da      	movs	r2, #218	@ 0xda
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	@ 0x78
 8001962:	f000 fb85 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001966:	2212      	movs	r2, #18
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	@ 0x78
 800196c:	f000 fb80 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001970:	22db      	movs	r2, #219	@ 0xdb
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	@ 0x78
 8001976:	f000 fb7b 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800197a:	2220      	movs	r2, #32
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	@ 0x78
 8001980:	f000 fb76 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001984:	228d      	movs	r2, #141	@ 0x8d
 8001986:	2100      	movs	r1, #0
 8001988:	2078      	movs	r0, #120	@ 0x78
 800198a:	f000 fb71 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800198e:	2214      	movs	r2, #20
 8001990:	2100      	movs	r1, #0
 8001992:	2078      	movs	r0, #120	@ 0x78
 8001994:	f000 fb6c 	bl	8002070 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001998:	22af      	movs	r2, #175	@ 0xaf
 800199a:	2100      	movs	r1, #0
 800199c:	2078      	movs	r0, #120	@ 0x78
 800199e:	f000 fb67 	bl	8002070 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80019a2:	222e      	movs	r2, #46	@ 0x2e
 80019a4:	2100      	movs	r1, #0
 80019a6:	2078      	movs	r0, #120	@ 0x78
 80019a8:	f000 fb62 	bl	8002070 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 f843 	bl	8001a38 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80019b2:	f000 f813 	bl	80019dc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <SSD1306_Init+0x184>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SSD1306_Init+0x184>)
 80019be:	2200      	movs	r2, #0
 80019c0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <SSD1306_Init+0x184>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000464 	.word	0x20000464
 80019d8:	20001424 	.word	0x20001424

080019dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e01d      	b.n	8001a24 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	3b50      	subs	r3, #80	@ 0x50
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	2078      	movs	r0, #120	@ 0x78
 80019f4:	f000 fb3c 	bl	8002070 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2078      	movs	r0, #120	@ 0x78
 80019fe:	f000 fb37 	bl	8002070 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a02:	2210      	movs	r2, #16
 8001a04:	2100      	movs	r1, #0
 8001a06:	2078      	movs	r0, #120	@ 0x78
 8001a08:	f000 fb32 	bl	8002070 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <SSD1306_UpdateScreen+0x58>)
 8001a12:	441a      	add	r2, r3
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	2140      	movs	r1, #64	@ 0x40
 8001a18:	2078      	movs	r0, #120	@ 0x78
 8001a1a:	f000 fac3 	bl	8001fa4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	3301      	adds	r3, #1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d9de      	bls.n	80019e8 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20001024 	.word	0x20001024

08001a38 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <SSD1306_Fill+0x14>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <SSD1306_Fill+0x16>
 8001a4c:	23ff      	movs	r3, #255	@ 0xff
 8001a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a52:	4619      	mov	r1, r3
 8001a54:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <SSD1306_Fill+0x2c>)
 8001a56:	f00a fa8f 	bl	800bf78 <memset>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20001024 	.word	0x20001024

08001a68 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
 8001a72:	460b      	mov	r3, r1
 8001a74:	80bb      	strh	r3, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	70fb      	strb	r3, [r7, #3]
	if (
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a7e:	d848      	bhi.n	8001b12 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a84:	d845      	bhi.n	8001b12 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <SSD1306_DrawPixel+0xb8>)
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11a      	bne.n	8001ad8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001aa2:	88fa      	ldrh	r2, [r7, #6]
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	01db      	lsls	r3, r3, #7
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <SSD1306_DrawPixel+0xbc>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	b25a      	sxtb	r2, r3
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b259      	sxtb	r1, r3
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	4603      	mov	r3, r0
 8001acc:	01db      	lsls	r3, r3, #7
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2c9      	uxtb	r1, r1
 8001ad2:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <SSD1306_DrawPixel+0xbc>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
 8001ad6:	e01d      	b.n	8001b14 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	b298      	uxth	r0, r3
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	01db      	lsls	r3, r3, #7
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b24 <SSD1306_DrawPixel+0xbc>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	b25a      	sxtb	r2, r3
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	4013      	ands	r3, r2
 8001b00:	b259      	sxtb	r1, r3
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	4603      	mov	r3, r0
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	4413      	add	r3, r2
 8001b0a:	b2c9      	uxtb	r1, r1
 8001b0c:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <SSD1306_DrawPixel+0xbc>)
 8001b0e:	54d1      	strb	r1, [r2, r3]
 8001b10:	e000      	b.n	8001b14 <SSD1306_DrawPixel+0xac>
		return;
 8001b12:	bf00      	nop
	}
}
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20001424 	.word	0x20001424
 8001b24:	20001024 	.word	0x20001024

08001b28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460a      	mov	r2, r1
 8001b32:	80fb      	strh	r3, [r7, #6]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b38:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SSD1306_GotoXY+0x28>)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <SSD1306_GotoXY+0x28>)
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	8053      	strh	r3, [r2, #2]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20001424 	.word	0x20001424

08001b54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
	if (
 8001b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b72:	dc07      	bgt.n	8001b84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b74:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001b76:	885b      	ldrh	r3, [r3, #2]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b82:	dd01      	ble.n	8001b88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e05d      	b.n	8001c44 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e04b      	b.n	8001c26 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	3b20      	subs	r3, #32
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	7849      	ldrb	r1, [r1, #1]
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	440b      	add	r3, r1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	e030      	b.n	8001c14 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001bd0:	885a      	ldrh	r2, [r3, #2]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	79ba      	ldrb	r2, [r7, #6]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7ff ff43 	bl	8001a68 <SSD1306_DrawPixel>
 8001be2:	e014      	b.n	8001c0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001be6:	881a      	ldrh	r2, [r3, #0]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001bf2:	885a      	ldrh	r2, [r3, #2]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b299      	uxth	r1, r3
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f7ff ff2d 	bl	8001a68 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3301      	adds	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d3c8      	bcc.n	8001bb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d3ad      	bcc.n	8001b8e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <SSD1306_Putc+0xf8>)
 8001c40:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20001424 	.word	0x20001424

08001c50 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c5e:	e012      	b.n	8001c86 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff73 	bl	8001b54 <SSD1306_Putc>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d002      	beq.n	8001c80 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	e008      	b.n	8001c92 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e8      	bne.n	8001c60 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	781b      	ldrb	r3, [r3, #0]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001c9a:	b590      	push	{r4, r7, lr}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4623      	mov	r3, r4
 8001caa:	80fb      	strh	r3, [r7, #6]
 8001cac:	4603      	mov	r3, r0
 8001cae:	80bb      	strh	r3, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cbc:	d901      	bls.n	8001cc2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001cbe:	237f      	movs	r3, #127	@ 0x7f
 8001cc0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cc6:	d901      	bls.n	8001ccc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001cc8:	237f      	movs	r3, #127	@ 0x7f
 8001cca:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd0:	d901      	bls.n	8001cd6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001cd2:	233f      	movs	r3, #63	@ 0x3f
 8001cd4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001cd6:	883b      	ldrh	r3, [r7, #0]
 8001cd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cda:	d901      	bls.n	8001ce0 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001cdc:	233f      	movs	r3, #63	@ 0x3f
 8001cde:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d205      	bcs.n	8001cf4 <SSD1306_DrawLine+0x5a>
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	e004      	b.n	8001cfe <SSD1306_DrawLine+0x64>
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001d00:	88ba      	ldrh	r2, [r7, #4]
 8001d02:	883b      	ldrh	r3, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d205      	bcs.n	8001d14 <SSD1306_DrawLine+0x7a>
 8001d08:	883a      	ldrh	r2, [r7, #0]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	e004      	b.n	8001d1e <SSD1306_DrawLine+0x84>
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	883b      	ldrh	r3, [r7, #0]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d201      	bcs.n	8001d2c <SSD1306_DrawLine+0x92>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e001      	b.n	8001d30 <SSD1306_DrawLine+0x96>
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	883b      	ldrh	r3, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d201      	bcs.n	8001d3e <SSD1306_DrawLine+0xa4>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e001      	b.n	8001d42 <SSD1306_DrawLine+0xa8>
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001d44:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dd06      	ble.n	8001d5e <SSD1306_DrawLine+0xc4>
 8001d50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d54:	0fda      	lsrs	r2, r3, #31
 8001d56:	4413      	add	r3, r2
 8001d58:	105b      	asrs	r3, r3, #1
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	e006      	b.n	8001d6c <SSD1306_DrawLine+0xd2>
 8001d5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d62:	0fda      	lsrs	r2, r3, #31
 8001d64:	4413      	add	r3, r2
 8001d66:	105b      	asrs	r3, r3, #1
 8001d68:	425b      	negs	r3, r3
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001d6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d129      	bne.n	8001dca <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001d76:	883a      	ldrh	r2, [r7, #0]
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d205      	bcs.n	8001d8a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001d7e:	883b      	ldrh	r3, [r7, #0]
 8001d80:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001d86:	893b      	ldrh	r3, [r7, #8]
 8001d88:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d205      	bcs.n	8001d9e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001d9a:	893b      	ldrh	r3, [r7, #8]
 8001d9c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	82bb      	strh	r3, [r7, #20]
 8001da2:	e00c      	b.n	8001dbe <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001da4:	8ab9      	ldrh	r1, [r7, #20]
 8001da6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe5b 	bl	8001a68 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001db2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	82bb      	strh	r3, [r7, #20]
 8001dbe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dded      	ble.n	8001da4 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8001dc8:	e05f      	b.n	8001e8a <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8001dca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d129      	bne.n	8001e26 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001dd2:	883a      	ldrh	r2, [r7, #0]
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d205      	bcs.n	8001de6 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001dda:	883b      	ldrh	r3, [r7, #0]
 8001ddc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d205      	bcs.n	8001dfa <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	82bb      	strh	r3, [r7, #20]
 8001dfe:	e00c      	b.n	8001e1a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001e00:	8abb      	ldrh	r3, [r7, #20]
 8001e02:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001e06:	88b9      	ldrh	r1, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe2d 	bl	8001a68 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	82bb      	strh	r3, [r7, #20]
 8001e1a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dded      	ble.n	8001e00 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8001e24:	e031      	b.n	8001e8a <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001e26:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001e2a:	88b9      	ldrh	r1, [r7, #4]
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fe1a 	bl	8001a68 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d103      	bne.n	8001e44 <SSD1306_DrawLine+0x1aa>
 8001e3c:	88ba      	ldrh	r2, [r7, #4]
 8001e3e:	883b      	ldrh	r3, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d021      	beq.n	8001e88 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001e44:	8afb      	ldrh	r3, [r7, #22]
 8001e46:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001e48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e50:	425b      	negs	r3, r3
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dd08      	ble.n	8001e68 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001e56:	8afa      	ldrh	r2, [r7, #22]
 8001e58:	8a3b      	ldrh	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001e60:	89fa      	ldrh	r2, [r7, #14]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4413      	add	r3, r2
 8001e66:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001e68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dad8      	bge.n	8001e26 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001e74:	8afa      	ldrh	r2, [r7, #22]
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001e7e:	89ba      	ldrh	r2, [r7, #12]
 8001e80:	88bb      	ldrh	r3, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001e86:	e7ce      	b.n	8001e26 <SSD1306_DrawLine+0x18c>
			break;
 8001e88:	bf00      	nop
		}
	}
}
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}

08001e90 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	4604      	mov	r4, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eb2:	d853      	bhi.n	8001f5c <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001eb4:	88bb      	ldrh	r3, [r7, #4]
 8001eb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb8:	d850      	bhi.n	8001f5c <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001eba:	88fa      	ldrh	r2, [r7, #6]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ec2:	dd03      	ble.n	8001ecc <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001eca:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001ecc:	88ba      	ldrh	r2, [r7, #4]
 8001ece:	883b      	ldrh	r3, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ed4:	dd03      	ble.n	8001ede <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001edc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	88bc      	ldrh	r4, [r7, #4]
 8001ee8:	88b9      	ldrh	r1, [r7, #4]
 8001eea:	88f8      	ldrh	r0, [r7, #6]
 8001eec:	7e3b      	ldrb	r3, [r7, #24]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4623      	mov	r3, r4
 8001ef2:	f7ff fed2 	bl	8001c9a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001ef6:	88ba      	ldrh	r2, [r7, #4]
 8001ef8:	883b      	ldrh	r3, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	b299      	uxth	r1, r3
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4413      	add	r3, r2
 8001f04:	b29c      	uxth	r4, r3
 8001f06:	88ba      	ldrh	r2, [r7, #4]
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	88f8      	ldrh	r0, [r7, #6]
 8001f10:	7e3b      	ldrb	r3, [r7, #24]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	4622      	mov	r2, r4
 8001f18:	f7ff febf 	bl	8001c9a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001f1c:	88ba      	ldrh	r2, [r7, #4]
 8001f1e:	883b      	ldrh	r3, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	b29c      	uxth	r4, r3
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	88b9      	ldrh	r1, [r7, #4]
 8001f28:	88f8      	ldrh	r0, [r7, #6]
 8001f2a:	7e3b      	ldrb	r3, [r7, #24]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4623      	mov	r3, r4
 8001f30:	f7ff feb3 	bl	8001c9a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b298      	uxth	r0, r3
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	4413      	add	r3, r2
 8001f42:	b29c      	uxth	r4, r3
 8001f44:	88ba      	ldrh	r2, [r7, #4]
 8001f46:	883b      	ldrh	r3, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	88b9      	ldrh	r1, [r7, #4]
 8001f4e:	7e3b      	ldrb	r3, [r7, #24]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4613      	mov	r3, r2
 8001f54:	4622      	mov	r2, r4
 8001f56:	f7ff fea0 	bl	8001c9a <SSD1306_DrawLine>
 8001f5a:	e000      	b.n	8001f5e <SSD1306_DrawRectangle+0xce>
		return;
 8001f5c:	bf00      	nop
}
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fd65 	bl	8001a38 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001f6e:	f7ff fd35 	bl	80019dc <SSD1306_UpdateScreen>
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <ssd1306_I2C_Init+0x28>)
 8001f80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f82:	e002      	b.n	8001f8a <ssd1306_I2C_Init+0x12>
		p--;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	0003d090 	.word	0x0003d090

08001fa4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b0c7      	sub	sp, #284	@ 0x11c
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	4604      	mov	r4, r0
 8001fac:	4608      	mov	r0, r1
 8001fae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001fb2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001fb6:	600a      	str	r2, [r1, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fbe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001fce:	4602      	mov	r2, r0
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fda:	460a      	mov	r2, r1
 8001fdc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fe6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fea:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ff8:	e015      	b.n	8002026 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001ffa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ffe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002002:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	441a      	add	r2, r3
 800200a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800200e:	3301      	adds	r3, #1
 8002010:	7811      	ldrb	r1, [r2, #0]
 8002012:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002016:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800201a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800201c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002020:	3301      	adds	r3, #1
 8002022:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002026:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800202a:	b29b      	uxth	r3, r3
 800202c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002030:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d8df      	bhi.n	8001ffa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800203a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b299      	uxth	r1, r3
 8002046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800204a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	f107 020c 	add.w	r2, r7, #12
 8002058:	200a      	movs	r0, #10
 800205a:	9000      	str	r0, [sp, #0]
 800205c:	4803      	ldr	r0, [pc, #12]	@ (800206c <ssd1306_I2C_WriteMulti+0xc8>)
 800205e:	f002 f83b 	bl	80040d8 <HAL_I2C_Master_Transmit>
}
 8002062:	bf00      	nop
 8002064:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	20000464 	.word	0x20000464

08002070 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	460b      	mov	r3, r1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	4613      	mov	r3, r2
 8002080:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002086:	797b      	ldrb	r3, [r7, #5]
 8002088:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	b299      	uxth	r1, r3
 800208e:	f107 020c 	add.w	r2, r7, #12
 8002092:	230a      	movs	r3, #10
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2302      	movs	r3, #2
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <ssd1306_I2C_Write+0x38>)
 800209a:	f002 f81d 	bl	80040d8 <HAL_I2C_Master_Transmit>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000464 	.word	0x20000464

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_MspInit+0x54>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_MspInit+0x54>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <HAL_MspInit+0x54>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_MspInit+0x54>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_MspInit+0x54>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_MspInit+0x54>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	210f      	movs	r1, #15
 80020ee:	f06f 0001 	mvn.w	r0, #1
 80020f2:	f001 f8cb 	bl	800328c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <HAL_I2C_MspInit+0x84>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12b      	bne.n	800217e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b18      	ldr	r3, [pc, #96]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a17      	ldr	r2, [pc, #92]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002146:	2312      	movs	r3, #18
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002152:	2304      	movs	r3, #4
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <HAL_I2C_MspInit+0x8c>)
 800215e:	f001 fcc1 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002170:	6413      	str	r3, [r2, #64]	@ 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40005400 	.word	0x40005400
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_SPI_MspInit+0x84>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a17      	ldr	r2, [pc, #92]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_SPI_MspInit+0x88>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021ee:	23e0      	movs	r3, #224	@ 0xe0
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021fe:	2305      	movs	r3, #5
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	@ (8002220 <HAL_SPI_MspInit+0x8c>)
 800220a:	f001 fc6b 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40013000 	.word	0x40013000
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000

08002224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_TIM_Base_MspInit+0x48>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d115      	bne.n	8002262 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_TIM_Base_MspInit+0x4c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a0c      	ldr	r2, [pc, #48]	@ (8002270 <HAL_TIM_Base_MspInit+0x4c>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_TIM_Base_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	201d      	movs	r0, #29
 8002258:	f001 f818 	bl	800328c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800225c:	201d      	movs	r0, #29
 800225e:	f001 f831 	bl	80032c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40000400 	.word	0x40000400
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a35      	ldr	r2, [pc, #212]	@ (8002368 <HAL_UART_MspInit+0xf4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d163      	bne.n	800235e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b34      	ldr	r3, [pc, #208]	@ (800236c <HAL_UART_MspInit+0xf8>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4a33      	ldr	r2, [pc, #204]	@ (800236c <HAL_UART_MspInit+0xf8>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a6:	4b31      	ldr	r3, [pc, #196]	@ (800236c <HAL_UART_MspInit+0xf8>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <HAL_UART_MspInit+0xf8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <HAL_UART_MspInit+0xf8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_UART_MspInit+0xf8>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e0:	2307      	movs	r3, #7
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4821      	ldr	r0, [pc, #132]	@ (8002370 <HAL_UART_MspInit+0xfc>)
 80022ec:	f001 fbfa 	bl	8003ae4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80022f0:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_UART_MspInit+0x100>)
 80022f2:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <HAL_UART_MspInit+0x104>)
 80022f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_UART_MspInit+0x100>)
 80022f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_UART_MspInit+0x100>)
 800230c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002310:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002314:	2200      	movs	r2, #0
 8002316:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_UART_MspInit+0x100>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002324:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_UART_MspInit+0x100>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002332:	4810      	ldr	r0, [pc, #64]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002334:	f000 ffd4 	bl	80032e0 <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800233e:	f7ff fa1b 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_UART_MspInit+0x100>)
 8002346:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_UART_MspInit+0x100>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2105      	movs	r1, #5
 8002352:	2025      	movs	r0, #37	@ 0x25
 8002354:	f000 ff9a 	bl	800328c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002358:	2025      	movs	r0, #37	@ 0x25
 800235a:	f000 ffb3 	bl	80032c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	@ 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40011000 	.word	0x40011000
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	200005a0 	.word	0x200005a0
 8002378:	40026440 	.word	0x40026440

0800237c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HAL_InitTick+0xe4>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <HAL_InitTick+0xe4>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6413      	str	r3, [r2, #64]	@ 0x40
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <HAL_InitTick+0xe4>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023a8:	f107 0210 	add.w	r2, r7, #16
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 ff70 	bl	8005298 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023c2:	f002 ff41 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 80023c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80023c8:	e004      	b.n	80023d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ca:	f002 ff3d 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 80023ce:	4603      	mov	r3, r0
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d6:	4a23      	ldr	r2, [pc, #140]	@ (8002464 <HAL_InitTick+0xe8>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	3b01      	subs	r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_InitTick+0xec>)
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_InitTick+0xf0>)
 80023e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_InitTick+0xec>)
 80023ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ee:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80023f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <HAL_InitTick+0xec>)
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_InitTick+0xec>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_InitTick+0xec>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002402:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_InitTick+0xec>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002408:	4817      	ldr	r0, [pc, #92]	@ (8002468 <HAL_InitTick+0xec>)
 800240a:	f003 fd4d 	bl	8005ea8 <HAL_TIM_Base_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11b      	bne.n	8002454 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800241c:	4812      	ldr	r0, [pc, #72]	@ (8002468 <HAL_InitTick+0xec>)
 800241e:	f003 fd93 	bl	8005f48 <HAL_TIM_Base_Start_IT>
 8002422:	4603      	mov	r3, r0
 8002424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800242c:	2b00      	cmp	r3, #0
 800242e:	d111      	bne.n	8002454 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002430:	201e      	movs	r0, #30
 8002432:	f000 ff47 	bl	80032c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d808      	bhi.n	800244e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	201e      	movs	r0, #30
 8002442:	f000 ff23 	bl	800328c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002446:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_InitTick+0xf4>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e002      	b.n	8002454 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002458:	4618      	mov	r0, r3
 800245a:	3738      	adds	r7, #56	@ 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	431bde83 	.word	0x431bde83
 8002468:	2000142c 	.word	0x2000142c
 800246c:	40000800 	.word	0x40000800
 8002470:	200003ec 	.word	0x200003ec

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <NMI_Handler+0x4>

0800247c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <MemManage_Handler+0x4>

0800248c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <UsageFault_Handler+0x4>

0800249c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024ae:	2004      	movs	r0, #4
 80024b0:	f001 fcb6 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM3_IRQHandler+0x10>)
 80024be:	f003 fda5 	bl	800600c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000510 	.word	0x20000510

080024cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <TIM4_IRQHandler+0x10>)
 80024d2:	f003 fd9b 	bl	800600c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000142c 	.word	0x2000142c

080024e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <USART1_IRQHandler+0x10>)
 80024e6:	f004 fa09 	bl	80068fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000558 	.word	0x20000558

080024f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <DMA2_Stream2_IRQHandler+0x10>)
 80024fa:	f001 f889 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200005a0 	.word	0x200005a0

08002508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <SystemInit+0x20>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <SystemInit+0x20>)
 8002514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800252c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002564 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002530:	f7ff ffea 	bl	8002508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	@ (8002568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	@ (800256c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	@ (8002578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255a:	f009 fd1b 	bl	800bf94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255e:	f7fd ffcd 	bl	80004fc <main>
  bx  lr    
 8002562:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8002570:	0800cc40 	.word	0x0800cc40
  ldr r2, =_sbss
 8002574:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8002578:	20005f8c 	.word	0x20005f8c

0800257c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC_IRQHandler>
	...

08002580 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <NRF24_DelayMicroSeconds+0x3c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <NRF24_DelayMicroSeconds+0x40>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9a      	lsrs	r2, r3, #18
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80025a0:	bf00      	nop
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	60fa      	str	r2, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1fa      	bne.n	80025a2 <NRF24_DelayMicroSeconds+0x22>
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200003e8 	.word	0x200003e8
 80025c0:	165e9f81 	.word	0x165e9f81

080025c4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <NRF24_csn+0x20>
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <NRF24_csn+0x38>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <NRF24_csn+0x3c>)
 80025d8:	8811      	ldrh	r1, [r2, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fc05 	bl	8003dec <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80025e2:	e007      	b.n	80025f4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <NRF24_csn+0x38>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <NRF24_csn+0x3c>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fbfc 	bl	8003dec <HAL_GPIO_WritePin>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20001488 	.word	0x20001488
 8002600:	2000148c 	.word	0x2000148c

08002604 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <NRF24_ce+0x20>
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <NRF24_ce+0x38>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <NRF24_ce+0x3c>)
 8002618:	8811      	ldrh	r1, [r2, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fbe5 	bl	8003dec <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002622:	e007      	b.n	8002634 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <NRF24_ce+0x38>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <NRF24_ce+0x3c>)
 800262a:	8811      	ldrh	r1, [r2, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f001 fbdc 	bl	8003dec <HAL_GPIO_WritePin>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20001488 	.word	0x20001488
 8002640:	2000148e 	.word	0x2000148e

08002644 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff ffb8 	bl	80025c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	b2db      	uxtb	r3, r3
 800265c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800265e:	f107 010c 	add.w	r1, r7, #12
 8002662:	2364      	movs	r3, #100	@ 0x64
 8002664:	2201      	movs	r2, #1
 8002666:	480a      	ldr	r0, [pc, #40]	@ (8002690 <NRF24_read_register+0x4c>)
 8002668:	f002 fed1 	bl	800540e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	2364      	movs	r3, #100	@ 0x64
 8002674:	2201      	movs	r2, #1
 8002676:	4806      	ldr	r0, [pc, #24]	@ (8002690 <NRF24_read_register+0x4c>)
 8002678:	f003 f80c 	bl	8005694 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800267c:	7b7b      	ldrb	r3, [r7, #13]
 800267e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8002680:	2001      	movs	r0, #1
 8002682:	f7ff ff9f 	bl	80025c4 <NRF24_csn>
	return retData;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20001490 	.word	0x20001490

08002694 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff ff8d 	bl	80025c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80026b4:	f107 010c 	add.w	r1, r7, #12
 80026b8:	2364      	movs	r3, #100	@ 0x64
 80026ba:	2201      	movs	r2, #1
 80026bc:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <NRF24_read_registerN+0x4c>)
 80026be:	f002 fea6 	bl	800540e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2364      	movs	r3, #100	@ 0x64
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <NRF24_read_registerN+0x4c>)
 80026cc:	f002 ffe2 	bl	8005694 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff ff77 	bl	80025c4 <NRF24_csn>
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20001490 	.word	0x20001490

080026e4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	460a      	mov	r2, r1
 80026ee:	71fb      	strb	r3, [r7, #7]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ff65 	bl	80025c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f043 0320 	orr.w	r3, r3, #32
 8002700:	b2db      	uxtb	r3, r3
 8002702:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002708:	f107 010c 	add.w	r1, r7, #12
 800270c:	2364      	movs	r3, #100	@ 0x64
 800270e:	2202      	movs	r2, #2
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <NRF24_write_register+0x40>)
 8002712:	f002 fe7c 	bl	800540e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8002716:	2001      	movs	r0, #1
 8002718:	f7ff ff54 	bl	80025c4 <NRF24_csn>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20001490 	.word	0x20001490

08002728 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	4613      	mov	r3, r2
 8002736:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff ff43 	bl	80025c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	b2db      	uxtb	r3, r3
 8002746:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002748:	f107 010c 	add.w	r1, r7, #12
 800274c:	2364      	movs	r3, #100	@ 0x64
 800274e:	2201      	movs	r2, #1
 8002750:	4808      	ldr	r0, [pc, #32]	@ (8002774 <NRF24_write_registerN+0x4c>)
 8002752:	f002 fe5c 	bl	800540e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	b29a      	uxth	r2, r3
 800275a:	2364      	movs	r3, #100	@ 0x64
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	4805      	ldr	r0, [pc, #20]	@ (8002774 <NRF24_write_registerN+0x4c>)
 8002760:	f002 fe55 	bl	800540e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff ff2d 	bl	80025c4 <NRF24_csn>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20001490 	.word	0x20001490

08002778 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ff1d 	bl	80025c4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800278a:	23a0      	movs	r3, #160	@ 0xa0
 800278c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800278e:	f107 010f 	add.w	r1, r7, #15
 8002792:	2364      	movs	r3, #100	@ 0x64
 8002794:	2201      	movs	r2, #1
 8002796:	4808      	ldr	r0, [pc, #32]	@ (80027b8 <NRF24_write_payload+0x40>)
 8002798:	f002 fe39 	bl	800540e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	2364      	movs	r3, #100	@ 0x64
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4804      	ldr	r0, [pc, #16]	@ (80027b8 <NRF24_write_payload+0x40>)
 80027a6:	f002 fe32 	bl	800540e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff ff0a 	bl	80025c4 <NRF24_csn>
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20001490 	.word	0x20001490

080027bc <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80027c8:	f000 fa82 	bl	8002cd0 <NRF24_getPayloadSize>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d303      	bcc.n	80027de <NRF24_read_payload+0x22>
 80027d6:	f000 fa7b 	bl	8002cd0 <NRF24_getPayloadSize>
 80027da:	4603      	mov	r3, r0
 80027dc:	e000      	b.n	80027e0 <NRF24_read_payload+0x24>
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7ff feee 	bl	80025c4 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80027e8:	2361      	movs	r3, #97	@ 0x61
 80027ea:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80027ec:	f107 010e 	add.w	r1, r7, #14
 80027f0:	2364      	movs	r3, #100	@ 0x64
 80027f2:	2201      	movs	r2, #1
 80027f4:	4808      	ldr	r0, [pc, #32]	@ (8002818 <NRF24_read_payload+0x5c>)
 80027f6:	f002 fe0a 	bl	800540e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	2364      	movs	r3, #100	@ 0x64
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4805      	ldr	r0, [pc, #20]	@ (8002818 <NRF24_read_payload+0x5c>)
 8002804:	f002 ff46 	bl	8005694 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8002808:	2001      	movs	r0, #1
 800280a:	f7ff fedb 	bl	80025c4 <NRF24_csn>
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20001490 	.word	0x20001490

0800281c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002820:	21ff      	movs	r1, #255	@ 0xff
 8002822:	20e1      	movs	r0, #225	@ 0xe1
 8002824:	f7ff ff5e 	bl	80026e4 <NRF24_write_register>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}

0800282c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002830:	21ff      	movs	r1, #255	@ 0xff
 8002832:	20e2      	movs	r0, #226	@ 0xe2
 8002834:	f7ff ff56 	bl	80026e4 <NRF24_write_register>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002842:	2007      	movs	r0, #7
 8002844:	f7ff fefe 	bl	8002644 <NRF24_read_register>
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800284c:	79fb      	ldrb	r3, [r7, #7]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 8002858:	b084      	sub	sp, #16
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	f107 0c10 	add.w	ip, r7, #16
 8002864:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8002868:	4b64      	ldr	r3, [pc, #400]	@ (80029fc <NRF24_begin+0x1a4>)
 800286a:	4618      	mov	r0, r3
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	2258      	movs	r2, #88	@ 0x58
 8002872:	4619      	mov	r1, r3
 8002874:	f009 fbb2 	bl	800bfdc <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 8002878:	4b61      	ldr	r3, [pc, #388]	@ (8002a00 <NRF24_begin+0x1a8>)
 800287a:	4a62      	ldr	r2, [pc, #392]	@ (8002a04 <NRF24_begin+0x1ac>)
 800287c:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 800287e:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <NRF24_begin+0x1b0>)
 8002880:	2208      	movs	r2, #8
 8002882:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8002884:	4b61      	ldr	r3, [pc, #388]	@ (8002a0c <NRF24_begin+0x1b4>)
 8002886:	2210      	movs	r2, #16
 8002888:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 800288a:	2001      	movs	r0, #1
 800288c:	f7ff fe9a 	bl	80025c4 <NRF24_csn>
	NRF24_ce(0);
 8002890:	2000      	movs	r0, #0
 8002892:	f7ff feb7 	bl	8002604 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8002896:	2005      	movs	r0, #5
 8002898:	f000 fc1c 	bl	80030d4 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 800289c:	2108      	movs	r1, #8
 800289e:	2000      	movs	r0, #0
 80028a0:	f7ff ff20 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 80028a4:	213f      	movs	r1, #63	@ 0x3f
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff ff1c 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 80028ac:	2103      	movs	r1, #3
 80028ae:	2002      	movs	r0, #2
 80028b0:	f7ff ff18 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 80028b4:	2103      	movs	r1, #3
 80028b6:	2003      	movs	r0, #3
 80028b8:	f7ff ff14 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 80028bc:	2103      	movs	r1, #3
 80028be:	2004      	movs	r0, #4
 80028c0:	f7ff ff10 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 80028c4:	2102      	movs	r1, #2
 80028c6:	2005      	movs	r0, #5
 80028c8:	f7ff ff0c 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 80028cc:	210f      	movs	r1, #15
 80028ce:	2006      	movs	r0, #6
 80028d0:	f7ff ff08 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 80028d4:	210e      	movs	r1, #14
 80028d6:	2007      	movs	r0, #7
 80028d8:	f7ff ff04 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 80028dc:	2100      	movs	r1, #0
 80028de:	2008      	movs	r0, #8
 80028e0:	f7ff ff00 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 80028e4:	2100      	movs	r1, #0
 80028e6:	2009      	movs	r0, #9
 80028e8:	f7ff fefc 	bl	80026e4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80028ec:	23e7      	movs	r3, #231	@ 0xe7
 80028ee:	713b      	strb	r3, [r7, #4]
 80028f0:	23e7      	movs	r3, #231	@ 0xe7
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	23e7      	movs	r3, #231	@ 0xe7
 80028f6:	70bb      	strb	r3, [r7, #2]
 80028f8:	23e7      	movs	r3, #231	@ 0xe7
 80028fa:	707b      	strb	r3, [r7, #1]
 80028fc:	23e7      	movs	r3, #231	@ 0xe7
 80028fe:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8002900:	463b      	mov	r3, r7
 8002902:	2205      	movs	r2, #5
 8002904:	4619      	mov	r1, r3
 8002906:	200a      	movs	r0, #10
 8002908:	f7ff ff0e 	bl	8002728 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800290c:	23c2      	movs	r3, #194	@ 0xc2
 800290e:	713b      	strb	r3, [r7, #4]
 8002910:	23c2      	movs	r3, #194	@ 0xc2
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	23c2      	movs	r3, #194	@ 0xc2
 8002916:	70bb      	strb	r3, [r7, #2]
 8002918:	23c2      	movs	r3, #194	@ 0xc2
 800291a:	707b      	strb	r3, [r7, #1]
 800291c:	23c2      	movs	r3, #194	@ 0xc2
 800291e:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8002920:	463b      	mov	r3, r7
 8002922:	2205      	movs	r2, #5
 8002924:	4619      	mov	r1, r3
 8002926:	200b      	movs	r0, #11
 8002928:	f7ff fefe 	bl	8002728 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 800292c:	21c3      	movs	r1, #195	@ 0xc3
 800292e:	200c      	movs	r0, #12
 8002930:	f7ff fed8 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 8002934:	21c4      	movs	r1, #196	@ 0xc4
 8002936:	200d      	movs	r0, #13
 8002938:	f7ff fed4 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 800293c:	21c5      	movs	r1, #197	@ 0xc5
 800293e:	200e      	movs	r0, #14
 8002940:	f7ff fed0 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 8002944:	21c6      	movs	r1, #198	@ 0xc6
 8002946:	200f      	movs	r0, #15
 8002948:	f7ff fecc 	bl	80026e4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800294c:	23e7      	movs	r3, #231	@ 0xe7
 800294e:	713b      	strb	r3, [r7, #4]
 8002950:	23e7      	movs	r3, #231	@ 0xe7
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	23e7      	movs	r3, #231	@ 0xe7
 8002956:	70bb      	strb	r3, [r7, #2]
 8002958:	23e7      	movs	r3, #231	@ 0xe7
 800295a:	707b      	strb	r3, [r7, #1]
 800295c:	23e7      	movs	r3, #231	@ 0xe7
 800295e:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8002960:	463b      	mov	r3, r7
 8002962:	2205      	movs	r2, #5
 8002964:	4619      	mov	r1, r3
 8002966:	2010      	movs	r0, #16
 8002968:	f7ff fede 	bl	8002728 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 800296c:	2100      	movs	r1, #0
 800296e:	2011      	movs	r0, #17
 8002970:	f7ff feb8 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 8002974:	2100      	movs	r1, #0
 8002976:	2012      	movs	r0, #18
 8002978:	f7ff feb4 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 800297c:	2100      	movs	r1, #0
 800297e:	2013      	movs	r0, #19
 8002980:	f7ff feb0 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 8002984:	2100      	movs	r1, #0
 8002986:	2014      	movs	r0, #20
 8002988:	f7ff feac 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 800298c:	2100      	movs	r1, #0
 800298e:	2015      	movs	r0, #21
 8002990:	f7ff fea8 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 8002994:	2100      	movs	r1, #0
 8002996:	2016      	movs	r0, #22
 8002998:	f7ff fea4 	bl	80026e4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800299c:	f000 fb3e 	bl	800301c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 80029a0:	2100      	movs	r1, #0
 80029a2:	201c      	movs	r0, #28
 80029a4:	f7ff fe9e 	bl	80026e4 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 80029a8:	2100      	movs	r1, #0
 80029aa:	201d      	movs	r0, #29
 80029ac:	f7ff fe9a 	bl	80026e4 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80029b0:	210f      	movs	r1, #15
 80029b2:	200f      	movs	r0, #15
 80029b4:	f000 f944 	bl	8002c40 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f9ca 	bl	8002d52 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 80029be:	2000      	movs	r0, #0
 80029c0:	f000 fa00 	bl	8002dc4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80029c4:	2002      	movs	r0, #2
 80029c6:	f000 fa43 	bl	8002e50 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80029ca:	f000 f995 	bl	8002cf8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80029ce:	2020      	movs	r0, #32
 80029d0:	f000 f966 	bl	8002ca0 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 80029d4:	f000 fa64 	bl	8002ea0 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 80029d8:	f000 fb18 	bl	800300c <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80029dc:	204c      	movs	r0, #76	@ 0x4c
 80029de:	f000 f94a 	bl	8002c76 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80029e2:	f7ff ff1b 	bl	800281c <NRF24_flush_tx>
	NRF24_flush_rx();
 80029e6:	f7ff ff21 	bl	800282c <NRF24_flush_rx>

	NRF24_powerDown();
 80029ea:	f000 fa6e 	bl	8002eca <NRF24_powerDown>

}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029f8:	b004      	add	sp, #16
 80029fa:	4770      	bx	lr
 80029fc:	20001490 	.word	0x20001490
 8002a00:	20001488 	.word	0x20001488
 8002a04:	40020000 	.word	0x40020000
 8002a08:	2000148c 	.word	0x2000148c
 8002a0c:	2000148e 	.word	0x2000148e

08002a10 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff fe15 	bl	8002644 <NRF24_read_register>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f043 0303 	orr.w	r3, r3, #3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff fe5d 	bl	80026e4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <NRF24_startListening+0x48>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	d004      	beq.n	8002a3e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002a34:	2205      	movs	r2, #5
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <NRF24_startListening+0x48>)
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f7ff fe75 	bl	8002728 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8002a3e:	f7ff feed 	bl	800281c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002a42:	f7ff fef3 	bl	800282c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7ff fddc 	bl	8002604 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002a4c:	2096      	movs	r0, #150	@ 0x96
 8002a4e:	f7ff fd97 	bl	8002580 <NRF24_DelayMicroSeconds>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20001478 	.word	0x20001478

08002a5c <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7ff fdcf 	bl	8002604 <NRF24_ce>
	NRF24_flush_tx();
 8002a66:	f7ff fed9 	bl	800281c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002a6a:	f7ff fedf 	bl	800282c <NRF24_flush_rx>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8002a80:	f000 fac4 	bl	800300c <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa5d 	bl	8002f48 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8002a8e:	f000 fb15 	bl	80030bc <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8002a94:	230a      	movs	r3, #10
 8002a96:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8002a98:	f107 030d 	add.w	r3, r7, #13
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	2008      	movs	r0, #8
 8002aa2:	f7ff fdf7 	bl	8002694 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8002aa6:	f7ff fec9 	bl	800283c <NRF24_get_status>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <NRF24_write+0x54>
 8002ab8:	f000 fb00 	bl	80030bc <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8e7      	bhi.n	8002a98 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8002ac8:	f107 010b 	add.w	r1, r7, #11
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b04 <NRF24_write+0x90>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa67 	bl	8002fa6 <NRF24_whatHappened>
	retStatus = tx_ok;
 8002ad8:	7b3b      	ldrb	r3, [r7, #12]
 8002ada:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <NRF24_write+0x90>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8002ae4:	f000 f900 	bl	8002ce8 <NRF24_getDynamicPayloadSize>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <NRF24_write+0x94>)
 8002aee:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8002af0:	f000 f80c 	bl	8002b0c <NRF24_available>
	NRF24_flush_tx();
 8002af4:	f7ff fe92 	bl	800281c <NRF24_flush_tx>
	return retStatus;
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20001480 	.word	0x20001480
 8002b08:	20001481 	.word	0x20001481

08002b0c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f9e9 	bl	8002ee8 <NRF24_availablePipe>
 8002b16:	4603      	mov	r3, r0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fe45 	bl	80027bc <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002b32:	2017      	movs	r0, #23
 8002b34:	f7ff fd86 	bl	8002644 <NRF24_read_register>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8002b40:	f7ff fe74 	bl	800282c <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8002b44:	f000 f8d0 	bl	8002ce8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8002b66:	463b      	mov	r3, r7
 8002b68:	2205      	movs	r2, #5
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	200a      	movs	r0, #10
 8002b6e:	f7ff fddb 	bl	8002728 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8002b72:	463b      	mov	r3, r7
 8002b74:	2205      	movs	r2, #5
 8002b76:	4619      	mov	r1, r3
 8002b78:	2010      	movs	r0, #16
 8002b7a:	f7ff fdd5 	bl	8002728 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <NRF24_openWritingPipe+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	bf28      	it	cs
 8002b8c:	4613      	movcs	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	2011      	movs	r0, #17
 8002b94:	f7ff fda6 	bl	80026e4 <NRF24_write_register>
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20001482 	.word	0x20001482

08002ba4 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4601      	mov	r1, r0
 8002bac:	e9c7 2300 	strd	r2, r3, [r7]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8002bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bbe:	491c      	ldr	r1, [pc, #112]	@ (8002c30 <NRF24_openReadingPipe+0x8c>)
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d82d      	bhi.n	8002c26 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d808      	bhi.n	8002be2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <NRF24_openReadingPipe+0x90>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	4639      	mov	r1, r7
 8002bd8:	2205      	movs	r2, #5
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fda4 	bl	8002728 <NRF24_write_registerN>
 8002be0:	e007      	b.n	8002bf2 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <NRF24_openReadingPipe+0x90>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	4639      	mov	r1, r7
 8002bea:	2201      	movs	r2, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fd9b 	bl	8002728 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4a10      	ldr	r2, [pc, #64]	@ (8002c38 <NRF24_openReadingPipe+0x94>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <NRF24_openReadingPipe+0x98>)
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fd70 	bl	80026e4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002c04:	2002      	movs	r0, #2
 8002c06:	f7ff fd1d 	bl	8002644 <NRF24_read_register>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	b25a      	sxtb	r2, r3
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7ff fd5f 	bl	80026e4 <NRF24_write_register>
	}

}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20001478 	.word	0x20001478
 8002c34:	0800cb14 	.word	0x0800cb14
 8002c38:	0800cb1c 	.word	0x0800cb1c
 8002c3c:	20001482 	.word	0x20001482

08002c40 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	b25a      	sxtb	r2, r3
 8002c56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	4619      	mov	r1, r3
 8002c68:	2004      	movs	r0, #4
 8002c6a:	f7ff fd3b 	bl	80026e4 <NRF24_write_register>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8002c80:	237f      	movs	r3, #127	@ 0x7f
 8002c82:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf28      	it	cs
 8002c8c:	4613      	movcs	r3, r2
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	2005      	movs	r0, #5
 8002c94:	f7ff fd26 	bl	80026e4 <NRF24_write_register>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002caa:	2320      	movs	r3, #32
 8002cac:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	bf28      	it	cs
 8002cb6:	4613      	movcs	r3, r2
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <NRF24_setPayloadSize+0x2c>)
 8002cbc:	701a      	strb	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001482 	.word	0x20001482

08002cd0 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
	return payload_size;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <NRF24_getPayloadSize+0x14>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20001482 	.word	0x20001482

08002ce8 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002cec:	2060      	movs	r0, #96	@ 0x60
 8002cee:	f7ff fca9 	bl	8002644 <NRF24_read_register>
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <NRF24_disableDynamicPayloads>:
}
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002cfc:	201d      	movs	r0, #29
 8002cfe:	f7ff fca1 	bl	8002644 <NRF24_read_register>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	201d      	movs	r0, #29
 8002d0e:	f7ff fce9 	bl	80026e4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002d12:	2100      	movs	r1, #0
 8002d14:	201c      	movs	r0, #28
 8002d16:	f7ff fce5 	bl	80026e4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002d1a:	4b02      	ldr	r3, [pc, #8]	@ (8002d24 <NRF24_disableDynamicPayloads+0x2c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20001483 	.word	0x20001483

08002d28 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8002d38:	213f      	movs	r1, #63	@ 0x3f
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f7ff fcd2 	bl	80026e4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002d40:	e003      	b.n	8002d4a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002d42:	2100      	movs	r1, #0
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff fccd 	bl	80026e4 <NRF24_write_register>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002d5c:	2006      	movs	r0, #6
 8002d5e:	f7ff fc71 	bl	8002644 <NRF24_read_register>
 8002d62:	4603      	mov	r3, r0
 8002d64:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	f023 0306 	bic.w	r3, r3, #6
 8002d6c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d104      	bne.n	8002d7e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	f043 0306 	orr.w	r3, r3, #6
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e019      	b.n	8002db2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d104      	bne.n	8002d8e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e011      	b.n	8002db2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d104      	bne.n	8002d9e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e009      	b.n	8002db2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d103      	bne.n	8002db2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	f043 0306 	orr.w	r3, r3, #6
 8002db0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	4619      	mov	r1, r3
 8002db6:	2006      	movs	r0, #6
 8002db8:	f7ff fc94 	bl	80026e4 <NRF24_write_register>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002dd2:	2006      	movs	r0, #6
 8002dd4:	f7ff fc36 	bl	8002644 <NRF24_read_register>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <NRF24_setDataRate+0x88>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002de8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002df0:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <NRF24_setDataRate+0x88>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	f043 0320 	orr.w	r3, r3, #32
 8002dfc:	73bb      	strb	r3, [r7, #14]
 8002dfe:	e00d      	b.n	8002e1c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <NRF24_setDataRate+0x88>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	73bb      	strb	r3, [r7, #14]
 8002e14:	e002      	b.n	8002e1c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <NRF24_setDataRate+0x88>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	2006      	movs	r0, #6
 8002e22:	f7ff fc5f 	bl	80026e4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002e26:	2006      	movs	r0, #6
 8002e28:	f7ff fc0c 	bl	8002644 <NRF24_read_register>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d102      	bne.n	8002e3c <NRF24_setDataRate+0x78>
  {
    result = true;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e002      	b.n	8002e42 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <NRF24_setDataRate+0x88>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20001484 	.word	0x20001484

08002e50 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fbf2 	bl	8002644 <NRF24_read_register>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f023 030c 	bic.w	r3, r3, #12
 8002e66:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d104      	bne.n	8002e7e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e007      	b.n	8002e8e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	4619      	mov	r1, r3
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7ff fc26 	bl	80026e4 <NRF24_write_register>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7ff fbcc 	bl	8002644 <NRF24_read_register>
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb6:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fc11 	bl	80026e4 <NRF24_write_register>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7ff fbb8 	bl	8002644 <NRF24_read_register>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f023 0302 	bic.w	r3, r3, #2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff fc00 	bl	80026e4 <NRF24_write_register>
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002ef0:	f7ff fca4 	bl	800283c <NRF24_get_status>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d017      	beq.n	8002f3e <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002f24:	2140      	movs	r1, #64	@ 0x40
 8002f26:	2007      	movs	r0, #7
 8002f28:	f7ff fbdc 	bl	80026e4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002f36:	2120      	movs	r1, #32
 8002f38:	2007      	movs	r0, #7
 8002f3a:	f7ff fbd3 	bl	80026e4 <NRF24_write_register>
    }
  }
  return result;
 8002f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff fb55 	bl	8002604 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7ff fb72 	bl	8002644 <NRF24_read_register>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff fbb7 	bl	80026e4 <NRF24_write_register>
  NRF24_ce(1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f7ff fb44 	bl	8002604 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002f7c:	2096      	movs	r0, #150	@ 0x96
 8002f7e:	f7ff faff 	bl	8002580 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fbf6 	bl	8002778 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7ff fb39 	bl	8002604 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002f92:	200f      	movs	r0, #15
 8002f94:	f7ff faf4 	bl	8002580 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff fb33 	bl	8002604 <NRF24_ce>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002fb2:	f7ff fc43 	bl	800283c <NRF24_get_status>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002fc0:	2170      	movs	r1, #112	@ 0x70
 8002fc2:	2007      	movs	r0, #7
 8002fc4:	f7ff fb8e 	bl	80026e4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	701a      	strb	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8003010:	2170      	movs	r1, #112	@ 0x70
 8003012:	2007      	movs	r0, #7
 8003014:	f7ff fb66 	bl	80026e4 <NRF24_write_register>
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff face 	bl	80025c4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003028:	2350      	movs	r3, #80	@ 0x50
 800302a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800302c:	2373      	movs	r3, #115	@ 0x73
 800302e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003030:	1d39      	adds	r1, r7, #4
 8003032:	2364      	movs	r3, #100	@ 0x64
 8003034:	2202      	movs	r2, #2
 8003036:	4805      	ldr	r0, [pc, #20]	@ (800304c <NRF24_ACTIVATE_cmd+0x30>)
 8003038:	f002 f9e9 	bl	800540e <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff fac1 	bl	80025c4 <NRF24_csn>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001490 	.word	0x20001490

08003050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <HAL_Init+0x40>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <HAL_Init+0x40>)
 8003066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800306a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	@ (8003090 <HAL_Init+0x40>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f000 f8fc 	bl	8003276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307e:	200f      	movs	r0, #15
 8003080:	f7ff f97c 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003084:	f7ff f812 	bl	80020ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	200003f0 	.word	0x200003f0
 80030b8:	200014e8 	.word	0x200014e8

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200014e8 	.word	0x200014e8

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200003f0 	.word	0x200003f0

0800311c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	@ (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	@ (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	@ 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff4c 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329e:	f7ff ff61 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	6978      	ldr	r0, [r7, #20]
 80032aa:	f7ff ffb1 	bl	8003210 <NVIC_EncodePriority>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff80 	bl	80031bc <__NVIC_SetPriority>
}
 80032bc:	bf00      	nop
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff54 	bl	8003180 <__NVIC_EnableIRQ>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff fee6 	bl	80030bc <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e099      	b.n	8003430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	e00f      	b.n	800333e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331e:	f7ff fecd 	bl	80030bc <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b05      	cmp	r3, #5
 800332a:	d908      	bls.n	800333e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2203      	movs	r2, #3
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e078      	b.n	8003430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e8      	bne.n	800331e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4b38      	ldr	r3, [pc, #224]	@ (8003438 <HAL_DMA_Init+0x158>)
 8003358:	4013      	ands	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	2b04      	cmp	r3, #4
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0307 	bic.w	r3, r3, #7
 80033be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d117      	bne.n	8003402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fb01 	bl	80039ec <DMA_CheckFifoParam>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033fe:	2301      	movs	r3, #1
 8003400:	e016      	b.n	8003430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fab8 	bl	8003980 <DMA_CalcBaseAndBitshift>
 8003410:	4603      	mov	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003418:	223f      	movs	r2, #63	@ 0x3f
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	f010803f 	.word	0xf010803f

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Start_IT+0x26>
 800345e:	2302      	movs	r3, #2
 8003460:	e040      	b.n	80034e4 <HAL_DMA_Start_IT+0xa8>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d12f      	bne.n	80034d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa4a 	bl	8003924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	223f      	movs	r2, #63	@ 0x3f
 8003496:	409a      	lsls	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0216 	orr.w	r2, r2, #22
 80034aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e005      	b.n	80034e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7ff fddf 	bl	80030bc <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d008      	beq.n	800351e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e052      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_Abort+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	e013      	b.n	8003598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7ff fda4 	bl	80030bc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d90c      	bls.n	8003598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e015      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e4      	bne.n	8003570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00c      	b.n	8003604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2205      	movs	r2, #5
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	@ (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	200003e8 	.word	0x200003e8
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d108      	bne.n	8003964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003962:	e007      	b.n	8003974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3b10      	subs	r3, #16
 8003990:	4a14      	ldr	r2, [pc, #80]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399a:	4a13      	ldr	r2, [pc, #76]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d909      	bls.n	80039c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	@ 0x58
 80039c0:	e007      	b.n	80039d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	aaaaaaab 	.word	0xaaaaaaab
 80039e8:	0800cb24 	.word	0x0800cb24

080039ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d856      	bhi.n	8003aba <DMA_CheckFifoParam+0xce>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <DMA_CheckFifoParam+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003abb 	.word	0x08003abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d046      	beq.n	8003abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e043      	b.n	8003abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a3e:	d140      	bne.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e03d      	b.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d121      	bne.n	8003a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d837      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xda>
 8003a56:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <DMA_CheckFifoParam+0x70>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a73 	.word	0x08003a73
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e030      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d025      	beq.n	8003aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e022      	b.n	8003aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a92:	e01c      	b.n	8003ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d903      	bls.n	8003aa2 <DMA_CheckFifoParam+0xb6>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d003      	beq.n	8003aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa0:	e018      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa6:	e015      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aba:	bf00      	nop
 8003abc:	e00a      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e008      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e006      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e159      	b.n	8003db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f040 8148 	bne.w	8003dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d005      	beq.n	8003b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d130      	bne.n	8003b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0201 	and.w	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d017      	beq.n	8003bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d123      	bne.n	8003c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	08da      	lsrs	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3208      	adds	r2, #8
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a2 	beq.w	8003dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b57      	ldr	r3, [pc, #348]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	4a56      	ldr	r2, [pc, #344]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7a:	4b54      	ldr	r3, [pc, #336]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c86:	4a52      	ldr	r2, [pc, #328]	@ (8003dd0 <HAL_GPIO_Init+0x2ec>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a49      	ldr	r2, [pc, #292]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d019      	beq.n	8003ce6 <HAL_GPIO_Init+0x202>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a48      	ldr	r2, [pc, #288]	@ (8003dd8 <HAL_GPIO_Init+0x2f4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0x1fe>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a47      	ldr	r2, [pc, #284]	@ (8003ddc <HAL_GPIO_Init+0x2f8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00d      	beq.n	8003cde <HAL_GPIO_Init+0x1fa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a46      	ldr	r2, [pc, #280]	@ (8003de0 <HAL_GPIO_Init+0x2fc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <HAL_GPIO_Init+0x1f6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a45      	ldr	r2, [pc, #276]	@ (8003de4 <HAL_GPIO_Init+0x300>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_GPIO_Init+0x1f2>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e008      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cd6:	2307      	movs	r3, #7
 8003cd8:	e006      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e004      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e002      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_GPIO_Init+0x204>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f002 0203 	and.w	r2, r2, #3
 8003cee:	0092      	lsls	r2, r2, #2
 8003cf0:	4093      	lsls	r3, r2
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf8:	4935      	ldr	r1, [pc, #212]	@ (8003dd0 <HAL_GPIO_Init+0x2ec>)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d54:	4a24      	ldr	r2, [pc, #144]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5a:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d84:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b0f      	cmp	r3, #15
 8003db8:	f67f aea2 	bls.w	8003b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40020400 	.word	0x40020400
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	40020c00 	.word	0x40020c00
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e08:	e003      	b.n	8003e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e36:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fe82 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e12b      	b.n	80040ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe f944 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f001 f9c8 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a81      	ldr	r2, [pc, #516]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a80      	ldr	r2, [pc, #512]	@ (80040c8 <HAL_I2C_Init+0x278>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7d      	ldr	r2, [pc, #500]	@ (80040cc <HAL_I2C_Init+0x27c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0e7      	b.n	80040ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a78      	ldr	r2, [pc, #480]	@ (80040d0 <HAL_I2C_Init+0x280>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0xd4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0xe8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a69      	ldr	r2, [pc, #420]	@ (80040d4 <HAL_I2C_Init+0x284>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	495c      	ldr	r1, [pc, #368]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x13c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x138>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e051      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x168>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x18e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x196>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
 80040e8:	4613      	mov	r3, r2
 80040ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7fe ffe6 	bl	80030bc <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f040 80e0 	bne.w	80042c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2319      	movs	r3, #25
 8004106:	2201      	movs	r2, #1
 8004108:	4970      	ldr	r1, [pc, #448]	@ (80042cc <HAL_I2C_Master_Transmit+0x1f4>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fa92 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	e0d3      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_I2C_Master_Transmit+0x50>
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d007      	beq.n	800414e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800415c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	@ 0x21
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2210      	movs	r2, #16
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a50      	ldr	r2, [pc, #320]	@ (80042d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004190:	8979      	ldrh	r1, [r7, #10]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f9ca 	bl	8004530 <I2C_MasterRequestWrite>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08d      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041bc:	e066      	b.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fb50 	bl	8004868 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Master_Transmit+0x188>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fb47 	bl	80048f8 <I2C_WaitOnBTFFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e01a      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d194      	bne.n	80041be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	460b      	mov	r3, r1
 80042e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80042e4:	f7fe feea 	bl	80030bc <HAL_GetTick>
 80042e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	f040 8111 	bne.w	800451e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2319      	movs	r3, #25
 8004302:	2201      	movs	r2, #1
 8004304:	4988      	ldr	r1, [pc, #544]	@ (8004528 <HAL_I2C_IsDeviceReady+0x254>)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f994 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	e104      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_I2C_IsDeviceReady+0x50>
 8004320:	2302      	movs	r3, #2
 8004322:	e0fd      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d007      	beq.n	800434a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2224      	movs	r2, #36	@ 0x24
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a70      	ldr	r2, [pc, #448]	@ (800452c <HAL_I2C_IsDeviceReady+0x258>)
 800436c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800437c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f952 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a4:	d103      	bne.n	80043ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0b6      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fe fe7b 	bl	80030bc <HAL_GetTick>
 80043c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043f6:	e025      	b.n	8004444 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f8:	f7fe fe60 	bl	80030bc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <HAL_I2C_IsDeviceReady+0x13a>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	22a0      	movs	r2, #160	@ 0xa0
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2ba0      	cmp	r3, #160	@ 0xa0
 800444e:	d005      	beq.n	800445c <HAL_I2C_IsDeviceReady+0x188>
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <HAL_I2C_IsDeviceReady+0x188>
 8004456:	7dbb      	ldrb	r3, [r7, #22]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0cd      	beq.n	80043f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d129      	bne.n	80044c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2319      	movs	r3, #25
 800449e:	2201      	movs	r2, #1
 80044a0:	4921      	ldr	r1, [pc, #132]	@ (8004528 <HAL_I2C_IsDeviceReady+0x254>)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8c6 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e036      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e02c      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	490f      	ldr	r1, [pc, #60]	@ (8004528 <HAL_I2C_IsDeviceReady+0x254>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f8a2 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e012      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	f4ff af32 	bcc.w	800436e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	00100002 	.word	0x00100002
 800452c:	ffff0000 	.word	0xffff0000

08004530 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d006      	beq.n	800455a <I2C_MasterRequestWrite+0x2a>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d003      	beq.n	800455a <I2C_MasterRequestWrite+0x2a>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004558:	d108      	bne.n	800456c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e00b      	b.n	8004584 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	2b12      	cmp	r3, #18
 8004572:	d107      	bne.n	8004584 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f84f 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045aa:	d103      	bne.n	80045b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e035      	b.n	8004624 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045c0:	d108      	bne.n	80045d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	e01b      	b.n	800460c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045d4:	897b      	ldrh	r3, [r7, #10]
 80045d6:	11db      	asrs	r3, r3, #7
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f003 0306 	and.w	r3, r3, #6
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f063 030f 	orn	r3, r3, #15
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	490e      	ldr	r1, [pc, #56]	@ (800462c <I2C_MasterRequestWrite+0xfc>)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f898 	bl	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e010      	b.n	8004624 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4907      	ldr	r1, [pc, #28]	@ (8004630 <I2C_MasterRequestWrite+0x100>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f888 	bl	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00010008 	.word	0x00010008
 8004630:	00010002 	.word	0x00010002

08004634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004644:	e048      	b.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d044      	beq.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fe fd35 	bl	80030bc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x30>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d139      	bne.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10d      	bne.n	800468a <I2C_WaitOnFlagUntilTimeout+0x56>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	43da      	mvns	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	e00c      	b.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	43da      	mvns	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d116      	bne.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e023      	b.n	8004720 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10d      	bne.n	80046fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	e00c      	b.n	8004718 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	43da      	mvns	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	429a      	cmp	r2, r3
 800471c:	d093      	beq.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004736:	e071      	b.n	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d123      	bne.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	f043 0204 	orr.w	r2, r3, #4
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e067      	b.n	8004860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d041      	beq.n	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004798:	f7fe fc90 	bl	80030bc <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d136      	bne.n	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10c      	bne.n	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e00b      	b.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	43da      	mvns	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4013      	ands	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e021      	b.n	8004860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10c      	bne.n	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	43da      	mvns	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e00b      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f af6d 	bne.w	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f886 	bl	8004988 <I2C_IsAcknowledgeFailed>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e034      	b.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d028      	beq.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe fc15 	bl	80030bc <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ae:	2b80      	cmp	r3, #128	@ 0x80
 80048b0:	d016      	beq.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ea:	2b80      	cmp	r3, #128	@ 0x80
 80048ec:	d1c3      	bne.n	8004876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004904:	e034      	b.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f83e 	bl	8004988 <I2C_IsAcknowledgeFailed>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e034      	b.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d028      	beq.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fe fbcd 	bl	80030bc <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11d      	bne.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d016      	beq.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b04      	cmp	r3, #4
 800497c:	d1c3      	bne.n	8004906 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499e:	d11b      	bne.n	80049d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e267      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d075      	beq.n	8004af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a06:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x108>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e242      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x74>
 8004a4e:	4b76      	ldr	r3, [pc, #472]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a75      	ldr	r2, [pc, #468]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6f      	ldr	r2, [pc, #444]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b6d      	ldr	r3, [pc, #436]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a6c      	ldr	r2, [pc, #432]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a80:	4b69      	ldr	r3, [pc, #420]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a68      	ldr	r2, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fe fb0c 	bl	80030bc <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fe fb08 	bl	80030bc <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e207      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b5b      	ldr	r3, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fe faf8 	bl	80030bc <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe faf4 	bl	80030bc <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1f3      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b51      	ldr	r3, [pc, #324]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xe8>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d063      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004afe:	4b4a      	ldr	r3, [pc, #296]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b47      	ldr	r3, [pc, #284]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b44      	ldr	r3, [pc, #272]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b41      	ldr	r3, [pc, #260]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1c7      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4937      	ldr	r1, [pc, #220]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <HAL_RCC_OscConfig+0x244>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fe faad 	bl	80030bc <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fe faa9 	bl	80030bc <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1a8      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b2b      	ldr	r3, [pc, #172]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b28      	ldr	r3, [pc, #160]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4925      	ldr	r1, [pc, #148]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <HAL_RCC_OscConfig+0x244>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fa8c 	bl	80030bc <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fe fa88 	bl	80030bc <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e187      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d036      	beq.n	8004c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <HAL_RCC_OscConfig+0x248>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fe fa6c 	bl	80030bc <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fe fa68 	bl	80030bc <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e167      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
 8004c06:	e01b      	b.n	8004c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <HAL_RCC_OscConfig+0x248>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fe fa55 	bl	80030bc <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e00e      	b.n	8004c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fe fa51 	bl	80030bc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d907      	bls.n	8004c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e150      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470000 	.word	0x42470000
 8004c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ea      	bne.n	8004c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8097 	beq.w	8004d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b81      	ldr	r3, [pc, #516]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	4b7d      	ldr	r3, [pc, #500]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	4a7c      	ldr	r2, [pc, #496]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b77      	ldr	r3, [pc, #476]	@ (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b74      	ldr	r3, [pc, #464]	@ (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a73      	ldr	r2, [pc, #460]	@ (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fe fa11 	bl	80030bc <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fe fa0d 	bl	80030bc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e10c      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2ea>
 8004cc4:	4b64      	ldr	r3, [pc, #400]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4a63      	ldr	r2, [pc, #396]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCC_OscConfig+0x324>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x30c>
 8004cda:	4b5f      	ldr	r3, [pc, #380]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	4a5e      	ldr	r2, [pc, #376]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	4a5b      	ldr	r2, [pc, #364]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0x324>
 8004cf4:	4b58      	ldr	r3, [pc, #352]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	4a57      	ldr	r2, [pc, #348]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d00:	4b55      	ldr	r3, [pc, #340]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	4a54      	ldr	r2, [pc, #336]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe f9d2 	bl	80030bc <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fe f9ce 	bl	80030bc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0cb      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b49      	ldr	r3, [pc, #292]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCC_OscConfig+0x334>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d40:	f7fe f9bc 	bl	80030bc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fe f9b8 	bl	80030bc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0b5      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ee      	bne.n	8004d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4b39      	ldr	r3, [pc, #228]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	4a38      	ldr	r2, [pc, #224]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a1 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d86:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d05c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d141      	bne.n	8004e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b31      	ldr	r3, [pc, #196]	@ (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fe f98c 	bl	80030bc <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fe f988 	bl	80030bc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e087      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	491b      	ldr	r1, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fe f961 	bl	80030bc <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfe:	f7fe f95d 	bl	80030bc <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e05c      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e10:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x416>
 8004e1c:	e054      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fe f94a 	bl	80030bc <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fe f946 	bl	80030bc <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e045      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x444>
 8004e4a:	e03d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e038      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_RCC_OscConfig+0x4ec>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d028      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d121      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0cc      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b68      	ldr	r3, [pc, #416]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d90c      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b65      	ldr	r3, [pc, #404]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b63      	ldr	r3, [pc, #396]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f2c:	4b59      	ldr	r3, [pc, #356]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f44:	4b53      	ldr	r3, [pc, #332]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a52      	ldr	r2, [pc, #328]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f50:	4b50      	ldr	r3, [pc, #320]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	494d      	ldr	r1, [pc, #308]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d044      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b3f      	ldr	r3, [pc, #252]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4934      	ldr	r1, [pc, #208]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fe f878 	bl	80030bc <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fe f874 	bl	80030bc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b25      	ldr	r3, [pc, #148]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20c      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b22      	ldr	r3, [pc, #136]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502c:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4916      	ldr	r1, [pc, #88]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504a:	4b12      	ldr	r3, [pc, #72]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	490e      	ldr	r1, [pc, #56]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4602      	mov	r2, r0
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	490a      	ldr	r1, [pc, #40]	@ (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	5ccb      	ldrb	r3, [r1, r3]
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fd f97c 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	0800cafc 	.word	0x0800cafc
 800509c:	200003e8 	.word	0x200003e8
 80050a0:	200003ec 	.word	0x200003ec

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a8:	b090      	sub	sp, #64	@ 0x40
 80050aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b0:	2300      	movs	r3, #0
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b4:	2300      	movs	r3, #0
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050bc:	4b59      	ldr	r3, [pc, #356]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x40>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f200 80a1 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x16c>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d003      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x3a>
 80050d6:	e09b      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b53      	ldr	r3, [pc, #332]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x184>)
 80050da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80050dc:	e09b      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050de:	4b53      	ldr	r3, [pc, #332]	@ (800522c <HAL_RCC_GetSysClockFreq+0x188>)
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050e2:	e098      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d028      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	2200      	movs	r2, #0
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	627a      	str	r2, [r7, #36]	@ 0x24
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800510c:	2100      	movs	r1, #0
 800510e:	4b47      	ldr	r3, [pc, #284]	@ (800522c <HAL_RCC_GetSysClockFreq+0x188>)
 8005110:	fb03 f201 	mul.w	r2, r3, r1
 8005114:	2300      	movs	r3, #0
 8005116:	fb00 f303 	mul.w	r3, r0, r3
 800511a:	4413      	add	r3, r2
 800511c:	4a43      	ldr	r2, [pc, #268]	@ (800522c <HAL_RCC_GetSysClockFreq+0x188>)
 800511e:	fba0 1202 	umull	r1, r2, r0, r2
 8005122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005124:	460a      	mov	r2, r1
 8005126:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512a:	4413      	add	r3, r2
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005130:	2200      	movs	r2, #0
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	61fa      	str	r2, [r7, #28]
 8005136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800513e:	f7fb f84f 	bl	80001e0 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4613      	mov	r3, r2
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800514a:	e053      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514c:	4b35      	ldr	r3, [pc, #212]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	2200      	movs	r2, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	617a      	str	r2, [r7, #20]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800515e:	f04f 0b00 	mov.w	fp, #0
 8005162:	4652      	mov	r2, sl
 8005164:	465b      	mov	r3, fp
 8005166:	f04f 0000 	mov.w	r0, #0
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	0159      	lsls	r1, r3, #5
 8005170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005174:	0150      	lsls	r0, r2, #5
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	ebb2 080a 	subs.w	r8, r2, sl
 800517e:	eb63 090b 	sbc.w	r9, r3, fp
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800518e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005196:	ebb2 0408 	subs.w	r4, r2, r8
 800519a:	eb63 0509 	sbc.w	r5, r3, r9
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	00eb      	lsls	r3, r5, #3
 80051a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ac:	00e2      	lsls	r2, r4, #3
 80051ae:	4614      	mov	r4, r2
 80051b0:	461d      	mov	r5, r3
 80051b2:	eb14 030a 	adds.w	r3, r4, sl
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	eb45 030b 	adc.w	r3, r5, fp
 80051bc:	607b      	str	r3, [r7, #4]
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ca:	4629      	mov	r1, r5
 80051cc:	028b      	lsls	r3, r1, #10
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051d4:	4621      	mov	r1, r4
 80051d6:	028a      	lsls	r2, r1, #10
 80051d8:	4610      	mov	r0, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051de:	2200      	movs	r2, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	60fa      	str	r2, [r7, #12]
 80051e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e8:	f7fa fffa 	bl	80001e0 <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4613      	mov	r3, r2
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005204:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x184>)
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005218:	4618      	mov	r0, r3
 800521a:	3740      	adds	r7, #64	@ 0x40
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	00f42400 	.word	0x00f42400
 800522c:	017d7840 	.word	0x017d7840

08005230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005234:	4b03      	ldr	r3, [pc, #12]	@ (8005244 <HAL_RCC_GetHCLKFreq+0x14>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	200003e8 	.word	0x200003e8

08005248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800524c:	f7ff fff0 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0a9b      	lsrs	r3, r3, #10
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	@ (800526c <HAL_RCC_GetPCLK1Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	0800cb0c 	.word	0x0800cb0c

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005274:	f7ff ffdc 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0b5b      	lsrs	r3, r3, #13
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800cb0c 	.word	0x0800cb0c

08005298 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	220f      	movs	r2, #15
 80052a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052a8:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0203 	and.w	r2, r3, #3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052c0:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052cc:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052da:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <HAL_RCC_GetClockConfig+0x60>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0207 	and.w	r2, r3, #7
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40023c00 	.word	0x40023c00

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07b      	b.n	8005406 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc ff20 	bl	8002194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	ea42 0103 	orr.w	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	f003 0104 	and.w	r1, r3, #4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	f003 0210 	and.w	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SPI_Transmit+0x22>
 800542c:	2302      	movs	r3, #2
 800542e:	e12d      	b.n	800568c <HAL_SPI_Transmit+0x27e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005438:	f7fd fe40 	bl	80030bc <HAL_GetTick>
 800543c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005452:	e116      	b.n	8005682 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_SPI_Transmit+0x52>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005464:	e10d      	b.n	8005682 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2203      	movs	r2, #3
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ac:	d10f      	bne.n	80054ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d007      	beq.n	80054ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f4:	d14f      	bne.n	8005596 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_SPI_Transmit+0xf6>
 80054fe:	8afb      	ldrh	r3, [r7, #22]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d142      	bne.n	800558a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005528:	e02f      	b.n	800558a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b02      	cmp	r3, #2
 8005536:	d112      	bne.n	800555e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	1c9a      	adds	r2, r3, #2
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800555c:	e015      	b.n	800558a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800555e:	f7fd fdad 	bl	80030bc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d803      	bhi.n	8005576 <HAL_SPI_Transmit+0x168>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d102      	bne.n	800557c <HAL_SPI_Transmit+0x16e>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005588:	e07b      	b.n	8005682 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ca      	bne.n	800552a <HAL_SPI_Transmit+0x11c>
 8005594:	e050      	b.n	8005638 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x196>
 800559e:	8afb      	ldrh	r3, [r7, #22]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d144      	bne.n	800562e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	7812      	ldrb	r2, [r2, #0]
 80055b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ca:	e030      	b.n	800562e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d113      	bne.n	8005602 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005600:	e015      	b.n	800562e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005602:	f7fd fd5b 	bl	80030bc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_Transmit+0x20c>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x212>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800562c:	e029      	b.n	8005682 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1c9      	bne.n	80055cc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fbdf 	bl	8005e00 <SPI_EndRxTxTransaction>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e003      	b.n	8005682 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800568a:	7ffb      	ldrb	r3, [r7, #31]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
 80056b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056b8:	e0fb      	b.n	80058b2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c2:	d112      	bne.n	80056ea <HAL_SPI_Receive+0x56>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10e      	bne.n	80056ea <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2204      	movs	r2, #4
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f8ef 	bl	80058c4 <HAL_SPI_TransmitReceive>
 80056e6:	4603      	mov	r3, r0
 80056e8:	e0e8      	b.n	80058bc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_SPI_Receive+0x64>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e0e1      	b.n	80058bc <HAL_SPI_Receive+0x228>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005700:	f7fd fcdc 	bl	80030bc <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_SPI_Receive+0x7e>
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005716:	e0cc      	b.n	80058b2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2204      	movs	r2, #4
 800571c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575e:	d10f      	bne.n	8005780 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b40      	cmp	r3, #64	@ 0x40
 800578c:	d007      	beq.n	800579e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d16a      	bne.n	800587c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057a6:	e032      	b.n	800580e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d115      	bne.n	80057e2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f103 020c 	add.w	r2, r3, #12
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057e0:	e015      	b.n	800580e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e2:	f7fd fc6b 	bl	80030bc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d803      	bhi.n	80057fa <HAL_SPI_Receive+0x166>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_Receive+0x16c>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800580c:	e051      	b.n	80058b2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1c7      	bne.n	80057a8 <HAL_SPI_Receive+0x114>
 8005818:	e035      	b.n	8005886 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d113      	bne.n	8005850 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	b292      	uxth	r2, r2
 8005834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800584e:	e015      	b.n	800587c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005850:	f7fd fc34 	bl	80030bc <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d803      	bhi.n	8005868 <HAL_SPI_Receive+0x1d4>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d102      	bne.n	800586e <HAL_SPI_Receive+0x1da>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800587a:	e01a      	b.n	80058b2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1c9      	bne.n	800581a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fa52 	bl	8005d34 <SPI_EndRxTransaction>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
 80058a8:	e003      	b.n	80058b2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	@ 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058d2:	2301      	movs	r3, #1
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x26>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e198      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x358>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f2:	f7fd fbe3 	bl	80030bc <HAL_GetTick>
 80058f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800590c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005910:	2b01      	cmp	r3, #1
 8005912:	d00f      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x70>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800591a:	d107      	bne.n	800592c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <HAL_SPI_TransmitReceive+0x68>
 8005924:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005928:	2b04      	cmp	r3, #4
 800592a:	d003      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800592c:	2302      	movs	r3, #2
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005932:	e16d      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x82>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x82>
 8005940:	887b      	ldrh	r3, [r7, #2]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800594c:	e160      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b04      	cmp	r3, #4
 8005958:	d003      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2205      	movs	r2, #5
 800595e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	887a      	ldrh	r2, [r7, #2]
 8005972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	887a      	ldrh	r2, [r7, #2]
 8005978:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	887a      	ldrh	r2, [r7, #2]
 800598a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d007      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059be:	d17c      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x10a>
 80059c8:	8b7b      	ldrh	r3, [r7, #26]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d16a      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f2:	e057      	b.n	8005aa4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d11b      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x176>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d016      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x176>
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d113      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d119      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x1b8>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d014      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	b292      	uxth	r2, r2
 8005a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a7c:	f7fd fb1e 	bl	80030bc <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d80b      	bhi.n	8005aa4 <HAL_SPI_TransmitReceive+0x1e0>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005aa2:	e0b5      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1a2      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x130>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d19d      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x130>
 8005ab8:	e080      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x204>
 8005ac2:	8b7b      	ldrh	r3, [r7, #26]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d16f      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aee:	e05b      	b.n	8005ba8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d11c      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x274>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x274>
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d114      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d119      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x2b6>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d014      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b76:	2301      	movs	r3, #1
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b7a:	f7fd fa9f 	bl	80030bc <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d803      	bhi.n	8005b92 <HAL_SPI_TransmitReceive+0x2ce>
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d102      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x2d4>
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005ba6:	e033      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d19e      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x22c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d199      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f91d 	bl	8005e00 <SPI_EndRxTxTransaction>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005bd8:	e01a      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c06:	e003      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3730      	adds	r7, #48	@ 0x30
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c34:	f7fd fa42 	bl	80030bc <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c44:	f7fd fa3a 	bl	80030bc <HAL_GetTick>
 8005c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c4a:	4b39      	ldr	r3, [pc, #228]	@ (8005d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	015b      	lsls	r3, r3, #5
 8005c50:	0d1b      	lsrs	r3, r3, #20
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c5a:	e054      	b.n	8005d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d050      	beq.n	8005d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c64:	f7fd fa2a 	bl	80030bc <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d902      	bls.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d13d      	bne.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c92:	d111      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c9c:	d004      	beq.n	8005ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d107      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cc0:	d10f      	bne.n	8005ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e017      	b.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d19b      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200003e8 	.word	0x200003e8

08005d34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d48:	d111      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d52:	d004      	beq.n	8005d5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5c:	d107      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d76:	d12a      	bne.n	8005dce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d80:	d012      	beq.n	8005da8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2180      	movs	r1, #128	@ 0x80
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff ff49 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02d      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e026      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2101      	movs	r1, #1
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff36 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01a      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e013      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ff23 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e000      	b.n	8005df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2201      	movs	r2, #1
 8005e14:	2102      	movs	r1, #2
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff ff04 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e032      	b.n	8005e98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea0 <SPI_EndRxTxTransaction+0xa0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <SPI_EndRxTxTransaction+0xa4>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	0d5b      	lsrs	r3, r3, #21
 8005e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e50:	d112      	bne.n	8005e78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2180      	movs	r1, #128	@ 0x80
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fee1 	bl	8005c24 <SPI_WaitFlagStateUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e00f      	b.n	8005e98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8e:	2b80      	cmp	r3, #128	@ 0x80
 8005e90:	d0f2      	beq.n	8005e78 <SPI_EndRxTxTransaction+0x78>
 8005e92:	e000      	b.n	8005e96 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e94:	bf00      	nop
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200003e8 	.word	0x200003e8
 8005ea4:	165e9f81 	.word	0x165e9f81

08005ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e041      	b.n	8005f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fc f9a8 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f000 f9ea 	bl	80062c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d001      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e044      	b.n	8005fea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xb4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a19      	ldr	r2, [pc, #100]	@ (8006000 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b06      	cmp	r3, #6
 8005fc4:	d010      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd6:	e007      	b.n	8005fe8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40014000 	.word	0x40014000

0800600c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d020      	beq.n	8006070 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01b      	beq.n	8006070 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0202 	mvn.w	r2, #2
 8006040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f914 	bl	8006284 <HAL_TIM_IC_CaptureCallback>
 800605c:	e005      	b.n	800606a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f906 	bl	8006270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f917 	bl	8006298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0204 	mvn.w	r2, #4
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8ee 	bl	8006284 <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f8e0 	bl	8006270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8f1 	bl	8006298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0208 	mvn.w	r2, #8
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2204      	movs	r2, #4
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8c8 	bl	8006284 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f8ba 	bl	8006270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8cb 	bl	8006298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0210 	mvn.w	r2, #16
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2208      	movs	r2, #8
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8a2 	bl	8006284 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f894 	bl	8006270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f8a5 	bl	8006298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb faee 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00c      	beq.n	800619c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 faa6 	bl	80066e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f876 	bl	80062ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0220 	mvn.w	r2, #32
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa78 	bl	80066d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e031      	b.n	8006268 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8de 	bl	80063d8 <TIM_SlaveTimer_SetConfig>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e018      	b.n	8006268 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006244:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006254:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a3a      	ldr	r2, [pc, #232]	@ (80063bc <TIM_Base_SetConfig+0xfc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	d00b      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a37      	ldr	r2, [pc, #220]	@ (80063c0 <TIM_Base_SetConfig+0x100>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a36      	ldr	r2, [pc, #216]	@ (80063c4 <TIM_Base_SetConfig+0x104>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0x38>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <TIM_Base_SetConfig+0x108>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2b      	ldr	r2, [pc, #172]	@ (80063bc <TIM_Base_SetConfig+0xfc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01b      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006318:	d017      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a28      	ldr	r2, [pc, #160]	@ (80063c0 <TIM_Base_SetConfig+0x100>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a27      	ldr	r2, [pc, #156]	@ (80063c4 <TIM_Base_SetConfig+0x104>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00f      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a26      	ldr	r2, [pc, #152]	@ (80063c8 <TIM_Base_SetConfig+0x108>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00b      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a25      	ldr	r2, [pc, #148]	@ (80063cc <TIM_Base_SetConfig+0x10c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a24      	ldr	r2, [pc, #144]	@ (80063d0 <TIM_Base_SetConfig+0x110>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_Base_SetConfig+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a23      	ldr	r2, [pc, #140]	@ (80063d4 <TIM_Base_SetConfig+0x114>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0e      	ldr	r2, [pc, #56]	@ (80063bc <TIM_Base_SetConfig+0xfc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d105      	bne.n	80063ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]
  }
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40000c00 	.word	0x40000c00
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800

080063d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b70      	cmp	r3, #112	@ 0x70
 8006420:	d01a      	beq.n	8006458 <TIM_SlaveTimer_SetConfig+0x80>
 8006422:	2b70      	cmp	r3, #112	@ 0x70
 8006424:	d860      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006426:	2b60      	cmp	r3, #96	@ 0x60
 8006428:	d054      	beq.n	80064d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800642a:	2b60      	cmp	r3, #96	@ 0x60
 800642c:	d85c      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800642e:	2b50      	cmp	r3, #80	@ 0x50
 8006430:	d046      	beq.n	80064c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006432:	2b50      	cmp	r3, #80	@ 0x50
 8006434:	d858      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006436:	2b40      	cmp	r3, #64	@ 0x40
 8006438:	d019      	beq.n	800646e <TIM_SlaveTimer_SetConfig+0x96>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d854      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800643e:	2b30      	cmp	r3, #48	@ 0x30
 8006440:	d055      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006442:	2b30      	cmp	r3, #48	@ 0x30
 8006444:	d850      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d051      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d84c      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04d      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d04b      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006456:	e047      	b.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	f000 f8a6 	bl	80065b8 <TIM_ETR_SetConfig>
      break;
 800646c:	e040      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b05      	cmp	r3, #5
 8006474:	d101      	bne.n	800647a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e03b      	b.n	80064f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
      break;
 80064be:	e017      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064cc:	461a      	mov	r2, r3
 80064ce:	f000 f814 	bl	80064fa <TIM_TI1_ConfigInputStage>
      break;
 80064d2:	e00d      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e0:	461a      	mov	r2, r3
 80064e2:	f000 f839 	bl	8006558 <TIM_TI2_ConfigInputStage>
      break;
 80064e6:	e003      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e000      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80064ee:	bf00      	nop
  }

  return status;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f023 0201 	bic.w	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 030a 	bic.w	r3, r3, #10
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0210 	bic.w	r2, r3, #16
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	031b      	lsls	r3, r3, #12
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006594:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	431a      	orrs	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e050      	b.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665c:	d013      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a18      	ldr	r2, [pc, #96]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a15      	ldr	r2, [pc, #84]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a13      	ldr	r2, [pc, #76]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10c      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40014000 	.word	0x40014000

080066d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e042      	b.n	8006794 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb fda6 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2224      	movs	r2, #36	@ 0x24
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800673e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 ff4f 	bl	80075e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	@ 0x28
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d175      	bne.n	80068a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_UART_Transmit+0x2c>
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e06e      	b.n	80068aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2221      	movs	r2, #33	@ 0x21
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067da:	f7fc fc6f 	bl	80030bc <HAL_GetTick>
 80067de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f4:	d108      	bne.n	8006808 <HAL_UART_Transmit+0x6c>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e003      	b.n	8006810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006810:	e02e      	b.n	8006870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2200      	movs	r2, #0
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fc27 	bl	8007070 <UART_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e03a      	b.n	80068aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	3302      	adds	r3, #2
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	e007      	b.n	8006862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1cb      	bne.n	8006812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	2140      	movs	r1, #64	@ 0x40
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fbf3 	bl	8007070 <UART_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e006      	b.n	80068aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d112      	bne.n	80068f2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_UART_Receive_DMA+0x26>
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e00b      	b.n	80068f4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	461a      	mov	r2, r3
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fc1b 	bl	8007124 <UART_Start_Receive_DMA>
 80068ee:	4603      	mov	r3, r0
 80068f0:	e000      	b.n	80068f4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800693a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_UART_IRQHandler+0x66>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd83 	bl	8007466 <UART_Receive_IT>
      return;
 8006960:	e25b      	b.n	8006e1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 80de 	beq.w	8006b28 <HAL_UART_IRQHandler+0x22c>
 800696c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80d1 	beq.w	8006b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <HAL_UART_IRQHandler+0xae>
 8006992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	f043 0201 	orr.w	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_UART_IRQHandler+0xd2>
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f043 0202 	orr.w	r2, r3, #2
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <HAL_UART_IRQHandler+0xf6>
 80069da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	f043 0204 	orr.w	r2, r3, #4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d011      	beq.n	8006a22 <HAL_UART_IRQHandler+0x126>
 80069fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d105      	bne.n	8006a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	f043 0208 	orr.w	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 81f2 	beq.w	8006e10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_UART_IRQHandler+0x14e>
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fd0e 	bl	8007466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a54:	2b40      	cmp	r3, #64	@ 0x40
 8006a56:	bf0c      	ite	eq
 8006a58:	2301      	moveq	r3, #1
 8006a5a:	2300      	movne	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d103      	bne.n	8006a76 <HAL_UART_IRQHandler+0x17a>
 8006a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d04f      	beq.n	8006b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fc16 	bl	80072a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d141      	bne.n	8006b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d9      	bne.n	8006a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d013      	beq.n	8006b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8006cdc <HAL_UART_IRQHandler+0x3e0>)
 8006ae4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fd6e 	bl	80035cc <HAL_DMA_Abort_IT>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d016      	beq.n	8006b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	e00e      	b.n	8006b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f99e 	bl	8006e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	e00a      	b.n	8006b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f99a 	bl	8006e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b14:	e006      	b.n	8006b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f996 	bl	8006e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b22:	e175      	b.n	8006e10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	bf00      	nop
    return;
 8006b26:	e173      	b.n	8006e10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	f040 814f 	bne.w	8006dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8148 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8141 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	f040 80b6 	bne.w	8006ce0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8145 	beq.w	8006e14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f080 813e 	bcs.w	8006e14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006baa:	f000 8088 	beq.w	8006cbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1d9      	bne.n	8006bae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e1      	bne.n	8006bfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3314      	adds	r3, #20
 8006c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e3      	bne.n	8006c36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ca0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ca2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ca6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e3      	bne.n	8006c7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fc fc17 	bl	80034ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f8c1 	bl	8006e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cda:	e09b      	b.n	8006e14 <HAL_UART_IRQHandler+0x518>
 8006cdc:	0800736f 	.word	0x0800736f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 808e 	beq.w	8006e18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8089 	beq.w	8006e18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e3      	bne.n	8006d06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d62:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006da8:	61fa      	str	r2, [r7, #28]
 8006daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	617b      	str	r3, [r7, #20]
   return(result);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e3      	bne.n	8006d84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f847 	bl	8006e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dce:	e023      	b.n	8006e18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <HAL_UART_IRQHandler+0x4f4>
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fad4 	bl	8007396 <UART_Transmit_IT>
    return;
 8006dee:	e014      	b.n	8006e1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00e      	beq.n	8006e1a <HAL_UART_IRQHandler+0x51e>
 8006dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fb14 	bl	8007436 <UART_EndTransmit_IT>
    return;
 8006e0e:	e004      	b.n	8006e1a <HAL_UART_IRQHandler+0x51e>
    return;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006e18:	bf00      	nop
  }
}
 8006e1a:	37e8      	adds	r7, #232	@ 0xe8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b09c      	sub	sp, #112	@ 0x70
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d172      	bne.n	8006f76 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e92:	2200      	movs	r2, #0
 8006e94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006eb8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3314      	adds	r3, #20
 8006ee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8006eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3314      	adds	r3, #20
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d119      	bne.n	8006f76 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f023 0310 	bic.w	r3, r3, #16
 8006f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f62:	61fa      	str	r2, [r7, #28]
 8006f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	69b9      	ldr	r1, [r7, #24]
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e5      	bne.n	8006f42 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f78:	2200      	movs	r2, #0
 8006f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d106      	bne.n	8006f92 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f8c:	f7ff ff66 	bl	8006e5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f90:	e002      	b.n	8006f98 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f94:	f7f9 fde4 	bl	8000b60 <HAL_UART_RxCpltCallback>
}
 8006f98:	bf00      	nop
 8006f9a:	3770      	adds	r7, #112	@ 0x70
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d108      	bne.n	8006fce <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ff48 	bl	8006e5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fcc:	e002      	b.n	8006fd4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff ff30 	bl	8006e34 <HAL_UART_RxHalfCpltCallback>
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff8:	2b80      	cmp	r3, #128	@ 0x80
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b21      	cmp	r3, #33	@ 0x21
 800700e:	d108      	bne.n	8007022 <UART_DMAError+0x46>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2200      	movs	r2, #0
 800701a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800701c:	68b8      	ldr	r0, [r7, #8]
 800701e:	f000 f91b 	bl	8007258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702c:	2b40      	cmp	r3, #64	@ 0x40
 800702e:	bf0c      	ite	eq
 8007030:	2301      	moveq	r3, #1
 8007032:	2300      	movne	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b22      	cmp	r3, #34	@ 0x22
 8007042:	d108      	bne.n	8007056 <UART_DMAError+0x7a>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f000 f929 	bl	80072a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705a:	f043 0210 	orr.w	r2, r3, #16
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007062:	68b8      	ldr	r0, [r7, #8]
 8007064:	f7ff fef0 	bl	8006e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007080:	e03b      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d037      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708a:	f7fc f817 	bl	80030bc <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	6a3a      	ldr	r2, [r7, #32]
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e03a      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d023      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b80      	cmp	r3, #128	@ 0x80
 80070b6:	d020      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b40      	cmp	r3, #64	@ 0x40
 80070bc:	d01d      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d116      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f8e0 	bl	80072a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2208      	movs	r2, #8
 80070ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e00f      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	bf0c      	ite	eq
 800710a:	2301      	moveq	r3, #1
 800710c:	2300      	movne	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	429a      	cmp	r2, r3
 8007116:	d0b4      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b098      	sub	sp, #96	@ 0x60
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2222      	movs	r2, #34	@ 0x22
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007150:	4a3e      	ldr	r2, [pc, #248]	@ (800724c <UART_Start_Receive_DMA+0x128>)
 8007152:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	4a3d      	ldr	r2, [pc, #244]	@ (8007250 <UART_Start_Receive_DMA+0x12c>)
 800715a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007160:	4a3c      	ldr	r2, [pc, #240]	@ (8007254 <UART_Start_Receive_DMA+0x130>)
 8007162:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	2200      	movs	r2, #0
 800716a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	f7fc f95a 	bl	800343c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d019      	beq.n	80071da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80071c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80071cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80071d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3314      	adds	r3, #20
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	617b      	str	r3, [r7, #20]
   return(result);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007224:	653b      	str	r3, [r7, #80]	@ 0x50
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3314      	adds	r3, #20
 800722c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800722e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6a39      	ldr	r1, [r7, #32]
 8007234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	61fb      	str	r3, [r7, #28]
   return(result);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3760      	adds	r7, #96	@ 0x60
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	08006e75 	.word	0x08006e75
 8007250:	08006fa1 	.word	0x08006fa1
 8007254:	08006fdd 	.word	0x08006fdd

08007258 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	@ 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	61ba      	str	r2, [r7, #24]
 8007282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	613b      	str	r3, [r7, #16]
   return(result);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800729c:	bf00      	nop
 800729e:	3724      	adds	r7, #36	@ 0x24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b095      	sub	sp, #84	@ 0x54
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e5      	bne.n	80072b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800730a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e5      	bne.n	80072e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	2b01      	cmp	r3, #1
 800731e:	d119      	bne.n	8007354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	647b      	str	r3, [r7, #68]	@ 0x44
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007340:	61ba      	str	r2, [r7, #24]
 8007342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	613b      	str	r3, [r7, #16]
   return(result);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007362:	bf00      	nop
 8007364:	3754      	adds	r7, #84	@ 0x54
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fd5d 	bl	8006e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b21      	cmp	r3, #33	@ 0x21
 80073a8:	d13e      	bne.n	8007428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b2:	d114      	bne.n	80073de <UART_Transmit_IT+0x48>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d110      	bne.n	80073de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	1c9a      	adds	r2, r3, #2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	621a      	str	r2, [r3, #32]
 80073dc:	e008      	b.n	80073f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6211      	str	r1, [r2, #32]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4619      	mov	r1, r3
 80073fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10f      	bne.n	8007424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	e000      	b.n	800742a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007428:	2302      	movs	r3, #2
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800744c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fce2 	bl	8006e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b08c      	sub	sp, #48	@ 0x30
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b22      	cmp	r3, #34	@ 0x22
 8007478:	f040 80ae 	bne.w	80075d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007484:	d117      	bne.n	80074b6 <UART_Receive_IT+0x50>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d113      	bne.n	80074b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	1c9a      	adds	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80074b4:	e026      	b.n	8007504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c8:	d007      	beq.n	80074da <UART_Receive_IT+0x74>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <UART_Receive_IT+0x82>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e008      	b.n	80074fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29b      	uxth	r3, r3
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4619      	mov	r1, r3
 8007512:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007514:	2b00      	cmp	r3, #0
 8007516:	d15d      	bne.n	80075d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0220 	bic.w	r2, r2, #32
 8007526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	2b01      	cmp	r3, #1
 800755c:	d135      	bne.n	80075ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f023 0310 	bic.w	r3, r3, #16
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007584:	623a      	str	r2, [r7, #32]
 8007586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	61bb      	str	r3, [r7, #24]
   return(result);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0310 	and.w	r3, r3, #16
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d10a      	bne.n	80075bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fc4a 	bl	8006e5c <HAL_UARTEx_RxEventCallback>
 80075c8:	e002      	b.n	80075d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fac8 	bl	8000b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e002      	b.n	80075da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	e000      	b.n	80075da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075d8:	2302      	movs	r3, #2
  }
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3730      	adds	r7, #48	@ 0x30
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e8:	b0c0      	sub	sp, #256	@ 0x100
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007600:	68d9      	ldr	r1, [r3, #12]
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	ea40 0301 	orr.w	r3, r0, r1
 800760c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	431a      	orrs	r2, r3
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	431a      	orrs	r2, r3
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800763c:	f021 010c 	bic.w	r1, r1, #12
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800764a:	430b      	orrs	r3, r1
 800764c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800764e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765e:	6999      	ldr	r1, [r3, #24]
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	ea40 0301 	orr.w	r3, r0, r1
 800766a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b8f      	ldr	r3, [pc, #572]	@ (80078b0 <UART_SetConfig+0x2cc>)
 8007674:	429a      	cmp	r2, r3
 8007676:	d005      	beq.n	8007684 <UART_SetConfig+0xa0>
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b8d      	ldr	r3, [pc, #564]	@ (80078b4 <UART_SetConfig+0x2d0>)
 8007680:	429a      	cmp	r2, r3
 8007682:	d104      	bne.n	800768e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007684:	f7fd fdf4 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800768c:	e003      	b.n	8007696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800768e:	f7fd fddb 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8007692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a0:	f040 810c 	bne.w	80078bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076b6:	4622      	mov	r2, r4
 80076b8:	462b      	mov	r3, r5
 80076ba:	1891      	adds	r1, r2, r2
 80076bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076be:	415b      	adcs	r3, r3
 80076c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076c6:	4621      	mov	r1, r4
 80076c8:	eb12 0801 	adds.w	r8, r2, r1
 80076cc:	4629      	mov	r1, r5
 80076ce:	eb43 0901 	adc.w	r9, r3, r1
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076e6:	4690      	mov	r8, r2
 80076e8:	4699      	mov	r9, r3
 80076ea:	4623      	mov	r3, r4
 80076ec:	eb18 0303 	adds.w	r3, r8, r3
 80076f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076f4:	462b      	mov	r3, r5
 80076f6:	eb49 0303 	adc.w	r3, r9, r3
 80076fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800770a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800770e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007712:	460b      	mov	r3, r1
 8007714:	18db      	adds	r3, r3, r3
 8007716:	653b      	str	r3, [r7, #80]	@ 0x50
 8007718:	4613      	mov	r3, r2
 800771a:	eb42 0303 	adc.w	r3, r2, r3
 800771e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007728:	f7f8 fd5a 	bl	80001e0 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4b61      	ldr	r3, [pc, #388]	@ (80078b8 <UART_SetConfig+0x2d4>)
 8007732:	fba3 2302 	umull	r2, r3, r3, r2
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	011c      	lsls	r4, r3, #4
 800773a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800773e:	2200      	movs	r2, #0
 8007740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	1891      	adds	r1, r2, r2
 8007752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007754:	415b      	adcs	r3, r3
 8007756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800775c:	4641      	mov	r1, r8
 800775e:	eb12 0a01 	adds.w	sl, r2, r1
 8007762:	4649      	mov	r1, r9
 8007764:	eb43 0b01 	adc.w	fp, r3, r1
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800777c:	4692      	mov	sl, r2
 800777e:	469b      	mov	fp, r3
 8007780:	4643      	mov	r3, r8
 8007782:	eb1a 0303 	adds.w	r3, sl, r3
 8007786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800778a:	464b      	mov	r3, r9
 800778c:	eb4b 0303 	adc.w	r3, fp, r3
 8007790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077a8:	460b      	mov	r3, r1
 80077aa:	18db      	adds	r3, r3, r3
 80077ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80077ae:	4613      	mov	r3, r2
 80077b0:	eb42 0303 	adc.w	r3, r2, r3
 80077b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077be:	f7f8 fd0f 	bl	80001e0 <__aeabi_uldivmod>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4611      	mov	r1, r2
 80077c8:	4b3b      	ldr	r3, [pc, #236]	@ (80078b8 <UART_SetConfig+0x2d4>)
 80077ca:	fba3 2301 	umull	r2, r3, r3, r1
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	2264      	movs	r2, #100	@ 0x64
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	1acb      	subs	r3, r1, r3
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077de:	4b36      	ldr	r3, [pc, #216]	@ (80078b8 <UART_SetConfig+0x2d4>)
 80077e0:	fba3 2302 	umull	r2, r3, r3, r2
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077ec:	441c      	add	r4, r3
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	1891      	adds	r1, r2, r2
 8007806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007808:	415b      	adcs	r3, r3
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800780c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007810:	4641      	mov	r1, r8
 8007812:	1851      	adds	r1, r2, r1
 8007814:	6339      	str	r1, [r7, #48]	@ 0x30
 8007816:	4649      	mov	r1, r9
 8007818:	414b      	adcs	r3, r1
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007828:	4659      	mov	r1, fp
 800782a:	00cb      	lsls	r3, r1, #3
 800782c:	4651      	mov	r1, sl
 800782e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007832:	4651      	mov	r1, sl
 8007834:	00ca      	lsls	r2, r1, #3
 8007836:	4610      	mov	r0, r2
 8007838:	4619      	mov	r1, r3
 800783a:	4603      	mov	r3, r0
 800783c:	4642      	mov	r2, r8
 800783e:	189b      	adds	r3, r3, r2
 8007840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007844:	464b      	mov	r3, r9
 8007846:	460a      	mov	r2, r1
 8007848:	eb42 0303 	adc.w	r3, r2, r3
 800784c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800785c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007864:	460b      	mov	r3, r1
 8007866:	18db      	adds	r3, r3, r3
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800786a:	4613      	mov	r3, r2
 800786c:	eb42 0303 	adc.w	r3, r2, r3
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800787a:	f7f8 fcb1 	bl	80001e0 <__aeabi_uldivmod>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <UART_SetConfig+0x2d4>)
 8007884:	fba3 1302 	umull	r1, r3, r3, r2
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	2164      	movs	r1, #100	@ 0x64
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	3332      	adds	r3, #50	@ 0x32
 8007896:	4a08      	ldr	r2, [pc, #32]	@ (80078b8 <UART_SetConfig+0x2d4>)
 8007898:	fba2 2303 	umull	r2, r3, r2, r3
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	f003 0207 	and.w	r2, r3, #7
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4422      	add	r2, r4
 80078aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078ac:	e106      	b.n	8007abc <UART_SetConfig+0x4d8>
 80078ae:	bf00      	nop
 80078b0:	40011000 	.word	0x40011000
 80078b4:	40011400 	.word	0x40011400
 80078b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078ce:	4642      	mov	r2, r8
 80078d0:	464b      	mov	r3, r9
 80078d2:	1891      	adds	r1, r2, r2
 80078d4:	6239      	str	r1, [r7, #32]
 80078d6:	415b      	adcs	r3, r3
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078de:	4641      	mov	r1, r8
 80078e0:	1854      	adds	r4, r2, r1
 80078e2:	4649      	mov	r1, r9
 80078e4:	eb43 0501 	adc.w	r5, r3, r1
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	00eb      	lsls	r3, r5, #3
 80078f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078f6:	00e2      	lsls	r2, r4, #3
 80078f8:	4614      	mov	r4, r2
 80078fa:	461d      	mov	r5, r3
 80078fc:	4643      	mov	r3, r8
 80078fe:	18e3      	adds	r3, r4, r3
 8007900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007904:	464b      	mov	r3, r9
 8007906:	eb45 0303 	adc.w	r3, r5, r3
 800790a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800791a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800792a:	4629      	mov	r1, r5
 800792c:	008b      	lsls	r3, r1, #2
 800792e:	4621      	mov	r1, r4
 8007930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007934:	4621      	mov	r1, r4
 8007936:	008a      	lsls	r2, r1, #2
 8007938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800793c:	f7f8 fc50 	bl	80001e0 <__aeabi_uldivmod>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4b60      	ldr	r3, [pc, #384]	@ (8007ac8 <UART_SetConfig+0x4e4>)
 8007946:	fba3 2302 	umull	r2, r3, r3, r2
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	011c      	lsls	r4, r3, #4
 800794e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007952:	2200      	movs	r2, #0
 8007954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800795c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007960:	4642      	mov	r2, r8
 8007962:	464b      	mov	r3, r9
 8007964:	1891      	adds	r1, r2, r2
 8007966:	61b9      	str	r1, [r7, #24]
 8007968:	415b      	adcs	r3, r3
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007970:	4641      	mov	r1, r8
 8007972:	1851      	adds	r1, r2, r1
 8007974:	6139      	str	r1, [r7, #16]
 8007976:	4649      	mov	r1, r9
 8007978:	414b      	adcs	r3, r1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007988:	4659      	mov	r1, fp
 800798a:	00cb      	lsls	r3, r1, #3
 800798c:	4651      	mov	r1, sl
 800798e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007992:	4651      	mov	r1, sl
 8007994:	00ca      	lsls	r2, r1, #3
 8007996:	4610      	mov	r0, r2
 8007998:	4619      	mov	r1, r3
 800799a:	4603      	mov	r3, r0
 800799c:	4642      	mov	r2, r8
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079a4:	464b      	mov	r3, r9
 80079a6:	460a      	mov	r2, r1
 80079a8:	eb42 0303 	adc.w	r3, r2, r3
 80079ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079c8:	4649      	mov	r1, r9
 80079ca:	008b      	lsls	r3, r1, #2
 80079cc:	4641      	mov	r1, r8
 80079ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079d2:	4641      	mov	r1, r8
 80079d4:	008a      	lsls	r2, r1, #2
 80079d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079da:	f7f8 fc01 	bl	80001e0 <__aeabi_uldivmod>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	4b38      	ldr	r3, [pc, #224]	@ (8007ac8 <UART_SetConfig+0x4e4>)
 80079e6:	fba3 2301 	umull	r2, r3, r3, r1
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2264      	movs	r2, #100	@ 0x64
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	1acb      	subs	r3, r1, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	@ 0x32
 80079f8:	4a33      	ldr	r2, [pc, #204]	@ (8007ac8 <UART_SetConfig+0x4e4>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a04:	441c      	add	r4, r3
 8007a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a24:	4641      	mov	r1, r8
 8007a26:	1851      	adds	r1, r2, r1
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	414b      	adcs	r3, r1
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	00cb      	lsls	r3, r1, #3
 8007a40:	4651      	mov	r1, sl
 8007a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a46:	4651      	mov	r1, sl
 8007a48:	00ca      	lsls	r2, r1, #3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4642      	mov	r2, r8
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a56:	464b      	mov	r3, r9
 8007a58:	460a      	mov	r2, r1
 8007a5a:	eb42 0303 	adc.w	r3, r2, r3
 8007a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a78:	4649      	mov	r1, r9
 8007a7a:	008b      	lsls	r3, r1, #2
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a82:	4641      	mov	r1, r8
 8007a84:	008a      	lsls	r2, r1, #2
 8007a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a8a:	f7f8 fba9 	bl	80001e0 <__aeabi_uldivmod>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <UART_SetConfig+0x4e4>)
 8007a94:	fba3 1302 	umull	r1, r3, r3, r2
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	2164      	movs	r1, #100	@ 0x64
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	3332      	adds	r3, #50	@ 0x32
 8007aa6:	4a08      	ldr	r2, [pc, #32]	@ (8007ac8 <UART_SetConfig+0x4e4>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	f003 020f 	and.w	r2, r3, #15
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4422      	add	r2, r4
 8007aba:	609a      	str	r2, [r3, #8]
}
 8007abc:	bf00      	nop
 8007abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac8:	51eb851f 	.word	0x51eb851f

08007acc <__NVIC_SetPriority>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db0a      	blt.n	8007af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	490c      	ldr	r1, [pc, #48]	@ (8007b18 <__NVIC_SetPriority+0x4c>)
 8007ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aea:	0112      	lsls	r2, r2, #4
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	440b      	add	r3, r1
 8007af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007af4:	e00a      	b.n	8007b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	4908      	ldr	r1, [pc, #32]	@ (8007b1c <__NVIC_SetPriority+0x50>)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	3b04      	subs	r3, #4
 8007b04:	0112      	lsls	r2, r2, #4
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	440b      	add	r3, r1
 8007b0a:	761a      	strb	r2, [r3, #24]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	e000e100 	.word	0xe000e100
 8007b1c:	e000ed00 	.word	0xe000ed00

08007b20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <SysTick_Handler+0x1c>)
 8007b26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b28:	f002 ffec 	bl	800ab04 <xTaskGetSchedulerState>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d001      	beq.n	8007b36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b32:	f003 ff19 	bl	800b968 <xPortSysTickHandler>
  }
}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	e000e010 	.word	0xe000e010

08007b40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b44:	2100      	movs	r1, #0
 8007b46:	f06f 0004 	mvn.w	r0, #4
 8007b4a:	f7ff ffbf 	bl	8007acc <__NVIC_SetPriority>
#endif
}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b5a:	f3ef 8305 	mrs	r3, IPSR
 8007b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b66:	f06f 0305 	mvn.w	r3, #5
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	e00c      	b.n	8007b88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <osKernelInitialize+0x44>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b76:	4b08      	ldr	r3, [pc, #32]	@ (8007b98 <osKernelInitialize+0x44>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	607b      	str	r3, [r7, #4]
 8007b80:	e002      	b.n	8007b88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b88:	687b      	ldr	r3, [r7, #4]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	200014ec 	.word	0x200014ec

08007b9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba2:	f3ef 8305 	mrs	r3, IPSR
 8007ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bae:	f06f 0305 	mvn.w	r3, #5
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e010      	b.n	8007bd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007be4 <osKernelStart+0x48>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d109      	bne.n	8007bd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bbe:	f7ff ffbf 	bl	8007b40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bc2:	4b08      	ldr	r3, [pc, #32]	@ (8007be4 <osKernelStart+0x48>)
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bc8:	f002 fa7c 	bl	800a0c4 <vTaskStartScheduler>
      stat = osOK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e002      	b.n	8007bd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bd8:	687b      	ldr	r3, [r7, #4]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200014ec 	.word	0x200014ec

08007be8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08e      	sub	sp, #56	@ 0x38
 8007bec:	af04      	add	r7, sp, #16
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf8:	f3ef 8305 	mrs	r3, IPSR
 8007bfc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d17e      	bne.n	8007d02 <osThreadNew+0x11a>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d07b      	beq.n	8007d02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c0a:	2380      	movs	r3, #128	@ 0x80
 8007c0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c0e:	2318      	movs	r3, #24
 8007c10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d045      	beq.n	8007cae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <osThreadNew+0x48>
        name = attr->name;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d008      	beq.n	8007c56 <osThreadNew+0x6e>
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	2b38      	cmp	r3, #56	@ 0x38
 8007c48:	d805      	bhi.n	8007c56 <osThreadNew+0x6e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <osThreadNew+0x72>
        return (NULL);
 8007c56:	2300      	movs	r3, #0
 8007c58:	e054      	b.n	8007d04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	089b      	lsrs	r3, r3, #2
 8007c68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00e      	beq.n	8007c90 <osThreadNew+0xa8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b63      	cmp	r3, #99	@ 0x63
 8007c78:	d90a      	bls.n	8007c90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d006      	beq.n	8007c90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <osThreadNew+0xa8>
        mem = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	e010      	b.n	8007cb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <osThreadNew+0xca>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d108      	bne.n	8007cb2 <osThreadNew+0xca>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <osThreadNew+0xca>
          mem = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61bb      	str	r3, [r7, #24]
 8007cac:	e001      	b.n	8007cb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d110      	bne.n	8007cda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cc0:	9202      	str	r2, [sp, #8]
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f001 ff3a 	bl	8009b48 <xTaskCreateStatic>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	e013      	b.n	8007d02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d110      	bne.n	8007d02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f107 0310 	add.w	r3, r7, #16
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f001 ff88 	bl	8009c08 <xTaskCreate>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d001      	beq.n	8007d02 <osThreadNew+0x11a>
            hTask = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d02:	693b      	ldr	r3, [r7, #16]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3728      	adds	r7, #40	@ 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d18:	f3ef 8305 	mrs	r3, IPSR
 8007d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007d24:	f06f 0305 	mvn.w	r3, #5
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	e017      	b.n	8007d5c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007d32:	f06f 0303 	mvn.w	r3, #3
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e010      	b.n	8007d5c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007d3a:	6938      	ldr	r0, [r7, #16]
 8007d3c:	f002 f95a 	bl	8009ff4 <eTaskGetState>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d005      	beq.n	8007d56 <osThreadTerminate+0x4a>
      stat = osOK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007d4e:	6938      	ldr	r0, [r7, #16]
 8007d50:	f002 f8a6 	bl	8009ea0 <vTaskDelete>
 8007d54:	e002      	b.n	8007d5c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007d56:	f06f 0302 	mvn.w	r3, #2
 8007d5a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007d5c:	697b      	ldr	r3, [r7, #20]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d6e:	f3ef 8305 	mrs	r3, IPSR
 8007d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <osDelay+0x1c>
    stat = osErrorISR;
 8007d7a:	f06f 0305 	mvn.w	r3, #5
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e007      	b.n	8007d92 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f002 f8fb 	bl	8009f88 <vTaskDelay>
    }
  }

  return (stat);
 8007d92:	68fb      	ldr	r3, [r7, #12]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da8:	f3ef 8305 	mrs	r3, IPSR
 8007dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dae:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d12d      	bne.n	8007e10 <osEventFlagsNew+0x74>
    mem = -1;
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d015      	beq.n	8007dec <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d006      	beq.n	8007dd6 <osEventFlagsNew+0x3a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	2b1f      	cmp	r3, #31
 8007dce:	d902      	bls.n	8007dd6 <osEventFlagsNew+0x3a>
        mem = 1;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	e00c      	b.n	8007df0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <osEventFlagsNew+0x54>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <osEventFlagsNew+0x54>
          mem = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e001      	b.n	8007df0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d106      	bne.n	8007e04 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fb16 	bl	800842c <xEventGroupCreateStatic>
 8007e00:	6178      	str	r0, [r7, #20]
 8007e02:	e005      	b.n	8007e10 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007e0a:	f000 fb48 	bl	800849e <xEventGroupCreate>
 8007e0e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007e10:	697b      	ldr	r3, [r7, #20]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <osEventFlagsSet+0x1c>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e36:	d303      	bcc.n	8007e40 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007e38:	f06f 0303 	mvn.w	r3, #3
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e028      	b.n	8007e92 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e40:	f3ef 8305 	mrs	r3, IPSR
 8007e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01d      	beq.n	8007e88 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	461a      	mov	r2, r3
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6938      	ldr	r0, [r7, #16]
 8007e5a:	f000 fcc9 	bl	80087f0 <xEventGroupSetBitsFromISR>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007e64:	f06f 0302 	mvn.w	r3, #2
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	e012      	b.n	8007e92 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <osEventFlagsSet+0x76>
 8007e76:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <osEventFlagsSet+0x80>)
 8007e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	e004      	b.n	8007e92 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6938      	ldr	r0, [r7, #16]
 8007e8c:	f000 fbf4 	bl	8008678 <xEventGroupSetBits>
 8007e90:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	@ 0x30
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <osEventFlagsWait+0x20>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ebe:	d303      	bcc.n	8007ec8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007ec0:	f06f 0303 	mvn.w	r3, #3
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	e04b      	b.n	8007f60 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ec8:	f3ef 8305 	mrs	r3, IPSR
 8007ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ece:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007ed4:	f06f 0305 	mvn.w	r3, #5
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e041      	b.n	8007f60 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eea:	e001      	b.n	8007ef0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	e001      	b.n	8007f04 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	f000 fae0 	bl	80084d4 <xEventGroupWaitBits>
 8007f14:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d010      	beq.n	8007f42 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4013      	ands	r3, r2
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d019      	beq.n	8007f60 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007f32:	f06f 0301 	mvn.w	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e012      	b.n	8007f60 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007f3a:	f06f 0302 	mvn.w	r3, #2
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e00e      	b.n	8007f60 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4013      	ands	r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007f52:	f06f 0301 	mvn.w	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
 8007f58:	e002      	b.n	8007f60 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007f5a:	f06f 0302 	mvn.w	r3, #2
 8007f5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007f60:	69fb      	ldr	r3, [r7, #28]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3728      	adds	r7, #40	@ 0x28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b088      	sub	sp, #32
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f76:	f3ef 8305 	mrs	r3, IPSR
 8007f7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f7c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d174      	bne.n	800806c <osMutexNew+0x102>
    if (attr != NULL) {
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	e001      	b.n	8007f94 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e001      	b.n	8007fa8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d15c      	bne.n	800806c <osMutexNew+0x102>
      mem = -1;
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d015      	beq.n	8007fea <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <osMutexNew+0x6a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fcc:	d902      	bls.n	8007fd4 <osMutexNew+0x6a>
          mem = 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	e00c      	b.n	8007fee <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <osMutexNew+0x84>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <osMutexNew+0x84>
            mem = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]
 8007fe8:	e001      	b.n	8007fee <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d112      	bne.n	800801a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	4619      	mov	r1, r3
 8008000:	2004      	movs	r0, #4
 8008002:	f000 fe34 	bl	8008c6e <xQueueCreateMutexStatic>
 8008006:	61f8      	str	r0, [r7, #28]
 8008008:	e016      	b.n	8008038 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	4619      	mov	r1, r3
 8008010:	2001      	movs	r0, #1
 8008012:	f000 fe2c 	bl	8008c6e <xQueueCreateMutexStatic>
 8008016:	61f8      	str	r0, [r7, #28]
 8008018:	e00e      	b.n	8008038 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008026:	2004      	movs	r0, #4
 8008028:	f000 fe09 	bl	8008c3e <xQueueCreateMutex>
 800802c:	61f8      	str	r0, [r7, #28]
 800802e:	e003      	b.n	8008038 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008030:	2001      	movs	r0, #1
 8008032:	f000 fe04 	bl	8008c3e <xQueueCreateMutex>
 8008036:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <osMutexNew+0xee>
        if (attr != NULL) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <osMutexNew+0xe2>
          name = attr->name;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e001      	b.n	8008050 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	69f8      	ldr	r0, [r7, #28]
 8008054:	f001 fcf0 	bl	8009a38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <osMutexNew+0x102>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008094:	f3ef 8305 	mrs	r3, IPSR
 8008098:	60bb      	str	r3, [r7, #8]
  return(result);
 800809a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80080a0:	f06f 0305 	mvn.w	r3, #5
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e02c      	b.n	8008102 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80080ae:	f06f 0303 	mvn.w	r3, #3
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e025      	b.n	8008102 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d011      	beq.n	80080e0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6938      	ldr	r0, [r7, #16]
 80080c0:	f000 fe25 	bl	8008d0e <xQueueTakeMutexRecursive>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d01b      	beq.n	8008102 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080d0:	f06f 0301 	mvn.w	r3, #1
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e014      	b.n	8008102 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080d8:	f06f 0302 	mvn.w	r3, #2
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	e010      	b.n	8008102 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6938      	ldr	r0, [r7, #16]
 80080e4:	f001 f9ca 	bl	800947c <xQueueSemaphoreTake>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d009      	beq.n	8008102 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080f4:	f06f 0301 	mvn.w	r3, #1
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e002      	b.n	8008102 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080fc:	f06f 0302 	mvn.w	r3, #2
 8008100:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008102:	697b      	ldr	r3, [r7, #20]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f023 0301 	bic.w	r3, r3, #1
 800811a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008128:	f3ef 8305 	mrs	r3, IPSR
 800812c:	60bb      	str	r3, [r7, #8]
  return(result);
 800812e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <osMutexRelease+0x30>
    stat = osErrorISR;
 8008134:	f06f 0305 	mvn.w	r3, #5
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	e01f      	b.n	800817c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008142:	f06f 0303 	mvn.w	r3, #3
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e018      	b.n	800817c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008150:	6938      	ldr	r0, [r7, #16]
 8008152:	f000 fda7 	bl	8008ca4 <xQueueGiveMutexRecursive>
 8008156:	4603      	mov	r3, r0
 8008158:	2b01      	cmp	r3, #1
 800815a:	d00f      	beq.n	800817c <osMutexRelease+0x70>
        stat = osErrorResource;
 800815c:	f06f 0302 	mvn.w	r3, #2
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e00b      	b.n	800817c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008164:	2300      	movs	r3, #0
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	6938      	ldr	r0, [r7, #16]
 800816c:	f000 fe74 	bl	8008e58 <xQueueGenericSend>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d002      	beq.n	800817c <osMutexRelease+0x70>
        stat = osErrorResource;
 8008176:	f06f 0302 	mvn.w	r3, #2
 800817a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800817c:	697b      	ldr	r3, [r7, #20]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008186:	b580      	push	{r7, lr}
 8008188:	b08a      	sub	sp, #40	@ 0x28
 800818a:	af02      	add	r7, sp, #8
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008196:	f3ef 8305 	mrs	r3, IPSR
 800819a:	613b      	str	r3, [r7, #16]
  return(result);
 800819c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d175      	bne.n	800828e <osSemaphoreNew+0x108>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d072      	beq.n	800828e <osSemaphoreNew+0x108>
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d86e      	bhi.n	800828e <osSemaphoreNew+0x108>
    mem = -1;
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <osSemaphoreNew+0x4c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80081ca:	d902      	bls.n	80081d2 <osSemaphoreNew+0x4c>
        mem = 1;
 80081cc:	2301      	movs	r3, #1
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	e00c      	b.n	80081ec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d108      	bne.n	80081ec <osSemaphoreNew+0x66>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <osSemaphoreNew+0x66>
          mem = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e001      	b.n	80081ec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d04c      	beq.n	800828e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d128      	bne.n	800824c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d10a      	bne.n	8008216 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2203      	movs	r2, #3
 8008206:	9200      	str	r2, [sp, #0]
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	2001      	movs	r0, #1
 800820e:	f000 fc21 	bl	8008a54 <xQueueGenericCreateStatic>
 8008212:	61f8      	str	r0, [r7, #28]
 8008214:	e005      	b.n	8008222 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008216:	2203      	movs	r2, #3
 8008218:	2100      	movs	r1, #0
 800821a:	2001      	movs	r0, #1
 800821c:	f000 fc97 	bl	8008b4e <xQueueGenericCreate>
 8008220:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d022      	beq.n	800826e <osSemaphoreNew+0xe8>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01f      	beq.n	800826e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800822e:	2300      	movs	r3, #0
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	69f8      	ldr	r0, [r7, #28]
 8008236:	f000 fe0f 	bl	8008e58 <xQueueGenericSend>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d016      	beq.n	800826e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008240:	69f8      	ldr	r0, [r7, #28]
 8008242:	f001 faad 	bl	80097a0 <vQueueDelete>
            hSemaphore = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	e010      	b.n	800826e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d108      	bne.n	8008264 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	461a      	mov	r2, r3
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fd8e 	bl	8008d7c <xQueueCreateCountingSemaphoreStatic>
 8008260:	61f8      	str	r0, [r7, #28]
 8008262:	e004      	b.n	800826e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fdc1 	bl	8008dee <xQueueCreateCountingSemaphore>
 800826c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <osSemaphoreNew+0xfc>
          name = attr->name;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e001      	b.n	8008286 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008286:	6979      	ldr	r1, [r7, #20]
 8008288:	69f8      	ldr	r0, [r7, #28]
 800828a:	f001 fbd5 	bl	8009a38 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800828e:	69fb      	ldr	r3, [r7, #28]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80082b0:	f06f 0303 	mvn.w	r3, #3
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	e039      	b.n	800832c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b8:	f3ef 8305 	mrs	r3, IPSR
 80082bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80082be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d022      	beq.n	800830a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80082ca:	f06f 0303 	mvn.w	r3, #3
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e02c      	b.n	800832c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	461a      	mov	r2, r3
 80082dc:	2100      	movs	r1, #0
 80082de:	6938      	ldr	r0, [r7, #16]
 80082e0:	f001 f9dc 	bl	800969c <xQueueReceiveFromISR>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d003      	beq.n	80082f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80082ea:	f06f 0302 	mvn.w	r3, #2
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e01c      	b.n	800832c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d019      	beq.n	800832c <osSemaphoreAcquire+0x94>
 80082f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008338 <osSemaphoreAcquire+0xa0>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	e010      	b.n	800832c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6938      	ldr	r0, [r7, #16]
 800830e:	f001 f8b5 	bl	800947c <xQueueSemaphoreTake>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d009      	beq.n	800832c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800831e:	f06f 0301 	mvn.w	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e002      	b.n	800832c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008326:	f06f 0302 	mvn.w	r3, #2
 800832a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800832c:	697b      	ldr	r3, [r7, #20]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008352:	f06f 0303 	mvn.w	r3, #3
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e02c      	b.n	80083b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835a:	f3ef 8305 	mrs	r3, IPSR
 800835e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008360:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01a      	beq.n	800839c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800836a:	f107 0308 	add.w	r3, r7, #8
 800836e:	4619      	mov	r1, r3
 8008370:	6938      	ldr	r0, [r7, #16]
 8008372:	f000 ff11 	bl	8009198 <xQueueGiveFromISR>
 8008376:	4603      	mov	r3, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	d003      	beq.n	8008384 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800837c:	f06f 0302 	mvn.w	r3, #2
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e017      	b.n	80083b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d014      	beq.n	80083b4 <osSemaphoreRelease+0x78>
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <osSemaphoreRelease+0x84>)
 800838c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	e00b      	b.n	80083b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800839c:	2300      	movs	r3, #0
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	6938      	ldr	r0, [r7, #16]
 80083a4:	f000 fd58 	bl	8008e58 <xQueueGenericSend>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d002      	beq.n	80083b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80083ae:	f06f 0302 	mvn.w	r3, #2
 80083b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80083b4:	697b      	ldr	r3, [r7, #20]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4a07      	ldr	r2, [pc, #28]	@ (80083f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80083d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a06      	ldr	r2, [pc, #24]	@ (80083f4 <vApplicationGetIdleTaskMemory+0x30>)
 80083da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2280      	movs	r2, #128	@ 0x80
 80083e0:	601a      	str	r2, [r3, #0]
}
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200014f0 	.word	0x200014f0
 80083f4:	20001554 	.word	0x20001554

080083f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4a07      	ldr	r2, [pc, #28]	@ (8008424 <vApplicationGetTimerTaskMemory+0x2c>)
 8008408:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4a06      	ldr	r2, [pc, #24]	@ (8008428 <vApplicationGetTimerTaskMemory+0x30>)
 800840e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008416:	601a      	str	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	20001754 	.word	0x20001754
 8008428:	200017b8 	.word	0x200017b8

0800842c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008452:	2320      	movs	r3, #32
 8008454:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b20      	cmp	r3, #32
 800845a:	d00b      	beq.n	8008474 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f9c5 	bl	8008818 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2201      	movs	r2, #1
 8008492:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008494:	697b      	ldr	r3, [r7, #20]
	}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80084a4:	2020      	movs	r0, #32
 80084a6:	f003 faf1 	bl	800ba8c <pvPortMalloc>
 80084aa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f9ab 	bl	8008818 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80084c8:	687b      	ldr	r3, [r7, #4]
	}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b090      	sub	sp, #64	@ 0x40
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xEventGroupWaitBits+0x38>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	623b      	str	r3, [r7, #32]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008512:	d30b      	bcc.n	800852c <xEventGroupWaitBits+0x58>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	61fb      	str	r3, [r7, #28]
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	e7fd      	b.n	8008528 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <xEventGroupWaitBits+0x76>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	61bb      	str	r3, [r7, #24]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800854a:	f002 fadb 	bl	800ab04 <xTaskGetSchedulerState>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <xEventGroupWaitBits+0x86>
 8008554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <xEventGroupWaitBits+0x8a>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <xEventGroupWaitBits+0x8c>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	617b      	str	r3, [r7, #20]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800857c:	f001 fe0c 	bl	800a198 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800858c:	f000 f90d 	bl	80087aa <prvTestWaitCondition>
 8008590:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800859c:	2300      	movs	r3, #0
 800859e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d028      	beq.n	80085f8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80085a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	401a      	ands	r2, r3
 80085b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e020      	b.n	80085f8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80085b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80085bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c4:	e018      	b.n	80085f8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80085cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085d2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80085da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085e0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e4:	1d18      	adds	r0, r3, #4
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	4313      	orrs	r3, r2
 80085ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ee:	4619      	mov	r1, r3
 80085f0:	f001 ffe8 	bl	800a5c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80085f8:	f001 fddc 	bl	800a1b4 <xTaskResumeAll>
 80085fc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80085fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008600:	2b00      	cmp	r3, #0
 8008602:	d031      	beq.n	8008668 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800860a:	4b1a      	ldr	r3, [pc, #104]	@ (8008674 <xEventGroupWaitBits+0x1a0>)
 800860c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800861a:	f002 fbed 	bl	800adf8 <uxTaskResetEventItemValue>
 800861e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d11a      	bne.n	8008660 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800862a:	f003 f90d 	bl	800b848 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800863a:	f000 f8b6 	bl	80087aa <prvTestWaitCondition>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	43db      	mvns	r3, r3
 8008652:	401a      	ands	r2, r3
 8008654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008656:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800865c:	f003 f926 	bl	800b8ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008662:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800866a:	4618      	mov	r0, r3
 800866c:	3740      	adds	r7, #64	@ 0x40
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	@ 0x38
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008682:	2300      	movs	r3, #0
 8008684:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xEventGroupSetBits+0x34>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	613b      	str	r3, [r7, #16]
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086b2:	d30b      	bcc.n	80086cc <xEventGroupSetBits+0x54>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	60fb      	str	r3, [r7, #12]
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	3304      	adds	r3, #4
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	3308      	adds	r3, #8
 80086d6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80086d8:	f001 fd5e 	bl	800a198 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80086dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	431a      	orrs	r2, r3
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80086ee:	e03c      	b.n	800876a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80086f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008706:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800870e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d108      	bne.n	800872c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	4013      	ands	r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800872a:	e008      	b.n	800873e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	4013      	ands	r3, r2
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d101      	bne.n	800873e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800873a:	2301      	movs	r3, #1
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800874e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	4313      	orrs	r3, r2
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800875e:	4619      	mov	r1, r3
 8008760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008762:	f001 fffd 	bl	800a760 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800876a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	429a      	cmp	r2, r3
 8008770:	d1be      	bne.n	80086f0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008780:	f001 fd18 	bl	800a1b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3738      	adds	r7, #56	@ 0x38
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff ff6b 	bl	8008678 <xEventGroupSetBits>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80087aa:	b480      	push	{r7}
 80087ac:	b087      	sub	sp, #28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d107      	bne.n	80087d0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e007      	b.n	80087e0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d101      	bne.n	80087e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80087dc:	2301      	movs	r3, #1
 80087de:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80087e0:	697b      	ldr	r3, [r7, #20]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	68f9      	ldr	r1, [r7, #12]
 8008802:	4804      	ldr	r0, [pc, #16]	@ (8008814 <xEventGroupSetBitsFromISR+0x24>)
 8008804:	f002 fed2 	bl	800b5ac <xTimerPendFunctionCallFromISR>
 8008808:	6178      	str	r0, [r7, #20]

		return xReturn;
 800880a:	697b      	ldr	r3, [r7, #20]
	}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	08008791 	.word	0x08008791

08008818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0208 	add.w	r2, r3, #8
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f04f 32ff 	mov.w	r2, #4294967295
 8008830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f103 0208 	add.w	r2, r3, #8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f103 0208 	add.w	r2, r3, #8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d103      	bne.n	80088da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e00c      	b.n	80088f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3308      	adds	r3, #8
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e002      	b.n	80088e8 <vListInsert+0x2e>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d2f6      	bcs.n	80088e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]
}
 8008920:	bf00      	nop
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d103      	bne.n	8008960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	1e5a      	subs	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <xQueueGenericReset+0x2c>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	60bb      	str	r3, [r7, #8]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089ac:	f002 ff4c 	bl	800b848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b8:	68f9      	ldr	r1, [r7, #12]
 80089ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	441a      	add	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	3b01      	subs	r3, #1
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089e2:	fb01 f303 	mul.w	r3, r1, r3
 80089e6:	441a      	add	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	22ff      	movs	r2, #255	@ 0xff
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	22ff      	movs	r2, #255	@ 0xff
 80089f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d114      	bne.n	8008a2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01a      	beq.n	8008a40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fe42 	bl	800a698 <xTaskRemoveFromEventList>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d012      	beq.n	8008a40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <xQueueGenericReset+0xd0>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	e009      	b.n	8008a40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3310      	adds	r3, #16
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fef1 	bl	8008818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3324      	adds	r3, #36	@ 0x24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff feec 	bl	8008818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a40:	f002 ff34 	bl	800b8ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a44:	2301      	movs	r3, #1
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	@ 0x38
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <xQueueGenericCreateStatic+0x56>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <xQueueGenericCreateStatic+0x5a>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <xQueueGenericCreateStatic+0x5c>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10b      	bne.n	8008acc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	623b      	str	r3, [r7, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <xQueueGenericCreateStatic+0x84>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <xQueueGenericCreateStatic+0x88>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <xQueueGenericCreateStatic+0x8a>
 8008adc:	2300      	movs	r3, #0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	61fb      	str	r3, [r7, #28]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008afa:	2350      	movs	r3, #80	@ 0x50
 8008afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b50      	cmp	r3, #80	@ 0x50
 8008b02:	d00b      	beq.n	8008b1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00d      	beq.n	8008b44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f840 	bl	8008bc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3730      	adds	r7, #48	@ 0x30
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b08a      	sub	sp, #40	@ 0x28
 8008b52:	af02      	add	r7, sp, #8
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	613b      	str	r3, [r7, #16]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
 8008b82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	3350      	adds	r3, #80	@ 0x50
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f002 ff7f 	bl	800ba8c <pvPortMalloc>
 8008b8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d011      	beq.n	8008bba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	3350      	adds	r3, #80	@ 0x50
 8008b9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ba8:	79fa      	ldrb	r2, [r7, #7]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f805 	bl	8008bc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bba:	69bb      	ldr	r3, [r7, #24]
	}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e002      	b.n	8008be6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	69b8      	ldr	r0, [r7, #24]
 8008bf6:	f7ff fec3 	bl	8008980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00e      	beq.n	8008c36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f911 	bl	8008e58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	4603      	mov	r3, r0
 8008c46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	461a      	mov	r2, r3
 8008c54:	6939      	ldr	r1, [r7, #16]
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f7ff ff79 	bl	8008b4e <xQueueGenericCreate>
 8008c5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff ffd3 	bl	8008c0a <prvInitialiseMutex>

		return xNewQueue;
 8008c64:	68fb      	ldr	r3, [r7, #12]
	}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b088      	sub	sp, #32
 8008c72:	af02      	add	r7, sp, #8
 8008c74:	4603      	mov	r3, r0
 8008c76:	6039      	str	r1, [r7, #0]
 8008c78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	6939      	ldr	r1, [r7, #16]
 8008c8c:	6978      	ldr	r0, [r7, #20]
 8008c8e:	f7ff fee1 	bl	8008a54 <xQueueGenericCreateStatic>
 8008c92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff ffb8 	bl	8008c0a <prvInitialiseMutex>

		return xNewQueue;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008ca4:	b590      	push	{r4, r7, lr}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10b      	bne.n	8008cce <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	60fb      	str	r3, [r7, #12]
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	e7fd      	b.n	8008cca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	689c      	ldr	r4, [r3, #8]
 8008cd2:	f001 ff07 	bl	800aae4 <xTaskGetCurrentTaskHandle>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d111      	bne.n	8008d00 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	1e5a      	subs	r2, r3, #1
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	6938      	ldr	r0, [r7, #16]
 8008cf6:	f000 f8af 	bl	8008e58 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	e001      	b.n	8008d04 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008d04:	697b      	ldr	r3, [r7, #20]
	}
 8008d06:	4618      	mov	r0, r3
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd90      	pop	{r4, r7, pc}

08008d0e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008d0e:	b590      	push	{r4, r7, lr}
 8008d10:	b087      	sub	sp, #28
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	60fb      	str	r3, [r7, #12]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	689c      	ldr	r4, [r3, #8]
 8008d3e:	f001 fed1 	bl	800aae4 <xTaskGetCurrentTaskHandle>
 8008d42:	4603      	mov	r3, r0
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d107      	bne.n	8008d58 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008d52:	2301      	movs	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e00c      	b.n	8008d72 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6938      	ldr	r0, [r7, #16]
 8008d5c:	f000 fb8e 	bl	800947c <xQueueSemaphoreTake>
 8008d60:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008d72:	697b      	ldr	r3, [r7, #20]
	}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd90      	pop	{r4, r7, pc}

08008d7c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08a      	sub	sp, #40	@ 0x28
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	61bb      	str	r3, [r7, #24]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d90b      	bls.n	8008dc6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	617b      	str	r3, [r7, #20]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2100      	movs	r1, #0
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fe3f 	bl	8008a54 <xQueueGenericCreateStatic>
 8008dd6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008de4:	69fb      	ldr	r3, [r7, #28]
	}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10b      	bne.n	8008e16 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	613b      	str	r3, [r7, #16]
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	e7fd      	b.n	8008e12 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d90b      	bls.n	8008e36 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60fb      	str	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e36:	2202      	movs	r2, #2
 8008e38:	2100      	movs	r1, #0
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff fe87 	bl	8008b4e <xQueueGenericCreate>
 8008e40:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e4e:	697b      	ldr	r3, [r7, #20]
	}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08e      	sub	sp, #56	@ 0x38
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e66:	2300      	movs	r3, #0
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueGenericSend+0x34>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <xQueueGenericSend+0x42>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <xQueueGenericSend+0x46>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <xQueueGenericSend+0x48>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10b      	bne.n	8008ebc <xQueueGenericSend+0x64>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008eb6:	bf00      	nop
 8008eb8:	bf00      	nop
 8008eba:	e7fd      	b.n	8008eb8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d103      	bne.n	8008eca <xQueueGenericSend+0x72>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <xQueueGenericSend+0x76>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <xQueueGenericSend+0x78>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <xQueueGenericSend+0x94>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	623b      	str	r3, [r7, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eec:	f001 fe0a 	bl	800ab04 <xTaskGetSchedulerState>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <xQueueGenericSend+0xa4>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <xQueueGenericSend+0xa8>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <xQueueGenericSend+0xaa>
 8008f00:	2300      	movs	r3, #0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10b      	bne.n	8008f1e <xQueueGenericSend+0xc6>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	61fb      	str	r3, [r7, #28]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f1e:	f002 fc93 	bl	800b848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d302      	bcc.n	8008f34 <xQueueGenericSend+0xdc>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d129      	bne.n	8008f88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f3a:	f000 fc6d 	bl	8009818 <prvCopyDataToQueue>
 8008f3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d010      	beq.n	8008f6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	3324      	adds	r3, #36	@ 0x24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fba3 	bl	800a698 <xTaskRemoveFromEventList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d013      	beq.n	8008f80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f58:	4b3f      	ldr	r3, [pc, #252]	@ (8009058 <xQueueGenericSend+0x200>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	e00a      	b.n	8008f80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f70:	4b39      	ldr	r3, [pc, #228]	@ (8009058 <xQueueGenericSend+0x200>)
 8008f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f80:	f002 fc94 	bl	800b8ac <vPortExitCritical>
				return pdPASS;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e063      	b.n	8009050 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d103      	bne.n	8008f96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f8e:	f002 fc8d 	bl	800b8ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e05c      	b.n	8009050 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fc41 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008faa:	f002 fc7f 	bl	800b8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fae:	f001 f8f3 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fb2:	f002 fc49 	bl	800b848 <vPortEnterCritical>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fbc:	b25b      	sxtb	r3, r3
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d103      	bne.n	8008fcc <xQueueGenericSend+0x174>
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fd2:	b25b      	sxtb	r3, r3
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d103      	bne.n	8008fe2 <xQueueGenericSend+0x18a>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fe2:	f002 fc63 	bl	800b8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe6:	1d3a      	adds	r2, r7, #4
 8008fe8:	f107 0314 	add.w	r3, r7, #20
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fc30 	bl	800a854 <xTaskCheckForTimeOut>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d124      	bne.n	8009044 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ffc:	f000 fd04 	bl	8009a08 <prvIsQueueFull>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d018      	beq.n	8009038 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	3310      	adds	r3, #16
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f001 fab2 	bl	800a578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009016:	f000 fc8f 	bl	8009938 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800901a:	f001 f8cb 	bl	800a1b4 <xTaskResumeAll>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f af7c 	bne.w	8008f1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009026:	4b0c      	ldr	r3, [pc, #48]	@ (8009058 <xQueueGenericSend+0x200>)
 8009028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	e772      	b.n	8008f1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800903a:	f000 fc7d 	bl	8009938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800903e:	f001 f8b9 	bl	800a1b4 <xTaskResumeAll>
 8009042:	e76c      	b.n	8008f1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009046:	f000 fc77 	bl	8009938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800904a:	f001 f8b3 	bl	800a1b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800904e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009050:	4618      	mov	r0, r3
 8009052:	3738      	adds	r7, #56	@ 0x38
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b090      	sub	sp, #64	@ 0x40
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10b      	bne.n	800908c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009086:	bf00      	nop
 8009088:	bf00      	nop
 800908a:	e7fd      	b.n	8009088 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <xQueueGenericSendFromISR+0x3e>
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <xQueueGenericSendFromISR+0x42>
 800909a:	2301      	movs	r3, #1
 800909c:	e000      	b.n	80090a0 <xQueueGenericSendFromISR+0x44>
 800909e:	2300      	movs	r3, #0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10b      	bne.n	80090bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	e7fd      	b.n	80090b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d103      	bne.n	80090ca <xQueueGenericSendFromISR+0x6e>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <xQueueGenericSendFromISR+0x72>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <xQueueGenericSendFromISR+0x74>
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	623b      	str	r3, [r7, #32]
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090ec:	f002 fc8c 	bl	800ba08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090f0:	f3ef 8211 	mrs	r2, BASEPRI
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	61fa      	str	r2, [r7, #28]
 8009106:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009108:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009114:	429a      	cmp	r2, r3
 8009116:	d302      	bcc.n	800911e <xQueueGenericSendFromISR+0xc2>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d12f      	bne.n	800917e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009134:	f000 fb70 	bl	8009818 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009138:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d112      	bne.n	8009168 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d016      	beq.n	8009178 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	3324      	adds	r3, #36	@ 0x24
 800914e:	4618      	mov	r0, r3
 8009150:	f001 faa2 	bl	800a698 <xTaskRemoveFromEventList>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00e      	beq.n	8009178 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	e007      	b.n	8009178 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009168:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800916c:	3301      	adds	r3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	b25a      	sxtb	r2, r3
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009178:	2301      	movs	r3, #1
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800917c:	e001      	b.n	8009182 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800917e:	2300      	movs	r3, #0
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009184:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800918c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800918e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009190:	4618      	mov	r0, r3
 8009192:	3740      	adds	r7, #64	@ 0x40
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08e      	sub	sp, #56	@ 0x38
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10b      	bne.n	80091c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	623b      	str	r3, [r7, #32]
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	61fb      	str	r3, [r7, #28]
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80091e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d103      	bne.n	80091f4 <xQueueGiveFromISR+0x5c>
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <xQueueGiveFromISR+0x60>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <xQueueGiveFromISR+0x62>
 80091f8:	2300      	movs	r3, #0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	61bb      	str	r3, [r7, #24]
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	e7fd      	b.n	8009212 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009216:	f002 fbf7 	bl	800ba08 <vPortValidateInterruptPriority>
	__asm volatile
 800921a:	f3ef 8211 	mrs	r2, BASEPRI
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	617a      	str	r2, [r7, #20]
 8009230:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009232:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009234:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009242:	429a      	cmp	r2, r3
 8009244:	d22b      	bcs.n	800929e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800924c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009258:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d112      	bne.n	8009288 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	d016      	beq.n	8009298 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	3324      	adds	r3, #36	@ 0x24
 800926e:	4618      	mov	r0, r3
 8009270:	f001 fa12 	bl	800a698 <xTaskRemoveFromEventList>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2201      	movs	r2, #1
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e007      	b.n	8009298 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800928c:	3301      	adds	r3, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	b25a      	sxtb	r2, r3
 8009292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009298:	2301      	movs	r3, #1
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
 800929c:	e001      	b.n	80092a2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f383 8811 	msr	BASEPRI, r3
}
 80092ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3738      	adds	r7, #56	@ 0x38
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	@ 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <xQueueReceive+0x32>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	623b      	str	r3, [r7, #32]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d103      	bne.n	80092f8 <xQueueReceive+0x40>
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <xQueueReceive+0x44>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e000      	b.n	80092fe <xQueueReceive+0x46>
 80092fc:	2300      	movs	r3, #0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <xQueueReceive+0x62>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	61fb      	str	r3, [r7, #28]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800931a:	f001 fbf3 	bl	800ab04 <xTaskGetSchedulerState>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <xQueueReceive+0x72>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <xQueueReceive+0x76>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <xQueueReceive+0x78>
 800932e:	2300      	movs	r3, #0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <xQueueReceive+0x94>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	61bb      	str	r3, [r7, #24]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800934c:	f002 fa7c 	bl	800b848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01f      	beq.n	800939c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009360:	f000 fac4 	bl	80098ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800936c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00f      	beq.n	8009394 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	3310      	adds	r3, #16
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f98d 	bl	800a698 <xTaskRemoveFromEventList>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d007      	beq.n	8009394 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009384:	4b3c      	ldr	r3, [pc, #240]	@ (8009478 <xQueueReceive+0x1c0>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009394:	f002 fa8a 	bl	800b8ac <vPortExitCritical>
				return pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	e069      	b.n	8009470 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093a2:	f002 fa83 	bl	800b8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e062      	b.n	8009470 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b0:	f107 0310 	add.w	r3, r7, #16
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 fa37 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ba:	2301      	movs	r3, #1
 80093bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093be:	f002 fa75 	bl	800b8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093c2:	f000 fee9 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093c6:	f002 fa3f 	bl	800b848 <vPortEnterCritical>
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093d0:	b25b      	sxtb	r3, r3
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	d103      	bne.n	80093e0 <xQueueReceive+0x128>
 80093d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d103      	bne.n	80093f6 <xQueueReceive+0x13e>
 80093ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093f6:	f002 fa59 	bl	800b8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093fa:	1d3a      	adds	r2, r7, #4
 80093fc:	f107 0310 	add.w	r3, r7, #16
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fa26 	bl	800a854 <xTaskCheckForTimeOut>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d123      	bne.n	8009456 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800940e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009410:	f000 fae4 	bl	80099dc <prvIsQueueEmpty>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d017      	beq.n	800944a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941c:	3324      	adds	r3, #36	@ 0x24
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f8a8 	bl	800a578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800942a:	f000 fa85 	bl	8009938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800942e:	f000 fec1 	bl	800a1b4 <xTaskResumeAll>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d189      	bne.n	800934c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009438:	4b0f      	ldr	r3, [pc, #60]	@ (8009478 <xQueueReceive+0x1c0>)
 800943a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	e780      	b.n	800934c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800944a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944c:	f000 fa74 	bl	8009938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009450:	f000 feb0 	bl	800a1b4 <xTaskResumeAll>
 8009454:	e77a      	b.n	800934c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009458:	f000 fa6e 	bl	8009938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800945c:	f000 feaa 	bl	800a1b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009462:	f000 fabb 	bl	80099dc <prvIsQueueEmpty>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	f43f af6f 	beq.w	800934c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800946e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009470:	4618      	mov	r0, r3
 8009472:	3730      	adds	r7, #48	@ 0x30
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08e      	sub	sp, #56	@ 0x38
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10b      	bne.n	80094b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	623b      	str	r3, [r7, #32]
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	e7fd      	b.n	80094ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	61fb      	str	r3, [r7, #28]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094d0:	f001 fb18 	bl	800ab04 <xTaskGetSchedulerState>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <xQueueSemaphoreTake+0x64>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <xQueueSemaphoreTake+0x68>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <xQueueSemaphoreTake+0x6a>
 80094e4:	2300      	movs	r3, #0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61bb      	str	r3, [r7, #24]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009502:	f002 f9a1 	bl	800b848 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d024      	beq.n	800955c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	1e5a      	subs	r2, r3, #1
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009522:	f001 fc81 	bl	800ae28 <pvTaskIncrementMutexHeldCount>
 8009526:	4602      	mov	r2, r0
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00f      	beq.n	8009554 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009536:	3310      	adds	r3, #16
 8009538:	4618      	mov	r0, r3
 800953a:	f001 f8ad 	bl	800a698 <xTaskRemoveFromEventList>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009544:	4b54      	ldr	r3, [pc, #336]	@ (8009698 <xQueueSemaphoreTake+0x21c>)
 8009546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009554:	f002 f9aa 	bl	800b8ac <vPortExitCritical>
				return pdPASS;
 8009558:	2301      	movs	r3, #1
 800955a:	e098      	b.n	800968e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d112      	bne.n	8009588 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	617b      	str	r3, [r7, #20]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009580:	f002 f994 	bl	800b8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009584:	2300      	movs	r3, #0
 8009586:	e082      	b.n	800968e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800958e:	f107 030c 	add.w	r3, r7, #12
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f948 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800959c:	f002 f986 	bl	800b8ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a0:	f000 fdfa 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095a4:	f002 f950 	bl	800b848 <vPortEnterCritical>
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095ae:	b25b      	sxtb	r3, r3
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d103      	bne.n	80095be <xQueueSemaphoreTake+0x142>
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d103      	bne.n	80095d4 <xQueueSemaphoreTake+0x158>
 80095cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095d4:	f002 f96a 	bl	800b8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d8:	463a      	mov	r2, r7
 80095da:	f107 030c 	add.w	r3, r7, #12
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f937 	bl	800a854 <xTaskCheckForTimeOut>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d132      	bne.n	8009652 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095ee:	f000 f9f5 	bl	80099dc <prvIsQueueEmpty>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d026      	beq.n	8009646 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009600:	f002 f922 	bl	800b848 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4618      	mov	r0, r3
 800960a:	f001 fa99 	bl	800ab40 <xTaskPriorityInherit>
 800960e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009610:	f002 f94c 	bl	800b8ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	3324      	adds	r3, #36	@ 0x24
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f000 ffab 	bl	800a578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009624:	f000 f988 	bl	8009938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009628:	f000 fdc4 	bl	800a1b4 <xTaskResumeAll>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	f47f af67 	bne.w	8009502 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009634:	4b18      	ldr	r3, [pc, #96]	@ (8009698 <xQueueSemaphoreTake+0x21c>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	e75d      	b.n	8009502 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009648:	f000 f976 	bl	8009938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964c:	f000 fdb2 	bl	800a1b4 <xTaskResumeAll>
 8009650:	e757      	b.n	8009502 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009654:	f000 f970 	bl	8009938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009658:	f000 fdac 	bl	800a1b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800965e:	f000 f9bd 	bl	80099dc <prvIsQueueEmpty>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	f43f af4c 	beq.w	8009502 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009670:	f002 f8ea 	bl	800b848 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009676:	f000 f8b7 	bl	80097e8 <prvGetDisinheritPriorityAfterTimeout>
 800967a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fb34 	bl	800acf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009688:	f002 f910 	bl	800b8ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800968c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800968e:	4618      	mov	r0, r3
 8009690:	3738      	adds	r7, #56	@ 0x38
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08e      	sub	sp, #56	@ 0x38
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10b      	bne.n	80096ca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	623b      	str	r3, [r7, #32]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <xQueueReceiveFromISR+0x3c>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <xQueueReceiveFromISR+0x40>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <xQueueReceiveFromISR+0x42>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fb      	str	r3, [r7, #28]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096fa:	f002 f985 	bl	800ba08 <vPortValidateInterruptPriority>
	__asm volatile
 80096fe:	f3ef 8211 	mrs	r2, BASEPRI
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	61ba      	str	r2, [r7, #24]
 8009714:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009716:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009718:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d02f      	beq.n	8009786 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009734:	f000 f8da 	bl	80098ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009740:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009748:	d112      	bne.n	8009770 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d016      	beq.n	8009780 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	3310      	adds	r3, #16
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ff9e 	bl	800a698 <xTaskRemoveFromEventList>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e007      	b.n	8009780 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009774:	3301      	adds	r3, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	b25a      	sxtb	r2, r3
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009780:	2301      	movs	r3, #1
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
 8009784:	e001      	b.n	800978a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f383 8811 	msr	BASEPRI, r3
}
 8009794:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009798:	4618      	mov	r0, r3
 800979a:	3738      	adds	r7, #56	@ 0x38
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <vQueueDelete+0x2a>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60bb      	str	r3, [r7, #8]
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 f95e 	bl	8009a8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f002 fa24 	bl	800bc28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d006      	beq.n	8009806 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e001      	b.n	800980a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800980a:	68fb      	ldr	r3, [r7, #12]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10d      	bne.n	8009852 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d14d      	bne.n	80098da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	4618      	mov	r0, r3
 8009844:	f001 f9e4 	bl	800ac10 <xTaskPriorityDisinherit>
 8009848:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
 8009850:	e043      	b.n	80098da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d119      	bne.n	800988c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6858      	ldr	r0, [r3, #4]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009860:	461a      	mov	r2, r3
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	f002 fbba 	bl	800bfdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	429a      	cmp	r2, r3
 8009880:	d32b      	bcc.n	80098da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	605a      	str	r2, [r3, #4]
 800988a:	e026      	b.n	80098da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	68d8      	ldr	r0, [r3, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009894:	461a      	mov	r2, r3
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	f002 fba0 	bl	800bfdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a4:	425b      	negs	r3, r3
 80098a6:	441a      	add	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d207      	bcs.n	80098c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c0:	425b      	negs	r3, r3
 80098c2:	441a      	add	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d105      	bne.n	80098da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80098e2:	697b      	ldr	r3, [r7, #20]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d018      	beq.n	8009930 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009906:	441a      	add	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	429a      	cmp	r2, r3
 8009916:	d303      	bcc.n	8009920 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68d9      	ldr	r1, [r3, #12]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009928:	461a      	mov	r2, r3
 800992a:	6838      	ldr	r0, [r7, #0]
 800992c:	f002 fb56 	bl	800bfdc <memcpy>
	}
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009940:	f001 ff82 	bl	800b848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800994a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800994c:	e011      	b.n	8009972 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d012      	beq.n	800997c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3324      	adds	r3, #36	@ 0x24
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fe9c 	bl	800a698 <xTaskRemoveFromEventList>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009966:	f000 ffd9 	bl	800a91c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	3b01      	subs	r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dce9      	bgt.n	800994e <prvUnlockQueue+0x16>
 800997a:	e000      	b.n	800997e <prvUnlockQueue+0x46>
					break;
 800997c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	22ff      	movs	r2, #255	@ 0xff
 8009982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009986:	f001 ff91 	bl	800b8ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800998a:	f001 ff5d 	bl	800b848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009994:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009996:	e011      	b.n	80099bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d012      	beq.n	80099c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3310      	adds	r3, #16
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fe77 	bl	800a698 <xTaskRemoveFromEventList>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099b0:	f000 ffb4 	bl	800a91c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dce9      	bgt.n	8009998 <prvUnlockQueue+0x60>
 80099c4:	e000      	b.n	80099c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	22ff      	movs	r2, #255	@ 0xff
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80099d0:	f001 ff6c 	bl	800b8ac <vPortExitCritical>
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099e4:	f001 ff30 	bl	800b848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099f0:	2301      	movs	r3, #1
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e001      	b.n	80099fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099fa:	f001 ff57 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 80099fe:	68fb      	ldr	r3, [r7, #12]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a10:	f001 ff1a 	bl	800b848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d102      	bne.n	8009a26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e001      	b.n	8009a2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a2a:	f001 ff3f 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e014      	b.n	8009a72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a48:	4a0f      	ldr	r2, [pc, #60]	@ (8009a88 <vQueueAddToRegistry+0x50>)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a54:	490c      	ldr	r1, [pc, #48]	@ (8009a88 <vQueueAddToRegistry+0x50>)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8009a88 <vQueueAddToRegistry+0x50>)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	4413      	add	r3, r2
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a6a:	e006      	b.n	8009a7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b07      	cmp	r3, #7
 8009a76:	d9e7      	bls.n	8009a48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20001bb8 	.word	0x20001bb8

08009a8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e016      	b.n	8009ac8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a9a:	4a10      	ldr	r2, [pc, #64]	@ (8009adc <vQueueUnregisterQueue+0x50>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d10b      	bne.n	8009ac2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8009adc <vQueueUnregisterQueue+0x50>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ab4:	4a09      	ldr	r2, [pc, #36]	@ (8009adc <vQueueUnregisterQueue+0x50>)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	4413      	add	r3, r2
 8009abc:	2200      	movs	r2, #0
 8009abe:	605a      	str	r2, [r3, #4]
				break;
 8009ac0:	e006      	b.n	8009ad0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b07      	cmp	r3, #7
 8009acc:	d9e5      	bls.n	8009a9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	20001bb8 	.word	0x20001bb8

08009ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009af0:	f001 feaa 	bl	800b848 <vPortEnterCritical>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009afa:	b25b      	sxtb	r3, r3
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d103      	bne.n	8009b0a <vQueueWaitForMessageRestricted+0x2a>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b16:	d103      	bne.n	8009b20 <vQueueWaitForMessageRestricted+0x40>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b20:	f001 fec4 	bl	800b8ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d106      	bne.n	8009b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3324      	adds	r3, #36	@ 0x24
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fd83 	bl	800a640 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f7ff fefc 	bl	8009938 <prvUnlockQueue>
	}
 8009b40:	bf00      	nop
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08e      	sub	sp, #56	@ 0x38
 8009b4c:	af04      	add	r7, sp, #16
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	623b      	str	r3, [r7, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	bf00      	nop
 8009b72:	e7fd      	b.n	8009b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	61fb      	str	r3, [r7, #28]
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b92:	2364      	movs	r3, #100	@ 0x64
 8009b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b64      	cmp	r3, #100	@ 0x64
 8009b9a:	d00b      	beq.n	8009bb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61bb      	str	r3, [r7, #24]
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	e7fd      	b.n	8009bb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01e      	beq.n	8009bfa <xTaskCreateStatic+0xb2>
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01b      	beq.n	8009bfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	9302      	str	r3, [sp, #8]
 8009bdc:	f107 0314 	add.w	r3, r7, #20
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f850 	bl	8009c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bf4:	f000 f8e4 	bl	8009dc0 <prvAddNewTaskToReadyList>
 8009bf8:	e001      	b.n	8009bfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bfe:	697b      	ldr	r3, [r7, #20]
	}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3728      	adds	r7, #40	@ 0x28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08c      	sub	sp, #48	@ 0x30
 8009c0c:	af04      	add	r7, sp, #16
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c18:	88fb      	ldrh	r3, [r7, #6]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 ff35 	bl	800ba8c <pvPortMalloc>
 8009c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00e      	beq.n	8009c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c2a:	2064      	movs	r0, #100	@ 0x64
 8009c2c:	f001 ff2e 	bl	800ba8c <pvPortMalloc>
 8009c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c3e:	e005      	b.n	8009c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c40:	6978      	ldr	r0, [r7, #20]
 8009c42:	f001 fff1 	bl	800bc28 <vPortFree>
 8009c46:	e001      	b.n	8009c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d017      	beq.n	8009c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c5a:	88fa      	ldrh	r2, [r7, #6]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	9302      	str	r3, [sp, #8]
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f80e 	bl	8009c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c76:	69f8      	ldr	r0, [r7, #28]
 8009c78:	f000 f8a2 	bl	8009dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	61bb      	str	r3, [r7, #24]
 8009c80:	e002      	b.n	8009c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c88:	69bb      	ldr	r3, [r7, #24]
	}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b088      	sub	sp, #32
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	607a      	str	r2, [r7, #4]
 8009c9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	21a5      	movs	r1, #165	@ 0xa5
 8009cac:	f002 f964 	bl	800bf78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f023 0307 	bic.w	r3, r3, #7
 8009cc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	f003 0307 	and.w	r3, r3, #7
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	617b      	str	r3, [r7, #20]
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01f      	beq.n	8009d38 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]
 8009cfc:	e012      	b.n	8009d24 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	4413      	add	r3, r2
 8009d04:	7819      	ldrb	r1, [r3, #0]
 8009d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3334      	adds	r3, #52	@ 0x34
 8009d0e:	460a      	mov	r2, r1
 8009d10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	4413      	add	r3, r2
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	3301      	adds	r3, #1
 8009d22:	61fb      	str	r3, [r7, #28]
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	2b0f      	cmp	r3, #15
 8009d28:	d9e9      	bls.n	8009cfe <prvInitialiseNewTask+0x6c>
 8009d2a:	e000      	b.n	8009d2e <prvInitialiseNewTask+0x9c>
			{
				break;
 8009d2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009d36:	e003      	b.n	8009d40 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d42:	2b37      	cmp	r3, #55	@ 0x37
 8009d44:	d901      	bls.n	8009d4a <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d46:	2337      	movs	r3, #55	@ 0x37
 8009d48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d54:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	2200      	movs	r2, #0
 8009d5a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fd79 	bl	8008858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	3318      	adds	r3, #24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fd74 	bl	8008858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	2200      	movs	r2, #0
 8009d8a:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	2200      	movs	r2, #0
 8009d90:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	68f9      	ldr	r1, [r7, #12]
 8009d9e:	69b8      	ldr	r0, [r7, #24]
 8009da0:	f001 fc24 	bl	800b5ec <pxPortInitialiseStack>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db6:	bf00      	nop
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009dc8:	f001 fd3e 	bl	800b848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8009e84 <prvAddNewTaskToReadyList+0xc4>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009e84 <prvAddNewTaskToReadyList+0xc4>)
 8009dd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009e88 <prvAddNewTaskToReadyList+0xc8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d109      	bne.n	8009df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dde:	4a2a      	ldr	r2, [pc, #168]	@ (8009e88 <prvAddNewTaskToReadyList+0xc8>)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009de4:	4b27      	ldr	r3, [pc, #156]	@ (8009e84 <prvAddNewTaskToReadyList+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d110      	bne.n	8009e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dec:	f000 fdbc 	bl	800a968 <prvInitialiseTaskLists>
 8009df0:	e00d      	b.n	8009e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <prvAddNewTaskToReadyList+0xcc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dfa:	4b23      	ldr	r3, [pc, #140]	@ (8009e88 <prvAddNewTaskToReadyList+0xc8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d802      	bhi.n	8009e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e08:	4a1f      	ldr	r2, [pc, #124]	@ (8009e88 <prvAddNewTaskToReadyList+0xc8>)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e0e:	4b20      	ldr	r3, [pc, #128]	@ (8009e90 <prvAddNewTaskToReadyList+0xd0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	4a1e      	ldr	r2, [pc, #120]	@ (8009e90 <prvAddNewTaskToReadyList+0xd0>)
 8009e16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e18:	4b1d      	ldr	r3, [pc, #116]	@ (8009e90 <prvAddNewTaskToReadyList+0xd0>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e24:	4b1b      	ldr	r3, [pc, #108]	@ (8009e94 <prvAddNewTaskToReadyList+0xd4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d903      	bls.n	8009e34 <prvAddNewTaskToReadyList+0x74>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e30:	4a18      	ldr	r2, [pc, #96]	@ (8009e94 <prvAddNewTaskToReadyList+0xd4>)
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4a15      	ldr	r2, [pc, #84]	@ (8009e98 <prvAddNewTaskToReadyList+0xd8>)
 8009e42:	441a      	add	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7fe fd11 	bl	8008872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e50:	f001 fd2c 	bl	800b8ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e54:	4b0d      	ldr	r3, [pc, #52]	@ (8009e8c <prvAddNewTaskToReadyList+0xcc>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <prvAddNewTaskToReadyList+0xc8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d207      	bcs.n	8009e7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e9c <prvAddNewTaskToReadyList+0xdc>)
 8009e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e7a:	bf00      	nop
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200020cc 	.word	0x200020cc
 8009e88:	20001bf8 	.word	0x20001bf8
 8009e8c:	200020d8 	.word	0x200020d8
 8009e90:	200020e8 	.word	0x200020e8
 8009e94:	200020d4 	.word	0x200020d4
 8009e98:	20001bfc 	.word	0x20001bfc
 8009e9c:	e000ed04 	.word	0xe000ed04

08009ea0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009ea8:	f001 fcce 	bl	800b848 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d102      	bne.n	8009eb8 <vTaskDelete+0x18>
 8009eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8009f68 <vTaskDelete+0xc8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	e000      	b.n	8009eba <vTaskDelete+0x1a>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fd33 	bl	800892c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3318      	adds	r3, #24
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fd2a 	bl	800892c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009ed8:	4b24      	ldr	r3, [pc, #144]	@ (8009f6c <vTaskDelete+0xcc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	4a23      	ldr	r2, [pc, #140]	@ (8009f6c <vTaskDelete+0xcc>)
 8009ee0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009ee2:	4b21      	ldr	r3, [pc, #132]	@ (8009f68 <vTaskDelete+0xc8>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d10b      	bne.n	8009f04 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	481f      	ldr	r0, [pc, #124]	@ (8009f70 <vTaskDelete+0xd0>)
 8009ef4:	f7fe fcbd 	bl	8008872 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8009f74 <vTaskDelete+0xd4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	4a1d      	ldr	r2, [pc, #116]	@ (8009f74 <vTaskDelete+0xd4>)
 8009f00:	6013      	str	r3, [r2, #0]
 8009f02:	e009      	b.n	8009f18 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009f04:	4b1c      	ldr	r3, [pc, #112]	@ (8009f78 <vTaskDelete+0xd8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f78 <vTaskDelete+0xd8>)
 8009f0c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 fd98 	bl	800aa44 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009f14:	f000 fdc6 	bl	800aaa4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009f18:	f001 fcc8 	bl	800b8ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009f1c:	4b17      	ldr	r3, [pc, #92]	@ (8009f7c <vTaskDelete+0xdc>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01c      	beq.n	8009f5e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8009f24:	4b10      	ldr	r3, [pc, #64]	@ (8009f68 <vTaskDelete+0xc8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d117      	bne.n	8009f5e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009f2e:	4b14      	ldr	r3, [pc, #80]	@ (8009f80 <vTaskDelete+0xe0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <vTaskDelete+0xae>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60bb      	str	r3, [r7, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	e7fd      	b.n	8009f4a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <vTaskDelete+0xe4>)
 8009f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20001bf8 	.word	0x20001bf8
 8009f6c:	200020e8 	.word	0x200020e8
 8009f70:	200020a0 	.word	0x200020a0
 8009f74:	200020b4 	.word	0x200020b4
 8009f78:	200020cc 	.word	0x200020cc
 8009f7c:	200020d8 	.word	0x200020d8
 8009f80:	200020f4 	.word	0x200020f4
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d018      	beq.n	8009fcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f9a:	4b14      	ldr	r3, [pc, #80]	@ (8009fec <vTaskDelay+0x64>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <vTaskDelay+0x32>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	60bb      	str	r3, [r7, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009fba:	f000 f8ed 	bl	800a198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 ff45 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fc6:	f000 f8f5 	bl	800a1b4 <xTaskResumeAll>
 8009fca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d107      	bne.n	8009fe2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fd2:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <vTaskDelay+0x68>)
 8009fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200020f4 	.word	0x200020f4
 8009ff0:	e000ed04 	.word	0xe000ed04

08009ff4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <eTaskGetState+0x2a>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	60bb      	str	r3, [r7, #8]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a01e:	4b24      	ldr	r3, [pc, #144]	@ (800a0b0 <eTaskGetState+0xbc>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	429a      	cmp	r2, r3
 800a026:	d102      	bne.n	800a02e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a028:	2300      	movs	r3, #0
 800a02a:	77fb      	strb	r3, [r7, #31]
 800a02c:	e03a      	b.n	800a0a4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800a02e:	f001 fc0b 	bl	800b848 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800a038:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b4 <eTaskGetState+0xc0>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800a03e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b8 <eTaskGetState+0xc4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800a044:	f001 fc32 	bl	800b8ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d003      	beq.n	800a058 <eTaskGetState+0x64>
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d102      	bne.n	800a05e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800a058:	2302      	movs	r3, #2
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e022      	b.n	800a0a4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	4a16      	ldr	r2, [pc, #88]	@ (800a0bc <eTaskGetState+0xc8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d112      	bne.n	800a08c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10b      	bne.n	800a086 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b01      	cmp	r3, #1
 800a078:	d102      	bne.n	800a080 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800a07a:	2302      	movs	r3, #2
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e011      	b.n	800a0a4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800a080:	2303      	movs	r3, #3
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e00e      	b.n	800a0a4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800a086:	2302      	movs	r3, #2
 800a088:	77fb      	strb	r3, [r7, #31]
 800a08a:	e00b      	b.n	800a0a4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c0 <eTaskGetState+0xcc>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d002      	beq.n	800a09a <eTaskGetState+0xa6>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800a09a:	2304      	movs	r3, #4
 800a09c:	77fb      	strb	r3, [r7, #31]
 800a09e:	e001      	b.n	800a0a4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800a0a4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20001bf8 	.word	0x20001bf8
 800a0b4:	20002084 	.word	0x20002084
 800a0b8:	20002088 	.word	0x20002088
 800a0bc:	200020b8 	.word	0x200020b8
 800a0c0:	200020a0 	.word	0x200020a0

0800a0c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	@ 0x28
 800a0c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	1d39      	adds	r1, r7, #4
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f972 	bl	80083c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	9202      	str	r2, [sp, #8]
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	4923      	ldr	r1, [pc, #140]	@ (800a180 <vTaskStartScheduler+0xbc>)
 800a0f4:	4823      	ldr	r0, [pc, #140]	@ (800a184 <vTaskStartScheduler+0xc0>)
 800a0f6:	f7ff fd27 	bl	8009b48 <xTaskCreateStatic>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4a22      	ldr	r2, [pc, #136]	@ (800a188 <vTaskStartScheduler+0xc4>)
 800a0fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a100:	4b21      	ldr	r3, [pc, #132]	@ (800a188 <vTaskStartScheduler+0xc4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e001      	b.n	800a112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d102      	bne.n	800a11e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a118:	f000 feee 	bl	800aef8 <xTimerCreateTimerTask>
 800a11c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d118      	bne.n	800a156 <vTaskStartScheduler+0x92>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	613b      	str	r3, [r7, #16]
}
 800a136:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a138:	4b14      	ldr	r3, [pc, #80]	@ (800a18c <vTaskStartScheduler+0xc8>)
 800a13a:	f04f 32ff 	mov.w	r2, #4294967295
 800a13e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a140:	4b13      	ldr	r3, [pc, #76]	@ (800a190 <vTaskStartScheduler+0xcc>)
 800a142:	2201      	movs	r2, #1
 800a144:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <vTaskStartScheduler+0xd0>)
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a14c:	f7f6 f9c0 	bl	80004d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a150:	f001 fad6 	bl	800b700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a154:	e00f      	b.n	800a176 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d10b      	bne.n	800a176 <vTaskStartScheduler+0xb2>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60fb      	str	r3, [r7, #12]
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	e7fd      	b.n	800a172 <vTaskStartScheduler+0xae>
}
 800a176:	bf00      	nop
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	0800c194 	.word	0x0800c194
 800a184:	0800a935 	.word	0x0800a935
 800a188:	200020f0 	.word	0x200020f0
 800a18c:	200020ec 	.word	0x200020ec
 800a190:	200020d8 	.word	0x200020d8
 800a194:	200020d0 	.word	0x200020d0

0800a198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a198:	b480      	push	{r7}
 800a19a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a19c:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <vTaskSuspendAll+0x18>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	4a03      	ldr	r2, [pc, #12]	@ (800a1b0 <vTaskSuspendAll+0x18>)
 800a1a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1a6:	bf00      	nop
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	200020f4 	.word	0x200020f4

0800a1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1c2:	4b42      	ldr	r3, [pc, #264]	@ (800a2cc <xTaskResumeAll+0x118>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10b      	bne.n	800a1e2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	603b      	str	r3, [r7, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1e2:	f001 fb31 	bl	800b848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1e6:	4b39      	ldr	r3, [pc, #228]	@ (800a2cc <xTaskResumeAll+0x118>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	4a37      	ldr	r2, [pc, #220]	@ (800a2cc <xTaskResumeAll+0x118>)
 800a1ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f0:	4b36      	ldr	r3, [pc, #216]	@ (800a2cc <xTaskResumeAll+0x118>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d162      	bne.n	800a2be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1f8:	4b35      	ldr	r3, [pc, #212]	@ (800a2d0 <xTaskResumeAll+0x11c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05e      	beq.n	800a2be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a200:	e02f      	b.n	800a262 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a202:	4b34      	ldr	r3, [pc, #208]	@ (800a2d4 <xTaskResumeAll+0x120>)
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3318      	adds	r3, #24
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe fb8c 	bl	800892c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fb87 	bl	800892c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a222:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d8 <xTaskResumeAll+0x124>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <xTaskResumeAll+0x7e>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d8 <xTaskResumeAll+0x124>)
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4a27      	ldr	r2, [pc, #156]	@ (800a2dc <xTaskResumeAll+0x128>)
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3304      	adds	r3, #4
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fe fb12 	bl	8008872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a252:	4b23      	ldr	r3, [pc, #140]	@ (800a2e0 <xTaskResumeAll+0x12c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a25c:	4b21      	ldr	r3, [pc, #132]	@ (800a2e4 <xTaskResumeAll+0x130>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a262:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d4 <xTaskResumeAll+0x120>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1cb      	bne.n	800a202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a270:	f000 fc18 	bl	800aaa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a274:	4b1c      	ldr	r3, [pc, #112]	@ (800a2e8 <xTaskResumeAll+0x134>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d010      	beq.n	800a2a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a280:	f000 f846 	bl	800a310 <xTaskIncrementTick>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a28a:	4b16      	ldr	r3, [pc, #88]	@ (800a2e4 <xTaskResumeAll+0x130>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3b01      	subs	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f1      	bne.n	800a280 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a29c:	4b12      	ldr	r3, [pc, #72]	@ (800a2e8 <xTaskResumeAll+0x134>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2a2:	4b10      	ldr	r3, [pc, #64]	@ (800a2e4 <xTaskResumeAll+0x130>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ec <xTaskResumeAll+0x138>)
 800a2b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2be:	f001 faf5 	bl	800b8ac <vPortExitCritical>

	return xAlreadyYielded;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	200020f4 	.word	0x200020f4
 800a2d0:	200020cc 	.word	0x200020cc
 800a2d4:	2000208c 	.word	0x2000208c
 800a2d8:	200020d4 	.word	0x200020d4
 800a2dc:	20001bfc 	.word	0x20001bfc
 800a2e0:	20001bf8 	.word	0x20001bf8
 800a2e4:	200020e0 	.word	0x200020e0
 800a2e8:	200020dc 	.word	0x200020dc
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2f6:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <xTaskGetTickCount+0x1c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2fc:	687b      	ldr	r3, [r7, #4]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	200020d0 	.word	0x200020d0

0800a310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a31a:	4b4f      	ldr	r3, [pc, #316]	@ (800a458 <xTaskIncrementTick+0x148>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 8090 	bne.w	800a444 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a324:	4b4d      	ldr	r3, [pc, #308]	@ (800a45c <xTaskIncrementTick+0x14c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a32c:	4a4b      	ldr	r2, [pc, #300]	@ (800a45c <xTaskIncrementTick+0x14c>)
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d121      	bne.n	800a37c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a338:	4b49      	ldr	r3, [pc, #292]	@ (800a460 <xTaskIncrementTick+0x150>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00b      	beq.n	800a35a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	603b      	str	r3, [r7, #0]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <xTaskIncrementTick+0x46>
 800a35a:	4b41      	ldr	r3, [pc, #260]	@ (800a460 <xTaskIncrementTick+0x150>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	4b40      	ldr	r3, [pc, #256]	@ (800a464 <xTaskIncrementTick+0x154>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a3e      	ldr	r2, [pc, #248]	@ (800a460 <xTaskIncrementTick+0x150>)
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	4a3e      	ldr	r2, [pc, #248]	@ (800a464 <xTaskIncrementTick+0x154>)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	4b3e      	ldr	r3, [pc, #248]	@ (800a468 <xTaskIncrementTick+0x158>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3301      	adds	r3, #1
 800a374:	4a3c      	ldr	r2, [pc, #240]	@ (800a468 <xTaskIncrementTick+0x158>)
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	f000 fb94 	bl	800aaa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a37c:	4b3b      	ldr	r3, [pc, #236]	@ (800a46c <xTaskIncrementTick+0x15c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	429a      	cmp	r2, r3
 800a384:	d349      	bcc.n	800a41a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a386:	4b36      	ldr	r3, [pc, #216]	@ (800a460 <xTaskIncrementTick+0x150>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a390:	4b36      	ldr	r3, [pc, #216]	@ (800a46c <xTaskIncrementTick+0x15c>)
 800a392:	f04f 32ff 	mov.w	r2, #4294967295
 800a396:	601a      	str	r2, [r3, #0]
					break;
 800a398:	e03f      	b.n	800a41a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39a:	4b31      	ldr	r3, [pc, #196]	@ (800a460 <xTaskIncrementTick+0x150>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d203      	bcs.n	800a3ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3b2:	4a2e      	ldr	r2, [pc, #184]	@ (800a46c <xTaskIncrementTick+0x15c>)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3b8:	e02f      	b.n	800a41a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fab4 	bl	800892c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe faab 	bl	800892c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3da:	4b25      	ldr	r3, [pc, #148]	@ (800a470 <xTaskIncrementTick+0x160>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d903      	bls.n	800a3ea <xTaskIncrementTick+0xda>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e6:	4a22      	ldr	r2, [pc, #136]	@ (800a470 <xTaskIncrementTick+0x160>)
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800a474 <xTaskIncrementTick+0x164>)
 800a3f8:	441a      	add	r2, r3
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	4619      	mov	r1, r3
 800a400:	4610      	mov	r0, r2
 800a402:	f7fe fa36 	bl	8008872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a40a:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <xTaskIncrementTick+0x168>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a410:	429a      	cmp	r2, r3
 800a412:	d3b8      	bcc.n	800a386 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a418:	e7b5      	b.n	800a386 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a41a:	4b17      	ldr	r3, [pc, #92]	@ (800a478 <xTaskIncrementTick+0x168>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a420:	4914      	ldr	r1, [pc, #80]	@ (800a474 <xTaskIncrementTick+0x164>)
 800a422:	4613      	mov	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	440b      	add	r3, r1
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d901      	bls.n	800a436 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a432:	2301      	movs	r3, #1
 800a434:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a436:	4b11      	ldr	r3, [pc, #68]	@ (800a47c <xTaskIncrementTick+0x16c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a43e:	2301      	movs	r3, #1
 800a440:	617b      	str	r3, [r7, #20]
 800a442:	e004      	b.n	800a44e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a444:	4b0e      	ldr	r3, [pc, #56]	@ (800a480 <xTaskIncrementTick+0x170>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3301      	adds	r3, #1
 800a44a:	4a0d      	ldr	r2, [pc, #52]	@ (800a480 <xTaskIncrementTick+0x170>)
 800a44c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a44e:	697b      	ldr	r3, [r7, #20]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	200020f4 	.word	0x200020f4
 800a45c:	200020d0 	.word	0x200020d0
 800a460:	20002084 	.word	0x20002084
 800a464:	20002088 	.word	0x20002088
 800a468:	200020e4 	.word	0x200020e4
 800a46c:	200020ec 	.word	0x200020ec
 800a470:	200020d4 	.word	0x200020d4
 800a474:	20001bfc 	.word	0x20001bfc
 800a478:	20001bf8 	.word	0x20001bf8
 800a47c:	200020e0 	.word	0x200020e0
 800a480:	200020dc 	.word	0x200020dc

0800a484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a48a:	4b34      	ldr	r3, [pc, #208]	@ (800a55c <vTaskSwitchContext+0xd8>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a492:	4b33      	ldr	r3, [pc, #204]	@ (800a560 <vTaskSwitchContext+0xdc>)
 800a494:	2201      	movs	r2, #1
 800a496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a498:	e05b      	b.n	800a552 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 800a49a:	4b31      	ldr	r3, [pc, #196]	@ (800a560 <vTaskSwitchContext+0xdc>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a4a0:	f7f6 f81d 	bl	80004de <getRunTimeCounterValue>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a564 <vTaskSwitchContext+0xe0>)
 800a4a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	@ (800a564 <vTaskSwitchContext+0xe0>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b2e      	ldr	r3, [pc, #184]	@ (800a568 <vTaskSwitchContext+0xe4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d909      	bls.n	800a4ca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a4b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a56c <vTaskSwitchContext+0xe8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a4bc:	4a29      	ldr	r2, [pc, #164]	@ (800a564 <vTaskSwitchContext+0xe0>)
 800a4be:	6810      	ldr	r0, [r2, #0]
 800a4c0:	4a29      	ldr	r2, [pc, #164]	@ (800a568 <vTaskSwitchContext+0xe4>)
 800a4c2:	6812      	ldr	r2, [r2, #0]
 800a4c4:	1a82      	subs	r2, r0, r2
 800a4c6:	440a      	add	r2, r1
 800a4c8:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a4ca:	4b26      	ldr	r3, [pc, #152]	@ (800a564 <vTaskSwitchContext+0xe0>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a26      	ldr	r2, [pc, #152]	@ (800a568 <vTaskSwitchContext+0xe4>)
 800a4d0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d2:	4b27      	ldr	r3, [pc, #156]	@ (800a570 <vTaskSwitchContext+0xec>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e011      	b.n	800a4fe <vTaskSwitchContext+0x7a>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10b      	bne.n	800a4f8 <vTaskSwitchContext+0x74>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	607b      	str	r3, [r7, #4]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <vTaskSwitchContext+0x70>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	491d      	ldr	r1, [pc, #116]	@ (800a574 <vTaskSwitchContext+0xf0>)
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	440b      	add	r3, r1
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0e3      	beq.n	800a4da <vTaskSwitchContext+0x56>
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <vTaskSwitchContext+0xf0>)
 800a51e:	4413      	add	r3, r2
 800a520:	60bb      	str	r3, [r7, #8]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	3308      	adds	r3, #8
 800a534:	429a      	cmp	r2, r3
 800a536:	d104      	bne.n	800a542 <vTaskSwitchContext+0xbe>
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	605a      	str	r2, [r3, #4]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	4a08      	ldr	r2, [pc, #32]	@ (800a56c <vTaskSwitchContext+0xe8>)
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	4a08      	ldr	r2, [pc, #32]	@ (800a570 <vTaskSwitchContext+0xec>)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6013      	str	r3, [r2, #0]
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200020f4 	.word	0x200020f4
 800a560:	200020e0 	.word	0x200020e0
 800a564:	200020fc 	.word	0x200020fc
 800a568:	200020f8 	.word	0x200020f8
 800a56c:	20001bf8 	.word	0x20001bf8
 800a570:	200020d4 	.word	0x200020d4
 800a574:	20001bfc 	.word	0x20001bfc

0800a578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	60fb      	str	r3, [r7, #12]
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	e7fd      	b.n	800a59c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5a0:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <vTaskPlaceOnEventList+0x48>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fe f986 	bl	80088ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f000 fc4d 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20001bf8 	.word	0x20001bf8

0800a5c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	617b      	str	r3, [r7, #20]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a5ee:	4b12      	ldr	r3, [pc, #72]	@ (800a638 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	613b      	str	r3, [r7, #16]
}
 800a608:	bf00      	nop
 800a60a:	bf00      	nop
 800a60c:	e7fd      	b.n	800a60a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a60e:	4b0b      	ldr	r3, [pc, #44]	@ (800a63c <vTaskPlaceOnUnorderedEventList+0x78>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a618:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a61a:	4b08      	ldr	r3, [pc, #32]	@ (800a63c <vTaskPlaceOnUnorderedEventList+0x78>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3318      	adds	r3, #24
 800a620:	4619      	mov	r1, r3
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7fe f925 	bl	8008872 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a628:	2101      	movs	r1, #1
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fc10 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
}
 800a630:	bf00      	nop
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	200020f4 	.word	0x200020f4
 800a63c:	20001bf8 	.word	0x20001bf8

0800a640 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10b      	bne.n	800a66a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	617b      	str	r3, [r7, #20]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a66a:	4b0a      	ldr	r3, [pc, #40]	@ (800a694 <vTaskPlaceOnEventListRestricted+0x54>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3318      	adds	r3, #24
 800a670:	4619      	mov	r1, r3
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7fe f8fd 	bl	8008872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	68b8      	ldr	r0, [r7, #8]
 800a688:	f000 fbe2 	bl	800ae50 <prvAddCurrentTaskToDelayedList>
	}
 800a68c:	bf00      	nop
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20001bf8 	.word	0x20001bf8

0800a698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	60fb      	str	r3, [r7, #12]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3318      	adds	r3, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe f92e 	bl	800892c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a748 <xTaskRemoveFromEventList+0xb0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d11d      	bne.n	800a714 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe f925 	bl	800892c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e6:	4b19      	ldr	r3, [pc, #100]	@ (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d903      	bls.n	800a6f6 <xTaskRemoveFromEventList+0x5e>
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	4a16      	ldr	r2, [pc, #88]	@ (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4a13      	ldr	r2, [pc, #76]	@ (800a750 <xTaskRemoveFromEventList+0xb8>)
 800a704:	441a      	add	r2, r3
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7fe f8b0 	bl	8008872 <vListInsertEnd>
 800a712:	e005      	b.n	800a720 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3318      	adds	r3, #24
 800a718:	4619      	mov	r1, r3
 800a71a:	480e      	ldr	r0, [pc, #56]	@ (800a754 <xTaskRemoveFromEventList+0xbc>)
 800a71c:	f7fe f8a9 	bl	8008872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <xTaskRemoveFromEventList+0xc0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d905      	bls.n	800a73a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a72e:	2301      	movs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a732:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <xTaskRemoveFromEventList+0xc4>)
 800a734:	2201      	movs	r2, #1
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	e001      	b.n	800a73e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a73e:	697b      	ldr	r3, [r7, #20]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	200020f4 	.word	0x200020f4
 800a74c:	200020d4 	.word	0x200020d4
 800a750:	20001bfc 	.word	0x20001bfc
 800a754:	2000208c 	.word	0x2000208c
 800a758:	20001bf8 	.word	0x20001bf8
 800a75c:	200020e0 	.word	0x200020e0

0800a760 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a76a:	4b2a      	ldr	r3, [pc, #168]	@ (800a814 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10b      	bne.n	800a78a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	613b      	str	r3, [r7, #16]
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	e7fd      	b.n	800a786 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	60fb      	str	r3, [r7, #12]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fe f8b7 	bl	800892c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe f8b2 	bl	800892c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7cc:	4b12      	ldr	r3, [pc, #72]	@ (800a818 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d903      	bls.n	800a7dc <vTaskRemoveFromUnorderedEventList+0x7c>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a818 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a81c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe f83d 	bl	8008872 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7fc:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a802:	429a      	cmp	r2, r3
 800a804:	d902      	bls.n	800a80c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a806:	4b07      	ldr	r3, [pc, #28]	@ (800a824 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a808:	2201      	movs	r2, #1
 800a80a:	601a      	str	r2, [r3, #0]
	}
}
 800a80c:	bf00      	nop
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	200020f4 	.word	0x200020f4
 800a818:	200020d4 	.word	0x200020d4
 800a81c:	20001bfc 	.word	0x20001bfc
 800a820:	20001bf8 	.word	0x20001bf8
 800a824:	200020e0 	.word	0x200020e0

0800a828 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a830:	4b06      	ldr	r3, [pc, #24]	@ (800a84c <vTaskInternalSetTimeOutState+0x24>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a838:	4b05      	ldr	r3, [pc, #20]	@ (800a850 <vTaskInternalSetTimeOutState+0x28>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	200020e4 	.word	0x200020e4
 800a850:	200020d0 	.word	0x200020d0

0800a854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10b      	bne.n	800a87c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	613b      	str	r3, [r7, #16]
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10b      	bne.n	800a89a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	60fb      	str	r3, [r7, #12]
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop
 800a898:	e7fd      	b.n	800a896 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a89a:	f000 ffd5 	bl	800b848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a89e:	4b1d      	ldr	r3, [pc, #116]	@ (800a914 <xTaskCheckForTimeOut+0xc0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d102      	bne.n	800a8be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	e023      	b.n	800a906 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	4b15      	ldr	r3, [pc, #84]	@ (800a918 <xTaskCheckForTimeOut+0xc4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d007      	beq.n	800a8da <xTaskCheckForTimeOut+0x86>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d302      	bcc.n	800a8da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	61fb      	str	r3, [r7, #28]
 800a8d8:	e015      	b.n	800a906 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d20b      	bcs.n	800a8fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff ff99 	bl	800a828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	e004      	b.n	800a906 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a902:	2301      	movs	r3, #1
 800a904:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a906:	f000 ffd1 	bl	800b8ac <vPortExitCritical>

	return xReturn;
 800a90a:	69fb      	ldr	r3, [r7, #28]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3720      	adds	r7, #32
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200020d0 	.word	0x200020d0
 800a918:	200020e4 	.word	0x200020e4

0800a91c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a920:	4b03      	ldr	r3, [pc, #12]	@ (800a930 <vTaskMissedYield+0x14>)
 800a922:	2201      	movs	r2, #1
 800a924:	601a      	str	r2, [r3, #0]
}
 800a926:	bf00      	nop
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	200020e0 	.word	0x200020e0

0800a934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a93c:	f000 f854 	bl	800a9e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a940:	4b07      	ldr	r3, [pc, #28]	@ (800a960 <prvIdleTask+0x2c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d907      	bls.n	800a958 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a948:	4b06      	ldr	r3, [pc, #24]	@ (800a964 <prvIdleTask+0x30>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a958:	f7f5 fdc9 	bl	80004ee <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a95c:	e7ee      	b.n	800a93c <prvIdleTask+0x8>
 800a95e:	bf00      	nop
 800a960:	20001bfc 	.word	0x20001bfc
 800a964:	e000ed04 	.word	0xe000ed04

0800a968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
 800a972:	e00c      	b.n	800a98e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4a12      	ldr	r2, [pc, #72]	@ (800a9c8 <prvInitialiseTaskLists+0x60>)
 800a980:	4413      	add	r3, r2
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd ff48 	bl	8008818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3301      	adds	r3, #1
 800a98c:	607b      	str	r3, [r7, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b37      	cmp	r3, #55	@ 0x37
 800a992:	d9ef      	bls.n	800a974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a994:	480d      	ldr	r0, [pc, #52]	@ (800a9cc <prvInitialiseTaskLists+0x64>)
 800a996:	f7fd ff3f 	bl	8008818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a99a:	480d      	ldr	r0, [pc, #52]	@ (800a9d0 <prvInitialiseTaskLists+0x68>)
 800a99c:	f7fd ff3c 	bl	8008818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9a0:	480c      	ldr	r0, [pc, #48]	@ (800a9d4 <prvInitialiseTaskLists+0x6c>)
 800a9a2:	f7fd ff39 	bl	8008818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9a6:	480c      	ldr	r0, [pc, #48]	@ (800a9d8 <prvInitialiseTaskLists+0x70>)
 800a9a8:	f7fd ff36 	bl	8008818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9ac:	480b      	ldr	r0, [pc, #44]	@ (800a9dc <prvInitialiseTaskLists+0x74>)
 800a9ae:	f7fd ff33 	bl	8008818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e0 <prvInitialiseTaskLists+0x78>)
 800a9b4:	4a05      	ldr	r2, [pc, #20]	@ (800a9cc <prvInitialiseTaskLists+0x64>)
 800a9b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e4 <prvInitialiseTaskLists+0x7c>)
 800a9ba:	4a05      	ldr	r2, [pc, #20]	@ (800a9d0 <prvInitialiseTaskLists+0x68>)
 800a9bc:	601a      	str	r2, [r3, #0]
}
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001bfc 	.word	0x20001bfc
 800a9cc:	2000205c 	.word	0x2000205c
 800a9d0:	20002070 	.word	0x20002070
 800a9d4:	2000208c 	.word	0x2000208c
 800a9d8:	200020a0 	.word	0x200020a0
 800a9dc:	200020b8 	.word	0x200020b8
 800a9e0:	20002084 	.word	0x20002084
 800a9e4:	20002088 	.word	0x20002088

0800a9e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9ee:	e019      	b.n	800aa24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9f0:	f000 ff2a 	bl	800b848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f4:	4b10      	ldr	r3, [pc, #64]	@ (800aa38 <prvCheckTasksWaitingTermination+0x50>)
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fd ff93 	bl	800892c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa06:	4b0d      	ldr	r3, [pc, #52]	@ (800aa3c <prvCheckTasksWaitingTermination+0x54>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	4a0b      	ldr	r2, [pc, #44]	@ (800aa3c <prvCheckTasksWaitingTermination+0x54>)
 800aa0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa10:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <prvCheckTasksWaitingTermination+0x58>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	4a0a      	ldr	r2, [pc, #40]	@ (800aa40 <prvCheckTasksWaitingTermination+0x58>)
 800aa18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa1a:	f000 ff47 	bl	800b8ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f810 	bl	800aa44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa24:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <prvCheckTasksWaitingTermination+0x58>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e1      	bne.n	800a9f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	200020a0 	.word	0x200020a0
 800aa3c:	200020cc 	.word	0x200020cc
 800aa40:	200020b4 	.word	0x200020b4

0800aa44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d108      	bne.n	800aa68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 f8e4 	bl	800bc28 <vPortFree>
				vPortFree( pxTCB );
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 f8e1 	bl	800bc28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa66:	e019      	b.n	800aa9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d103      	bne.n	800aa7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 f8d8 	bl	800bc28 <vPortFree>
	}
 800aa78:	e010      	b.n	800aa9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d00b      	beq.n	800aa9c <prvDeleteTCB+0x58>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	60fb      	str	r3, [r7, #12]
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <prvDeleteTCB+0x54>
	}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	@ (800aadc <prvResetNextTaskUnblockTime+0x38>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d104      	bne.n	800aabe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aab4:	4b0a      	ldr	r3, [pc, #40]	@ (800aae0 <prvResetNextTaskUnblockTime+0x3c>)
 800aab6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aabc:	e008      	b.n	800aad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aabe:	4b07      	ldr	r3, [pc, #28]	@ (800aadc <prvResetNextTaskUnblockTime+0x38>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	4a04      	ldr	r2, [pc, #16]	@ (800aae0 <prvResetNextTaskUnblockTime+0x3c>)
 800aace:	6013      	str	r3, [r2, #0]
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	20002084 	.word	0x20002084
 800aae0:	200020ec 	.word	0x200020ec

0800aae4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aaea:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <xTaskGetCurrentTaskHandle+0x1c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aaf0:	687b      	ldr	r3, [r7, #4]
	}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20001bf8 	.word	0x20001bf8

0800ab04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab38 <xTaskGetSchedulerState+0x34>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab12:	2301      	movs	r3, #1
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	e008      	b.n	800ab2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab18:	4b08      	ldr	r3, [pc, #32]	@ (800ab3c <xTaskGetSchedulerState+0x38>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab20:	2302      	movs	r3, #2
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	e001      	b.n	800ab2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab2a:	687b      	ldr	r3, [r7, #4]
	}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	200020d8 	.word	0x200020d8
 800ab3c:	200020f4 	.word	0x200020f4

0800ab40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d051      	beq.n	800abfa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab5a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac04 <xTaskPriorityInherit+0xc4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d241      	bcs.n	800abe8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	db06      	blt.n	800ab7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6c:	4b25      	ldr	r3, [pc, #148]	@ (800ac04 <xTaskPriorityInherit+0xc4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6959      	ldr	r1, [r3, #20]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4a1f      	ldr	r2, [pc, #124]	@ (800ac08 <xTaskPriorityInherit+0xc8>)
 800ab8c:	4413      	add	r3, r2
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d122      	bne.n	800abd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fd fec8 	bl	800892c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab9c:	4b19      	ldr	r3, [pc, #100]	@ (800ac04 <xTaskPriorityInherit+0xc4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abaa:	4b18      	ldr	r3, [pc, #96]	@ (800ac0c <xTaskPriorityInherit+0xcc>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d903      	bls.n	800abba <xTaskPriorityInherit+0x7a>
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb6:	4a15      	ldr	r2, [pc, #84]	@ (800ac0c <xTaskPriorityInherit+0xcc>)
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abbe:	4613      	mov	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4a10      	ldr	r2, [pc, #64]	@ (800ac08 <xTaskPriorityInherit+0xc8>)
 800abc8:	441a      	add	r2, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	3304      	adds	r3, #4
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7fd fe4e 	bl	8008872 <vListInsertEnd>
 800abd6:	e004      	b.n	800abe2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac04 <xTaskPriorityInherit+0xc4>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abe2:	2301      	movs	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	e008      	b.n	800abfa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abec:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <xTaskPriorityInherit+0xc4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d201      	bcs.n	800abfa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abf6:	2301      	movs	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abfa:	68fb      	ldr	r3, [r7, #12]
	}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	20001bf8 	.word	0x20001bf8
 800ac08:	20001bfc 	.word	0x20001bfc
 800ac0c:	200020d4 	.word	0x200020d4

0800ac10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d058      	beq.n	800acd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac26:	4b2f      	ldr	r3, [pc, #188]	@ (800ace4 <xTaskPriorityDisinherit+0xd4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d00b      	beq.n	800ac48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	60fb      	str	r3, [r7, #12]
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10b      	bne.n	800ac68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60bb      	str	r3, [r7, #8]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6c:	1e5a      	subs	r2, r3, #1
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d02c      	beq.n	800acd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d128      	bne.n	800acd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fd fe4e 	bl	800892c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca8:	4b0f      	ldr	r3, [pc, #60]	@ (800ace8 <xTaskPriorityDisinherit+0xd8>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d903      	bls.n	800acb8 <xTaskPriorityDisinherit+0xa8>
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb4:	4a0c      	ldr	r2, [pc, #48]	@ (800ace8 <xTaskPriorityDisinherit+0xd8>)
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4a09      	ldr	r2, [pc, #36]	@ (800acec <xTaskPriorityDisinherit+0xdc>)
 800acc6:	441a      	add	r2, r3
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	3304      	adds	r3, #4
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f7fd fdcf 	bl	8008872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acd4:	2301      	movs	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acd8:	697b      	ldr	r3, [r7, #20]
	}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20001bf8 	.word	0x20001bf8
 800ace8:	200020d4 	.word	0x200020d4
 800acec:	20001bfc 	.word	0x20001bfc

0800acf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d06c      	beq.n	800ade2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10b      	bne.n	800ad28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	60fb      	str	r3, [r7, #12]
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	e7fd      	b.n	800ad24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d902      	bls.n	800ad38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	61fb      	str	r3, [r7, #28]
 800ad36:	e002      	b.n	800ad3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d04c      	beq.n	800ade2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d147      	bne.n	800ade2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad52:	4b26      	ldr	r3, [pc, #152]	@ (800adec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d10b      	bne.n	800ad74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
}
 800ad6e:	bf00      	nop
 800ad70:	bf00      	nop
 800ad72:	e7fd      	b.n	800ad70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	db04      	blt.n	800ad92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	6959      	ldr	r1, [r3, #20]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4a13      	ldr	r2, [pc, #76]	@ (800adf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ada2:	4413      	add	r3, r2
 800ada4:	4299      	cmp	r1, r3
 800ada6:	d11c      	bne.n	800ade2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7fd fdbd 	bl	800892c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb6:	4b0f      	ldr	r3, [pc, #60]	@ (800adf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d903      	bls.n	800adc6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc2:	4a0c      	ldr	r2, [pc, #48]	@ (800adf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4a07      	ldr	r2, [pc, #28]	@ (800adf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800add4:	441a      	add	r2, r3
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	3304      	adds	r3, #4
 800adda:	4619      	mov	r1, r3
 800addc:	4610      	mov	r0, r2
 800adde:	f7fd fd48 	bl	8008872 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ade2:	bf00      	nop
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20001bf8 	.word	0x20001bf8
 800adf0:	20001bfc 	.word	0x20001bfc
 800adf4:	200020d4 	.word	0x200020d4

0800adf8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800adfe:	4b09      	ldr	r3, [pc, #36]	@ (800ae24 <uxTaskResetEventItemValue+0x2c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae06:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <uxTaskResetEventItemValue+0x2c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0c:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <uxTaskResetEventItemValue+0x2c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ae14:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ae16:	687b      	ldr	r3, [r7, #4]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	20001bf8 	.word	0x20001bf8

0800ae28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae2c:	4b07      	ldr	r3, [pc, #28]	@ (800ae4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae34:	4b05      	ldr	r3, [pc, #20]	@ (800ae4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae3a:	3201      	adds	r2, #1
 800ae3c:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800ae3e:	4b03      	ldr	r3, [pc, #12]	@ (800ae4c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae40:	681b      	ldr	r3, [r3, #0]
	}
 800ae42:	4618      	mov	r0, r3
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	20001bf8 	.word	0x20001bf8

0800ae50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae5a:	4b21      	ldr	r3, [pc, #132]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae60:	4b20      	ldr	r3, [pc, #128]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd fd60 	bl	800892c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae72:	d10a      	bne.n	800ae8a <prvAddCurrentTaskToDelayedList+0x3a>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae7a:	4b1a      	ldr	r3, [pc, #104]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	4619      	mov	r1, r3
 800ae82:	4819      	ldr	r0, [pc, #100]	@ (800aee8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae84:	f7fd fcf5 	bl	8008872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae88:	e026      	b.n	800aed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4413      	add	r3, r2
 800ae90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae92:	4b14      	ldr	r3, [pc, #80]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d209      	bcs.n	800aeb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aea2:	4b12      	ldr	r3, [pc, #72]	@ (800aeec <prvAddCurrentTaskToDelayedList+0x9c>)
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	4b0f      	ldr	r3, [pc, #60]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f7fd fd03 	bl	80088ba <vListInsert>
}
 800aeb4:	e010      	b.n	800aed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	@ (800aef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b0a      	ldr	r3, [pc, #40]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fd fcf9 	bl	80088ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aec8:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d202      	bcs.n	800aed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aed2:	4a08      	ldr	r2, [pc, #32]	@ (800aef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	6013      	str	r3, [r2, #0]
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	200020d0 	.word	0x200020d0
 800aee4:	20001bf8 	.word	0x20001bf8
 800aee8:	200020b8 	.word	0x200020b8
 800aeec:	20002088 	.word	0x20002088
 800aef0:	20002084 	.word	0x20002084
 800aef4:	200020ec 	.word	0x200020ec

0800aef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	@ 0x28
 800aefc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af02:	f000 fb13 	bl	800b52c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af06:	4b1d      	ldr	r3, [pc, #116]	@ (800af7c <xTimerCreateTimerTask+0x84>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d021      	beq.n	800af52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af16:	1d3a      	adds	r2, r7, #4
 800af18:	f107 0108 	add.w	r1, r7, #8
 800af1c:	f107 030c 	add.w	r3, r7, #12
 800af20:	4618      	mov	r0, r3
 800af22:	f7fd fa69 	bl	80083f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	9202      	str	r2, [sp, #8]
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	2302      	movs	r3, #2
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	2300      	movs	r3, #0
 800af36:	460a      	mov	r2, r1
 800af38:	4911      	ldr	r1, [pc, #68]	@ (800af80 <xTimerCreateTimerTask+0x88>)
 800af3a:	4812      	ldr	r0, [pc, #72]	@ (800af84 <xTimerCreateTimerTask+0x8c>)
 800af3c:	f7fe fe04 	bl	8009b48 <xTaskCreateStatic>
 800af40:	4603      	mov	r3, r0
 800af42:	4a11      	ldr	r2, [pc, #68]	@ (800af88 <xTimerCreateTimerTask+0x90>)
 800af44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af46:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <xTimerCreateTimerTask+0x90>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af4e:	2301      	movs	r3, #1
 800af50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10b      	bne.n	800af70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	613b      	str	r3, [r7, #16]
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af70:	697b      	ldr	r3, [r7, #20]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20002130 	.word	0x20002130
 800af80:	0800c1c4 	.word	0x0800c1c4
 800af84:	0800b0c5 	.word	0x0800b0c5
 800af88:	20002134 	.word	0x20002134

0800af8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	@ 0x28
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <xTimerGenericCommand+0x30>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	623b      	str	r3, [r7, #32]
}
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
 800afba:	e7fd      	b.n	800afb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afbc:	4b19      	ldr	r3, [pc, #100]	@ (800b024 <xTimerGenericCommand+0x98>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02a      	beq.n	800b01a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	dc18      	bgt.n	800b008 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afd6:	f7ff fd95 	bl	800ab04 <xTaskGetSchedulerState>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d109      	bne.n	800aff4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afe0:	4b10      	ldr	r3, [pc, #64]	@ (800b024 <xTimerGenericCommand+0x98>)
 800afe2:	6818      	ldr	r0, [r3, #0]
 800afe4:	f107 0110 	add.w	r1, r7, #16
 800afe8:	2300      	movs	r3, #0
 800afea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afec:	f7fd ff34 	bl	8008e58 <xQueueGenericSend>
 800aff0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aff2:	e012      	b.n	800b01a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aff4:	4b0b      	ldr	r3, [pc, #44]	@ (800b024 <xTimerGenericCommand+0x98>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	f107 0110 	add.w	r1, r7, #16
 800affc:	2300      	movs	r3, #0
 800affe:	2200      	movs	r2, #0
 800b000:	f7fd ff2a 	bl	8008e58 <xQueueGenericSend>
 800b004:	6278      	str	r0, [r7, #36]	@ 0x24
 800b006:	e008      	b.n	800b01a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b008:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <xTimerGenericCommand+0x98>)
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	f107 0110 	add.w	r1, r7, #16
 800b010:	2300      	movs	r3, #0
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	f7fe f822 	bl	800905c <xQueueGenericSendFromISR>
 800b018:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3728      	adds	r7, #40	@ 0x28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20002130 	.word	0x20002130

0800b028 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b032:	4b23      	ldr	r3, [pc, #140]	@ (800b0c0 <prvProcessExpiredTimer+0x98>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	3304      	adds	r3, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7fd fc73 	bl	800892c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d023      	beq.n	800b09c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	699a      	ldr	r2, [r3, #24]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	18d1      	adds	r1, r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	6978      	ldr	r0, [r7, #20]
 800b062:	f000 f8d5 	bl	800b210 <prvInsertTimerInActiveList>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d020      	beq.n	800b0ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b06c:	2300      	movs	r3, #0
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	2300      	movs	r3, #0
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	2100      	movs	r1, #0
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f7ff ff88 	bl	800af8c <xTimerGenericCommand>
 800b07c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d114      	bne.n	800b0ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	60fb      	str	r3, [r7, #12]
}
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	e7fd      	b.n	800b098 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0a2:	f023 0301 	bic.w	r3, r3, #1
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	6978      	ldr	r0, [r7, #20]
 800b0b4:	4798      	blx	r3
}
 800b0b6:	bf00      	nop
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20002128 	.word	0x20002128

0800b0c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0cc:	f107 0308 	add.w	r3, r7, #8
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f859 	bl	800b188 <prvGetNextExpireTime>
 800b0d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f805 	bl	800b0ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0e2:	f000 f8d7 	bl	800b294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0e6:	bf00      	nop
 800b0e8:	e7f0      	b.n	800b0cc <prvTimerTask+0x8>
	...

0800b0ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0f6:	f7ff f84f 	bl	800a198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0fa:	f107 0308 	add.w	r3, r7, #8
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f866 	bl	800b1d0 <prvSampleTimeNow>
 800b104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d130      	bne.n	800b16e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <prvProcessTimerOrBlockTask+0x3c>
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	429a      	cmp	r2, r3
 800b118:	d806      	bhi.n	800b128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b11a:	f7ff f84b 	bl	800a1b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b11e:	68f9      	ldr	r1, [r7, #12]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff ff81 	bl	800b028 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b126:	e024      	b.n	800b172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d008      	beq.n	800b140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b12e:	4b13      	ldr	r3, [pc, #76]	@ (800b17c <prvProcessTimerOrBlockTask+0x90>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <prvProcessTimerOrBlockTask+0x50>
 800b138:	2301      	movs	r3, #1
 800b13a:	e000      	b.n	800b13e <prvProcessTimerOrBlockTask+0x52>
 800b13c:	2300      	movs	r3, #0
 800b13e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b140:	4b0f      	ldr	r3, [pc, #60]	@ (800b180 <prvProcessTimerOrBlockTask+0x94>)
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	4619      	mov	r1, r3
 800b14e:	f7fe fcc7 	bl	8009ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b152:	f7ff f82f 	bl	800a1b4 <xTaskResumeAll>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10a      	bne.n	800b172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b15c:	4b09      	ldr	r3, [pc, #36]	@ (800b184 <prvProcessTimerOrBlockTask+0x98>)
 800b15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	f3bf 8f6f 	isb	sy
}
 800b16c:	e001      	b.n	800b172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b16e:	f7ff f821 	bl	800a1b4 <xTaskResumeAll>
}
 800b172:	bf00      	nop
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	2000212c 	.word	0x2000212c
 800b180:	20002130 	.word	0x20002130
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b190:	4b0e      	ldr	r3, [pc, #56]	@ (800b1cc <prvGetNextExpireTime+0x44>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <prvGetNextExpireTime+0x16>
 800b19a:	2201      	movs	r2, #1
 800b19c:	e000      	b.n	800b1a0 <prvGetNextExpireTime+0x18>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d105      	bne.n	800b1b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1ac:	4b07      	ldr	r3, [pc, #28]	@ (800b1cc <prvGetNextExpireTime+0x44>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e001      	b.n	800b1bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20002128 	.word	0x20002128

0800b1d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1d8:	f7ff f88a 	bl	800a2f0 <xTaskGetTickCount>
 800b1dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1de:	4b0b      	ldr	r3, [pc, #44]	@ (800b20c <prvSampleTimeNow+0x3c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d205      	bcs.n	800b1f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1e8:	f000 f93a 	bl	800b460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1fa:	4a04      	ldr	r2, [pc, #16]	@ (800b20c <prvSampleTimeNow+0x3c>)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b200:	68fb      	ldr	r3, [r7, #12]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20002138 	.word	0x20002138

0800b210 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d812      	bhi.n	800b25c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	1ad2      	subs	r2, r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	d302      	bcc.n	800b24a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	e01b      	b.n	800b282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b24a:	4b10      	ldr	r3, [pc, #64]	@ (800b28c <prvInsertTimerInActiveList+0x7c>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3304      	adds	r3, #4
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7fd fb30 	bl	80088ba <vListInsert>
 800b25a:	e012      	b.n	800b282 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	429a      	cmp	r2, r3
 800b262:	d206      	bcs.n	800b272 <prvInsertTimerInActiveList+0x62>
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d302      	bcc.n	800b272 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b26c:	2301      	movs	r3, #1
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	e007      	b.n	800b282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b272:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <prvInsertTimerInActiveList+0x80>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3304      	adds	r3, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f7fd fb1c 	bl	80088ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b282:	697b      	ldr	r3, [r7, #20]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	2000212c 	.word	0x2000212c
 800b290:	20002128 	.word	0x20002128

0800b294 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08e      	sub	sp, #56	@ 0x38
 800b298:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b29a:	e0ce      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	da19      	bge.n	800b2d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2a2:	1d3b      	adds	r3, r7, #4
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	61fb      	str	r3, [r7, #28]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2cc:	6850      	ldr	r0, [r2, #4]
 800b2ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2d0:	6892      	ldr	r2, [r2, #8]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f2c0 80ae 	blt.w	800b43a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d004      	beq.n	800b2f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fd fb1c 	bl	800892c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff ff6a 	bl	800b1d0 <prvSampleTimeNow>
 800b2fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b09      	cmp	r3, #9
 800b302:	f200 8097 	bhi.w	800b434 <prvProcessReceivedCommands+0x1a0>
 800b306:	a201      	add	r2, pc, #4	@ (adr r2, 800b30c <prvProcessReceivedCommands+0x78>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b335 	.word	0x0800b335
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b335 	.word	0x0800b335
 800b318:	0800b3ab 	.word	0x0800b3ab
 800b31c:	0800b3bf 	.word	0x0800b3bf
 800b320:	0800b40b 	.word	0x0800b40b
 800b324:	0800b335 	.word	0x0800b335
 800b328:	0800b335 	.word	0x0800b335
 800b32c:	0800b3ab 	.word	0x0800b3ab
 800b330:	0800b3bf 	.word	0x0800b3bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b33a:	f043 0301 	orr.w	r3, r3, #1
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	18d1      	adds	r1, r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b354:	f7ff ff5c 	bl	800b210 <prvInsertTimerInActiveList>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d06c      	beq.n	800b438 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b00      	cmp	r3, #0
 800b372:	d061      	beq.n	800b438 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	441a      	add	r2, r3
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2300      	movs	r3, #0
 800b382:	2100      	movs	r1, #0
 800b384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b386:	f7ff fe01 	bl	800af8c <xTimerGenericCommand>
 800b38a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d152      	bne.n	800b438 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	61bb      	str	r3, [r7, #24]
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop
 800b3a8:	e7fd      	b.n	800b3a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b3bc:	e03d      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c4:	f043 0301 	orr.w	r3, r3, #1
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	617b      	str	r3, [r7, #20]
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	e7fd      	b.n	800b3f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	18d1      	adds	r1, r2, r3
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b404:	f7ff ff04 	bl	800b210 <prvInsertTimerInActiveList>
					break;
 800b408:	e017      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b41a:	f000 fc05 	bl	800bc28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b41e:	e00c      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b432:	e002      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b434:	bf00      	nop
 800b436:	e000      	b.n	800b43a <prvProcessReceivedCommands+0x1a6>
					break;
 800b438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b43a:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <prvProcessReceivedCommands+0x1c8>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	1d39      	adds	r1, r7, #4
 800b440:	2200      	movs	r2, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f7fd ff38 	bl	80092b8 <xQueueReceive>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f47f af26 	bne.w	800b29c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	3730      	adds	r7, #48	@ 0x30
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20002130 	.word	0x20002130

0800b460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b466:	e049      	b.n	800b4fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b468:	4b2e      	ldr	r3, [pc, #184]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b472:	4b2c      	ldr	r3, [pc, #176]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3304      	adds	r3, #4
 800b480:	4618      	mov	r0, r3
 800b482:	f7fd fa53 	bl	800892c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d02f      	beq.n	800b4fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d90e      	bls.n	800b4cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f7fd f9f8 	bl	80088ba <vListInsert>
 800b4ca:	e017      	b.n	800b4fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	693a      	ldr	r2, [r7, #16]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fd58 	bl	800af8c <xTimerGenericCommand>
 800b4dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10b      	bne.n	800b4fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	603b      	str	r3, [r7, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	e7fd      	b.n	800b4f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4fc:	4b09      	ldr	r3, [pc, #36]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1b0      	bne.n	800b468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b506:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b50c:	4b06      	ldr	r3, [pc, #24]	@ (800b528 <prvSwitchTimerLists+0xc8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a04      	ldr	r2, [pc, #16]	@ (800b524 <prvSwitchTimerLists+0xc4>)
 800b512:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b514:	4a04      	ldr	r2, [pc, #16]	@ (800b528 <prvSwitchTimerLists+0xc8>)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	6013      	str	r3, [r2, #0]
}
 800b51a:	bf00      	nop
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20002128 	.word	0x20002128
 800b528:	2000212c 	.word	0x2000212c

0800b52c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b532:	f000 f989 	bl	800b848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b536:	4b15      	ldr	r3, [pc, #84]	@ (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d120      	bne.n	800b580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b53e:	4814      	ldr	r0, [pc, #80]	@ (800b590 <prvCheckForValidListAndQueue+0x64>)
 800b540:	f7fd f96a 	bl	8008818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b544:	4813      	ldr	r0, [pc, #76]	@ (800b594 <prvCheckForValidListAndQueue+0x68>)
 800b546:	f7fd f967 	bl	8008818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b54a:	4b13      	ldr	r3, [pc, #76]	@ (800b598 <prvCheckForValidListAndQueue+0x6c>)
 800b54c:	4a10      	ldr	r2, [pc, #64]	@ (800b590 <prvCheckForValidListAndQueue+0x64>)
 800b54e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b550:	4b12      	ldr	r3, [pc, #72]	@ (800b59c <prvCheckForValidListAndQueue+0x70>)
 800b552:	4a10      	ldr	r2, [pc, #64]	@ (800b594 <prvCheckForValidListAndQueue+0x68>)
 800b554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b556:	2300      	movs	r3, #0
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	4b11      	ldr	r3, [pc, #68]	@ (800b5a0 <prvCheckForValidListAndQueue+0x74>)
 800b55c:	4a11      	ldr	r2, [pc, #68]	@ (800b5a4 <prvCheckForValidListAndQueue+0x78>)
 800b55e:	2110      	movs	r1, #16
 800b560:	200a      	movs	r0, #10
 800b562:	f7fd fa77 	bl	8008a54 <xQueueGenericCreateStatic>
 800b566:	4603      	mov	r3, r0
 800b568:	4a08      	ldr	r2, [pc, #32]	@ (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b56a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b56c:	4b07      	ldr	r3, [pc, #28]	@ (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b574:	4b05      	ldr	r3, [pc, #20]	@ (800b58c <prvCheckForValidListAndQueue+0x60>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	490b      	ldr	r1, [pc, #44]	@ (800b5a8 <prvCheckForValidListAndQueue+0x7c>)
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fa5c 	bl	8009a38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b580:	f000 f994 	bl	800b8ac <vPortExitCritical>
}
 800b584:	bf00      	nop
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20002130 	.word	0x20002130
 800b590:	20002100 	.word	0x20002100
 800b594:	20002114 	.word	0x20002114
 800b598:	20002128 	.word	0x20002128
 800b59c:	2000212c 	.word	0x2000212c
 800b5a0:	200021dc 	.word	0x200021dc
 800b5a4:	2000213c 	.word	0x2000213c
 800b5a8:	0800c1cc 	.word	0x0800c1cc

0800b5ac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	@ 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b5ba:	f06f 0301 	mvn.w	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5cc:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <xTimerPendFunctionCallFromISR+0x3c>)
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	f107 0114 	add.w	r1, r7, #20
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	f7fd fd40 	bl	800905c <xQueueGenericSendFromISR>
 800b5dc:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3728      	adds	r7, #40	@ 0x28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20002130 	.word	0x20002130

0800b5ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3b04      	subs	r3, #4
 800b60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f023 0201 	bic.w	r2, r3, #1
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3b04      	subs	r3, #4
 800b61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b61c:	4a0c      	ldr	r2, [pc, #48]	@ (800b650 <pxPortInitialiseStack+0x64>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3b14      	subs	r3, #20
 800b626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b04      	subs	r3, #4
 800b632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f06f 0202 	mvn.w	r2, #2
 800b63a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3b20      	subs	r3, #32
 800b640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	0800b655 	.word	0x0800b655

0800b654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b65e:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <prvTaskExitError+0x58>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d00b      	beq.n	800b680 <prvTaskExitError+0x2c>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	60fb      	str	r3, [r7, #12]
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	e7fd      	b.n	800b67c <prvTaskExitError+0x28>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60bb      	str	r3, [r7, #8]
}
 800b692:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b694:	bf00      	nop
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0fc      	beq.n	800b696 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	200003f4 	.word	0x200003f4

0800b6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6b0:	4b07      	ldr	r3, [pc, #28]	@ (800b6d0 <pxCurrentTCBConst2>)
 800b6b2:	6819      	ldr	r1, [r3, #0]
 800b6b4:	6808      	ldr	r0, [r1, #0]
 800b6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	f380 8809 	msr	PSP, r0
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f04f 0000 	mov.w	r0, #0
 800b6c6:	f380 8811 	msr	BASEPRI, r0
 800b6ca:	4770      	bx	lr
 800b6cc:	f3af 8000 	nop.w

0800b6d0 <pxCurrentTCBConst2>:
 800b6d0:	20001bf8 	.word	0x20001bf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop

0800b6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6d8:	4808      	ldr	r0, [pc, #32]	@ (800b6fc <prvPortStartFirstTask+0x24>)
 800b6da:	6800      	ldr	r0, [r0, #0]
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	f380 8808 	msr	MSP, r0
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8814 	msr	CONTROL, r0
 800b6ea:	b662      	cpsie	i
 800b6ec:	b661      	cpsie	f
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	df00      	svc	0
 800b6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6fa:	bf00      	nop
 800b6fc:	e000ed08 	.word	0xe000ed08

0800b700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b706:	4b47      	ldr	r3, [pc, #284]	@ (800b824 <xPortStartScheduler+0x124>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a47      	ldr	r2, [pc, #284]	@ (800b828 <xPortStartScheduler+0x128>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d10b      	bne.n	800b728 <xPortStartScheduler+0x28>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	613b      	str	r3, [r7, #16]
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	e7fd      	b.n	800b724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b728:	4b3e      	ldr	r3, [pc, #248]	@ (800b824 <xPortStartScheduler+0x124>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a3f      	ldr	r2, [pc, #252]	@ (800b82c <xPortStartScheduler+0x12c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d10b      	bne.n	800b74a <xPortStartScheduler+0x4a>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	60fb      	str	r3, [r7, #12]
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop
 800b748:	e7fd      	b.n	800b746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b74a:	4b39      	ldr	r3, [pc, #228]	@ (800b830 <xPortStartScheduler+0x130>)
 800b74c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	22ff      	movs	r2, #255	@ 0xff
 800b75a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b2db      	uxtb	r3, r3
 800b762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	4b31      	ldr	r3, [pc, #196]	@ (800b834 <xPortStartScheduler+0x134>)
 800b770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b772:	4b31      	ldr	r3, [pc, #196]	@ (800b838 <xPortStartScheduler+0x138>)
 800b774:	2207      	movs	r2, #7
 800b776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b778:	e009      	b.n	800b78e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b77a:	4b2f      	ldr	r3, [pc, #188]	@ (800b838 <xPortStartScheduler+0x138>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3b01      	subs	r3, #1
 800b780:	4a2d      	ldr	r2, [pc, #180]	@ (800b838 <xPortStartScheduler+0x138>)
 800b782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b796:	2b80      	cmp	r3, #128	@ 0x80
 800b798:	d0ef      	beq.n	800b77a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b79a:	4b27      	ldr	r3, [pc, #156]	@ (800b838 <xPortStartScheduler+0x138>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f1c3 0307 	rsb	r3, r3, #7
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d00b      	beq.n	800b7be <xPortStartScheduler+0xbe>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7be:	4b1e      	ldr	r3, [pc, #120]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <xPortStartScheduler+0x138>)
 800b7d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7dc:	4b17      	ldr	r3, [pc, #92]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a16      	ldr	r2, [pc, #88]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7e8:	4b14      	ldr	r3, [pc, #80]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a13      	ldr	r2, [pc, #76]	@ (800b83c <xPortStartScheduler+0x13c>)
 800b7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b7f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7f4:	f000 f8da 	bl	800b9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7f8:	4b11      	ldr	r3, [pc, #68]	@ (800b840 <xPortStartScheduler+0x140>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7fe:	f000 f8f9 	bl	800b9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b802:	4b10      	ldr	r3, [pc, #64]	@ (800b844 <xPortStartScheduler+0x144>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a0f      	ldr	r2, [pc, #60]	@ (800b844 <xPortStartScheduler+0x144>)
 800b808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b80c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b80e:	f7ff ff63 	bl	800b6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b812:	f7fe fe37 	bl	800a484 <vTaskSwitchContext>
	prvTaskExitError();
 800b816:	f7ff ff1d 	bl	800b654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	e000ed00 	.word	0xe000ed00
 800b828:	410fc271 	.word	0x410fc271
 800b82c:	410fc270 	.word	0x410fc270
 800b830:	e000e400 	.word	0xe000e400
 800b834:	2000222c 	.word	0x2000222c
 800b838:	20002230 	.word	0x20002230
 800b83c:	e000ed20 	.word	0xe000ed20
 800b840:	200003f4 	.word	0x200003f4
 800b844:	e000ef34 	.word	0xe000ef34

0800b848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	607b      	str	r3, [r7, #4]
}
 800b860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b862:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3301      	adds	r3, #1
 800b868:	4a0e      	ldr	r2, [pc, #56]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b86a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b86c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <vPortEnterCritical+0x5c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d110      	bne.n	800b896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b874:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a8 <vPortEnterCritical+0x60>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <vPortEnterCritical+0x4e>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	603b      	str	r3, [r7, #0]
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	e7fd      	b.n	800b892 <vPortEnterCritical+0x4a>
	}
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	200003f4 	.word	0x200003f4
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8b2:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <vPortExitCritical+0x26>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	607b      	str	r3, [r7, #4]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	4a08      	ldr	r2, [pc, #32]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8dc:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <vPortExitCritical+0x50>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d105      	bne.n	800b8f0 <vPortExitCritical+0x44>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f383 8811 	msr	BASEPRI, r3
}
 800b8ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	200003f4 	.word	0x200003f4

0800b900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b900:	f3ef 8009 	mrs	r0, PSP
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	4b15      	ldr	r3, [pc, #84]	@ (800b960 <pxCurrentTCBConst>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	f01e 0f10 	tst.w	lr, #16
 800b910:	bf08      	it	eq
 800b912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	6010      	str	r0, [r2, #0]
 800b91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b924:	f380 8811 	msr	BASEPRI, r0
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f7fe fda8 	bl	800a484 <vTaskSwitchContext>
 800b934:	f04f 0000 	mov.w	r0, #0
 800b938:	f380 8811 	msr	BASEPRI, r0
 800b93c:	bc09      	pop	{r0, r3}
 800b93e:	6819      	ldr	r1, [r3, #0]
 800b940:	6808      	ldr	r0, [r1, #0]
 800b942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b946:	f01e 0f10 	tst.w	lr, #16
 800b94a:	bf08      	it	eq
 800b94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b950:	f380 8809 	msr	PSP, r0
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst>:
 800b960:	20001bf8 	.word	0x20001bf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	607b      	str	r3, [r7, #4]
}
 800b980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b982:	f7fe fcc5 	bl	800a310 <xTaskIncrementTick>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <xPortSysTickHandler+0x40>)
 800b98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	2300      	movs	r3, #0
 800b996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	f383 8811 	msr	BASEPRI, r3
}
 800b99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e0 <vPortSetupTimerInterrupt+0x34>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e4 <vPortSetupTimerInterrupt+0x38>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <vPortSetupTimerInterrupt+0x3c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b9ec <vPortSetupTimerInterrupt+0x40>)
 800b9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c6:	099b      	lsrs	r3, r3, #6
 800b9c8:	4a09      	ldr	r2, [pc, #36]	@ (800b9f0 <vPortSetupTimerInterrupt+0x44>)
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ce:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <vPortSetupTimerInterrupt+0x34>)
 800b9d0:	2207      	movs	r2, #7
 800b9d2:	601a      	str	r2, [r3, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	e000e010 	.word	0xe000e010
 800b9e4:	e000e018 	.word	0xe000e018
 800b9e8:	200003e8 	.word	0x200003e8
 800b9ec:	10624dd3 	.word	0x10624dd3
 800b9f0:	e000e014 	.word	0xe000e014

0800b9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba04 <vPortEnableVFP+0x10>
 800b9f8:	6801      	ldr	r1, [r0, #0]
 800b9fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b9fe:	6001      	str	r1, [r0, #0]
 800ba00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba02:	bf00      	nop
 800ba04:	e000ed88 	.word	0xe000ed88

0800ba08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba0e:	f3ef 8305 	mrs	r3, IPSR
 800ba12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b0f      	cmp	r3, #15
 800ba18:	d915      	bls.n	800ba46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba1a:	4a18      	ldr	r2, [pc, #96]	@ (800ba7c <vPortValidateInterruptPriority+0x74>)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba24:	4b16      	ldr	r3, [pc, #88]	@ (800ba80 <vPortValidateInterruptPriority+0x78>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	7afa      	ldrb	r2, [r7, #11]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d20b      	bcs.n	800ba46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba46:	4b0f      	ldr	r3, [pc, #60]	@ (800ba84 <vPortValidateInterruptPriority+0x7c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <vPortValidateInterruptPriority+0x80>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d90b      	bls.n	800ba6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	603b      	str	r3, [r7, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <vPortValidateInterruptPriority+0x62>
	}
 800ba6e:	bf00      	nop
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	e000e3f0 	.word	0xe000e3f0
 800ba80:	2000222c 	.word	0x2000222c
 800ba84:	e000ed0c 	.word	0xe000ed0c
 800ba88:	20002230 	.word	0x20002230

0800ba8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	@ 0x28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba98:	f7fe fb7e 	bl	800a198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba9c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc10 <pvPortMalloc+0x184>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800baa4:	f000 f924 	bl	800bcf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baa8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc14 <pvPortMalloc+0x188>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4013      	ands	r3, r2
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f040 8095 	bne.w	800bbe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01e      	beq.n	800bafa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800babc:	2208      	movs	r2, #8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d015      	beq.n	800bafa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f023 0307 	bic.w	r3, r3, #7
 800bad4:	3308      	adds	r3, #8
 800bad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f003 0307 	and.w	r3, r3, #7
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <pvPortMalloc+0x6e>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617b      	str	r3, [r7, #20]
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d06f      	beq.n	800bbe0 <pvPortMalloc+0x154>
 800bb00:	4b45      	ldr	r3, [pc, #276]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d86a      	bhi.n	800bbe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb0a:	4b44      	ldr	r3, [pc, #272]	@ (800bc1c <pvPortMalloc+0x190>)
 800bb0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb0e:	4b43      	ldr	r3, [pc, #268]	@ (800bc1c <pvPortMalloc+0x190>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb14:	e004      	b.n	800bb20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <pvPortMalloc+0xa6>
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1f1      	bne.n	800bb16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb32:	4b37      	ldr	r3, [pc, #220]	@ (800bc10 <pvPortMalloc+0x184>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d051      	beq.n	800bbe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2208      	movs	r2, #8
 800bb42:	4413      	add	r3, r2
 800bb44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	1ad2      	subs	r2, r2, r3
 800bb56:	2308      	movs	r3, #8
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d920      	bls.n	800bba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <pvPortMalloc+0xfc>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	613b      	str	r3, [r7, #16]
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	e7fd      	b.n	800bb84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb9a:	69b8      	ldr	r0, [r7, #24]
 800bb9c:	f000 f90a 	bl	800bdb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bba0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	4a1b      	ldr	r2, [pc, #108]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbae:	4b1a      	ldr	r3, [pc, #104]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc20 <pvPortMalloc+0x194>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d203      	bcs.n	800bbc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbba:	4b17      	ldr	r3, [pc, #92]	@ (800bc18 <pvPortMalloc+0x18c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a18      	ldr	r2, [pc, #96]	@ (800bc20 <pvPortMalloc+0x194>)
 800bbc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	4b13      	ldr	r3, [pc, #76]	@ (800bc14 <pvPortMalloc+0x188>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbd6:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <pvPortMalloc+0x198>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <pvPortMalloc+0x198>)
 800bbde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbe0:	f7fe fae8 	bl	800a1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <pvPortMalloc+0x17a>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60fb      	str	r3, [r7, #12]
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	e7fd      	b.n	800bc02 <pvPortMalloc+0x176>
	return pvReturn;
 800bc06:	69fb      	ldr	r3, [r7, #28]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3728      	adds	r7, #40	@ 0x28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20005e3c 	.word	0x20005e3c
 800bc14:	20005e50 	.word	0x20005e50
 800bc18:	20005e40 	.word	0x20005e40
 800bc1c:	20005e34 	.word	0x20005e34
 800bc20:	20005e44 	.word	0x20005e44
 800bc24:	20005e48 	.word	0x20005e48

0800bc28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d04f      	beq.n	800bcda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	4413      	add	r3, r2
 800bc42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	4b25      	ldr	r3, [pc, #148]	@ (800bce4 <vPortFree+0xbc>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4013      	ands	r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10b      	bne.n	800bc6e <vPortFree+0x46>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	60fb      	str	r3, [r7, #12]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00b      	beq.n	800bc8e <vPortFree+0x66>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60bb      	str	r3, [r7, #8]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	4b14      	ldr	r3, [pc, #80]	@ (800bce4 <vPortFree+0xbc>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11a      	bne.n	800bcda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	4b0e      	ldr	r3, [pc, #56]	@ (800bce4 <vPortFree+0xbc>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	43db      	mvns	r3, r3
 800bcae:	401a      	ands	r2, r3
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcb4:	f7fe fa70 	bl	800a198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <vPortFree+0xc0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4a09      	ldr	r2, [pc, #36]	@ (800bce8 <vPortFree+0xc0>)
 800bcc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcc6:	6938      	ldr	r0, [r7, #16]
 800bcc8:	f000 f874 	bl	800bdb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bccc:	4b07      	ldr	r3, [pc, #28]	@ (800bcec <vPortFree+0xc4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	4a06      	ldr	r2, [pc, #24]	@ (800bcec <vPortFree+0xc4>)
 800bcd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcd6:	f7fe fa6d 	bl	800a1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcda:	bf00      	nop
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20005e50 	.word	0x20005e50
 800bce8:	20005e40 	.word	0x20005e40
 800bcec:	20005e4c 	.word	0x20005e4c

0800bcf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bcfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcfc:	4b27      	ldr	r3, [pc, #156]	@ (800bd9c <prvHeapInit+0xac>)
 800bcfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bd9c <prvHeapInit+0xac>)
 800bd20:	4413      	add	r3, r2
 800bd22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd28:	4a1d      	ldr	r2, [pc, #116]	@ (800bda0 <prvHeapInit+0xb0>)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800bda0 <prvHeapInit+0xb0>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd3c:	2208      	movs	r2, #8
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0307 	bic.w	r3, r3, #7
 800bd4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4a15      	ldr	r2, [pc, #84]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd52:	4b14      	ldr	r3, [pc, #80]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2200      	movs	r2, #0
 800bd58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd5a:	4b12      	ldr	r3, [pc, #72]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd70:	4b0c      	ldr	r3, [pc, #48]	@ (800bda4 <prvHeapInit+0xb4>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bda8 <prvHeapInit+0xb8>)
 800bd7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4a09      	ldr	r2, [pc, #36]	@ (800bdac <prvHeapInit+0xbc>)
 800bd86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd88:	4b09      	ldr	r3, [pc, #36]	@ (800bdb0 <prvHeapInit+0xc0>)
 800bd8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd8e:	601a      	str	r2, [r3, #0]
}
 800bd90:	bf00      	nop
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20002234 	.word	0x20002234
 800bda0:	20005e34 	.word	0x20005e34
 800bda4:	20005e3c 	.word	0x20005e3c
 800bda8:	20005e44 	.word	0x20005e44
 800bdac:	20005e40 	.word	0x20005e40
 800bdb0:	20005e50 	.word	0x20005e50

0800bdb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdbc:	4b28      	ldr	r3, [pc, #160]	@ (800be60 <prvInsertBlockIntoFreeList+0xac>)
 800bdbe:	60fb      	str	r3, [r7, #12]
 800bdc0:	e002      	b.n	800bdc8 <prvInsertBlockIntoFreeList+0x14>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d8f7      	bhi.n	800bdc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4413      	add	r3, r2
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d108      	bne.n	800bdf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	441a      	add	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d118      	bne.n	800be3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4b15      	ldr	r3, [pc, #84]	@ (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d00d      	beq.n	800be32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	441a      	add	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	e008      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be32:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e003      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d002      	beq.n	800be52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20005e34 	.word	0x20005e34
 800be64:	20005e3c 	.word	0x20005e3c

0800be68 <atoi>:
 800be68:	220a      	movs	r2, #10
 800be6a:	2100      	movs	r1, #0
 800be6c:	f000 b87a 	b.w	800bf64 <strtol>

0800be70 <_strtol_l.constprop.0>:
 800be70:	2b24      	cmp	r3, #36	@ 0x24
 800be72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be76:	4686      	mov	lr, r0
 800be78:	4690      	mov	r8, r2
 800be7a:	d801      	bhi.n	800be80 <_strtol_l.constprop.0+0x10>
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d106      	bne.n	800be8e <_strtol_l.constprop.0+0x1e>
 800be80:	f000 f882 	bl	800bf88 <__errno>
 800be84:	2316      	movs	r3, #22
 800be86:	6003      	str	r3, [r0, #0]
 800be88:	2000      	movs	r0, #0
 800be8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8e:	4834      	ldr	r0, [pc, #208]	@ (800bf60 <_strtol_l.constprop.0+0xf0>)
 800be90:	460d      	mov	r5, r1
 800be92:	462a      	mov	r2, r5
 800be94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be98:	5d06      	ldrb	r6, [r0, r4]
 800be9a:	f016 0608 	ands.w	r6, r6, #8
 800be9e:	d1f8      	bne.n	800be92 <_strtol_l.constprop.0+0x22>
 800bea0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bea2:	d12d      	bne.n	800bf00 <_strtol_l.constprop.0+0x90>
 800bea4:	782c      	ldrb	r4, [r5, #0]
 800bea6:	2601      	movs	r6, #1
 800bea8:	1c95      	adds	r5, r2, #2
 800beaa:	f033 0210 	bics.w	r2, r3, #16
 800beae:	d109      	bne.n	800bec4 <_strtol_l.constprop.0+0x54>
 800beb0:	2c30      	cmp	r4, #48	@ 0x30
 800beb2:	d12a      	bne.n	800bf0a <_strtol_l.constprop.0+0x9a>
 800beb4:	782a      	ldrb	r2, [r5, #0]
 800beb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800beba:	2a58      	cmp	r2, #88	@ 0x58
 800bebc:	d125      	bne.n	800bf0a <_strtol_l.constprop.0+0x9a>
 800bebe:	786c      	ldrb	r4, [r5, #1]
 800bec0:	2310      	movs	r3, #16
 800bec2:	3502      	adds	r5, #2
 800bec4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bec8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800becc:	2200      	movs	r2, #0
 800bece:	fbbc f9f3 	udiv	r9, ip, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	fb03 ca19 	mls	sl, r3, r9, ip
 800bed8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bedc:	2f09      	cmp	r7, #9
 800bede:	d81b      	bhi.n	800bf18 <_strtol_l.constprop.0+0xa8>
 800bee0:	463c      	mov	r4, r7
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	dd27      	ble.n	800bf36 <_strtol_l.constprop.0+0xc6>
 800bee6:	1c57      	adds	r7, r2, #1
 800bee8:	d007      	beq.n	800befa <_strtol_l.constprop.0+0x8a>
 800beea:	4581      	cmp	r9, r0
 800beec:	d320      	bcc.n	800bf30 <_strtol_l.constprop.0+0xc0>
 800beee:	d101      	bne.n	800bef4 <_strtol_l.constprop.0+0x84>
 800bef0:	45a2      	cmp	sl, r4
 800bef2:	db1d      	blt.n	800bf30 <_strtol_l.constprop.0+0xc0>
 800bef4:	fb00 4003 	mla	r0, r0, r3, r4
 800bef8:	2201      	movs	r2, #1
 800befa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800befe:	e7eb      	b.n	800bed8 <_strtol_l.constprop.0+0x68>
 800bf00:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf02:	bf04      	itt	eq
 800bf04:	782c      	ldrbeq	r4, [r5, #0]
 800bf06:	1c95      	addeq	r5, r2, #2
 800bf08:	e7cf      	b.n	800beaa <_strtol_l.constprop.0+0x3a>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1da      	bne.n	800bec4 <_strtol_l.constprop.0+0x54>
 800bf0e:	2c30      	cmp	r4, #48	@ 0x30
 800bf10:	bf0c      	ite	eq
 800bf12:	2308      	moveq	r3, #8
 800bf14:	230a      	movne	r3, #10
 800bf16:	e7d5      	b.n	800bec4 <_strtol_l.constprop.0+0x54>
 800bf18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf1c:	2f19      	cmp	r7, #25
 800bf1e:	d801      	bhi.n	800bf24 <_strtol_l.constprop.0+0xb4>
 800bf20:	3c37      	subs	r4, #55	@ 0x37
 800bf22:	e7de      	b.n	800bee2 <_strtol_l.constprop.0+0x72>
 800bf24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf28:	2f19      	cmp	r7, #25
 800bf2a:	d804      	bhi.n	800bf36 <_strtol_l.constprop.0+0xc6>
 800bf2c:	3c57      	subs	r4, #87	@ 0x57
 800bf2e:	e7d8      	b.n	800bee2 <_strtol_l.constprop.0+0x72>
 800bf30:	f04f 32ff 	mov.w	r2, #4294967295
 800bf34:	e7e1      	b.n	800befa <_strtol_l.constprop.0+0x8a>
 800bf36:	1c53      	adds	r3, r2, #1
 800bf38:	d108      	bne.n	800bf4c <_strtol_l.constprop.0+0xdc>
 800bf3a:	2322      	movs	r3, #34	@ 0x22
 800bf3c:	f8ce 3000 	str.w	r3, [lr]
 800bf40:	4660      	mov	r0, ip
 800bf42:	f1b8 0f00 	cmp.w	r8, #0
 800bf46:	d0a0      	beq.n	800be8a <_strtol_l.constprop.0+0x1a>
 800bf48:	1e69      	subs	r1, r5, #1
 800bf4a:	e006      	b.n	800bf5a <_strtol_l.constprop.0+0xea>
 800bf4c:	b106      	cbz	r6, 800bf50 <_strtol_l.constprop.0+0xe0>
 800bf4e:	4240      	negs	r0, r0
 800bf50:	f1b8 0f00 	cmp.w	r8, #0
 800bf54:	d099      	beq.n	800be8a <_strtol_l.constprop.0+0x1a>
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d1f6      	bne.n	800bf48 <_strtol_l.constprop.0+0xd8>
 800bf5a:	f8c8 1000 	str.w	r1, [r8]
 800bf5e:	e794      	b.n	800be8a <_strtol_l.constprop.0+0x1a>
 800bf60:	0800cb2d 	.word	0x0800cb2d

0800bf64 <strtol>:
 800bf64:	4613      	mov	r3, r2
 800bf66:	460a      	mov	r2, r1
 800bf68:	4601      	mov	r1, r0
 800bf6a:	4802      	ldr	r0, [pc, #8]	@ (800bf74 <strtol+0x10>)
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f7ff bf7f 	b.w	800be70 <_strtol_l.constprop.0>
 800bf72:	bf00      	nop
 800bf74:	200003f8 	.word	0x200003f8

0800bf78 <memset>:
 800bf78:	4402      	add	r2, r0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d100      	bne.n	800bf82 <memset+0xa>
 800bf80:	4770      	bx	lr
 800bf82:	f803 1b01 	strb.w	r1, [r3], #1
 800bf86:	e7f9      	b.n	800bf7c <memset+0x4>

0800bf88 <__errno>:
 800bf88:	4b01      	ldr	r3, [pc, #4]	@ (800bf90 <__errno+0x8>)
 800bf8a:	6818      	ldr	r0, [r3, #0]
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	200003f8 	.word	0x200003f8

0800bf94 <__libc_init_array>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	4d0d      	ldr	r5, [pc, #52]	@ (800bfcc <__libc_init_array+0x38>)
 800bf98:	4c0d      	ldr	r4, [pc, #52]	@ (800bfd0 <__libc_init_array+0x3c>)
 800bf9a:	1b64      	subs	r4, r4, r5
 800bf9c:	10a4      	asrs	r4, r4, #2
 800bf9e:	2600      	movs	r6, #0
 800bfa0:	42a6      	cmp	r6, r4
 800bfa2:	d109      	bne.n	800bfb8 <__libc_init_array+0x24>
 800bfa4:	4d0b      	ldr	r5, [pc, #44]	@ (800bfd4 <__libc_init_array+0x40>)
 800bfa6:	4c0c      	ldr	r4, [pc, #48]	@ (800bfd8 <__libc_init_array+0x44>)
 800bfa8:	f000 f826 	bl	800bff8 <_init>
 800bfac:	1b64      	subs	r4, r4, r5
 800bfae:	10a4      	asrs	r4, r4, #2
 800bfb0:	2600      	movs	r6, #0
 800bfb2:	42a6      	cmp	r6, r4
 800bfb4:	d105      	bne.n	800bfc2 <__libc_init_array+0x2e>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfbc:	4798      	blx	r3
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	e7ee      	b.n	800bfa0 <__libc_init_array+0xc>
 800bfc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc6:	4798      	blx	r3
 800bfc8:	3601      	adds	r6, #1
 800bfca:	e7f2      	b.n	800bfb2 <__libc_init_array+0x1e>
 800bfcc:	0800cc38 	.word	0x0800cc38
 800bfd0:	0800cc38 	.word	0x0800cc38
 800bfd4:	0800cc38 	.word	0x0800cc38
 800bfd8:	0800cc3c 	.word	0x0800cc3c

0800bfdc <memcpy>:
 800bfdc:	440a      	add	r2, r1
 800bfde:	4291      	cmp	r1, r2
 800bfe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfe4:	d100      	bne.n	800bfe8 <memcpy+0xc>
 800bfe6:	4770      	bx	lr
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bff2:	4291      	cmp	r1, r2
 800bff4:	d1f9      	bne.n	800bfea <memcpy+0xe>
 800bff6:	bd10      	pop	{r4, pc}

0800bff8 <_init>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	bf00      	nop
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr

0800c004 <_fini>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	bf00      	nop
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr
