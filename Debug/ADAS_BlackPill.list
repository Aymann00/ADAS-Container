
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  0800b8b0  0800b8b0  0000c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c478  0800c478  0000e308  2**0
                  CONTENTS
  4 .ARM          00000008  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c480  0800c480  0000e308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c480  0800c480  0000d480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c484  0800c484  0000d484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0800c488  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b44  20000308  0800c790  0000e308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e4c  0800c790  0000ee4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe33  00000000  00000000  0000e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cb  00000000  00000000  0002e16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016eb  00000000  00000000  00034388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a026  00000000  00000000  00035a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d41  00000000  00000000  0004fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea0f  00000000  00000000  000707da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e9c  00000000  00000000  0010f22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  001170c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b898 	.word	0x0800b898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	0800b898 	.word	0x0800b898

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f002 fce2 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8ca 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa2e 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fa0c 	bl	8000928 <MX_DMA_Init>
  MX_SPI1_Init();
 8000510:	f000 f95a 	bl	80007c8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000514:	f000 f98e 	bl	8000834 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f9dc 	bl	80008d4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800051c:	f000 f926 	bl	800076c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000520:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000524:	4936      	ldr	r1, [pc, #216]	@ (8000600 <main+0x104>)
 8000526:	4837      	ldr	r0, [pc, #220]	@ (8000604 <main+0x108>)
 8000528:	f006 f8ff 	bl	800672a <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f007 fa4e 	bl	80079cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of NRF_Mutex */
  NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 8000530:	4835      	ldr	r0, [pc, #212]	@ (8000608 <main+0x10c>)
 8000532:	f007 fc56 	bl	8007de2 <osMutexNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a34      	ldr	r2, [pc, #208]	@ (800060c <main+0x110>)
 800053a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	4a34      	ldr	r2, [pc, #208]	@ (8000610 <main+0x114>)
 800053e:	2100      	movs	r1, #0
 8000540:	4834      	ldr	r0, [pc, #208]	@ (8000614 <main+0x118>)
 8000542:	f007 fa8d 	bl	8007a60 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a33      	ldr	r2, [pc, #204]	@ (8000618 <main+0x11c>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of Startup_Task */
  Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 800054c:	4a33      	ldr	r2, [pc, #204]	@ (800061c <main+0x120>)
 800054e:	2100      	movs	r1, #0
 8000550:	4833      	ldr	r0, [pc, #204]	@ (8000620 <main+0x124>)
 8000552:	f007 fa85 	bl	8007a60 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a32      	ldr	r2, [pc, #200]	@ (8000624 <main+0x128>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of Calc_Dis */
  Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 800055c:	4a32      	ldr	r2, [pc, #200]	@ (8000628 <main+0x12c>)
 800055e:	2100      	movs	r1, #0
 8000560:	4832      	ldr	r0, [pc, #200]	@ (800062c <main+0x130>)
 8000562:	f007 fa7d 	bl	8007a60 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <main+0x134>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of Local_Task */
  Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 800056c:	4a31      	ldr	r2, [pc, #196]	@ (8000634 <main+0x138>)
 800056e:	2100      	movs	r1, #0
 8000570:	4831      	ldr	r0, [pc, #196]	@ (8000638 <main+0x13c>)
 8000572:	f007 fa75 	bl	8007a60 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <main+0x140>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Check_Algo */
  Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 800057c:	4a30      	ldr	r2, [pc, #192]	@ (8000640 <main+0x144>)
 800057e:	2100      	movs	r1, #0
 8000580:	4830      	ldr	r0, [pc, #192]	@ (8000644 <main+0x148>)
 8000582:	f007 fa6d 	bl	8007a60 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a2f      	ldr	r2, [pc, #188]	@ (8000648 <main+0x14c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of BSW_Algo */
  BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 800058c:	4a2f      	ldr	r2, [pc, #188]	@ (800064c <main+0x150>)
 800058e:	2100      	movs	r1, #0
 8000590:	482f      	ldr	r0, [pc, #188]	@ (8000650 <main+0x154>)
 8000592:	f007 fa65 	bl	8007a60 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <main+0x158>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of DPW_Algo */
  DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 800059c:	4a2e      	ldr	r2, [pc, #184]	@ (8000658 <main+0x15c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	482e      	ldr	r0, [pc, #184]	@ (800065c <main+0x160>)
 80005a2:	f007 fa5d 	bl	8007a60 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000660 <main+0x164>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of Receiveing */
  ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 80005ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000664 <main+0x168>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	482d      	ldr	r0, [pc, #180]	@ (8000668 <main+0x16c>)
 80005b2:	f007 fa55 	bl	8007a60 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <main+0x170>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of FCW_Algo */
  FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000670 <main+0x174>)
 80005be:	2100      	movs	r1, #0
 80005c0:	482c      	ldr	r0, [pc, #176]	@ (8000674 <main+0x178>)
 80005c2:	f007 fa4d 	bl	8007a60 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000678 <main+0x17c>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of EEBL_Algo */
  EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005cc:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <main+0x180>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	482b      	ldr	r0, [pc, #172]	@ (8000680 <main+0x184>)
 80005d2:	f007 fa45 	bl	8007a60 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000684 <main+0x188>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of Task_LidarData */
  Task_LidarDataHandle = osThreadNew(Ask_LidarData, NULL, &Task_LidarData_attributes);
 80005dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000688 <main+0x18c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	482a      	ldr	r0, [pc, #168]	@ (800068c <main+0x190>)
 80005e2:	f007 fa3d 	bl	8007a60 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a29      	ldr	r2, [pc, #164]	@ (8000690 <main+0x194>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of EventGroup */
  EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005ec:	4829      	ldr	r0, [pc, #164]	@ (8000694 <main+0x198>)
 80005ee:	f007 fb11 	bl	8007c14 <osEventFlagsNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <main+0x19c>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f007 fa0c 	bl	8007a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x100>
 8000600:	200004f4 	.word	0x200004f4
 8000604:	20000418 	.word	0x20000418
 8000608:	0800c324 	.word	0x0800c324
 800060c:	200004ec 	.word	0x200004ec
 8000610:	0800c198 	.word	0x0800c198
 8000614:	08000d5d 	.word	0x08000d5d
 8000618:	200004c0 	.word	0x200004c0
 800061c:	0800c1bc 	.word	0x0800c1bc
 8000620:	08000d71 	.word	0x08000d71
 8000624:	200004c4 	.word	0x200004c4
 8000628:	0800c1e0 	.word	0x0800c1e0
 800062c:	08000e11 	.word	0x08000e11
 8000630:	200004c8 	.word	0x200004c8
 8000634:	0800c204 	.word	0x0800c204
 8000638:	08000e85 	.word	0x08000e85
 800063c:	200004cc 	.word	0x200004cc
 8000640:	0800c228 	.word	0x0800c228
 8000644:	08000f35 	.word	0x08000f35
 8000648:	200004d0 	.word	0x200004d0
 800064c:	0800c24c 	.word	0x0800c24c
 8000650:	08000fb1 	.word	0x08000fb1
 8000654:	200004d4 	.word	0x200004d4
 8000658:	0800c270 	.word	0x0800c270
 800065c:	080010b9 	.word	0x080010b9
 8000660:	200004d8 	.word	0x200004d8
 8000664:	0800c294 	.word	0x0800c294
 8000668:	080011f5 	.word	0x080011f5
 800066c:	200004dc 	.word	0x200004dc
 8000670:	0800c2b8 	.word	0x0800c2b8
 8000674:	080013f5 	.word	0x080013f5
 8000678:	200004e0 	.word	0x200004e0
 800067c:	0800c2dc 	.word	0x0800c2dc
 8000680:	0800141d 	.word	0x0800141d
 8000684:	200004e4 	.word	0x200004e4
 8000688:	0800c300 	.word	0x0800c300
 800068c:	08001491 	.word	0x08001491
 8000690:	200004e8 	.word	0x200004e8
 8000694:	0800c334 	.word	0x0800c334
 8000698:	200004f0 	.word	0x200004f0

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00b f8b4 	bl	800b818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <SystemClock_Config+0xc8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800070c:	2319      	movs	r3, #25
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000710:	2390      	movs	r3, #144	@ 0x90
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f89d 	bl	8004860 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 fed6 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2102      	movs	r1, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f004 faff 	bl	8004d50 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000758:	f000 fec0 	bl	80014dc <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f003 fa8d 	bl	8003cc8 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 fe92 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000324 	.word	0x20000324
 80007c0:	40005400 	.word	0x40005400
 80007c4:	00061a80 	.word	0x00061a80

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_SPI1_Init+0x64>)
 80007ce:	4a18      	ldr	r2, [pc, #96]	@ (8000830 <MX_SPI1_Init+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_SPI1_Init+0x64>)
 80007fc:	2220      	movs	r2, #32
 80007fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_SPI1_Init+0x64>)
 8000814:	220a      	movs	r2, #10
 8000816:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_SPI1_Init+0x64>)
 800081a:	f004 fcab 	bl	8005174 <HAL_SPI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 fe5a 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000378 	.word	0x20000378
 8000830:	40013000 	.word	0x40013000

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000854:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_TIM3_Init+0x9c>)
 8000856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_TIM3_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800086a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_TIM3_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000878:	4814      	ldr	r0, [pc, #80]	@ (80008cc <MX_TIM3_Init+0x98>)
 800087a:	f005 fa51 	bl	8005d20 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000884:	f000 fe2a 	bl	80014dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000898:	f005 fbe4 	bl	8006064 <HAL_TIM_SlaveConfigSynchro>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008a2:	f000 fe1b 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <MX_TIM3_Init+0x98>)
 80008b4:	f005 fddc 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 fe0d 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200003d0 	.word	0x200003d0
 80008d0:	40000400 	.word	0x40000400

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <MX_USART1_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART1_UART_Init+0x4c>)
 800090c:	f005 fe32 	bl	8006574 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 fde1 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000418 	.word	0x20000418
 8000924:	40011000 	.word	0x40011000

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_DMA_Init+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <MX_DMA_Init+0x3c>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f002 fbd8 	bl	8003104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000954:	203a      	movs	r0, #58	@ 0x3a
 8000956:	f002 fbf1 	bl	800313c <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_GPIO_Init+0xc4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2118      	movs	r1, #24
 80009d6:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <MX_GPIO_Init+0xc8>)
 80009d8:	f003 f944 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009dc:	2304      	movs	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <MX_GPIO_Init+0xc8>)
 80009f2:	f002 ffb3 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 80009f6:	2318      	movs	r3, #24
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <MX_GPIO_Init+0xc8>)
 8000a0e:	f002 ffa5 	bl	800395c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2008      	movs	r0, #8
 8000a18:	f002 fb74 	bl	8003104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a1c:	2008      	movs	r0, #8
 8000a1e:	f002 fb8d 	bl	800313c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 8000a54:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <HAL_UART_RxCpltCallback+0x1c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f007 f91a 	bl	8007c94 <osEventFlagsSet>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200004f0 	.word	0x200004f0

08000a6c <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 8000a74:	2300      	movs	r3, #0
 8000a76:	83fb      	strh	r3, [r7, #30]
	int16_t Local_CounterII = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	83bb      	strh	r3, [r7, #28]
	uint8_t Local_Zeros	= 0 ;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	76fb      	strb	r3, [r7, #27]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	83fb      	strh	r3, [r7, #30]
 8000a84:	e05b      	b.n	8000b3e <_CalcAvgDistance+0xd2>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 8000a8a:	8bfb      	ldrh	r3, [r7, #30]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	461a      	mov	r2, r3
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3b03      	subs	r3, #3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	827b      	strh	r3, [r7, #18]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000aa0:	8bfb      	ldrh	r3, [r7, #30]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	0052      	lsls	r2, r2, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	823b      	strh	r3, [r7, #16]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000ab4:	8a7b      	ldrh	r3, [r7, #18]
 8000ab6:	83bb      	strh	r3, [r7, #28]
 8000ab8:	e02b      	b.n	8000b12 <_CalcAvgDistance+0xa6>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000aba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000abe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000ac2:	4a24      	ldr	r2, [pc, #144]	@ (8000b54 <_CalcAvgDistance+0xe8>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	441a      	add	r2, r3
 8000aca:	1211      	asrs	r1, r2, #8
 8000acc:	17da      	asrs	r2, r3, #31
 8000ace:	1a8a      	subs	r2, r1, r2
 8000ad0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ad4:	fb01 f202 	mul.w	r2, r1, r2
 8000ad8:	1a9a      	subs	r2, r3, r2
 8000ada:	4613      	mov	r3, r2
 8000adc:	81fb      	strh	r3, [r7, #14]

			if( 0==Data_Arr[Index] )
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d103      	bne.n	8000af4 <_CalcAvgDistance+0x88>
			{
				Local_Zeros++;
 8000aec:	7efb      	ldrb	r3, [r7, #27]
 8000aee:	3301      	adds	r3, #1
 8000af0:	76fb      	strb	r3, [r7, #27]
 8000af2:	e008      	b.n	8000b06 <_CalcAvgDistance+0x9a>
			}
			else
			{
				Local_TempI += Data_Arr[Index];
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	617b      	str	r3, [r7, #20]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000b06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	83bb      	strh	r3, [r7, #28]
 8000b12:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000b16:	8a3b      	ldrh	r3, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	ddce      	ble.n	8000aba <_CalcAvgDistance+0x4e>
			}
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / (7-Local_Zeros);
 8000b1c:	7efb      	ldrb	r3, [r7, #27]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	461a      	mov	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	b291      	uxth	r1, r2
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <_CalcAvgDistance+0xec>)
 8000b30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Local_Zeros = 0 ;
 8000b34:	2300      	movs	r3, #0
 8000b36:	76fb      	strb	r3, [r7, #27]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000b38:	8bfb      	ldrh	r3, [r7, #30]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	83fb      	strh	r3, [r7, #30]
 8000b3e:	8bfb      	ldrh	r3, [r7, #30]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d9a0      	bls.n	8000a86 <_CalcAvgDistance+0x1a>
	}

	return Local_AvgDistance;
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <_CalcAvgDistance+0xec>)
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	@ 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	b60b60b7 	.word	0xb60b60b7
 8000b58:	20000ed4 	.word	0x20000ed4

08000b5c <_vSSD1306_ForwardCollisionWarning>:

void _vSSD1306_ForwardCollisionWarning(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000b62:	2301      	movs	r3, #1
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2340      	movs	r3, #64	@ 0x40
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f001 f841 	bl	8001bf4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-60,4) ;
 8000b72:	2104      	movs	r1, #4
 8000b74:	2004      	movs	r0, #4
 8000b76:	f000 fe89 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Forward Collision",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	490c      	ldr	r1, [pc, #48]	@ (8000bb0 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000b7e:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <_vSSD1306_ForwardCollisionWarning+0x58>)
 8000b80:	f000 ff18 	bl	80019b4 <SSD1306_Puts>
	SSD1306_GotoXY(64-(25),15) ;
 8000b84:	210f      	movs	r1, #15
 8000b86:	2027      	movs	r0, #39	@ 0x27
 8000b88:	f000 fe80 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Warning",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4908      	ldr	r1, [pc, #32]	@ (8000bb0 <_vSSD1306_ForwardCollisionWarning+0x54>)
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <_vSSD1306_ForwardCollisionWarning+0x5c>)
 8000b92:	f000 ff0f 	bl	80019b4 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-18 , 26  , ForwardCollision_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000b96:	2301      	movs	r3, #1
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	2323      	movs	r3, #35	@ 0x23
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2323      	movs	r3, #35	@ 0x23
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <_vSSD1306_ForwardCollisionWarning+0x60>)
 8000ba2:	211a      	movs	r1, #26
 8000ba4:	202e      	movs	r0, #46	@ 0x2e
 8000ba6:	f000 fc9f 	bl	80014e8 <SSD1306_DrawBitmap>
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000274 	.word	0x20000274
 8000bb4:	0800b954 	.word	0x0800b954
 8000bb8:	0800b968 	.word	0x0800b968
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <_vSSD1306_BlindSpotWarning>:

void _vSSD1306_BlindSpotWarning( BlindSpotDirection_t Copy_u8Direction )
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2340      	movs	r3, #64	@ 0x40
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f001 f80d 	bl	8001bf4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-(35),4) ;
 8000bda:	2104      	movs	r1, #4
 8000bdc:	201d      	movs	r0, #29
 8000bde:	f000 fe55 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Blind Spot",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	4915      	ldr	r1, [pc, #84]	@ (8000c3c <_vSSD1306_BlindSpotWarning+0x7c>)
 8000be6:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <_vSSD1306_BlindSpotWarning+0x80>)
 8000be8:	f000 fee4 	bl	80019b4 <SSD1306_Puts>

	if( Copy_u8Direction == BlindSpotDirection_Right )
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b77      	cmp	r3, #119	@ 0x77
 8000bf0:	d109      	bne.n	8000c06 <_vSSD1306_BlindSpotWarning+0x46>
	{
		SSD1306_GotoXY(64-(56),15) ;
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	2008      	movs	r0, #8
 8000bf6:	f000 fe49 	bl	800188c <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	490f      	ldr	r1, [pc, #60]	@ (8000c3c <_vSSD1306_BlindSpotWarning+0x7c>)
 8000bfe:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <_vSSD1306_BlindSpotWarning+0x84>)
 8000c00:	f000 fed8 	bl	80019b4 <SSD1306_Puts>
 8000c04:	e00b      	b.n	8000c1e <_vSSD1306_BlindSpotWarning+0x5e>
	}
	else if( Copy_u8Direction == BlindSpotDirection_Left )
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b88      	cmp	r3, #136	@ 0x88
 8000c0a:	d108      	bne.n	8000c1e <_vSSD1306_BlindSpotWarning+0x5e>
	{
		SSD1306_GotoXY(64-(53),15) ;
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	200b      	movs	r0, #11
 8000c10:	f000 fe3c 	bl	800188c <SSD1306_GotoXY>
		SSD1306_Puts("Warning On Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	4909      	ldr	r1, [pc, #36]	@ (8000c3c <_vSSD1306_BlindSpotWarning+0x7c>)
 8000c18:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <_vSSD1306_BlindSpotWarning+0x88>)
 8000c1a:	f000 fecb 	bl	80019b4 <SSD1306_Puts>
	}
	else
	{
		/* Do Nothing */
	}
	SSD1306_DrawBitmap(64-18 , 26  , BlindSpotWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2323      	movs	r3, #35	@ 0x23
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2323      	movs	r3, #35	@ 0x23
 8000c28:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <_vSSD1306_BlindSpotWarning+0x8c>)
 8000c2a:	211a      	movs	r1, #26
 8000c2c:	202e      	movs	r0, #46	@ 0x2e
 8000c2e:	f000 fc5b 	bl	80014e8 <SSD1306_DrawBitmap>


}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000274 	.word	0x20000274
 8000c40:	0800b970 	.word	0x0800b970
 8000c44:	0800b97c 	.word	0x0800b97c
 8000c48:	0800b990 	.word	0x0800b990
 8000c4c:	200000b0 	.word	0x200000b0

08000c50 <_vSSD1306_EmergencyElectronicBrake>:

void _vSSD1306_EmergencyElectronicBrake(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af02      	add	r7, sp, #8
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000c56:	2301      	movs	r3, #1
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2340      	movs	r3, #64	@ 0x40
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 ffc7 	bl	8001bf4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-28,4) ;
 8000c66:	2104      	movs	r1, #4
 8000c68:	2024      	movs	r0, #36	@ 0x24
 8000c6a:	f000 fe0f 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Warning!",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4911      	ldr	r1, [pc, #68]	@ (8000cb8 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c72:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <_vSSD1306_EmergencyElectronicBrake+0x6c>)
 8000c74:	f000 fe9e 	bl	80019b4 <SSD1306_Puts>
	SSD1306_GotoXY(64-46,15) ;
 8000c78:	210f      	movs	r1, #15
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f000 fe06 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Front Vehicle",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c80:	2201      	movs	r2, #1
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c84:	480e      	ldr	r0, [pc, #56]	@ (8000cc0 <_vSSD1306_EmergencyElectronicBrake+0x70>)
 8000c86:	f000 fe95 	bl	80019b4 <SSD1306_Puts>
	SSD1306_GotoXY(64-42,26) ;
 8000c8a:	211a      	movs	r1, #26
 8000c8c:	2016      	movs	r0, #22
 8000c8e:	f000 fdfd 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Hard Braking",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000c92:	2201      	movs	r2, #1
 8000c94:	4908      	ldr	r1, [pc, #32]	@ (8000cb8 <_vSSD1306_EmergencyElectronicBrake+0x68>)
 8000c96:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <_vSSD1306_EmergencyElectronicBrake+0x74>)
 8000c98:	f000 fe8c 	bl	80019b4 <SSD1306_Puts>

	SSD1306_DrawBitmap(64-13 , 37  , EEBL_Bitmap , 25 , 25, SSD1306_COLOR_WHITE) ;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	2319      	movs	r3, #25
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2319      	movs	r3, #25
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <_vSSD1306_EmergencyElectronicBrake+0x78>)
 8000ca8:	2125      	movs	r1, #37	@ 0x25
 8000caa:	2033      	movs	r0, #51	@ 0x33
 8000cac:	f000 fc1c 	bl	80014e8 <SSD1306_DrawBitmap>


}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000274 	.word	0x20000274
 8000cbc:	0800b9a0 	.word	0x0800b9a0
 8000cc0:	0800b9ac 	.word	0x0800b9ac
 8000cc4:	0800b9bc 	.word	0x0800b9bc
 8000cc8:	20000160 	.word	0x20000160

08000ccc <_vSSD1306_DontPassWarning>:

void _vSSD1306_DontPassWarning(DontPassWarningDirection_t Copy_u8Direction)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	SSD1306_DrawRectangle(0, 0 , 128u ,  64u , SSD1306_COLOR_WHITE ) ;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2340      	movs	r3, #64	@ 0x40
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 ff87 	bl	8001bf4 <SSD1306_DrawRectangle>
	SSD1306_GotoXY(64-53,4) ;
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	200b      	movs	r0, #11
 8000cea:	f000 fdcf 	bl	800188c <SSD1306_GotoXY>
	SSD1306_Puts("Don't Pass From",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4915      	ldr	r1, [pc, #84]	@ (8000d48 <_vSSD1306_DontPassWarning+0x7c>)
 8000cf2:	4816      	ldr	r0, [pc, #88]	@ (8000d4c <_vSSD1306_DontPassWarning+0x80>)
 8000cf4:	f000 fe5e 	bl	80019b4 <SSD1306_Puts>

	if( Copy_u8Direction == DontPassWarningDirection_Right )
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2baa      	cmp	r3, #170	@ 0xaa
 8000cfc:	d109      	bne.n	8000d12 <_vSSD1306_DontPassWarning+0x46>
	{
		SSD1306_GotoXY(64-18,15) ;
 8000cfe:	210f      	movs	r1, #15
 8000d00:	202e      	movs	r0, #46	@ 0x2e
 8000d02:	f000 fdc3 	bl	800188c <SSD1306_GotoXY>
		SSD1306_Puts("Right",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	490f      	ldr	r1, [pc, #60]	@ (8000d48 <_vSSD1306_DontPassWarning+0x7c>)
 8000d0a:	4811      	ldr	r0, [pc, #68]	@ (8000d50 <_vSSD1306_DontPassWarning+0x84>)
 8000d0c:	f000 fe52 	bl	80019b4 <SSD1306_Puts>
 8000d10:	e00b      	b.n	8000d2a <_vSSD1306_DontPassWarning+0x5e>
	}
	else if( Copy_u8Direction == DontPassWarningDirection_Left )
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2bbb      	cmp	r3, #187	@ 0xbb
 8000d16:	d108      	bne.n	8000d2a <_vSSD1306_DontPassWarning+0x5e>
	{
		SSD1306_GotoXY(64-14,15) ;
 8000d18:	210f      	movs	r1, #15
 8000d1a:	2032      	movs	r0, #50	@ 0x32
 8000d1c:	f000 fdb6 	bl	800188c <SSD1306_GotoXY>
		SSD1306_Puts("Left",&Font_7x10,SSD1306_COLOR_WHITE) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	4909      	ldr	r1, [pc, #36]	@ (8000d48 <_vSSD1306_DontPassWarning+0x7c>)
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <_vSSD1306_DontPassWarning+0x88>)
 8000d26:	f000 fe45 	bl	80019b4 <SSD1306_Puts>
	else
	{
		/* Do Nothing */
	}

	SSD1306_DrawBitmap(64-18 , 26  , DontPassWarning_Bitmap , 35 , 35, SSD1306_COLOR_WHITE) ;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2323      	movs	r3, #35	@ 0x23
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2323      	movs	r3, #35	@ 0x23
 8000d34:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <_vSSD1306_DontPassWarning+0x8c>)
 8000d36:	211a      	movs	r1, #26
 8000d38:	202e      	movs	r0, #46	@ 0x2e
 8000d3a:	f000 fbd5 	bl	80014e8 <SSD1306_DrawBitmap>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000274 	.word	0x20000274
 8000d4c:	0800b9cc 	.word	0x0800b9cc
 8000d50:	0800b9dc 	.word	0x0800b9dc
 8000d54:	0800b9e4 	.word	0x0800b9e4
 8000d58:	200001c4 	.word	0x200001c4

08000d5c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	// for(;;)
	// {
	//   osDelay(1);
	// }
  /* USER CODE END 5 */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b095      	sub	sp, #84	@ 0x54
 8000d74:	af12      	add	r7, sp, #72	@ 0x48
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Init_Task */

	/* Initializing SSD1306 ( OLED Display ) */
	SSD1306_Init();
 8000d78:	f000 fc1e 	bl	80015b8 <SSD1306_Init>
	/* NRF Module Initialization -> Less Then 0.5 Sec */
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <Init_Task+0x8c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	4618      	mov	r0, r3
 8000d86:	f007 f8b2 	bl	8007eee <osMutexAcquire>

	NRF24_begin(hspi1);
 8000d8a:	4c1d      	ldr	r4, [pc, #116]	@ (8000e00 <Init_Task+0x90>)
 8000d8c:	4668      	mov	r0, sp
 8000d8e:	f104 0310 	add.w	r3, r4, #16
 8000d92:	2248      	movs	r2, #72	@ 0x48
 8000d94:	4619      	mov	r1, r3
 8000d96:	f00a fd71 	bl	800b87c <memcpy>
 8000d9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9e:	f001 fc0d 	bl	80025bc <NRF24_begin>
	NRF24_setAutoAck(true);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f001 fed2 	bl	8002b4c <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000da8:	2020      	movs	r0, #32
 8000daa:	f001 fe2b 	bl	8002a04 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000dae:	f001 fe83 	bl	8002ab8 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000db2:	f001 fe53 	bl	8002a5c <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <Init_Task+0x94>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f001 fda3 	bl	8002908 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <Init_Task+0x94>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f001 fd78 	bl	80028c0 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <Init_Task+0x98>)
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 fff8 	bl	8002dca <NRF24_writeAckPayload>
	NRF24_startListening();
 8000dda:	f001 fccb 	bl	8002774 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <Init_Task+0x8c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 f8ce 	bl	8007f84 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <Init_Task+0x9c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f006 fec9 	bl	8007b84 <osThreadTerminate>

  /* USER CODE END Init_Task */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200004ec 	.word	0x200004ec
 8000e00:	20000378 	.word	0x20000378
 8000e04:	20000280 	.word	0x20000280
 8000e08:	20000288 	.word	0x20000288
 8000e0c:	200004c4 	.word	0x200004c4

08000e10 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <Distance_Calc+0x64>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	f006 ff78 	bl	8007d18 <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000e28:	2300      	movs	r3, #0
 8000e2a:	81fb      	strh	r3, [r7, #14]
 8000e2c:	e011      	b.n	8000e52 <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000e2e:	89fa      	ldrh	r2, [r7, #14]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <Distance_Calc+0x68>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00a fc64 	bl	800b708 <atoi>
 8000e40:	4602      	mov	r2, r0
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	b291      	uxth	r1, r2
 8000e46:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <Distance_Calc+0x6c>)
 8000e48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	81fb      	strh	r3, [r7, #14]
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000e58:	d3e9      	bcc.n	8000e2e <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <Distance_Calc+0x6c>)
 8000e5c:	f7ff fe06 	bl	8000a6c <_CalcAvgDistance>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <Distance_Calc+0x70>)
 8000e64:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 8000e66:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <Distance_Calc+0x64>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 ff11 	bl	8007c94 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000e72:	e7d1      	b.n	8000e18 <Distance_Calc+0x8>
 8000e74:	200004f0 	.word	0x200004f0
 8000e78:	200004f4 	.word	0x200004f4
 8000e7c:	20000bfc 	.word	0x20000bfc
 8000e80:	20000ecc 	.word	0x20000ecc

08000e84 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e8c:	2311      	movs	r3, #17
 8000e8e:	733b      	strb	r3, [r7, #12]
 8000e90:	2301      	movs	r3, #1
 8000e92:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <Localization+0xa8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	330c      	adds	r3, #12
 8000e9a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <Localization+0xa8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	330a      	adds	r3, #10
 8000ea6:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <Localization+0xa8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <Localization+0xa8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <Localization+0xa8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <Localization+0xa8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <Localization+0xa8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <Localization+0xa8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	330e      	adds	r3, #14
 8000eec:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <Localization+0xac>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fff7 	bl	8007eee <osMutexAcquire>

		NRF24_stopListening();
 8000f00:	f001 fc5e 	bl	80027c0 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fc64 	bl	80027d8 <NRF24_write>
		NRF24_startListening();
 8000f10:	f001 fc30 	bl	8002774 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <Localization+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 f833 	bl	8007f84 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(2000);
 8000f1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f22:	f006 fe5c 	bl	8007bde <osDelay>
	{
 8000f26:	bf00      	nop
 8000f28:	e7b0      	b.n	8000e8c <Localization+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	20000ecc 	.word	0x20000ecc
 8000f30:	200004ec 	.word	0x200004ec

08000f34 <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <Check_Algorithm+0x70>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	f006 fee6 	bl	8007d18 <osEventFlagsWait>

		/* Checking on Front Threshold */
		if( ( Obstcales_Detection[FRONT] <= FCW_Threshold ) && (!( Obstcales_Detection[FRONT] <= EEBL_Threshold )) )
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <Check_Algorithm+0x74>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	330c      	adds	r3, #12
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f58:	d80d      	bhi.n	8000f76 <Check_Algorithm+0x42>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <Check_Algorithm+0x74>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	330c      	adds	r3, #12
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f66:	d906      	bls.n	8000f76 <Check_Algorithm+0x42>
		{
			//Invoke FCW algorithm
			osEventFlagsSet( EventGroupHandle , FCW_ASSERTED ) ;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <Check_Algorithm+0x70>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f006 fe90 	bl	8007c94 <osEventFlagsSet>
 8000f74:	e014      	b.n	8000fa0 <Check_Algorithm+0x6c>
		}
		else if( Obstcales_Detection[FRONT] <= EEBL_Threshold )
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <Check_Algorithm+0x74>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	330c      	adds	r3, #12
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f82:	d806      	bhi.n	8000f92 <Check_Algorithm+0x5e>
		{
			//Invoke EEBL algorithm
			osEventFlagsSet( EventGroupHandle , EEBL_ASSERTED ) ;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <Check_Algorithm+0x70>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fe82 	bl	8007c94 <osEventFlagsSet>
 8000f90:	e7d4      	b.n	8000f3c <Check_Algorithm+0x8>
		}
		else
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)RPI_MOVE, 1, HAL_MAX_DELAY ) ;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	2201      	movs	r2, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <Check_Algorithm+0x78>)
 8000f9c:	f005 fb3a 	bl	8006614 <HAL_UART_Transmit>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000fa0:	e7cc      	b.n	8000f3c <Check_Algorithm+0x8>
 8000fa2:	bf00      	nop
 8000fa4:	200004f0 	.word	0x200004f0
 8000fa8:	20000ecc 	.word	0x20000ecc
 8000fac:	20000418 	.word	0x20000418

08000fb0 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSW_Algorithm */
	bool Local_BSWLeft = false ;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000fc8:	4b39      	ldr	r3, [pc, #228]	@ (80010b0 <BSW_Algorithm+0x100>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f006 fea0 	bl	8007d18 <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000fe0:	2387      	movs	r3, #135	@ 0x87
 8000fe2:	737b      	strb	r3, [r7, #13]
 8000fe4:	e012      	b.n	800100c <BSW_Algorithm+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000fe6:	7b7b      	ldrb	r3, [r7, #13]
 8000fe8:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <BSW_Algorithm+0x104>)
 8000fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d009      	beq.n	8001006 <BSW_Algorithm+0x56>
 8000ff2:	7b7b      	ldrb	r3, [r7, #13]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <BSW_Algorithm+0x104>)
 8000ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffa:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000ffe:	d802      	bhi.n	8001006 <BSW_Algorithm+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]

				break;
 8001004:	e005      	b.n	8001012 <BSW_Algorithm+0x62>
				Angle_Iterator--)
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	3b01      	subs	r3, #1
 800100a:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	2b59      	cmp	r3, #89	@ 0x59
 8001010:	d8e9      	bhi.n	8000fe6 <BSW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8001012:	23e1      	movs	r3, #225	@ 0xe1
 8001014:	817b      	strh	r3, [r7, #10]
 8001016:	e012      	b.n	800103e <BSW_Algorithm+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8001018:	897b      	ldrh	r3, [r7, #10]
 800101a:	4a26      	ldr	r2, [pc, #152]	@ (80010b4 <BSW_Algorithm+0x104>)
 800101c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d009      	beq.n	8001038 <BSW_Algorithm+0x88>
 8001024:	897b      	ldrh	r3, [r7, #10]
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <BSW_Algorithm+0x104>)
 8001028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001030:	d802      	bhi.n	8001038 <BSW_Algorithm+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8001032:	2301      	movs	r3, #1
 8001034:	73bb      	strb	r3, [r7, #14]

				break;
 8001036:	e006      	b.n	8001046 <BSW_Algorithm+0x96>
				Angle_Iterator++)
 8001038:	897b      	ldrh	r3, [r7, #10]
 800103a:	3301      	adds	r3, #1
 800103c:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 800103e:	897b      	ldrh	r3, [r7, #10]
 8001040:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001044:	d9e8      	bls.n	8001018 <BSW_Algorithm+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00b      	beq.n	8001064 <BSW_Algorithm+0xb4>
 800104c:	7a7b      	ldrb	r3, [r7, #9]
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <BSW_Algorithm+0xb4>
		{
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Left);
 8001058:	2088      	movs	r0, #136	@ 0x88
 800105a:	f7ff fdb1 	bl	8000bc0 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 800105e:	f000 fb6f 	bl	8001740 <SSD1306_UpdateScreen>
 8001062:	e00a      	b.n	800107a <BSW_Algorithm+0xca>

		}
		else if ( ( Local_BSWLeft == false ) && ( Local_BSWL_LastState == true ) )
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <BSW_Algorithm+0xca>
 8001070:	7a7b      	ldrb	r3, [r7, #9]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <BSW_Algorithm+0xca>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 8001076:	f000 fe27 	bl	8001cc8 <SSD1306_Clear>
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00b      	beq.n	8001098 <BSW_Algorithm+0xe8>
 8001080:	7a3b      	ldrb	r3, [r7, #8]
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <BSW_Algorithm+0xe8>
		{
			/*Invoke the Algorithm*/
			_vSSD1306_BlindSpotWarning(BlindSpotDirection_Right);
 800108c:	2077      	movs	r0, #119	@ 0x77
 800108e:	f7ff fd97 	bl	8000bc0 <_vSSD1306_BlindSpotWarning>
			SSD1306_UpdateScreen();
 8001092:	f000 fb55 	bl	8001740 <SSD1306_UpdateScreen>
 8001096:	e00a      	b.n	80010ae <BSW_Algorithm+0xfe>
		}
		else if ( ( Local_BSWRight == false ) && ( Local_BSWR_LastState == true ) )
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d091      	beq.n	8000fc8 <BSW_Algorithm+0x18>
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d08e      	beq.n	8000fc8 <BSW_Algorithm+0x18>
		{
			/*Abort the Algorithm*/
			SSD1306_Clear();
 80010aa:	f000 fe0d 	bl	8001cc8 <SSD1306_Clear>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010ae:	e78b      	b.n	8000fc8 <BSW_Algorithm+0x18>
 80010b0:	200004f0 	.word	0x200004f0
 80010b4:	20000bfc 	.word	0x20000bfc

080010b8 <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DPW_Algorithm */
	bool Local_DPWLeft = false ;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
	bool Local_DPWRight= false ;
 80010c4:	2300      	movs	r3, #0
 80010c6:	75bb      	strb	r3, [r7, #22]
	bool Local_DPWL_LastState = false ;
 80010c8:	2300      	movs	r3, #0
 80010ca:	747b      	strb	r3, [r7, #17]
	bool Local_DPWR_LastState = false ;
 80010cc:	2300      	movs	r3, #0
 80010ce:	743b      	strb	r3, [r7, #16]


	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	747b      	strb	r3, [r7, #17]
		Local_DPWR_LastState = Local_DPWRight;
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	743b      	strb	r3, [r7, #16]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010d8:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <DPW_Algorithm+0x12c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	f006 fe18 	bl	8007d18 <osEventFlagsWait>

		uint8_t MessageToWarnBackCar[]={CAR_ID, 0 , Back_Car_ID};
 80010e8:	2311      	movs	r3, #17
 80010ea:	733b      	strb	r3, [r7, #12]
 80010ec:	2300      	movs	r3, #0
 80010ee:	737b      	strb	r3, [r7, #13]
 80010f0:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <DPW_Algorithm+0x130>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	73bb      	strb	r3, [r7, #14]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 80010f6:	232d      	movs	r3, #45	@ 0x2d
 80010f8:	757b      	strb	r3, [r7, #21]
 80010fa:	e012      	b.n	8001122 <DPW_Algorithm+0x6a>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 80010fc:	7d7b      	ldrb	r3, [r7, #21]
 80010fe:	4a3b      	ldr	r2, [pc, #236]	@ (80011ec <DPW_Algorithm+0x134>)
 8001100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <DPW_Algorithm+0x64>
 8001108:	7d7b      	ldrb	r3, [r7, #21]
 800110a:	4a38      	ldr	r2, [pc, #224]	@ (80011ec <DPW_Algorithm+0x134>)
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001114:	d802      	bhi.n	800111c <DPW_Algorithm+0x64>
			{
				/*break the loop and invoke DPW Left warning*/

				Local_DPWLeft = true;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]

				break;
 800111a:	e005      	b.n	8001128 <DPW_Algorithm+0x70>
				Angle_Iterator--)
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	3b01      	subs	r3, #1
 8001120:	757b      	strb	r3, [r7, #21]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 8001122:	7d7b      	ldrb	r3, [r7, #21]
 8001124:	2b0e      	cmp	r3, #14
 8001126:	d8e9      	bhi.n	80010fc <DPW_Algorithm+0x44>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8001128:	f240 133b 	movw	r3, #315	@ 0x13b
 800112c:	827b      	strh	r3, [r7, #18]
 800112e:	e012      	b.n	8001156 <DPW_Algorithm+0x9e>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8001130:	8a7b      	ldrh	r3, [r7, #18]
 8001132:	4a2e      	ldr	r2, [pc, #184]	@ (80011ec <DPW_Algorithm+0x134>)
 8001134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <DPW_Algorithm+0x98>
 800113c:	8a7b      	ldrh	r3, [r7, #18]
 800113e:	4a2b      	ldr	r2, [pc, #172]	@ (80011ec <DPW_Algorithm+0x134>)
 8001140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001144:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001148:	d802      	bhi.n	8001150 <DPW_Algorithm+0x98>
			{
				/*break the loop and invoke DPW Right warning*/
				Local_DPWRight = true;
 800114a:	2301      	movs	r3, #1
 800114c:	75bb      	strb	r3, [r7, #22]
				break;
 800114e:	e006      	b.n	800115e <DPW_Algorithm+0xa6>
				Angle_Iterator++)
 8001150:	8a7b      	ldrh	r3, [r7, #18]
 8001152:	3301      	adds	r3, #1
 8001154:	827b      	strh	r3, [r7, #18]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 8001156:	8a7b      	ldrh	r3, [r7, #18]
 8001158:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 800115c:	d3e8      	bcc.n	8001130 <DPW_Algorithm+0x78>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d01d      	beq.n	80011a0 <DPW_Algorithm+0xe8>
 8001164:	7c7b      	ldrb	r3, [r7, #17]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d017      	beq.n	80011a0 <DPW_Algorithm+0xe8>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_L_ID;
 8001170:	2357      	movs	r3, #87	@ 0x57
 8001172:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <DPW_Algorithm+0x138>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	4618      	mov	r0, r3
 800117e:	f006 feb6 	bl	8007eee <osMutexAcquire>

			NRF24_stopListening();
 8001182:	f001 fb1d 	bl	80027c0 <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2103      	movs	r1, #3
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fb23 	bl	80027d8 <NRF24_write>
			NRF24_startListening();
 8001192:	f001 faef 	bl	8002774 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <DPW_Algorithm+0x138>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fef2 	bl	8007f84 <osMutexRelease>
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 80011a0:	7dbb      	ldrb	r3, [r7, #22]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d094      	beq.n	80010d0 <DPW_Algorithm+0x18>
 80011a6:	7c3b      	ldrb	r3, [r7, #16]
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d08e      	beq.n	80010d0 <DPW_Algorithm+0x18>
		{
			/*Invoke the Algorithm*/
			/* Send warning to the Backward Vehicle ( Don't Pass Warning ) via NRF */
			MessageToWarnBackCar[1]=DPW_R_ID;
 80011b2:	2356      	movs	r3, #86	@ 0x56
 80011b4:	737b      	strb	r3, [r7, #13]
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <DPW_Algorithm+0x138>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f04f 31ff 	mov.w	r1, #4294967295
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fe95 	bl	8007eee <osMutexAcquire>

			NRF24_stopListening();
 80011c4:	f001 fafc 	bl	80027c0 <NRF24_stopListening>
			NRF24_write( MessageToWarnBackCar , 3 ) ;
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2103      	movs	r1, #3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fb02 	bl	80027d8 <NRF24_write>
			NRF24_startListening();
 80011d4:	f001 face 	bl	8002774 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <DPW_Algorithm+0x138>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fed1 	bl	8007f84 <osMutexRelease>
	{
 80011e2:	e775      	b.n	80010d0 <DPW_Algorithm+0x18>
 80011e4:	200004f0 	.word	0x200004f0
 80011e8:	20000ed1 	.word	0x20000ed1
 80011ec:	20000bfc 	.word	0x20000bfc
 80011f0:	200004ec 	.word	0x200004ec

080011f4 <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 80011fc:	f001 fb38 	bl	8002870 <NRF24_available>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80e9 	beq.w	80013da <Wireless_Receiving+0x1e6>
			uint8_t Received_Data[32] = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8001220:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <Wireless_Receiving+0x1f0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fe60 	bl	8007eee <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2120      	movs	r1, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fb23 	bl	8002880 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 800123a:	4b6a      	ldr	r3, [pc, #424]	@ (80013e4 <Wireless_Receiving+0x1f0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fea0 	bl	8007f84 <osMutexRelease>

			switch(Received_Data[1])
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	2b60      	cmp	r3, #96	@ 0x60
 8001248:	f000 8095 	beq.w	8001376 <Wireless_Receiving+0x182>
 800124c:	2b60      	cmp	r3, #96	@ 0x60
 800124e:	f300 80bb 	bgt.w	80013c8 <Wireless_Receiving+0x1d4>
 8001252:	2b57      	cmp	r3, #87	@ 0x57
 8001254:	f000 809c 	beq.w	8001390 <Wireless_Receiving+0x19c>
 8001258:	2b57      	cmp	r3, #87	@ 0x57
 800125a:	f300 80b5 	bgt.w	80013c8 <Wireless_Receiving+0x1d4>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d003      	beq.n	800126a <Wireless_Receiving+0x76>
 8001262:	2b56      	cmp	r3, #86	@ 0x56
 8001264:	f000 80a2 	beq.w	80013ac <Wireless_Receiving+0x1b8>
				{
					/* Do Nothing */
				}
				break ;
			default:
				break;
 8001268:	e0ae      	b.n	80013c8 <Wireless_Receiving+0x1d4>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800126a:	7c3b      	ldrb	r3, [r7, #16]
 800126c:	461a      	mov	r2, r3
 800126e:	4b5e      	ldr	r3, [pc, #376]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	330c      	adds	r3, #12
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	db09      	blt.n	8001292 <Wireless_Receiving+0x9e>
 800127e:	7c3b      	ldrb	r3, [r7, #16]
 8001280:	461a      	mov	r2, r3
 8001282:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	330c      	adds	r3, #12
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800128e:	429a      	cmp	r2, r3
 8001290:	dd13      	ble.n	80012ba <Wireless_Receiving+0xc6>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	461a      	mov	r2, r3
 8001296:	4b54      	ldr	r3, [pc, #336]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	330a      	adds	r3, #10
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	db0b      	blt.n	80012be <Wireless_Receiving+0xca>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 80012a6:	7c7b      	ldrb	r3, [r7, #17]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b4f      	ldr	r3, [pc, #316]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	330e      	adds	r3, #14
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dc01      	bgt.n	80012be <Wireless_Receiving+0xca>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <Wireless_Receiving+0xcc>
 80012be:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012d0:	7d3b      	ldrb	r3, [r7, #20]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b44      	ldr	r3, [pc, #272]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 80012e0:	429a      	cmp	r2, r3
 80012e2:	db09      	blt.n	80012f8 <Wireless_Receiving+0x104>
 80012e4:	7d3b      	ldrb	r3, [r7, #20]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3304      	adds	r3, #4
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dd13      	ble.n	8001320 <Wireless_Receiving+0x12c>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	330a      	adds	r3, #10
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	db0b      	blt.n	8001324 <Wireless_Receiving+0x130>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 800130c:	7c7b      	ldrb	r3, [r7, #17]
 800130e:	461a      	mov	r2, r3
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <Wireless_Receiving+0x1f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	330e      	adds	r3, #14
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 800131c:	429a      	cmp	r2, r3
 800131e:	dc01      	bgt.n	8001324 <Wireless_Receiving+0x130>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <Wireless_Receiving+0x132>
 8001324:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8001326:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800132a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(Is_Front){
 8001336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <Wireless_Receiving+0x162>
					Front_Car_ID = Received_Data[0];
 800133e:	7b3a      	ldrb	r2, [r7, #12]
 8001340:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <Wireless_Receiving+0x1f8>)
 8001342:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Back_Car_ID )
 8001344:	7b3a      	ldrb	r2, [r7, #12]
 8001346:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <Wireless_Receiving+0x1fc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d13e      	bne.n	80013cc <Wireless_Receiving+0x1d8>
						Back_Car_ID = 0;
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <Wireless_Receiving+0x1fc>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
				break;
 8001354:	e03a      	b.n	80013cc <Wireless_Receiving+0x1d8>
				else if(Is_Back){
 8001356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800135a:	2b00      	cmp	r3, #0
 800135c:	d036      	beq.n	80013cc <Wireless_Receiving+0x1d8>
					Back_Car_ID = Received_Data[0];
 800135e:	7b3a      	ldrb	r2, [r7, #12]
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <Wireless_Receiving+0x1fc>)
 8001362:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Front_Car_ID )
 8001364:	7b3a      	ldrb	r2, [r7, #12]
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <Wireless_Receiving+0x1f8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d12e      	bne.n	80013cc <Wireless_Receiving+0x1d8>
						Front_Car_ID = 0;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <Wireless_Receiving+0x1f8>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
				break;
 8001374:	e02a      	b.n	80013cc <Wireless_Receiving+0x1d8>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b11      	cmp	r3, #17
 800137a:	d129      	bne.n	80013d0 <Wireless_Receiving+0x1dc>
 800137c:	7b3a      	ldrb	r2, [r7, #12]
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <Wireless_Receiving+0x1f8>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d124      	bne.n	80013d0 <Wireless_Receiving+0x1dc>
					_vSSD1306_EmergencyElectronicBrake();
 8001386:	f7ff fc63 	bl	8000c50 <_vSSD1306_EmergencyElectronicBrake>
					SSD1306_UpdateScreen();
 800138a:	f000 f9d9 	bl	8001740 <SSD1306_UpdateScreen>
				break;
 800138e:	e01f      	b.n	80013d0 <Wireless_Receiving+0x1dc>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	2b11      	cmp	r3, #17
 8001394:	d11e      	bne.n	80013d4 <Wireless_Receiving+0x1e0>
 8001396:	7b3a      	ldrb	r2, [r7, #12]
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <Wireless_Receiving+0x1f8>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d119      	bne.n	80013d4 <Wireless_Receiving+0x1e0>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Left) ;
 80013a0:	20bb      	movs	r0, #187	@ 0xbb
 80013a2:	f7ff fc93 	bl	8000ccc <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 80013a6:	f000 f9cb 	bl	8001740 <SSD1306_UpdateScreen>
				break ;
 80013aa:	e013      	b.n	80013d4 <Wireless_Receiving+0x1e0>
				if( ( Received_Data[2] == CAR_ID ) && ( Received_Data[0] == Front_Car_ID ) )
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	2b11      	cmp	r3, #17
 80013b0:	d112      	bne.n	80013d8 <Wireless_Receiving+0x1e4>
 80013b2:	7b3a      	ldrb	r2, [r7, #12]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <Wireless_Receiving+0x1f8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d10d      	bne.n	80013d8 <Wireless_Receiving+0x1e4>
					_vSSD1306_DontPassWarning(DontPassWarningDirection_Right) ;
 80013bc:	20aa      	movs	r0, #170	@ 0xaa
 80013be:	f7ff fc85 	bl	8000ccc <_vSSD1306_DontPassWarning>
					SSD1306_UpdateScreen() ;
 80013c2:	f000 f9bd 	bl	8001740 <SSD1306_UpdateScreen>
				break ;
 80013c6:	e007      	b.n	80013d8 <Wireless_Receiving+0x1e4>
				break;
 80013c8:	bf00      	nop
 80013ca:	e006      	b.n	80013da <Wireless_Receiving+0x1e6>
				break;
 80013cc:	bf00      	nop
 80013ce:	e004      	b.n	80013da <Wireless_Receiving+0x1e6>
				break;
 80013d0:	bf00      	nop
 80013d2:	e002      	b.n	80013da <Wireless_Receiving+0x1e6>
				break ;
 80013d4:	bf00      	nop
 80013d6:	e000      	b.n	80013da <Wireless_Receiving+0x1e6>
				break ;
 80013d8:	bf00      	nop
			}

		}
		osDelay(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f006 fbff 	bl	8007bde <osDelay>
		if(NRF24_available()){
 80013e0:	e70c      	b.n	80011fc <Wireless_Receiving+0x8>
 80013e2:	bf00      	nop
 80013e4:	200004ec 	.word	0x200004ec
 80013e8:	20000ecc 	.word	0x20000ecc
 80013ec:	20000ed0 	.word	0x20000ed0
 80013f0:	20000ed1 	.word	0x20000ed1

080013f4 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <FCW_Algorithm+0x24>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	2200      	movs	r2, #0
 8001406:	2103      	movs	r1, #3
 8001408:	f006 fc86 	bl	8007d18 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		/* buzzer on as warning */
		_vSSD1306_ForwardCollisionWarning();
 800140c:	f7ff fba6 	bl	8000b5c <_vSSD1306_ForwardCollisionWarning>
		SSD1306_UpdateScreen() ;
 8001410:	f000 f996 	bl	8001740 <SSD1306_UpdateScreen>
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001414:	bf00      	nop
 8001416:	e7f1      	b.n	80013fc <FCW_Algorithm+0x8>
 8001418:	200004f0 	.word	0x200004f0

0800141c <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EEBL_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <EEBL_Algorithm+0x64>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	f006 fc72 	bl	8007d18 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		uint8_t MessageToWarnBackCar[]={CAR_ID,EEBL_ID,Back_Car_ID};
 8001434:	2311      	movs	r3, #17
 8001436:	733b      	strb	r3, [r7, #12]
 8001438:	2360      	movs	r3, #96	@ 0x60
 800143a:	737b      	strb	r3, [r7, #13]
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <EEBL_Algorithm+0x68>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	73bb      	strb	r3, [r7, #14]
		/* Send Message to the Raspberry Pi to Take Actions and Stop Motor */
		HAL_UART_Transmit(&huart1, (uint8_t*)RPI_STOP, 1, HAL_MAX_DELAY ) ;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2201      	movs	r2, #1
 8001448:	2100      	movs	r1, #0
 800144a:	480f      	ldr	r0, [pc, #60]	@ (8001488 <EEBL_Algorithm+0x6c>)
 800144c:	f005 f8e2 	bl	8006614 <HAL_UART_Transmit>

		/* Send warning to the Backward Vehicle to check on Algorithm via NRF */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <EEBL_Algorithm+0x70>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	4618      	mov	r0, r3
 800145a:	f006 fd48 	bl	8007eee <osMutexAcquire>

		NRF24_stopListening();
 800145e:	f001 f9af 	bl	80027c0 <NRF24_stopListening>
		NRF24_write( MessageToWarnBackCar , 3 ) ;
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f9b5 	bl	80027d8 <NRF24_write>
		NRF24_startListening();
 800146e:	f001 f981 	bl	8002774 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <EEBL_Algorithm+0x70>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fd84 	bl	8007f84 <osMutexRelease>
	{
 800147c:	bf00      	nop
 800147e:	e7d1      	b.n	8001424 <EEBL_Algorithm+0x8>
 8001480:	200004f0 	.word	0x200004f0
 8001484:	20000ed1 	.word	0x20000ed1
 8001488:	20000418 	.word	0x20000418
 800148c:	200004ec 	.word	0x200004ec

08001490 <Ask_LidarData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ask_LidarData */
void Ask_LidarData(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ask_LidarData */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)ASK_DATA, 1, HAL_MAX_DELAY ) ;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	2201      	movs	r2, #1
 800149e:	21f1      	movs	r1, #241	@ 0xf1
 80014a0:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <Ask_LidarData+0x24>)
 80014a2:	f005 f8b7 	bl	8006614 <HAL_UART_Transmit>

		osDelay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014aa:	f006 fb98 	bl	8007bde <osDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)ASK_DATA, 1, HAL_MAX_DELAY ) ;
 80014ae:	bf00      	nop
 80014b0:	e7f2      	b.n	8001498 <Ask_LidarData+0x8>
 80014b2:	bf00      	nop
 80014b4:	20000418 	.word	0x20000418

080014b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ca:	f001 fd1f 	bl	8002f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40000800 	.word	0x40000800

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	81fb      	strh	r3, [r7, #14]
 80014f6:	460b      	mov	r3, r1
 80014f8:	81bb      	strh	r3, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	3307      	adds	r3, #7
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <SSD1306_DrawBitmap+0x22>
 8001508:	3307      	adds	r3, #7
 800150a:	10db      	asrs	r3, r3, #3
 800150c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001512:	2300      	movs	r3, #0
 8001514:	82bb      	strh	r3, [r7, #20]
 8001516:	e044      	b.n	80015a2 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	827b      	strh	r3, [r7, #18]
 800151c:	e02f      	b.n	800157e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800151e:	8a7b      	ldrh	r3, [r7, #18]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	e012      	b.n	8001556 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001530:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001534:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001538:	fb03 f202 	mul.w	r2, r3, r2
 800153c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001540:	2b00      	cmp	r3, #0
 8001542:	da00      	bge.n	8001546 <SSD1306_DrawBitmap+0x5e>
 8001544:	3307      	adds	r3, #7
 8001546:	10db      	asrs	r3, r3, #3
 8001548:	b21b      	sxth	r3, r3
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	da09      	bge.n	8001572 <SSD1306_DrawBitmap+0x8a>
 800155e:	89fa      	ldrh	r2, [r7, #14]
 8001560:	8a7b      	ldrh	r3, [r7, #18]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	89b9      	ldrh	r1, [r7, #12]
 8001568:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f92d 	bl	80017cc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001572:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001576:	b29b      	uxth	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	b29b      	uxth	r3, r3
 800157c:	827b      	strh	r3, [r7, #18]
 800157e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbc9      	blt.n	800151e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800158a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800158e:	b29b      	uxth	r3, r3
 8001590:	3301      	adds	r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	82bb      	strh	r3, [r7, #20]
 8001596:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800159a:	b29b      	uxth	r3, r3
 800159c:	3301      	adds	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	81bb      	strh	r3, [r7, #12]
 80015a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80015a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbb4      	blt.n	8001518 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015be:	f000 fb8d 	bl	8001cdc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015c2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015c6:	2201      	movs	r2, #1
 80015c8:	2178      	movs	r1, #120	@ 0x78
 80015ca:	485b      	ldr	r0, [pc, #364]	@ (8001738 <SSD1306_Init+0x180>)
 80015cc:	f002 fdbe 	bl	800414c <HAL_I2C_IsDeviceReady>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e0a9      	b.n	800172e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015da:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80015de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015e0:	e002      	b.n	80015e8 <SSD1306_Init+0x30>
		p--;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015ee:	22ae      	movs	r2, #174	@ 0xae
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	@ 0x78
 80015f4:	f000 fbee 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80015f8:	2220      	movs	r2, #32
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	@ 0x78
 80015fe:	f000 fbe9 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001602:	2210      	movs	r2, #16
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	@ 0x78
 8001608:	f000 fbe4 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800160c:	22b0      	movs	r2, #176	@ 0xb0
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	@ 0x78
 8001612:	f000 fbdf 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001616:	22c8      	movs	r2, #200	@ 0xc8
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	@ 0x78
 800161c:	f000 fbda 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	@ 0x78
 8001626:	f000 fbd5 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800162a:	2210      	movs	r2, #16
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	@ 0x78
 8001630:	f000 fbd0 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001634:	2240      	movs	r2, #64	@ 0x40
 8001636:	2100      	movs	r1, #0
 8001638:	2078      	movs	r0, #120	@ 0x78
 800163a:	f000 fbcb 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800163e:	2281      	movs	r2, #129	@ 0x81
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	@ 0x78
 8001644:	f000 fbc6 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001648:	22ff      	movs	r2, #255	@ 0xff
 800164a:	2100      	movs	r1, #0
 800164c:	2078      	movs	r0, #120	@ 0x78
 800164e:	f000 fbc1 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001652:	22a1      	movs	r2, #161	@ 0xa1
 8001654:	2100      	movs	r1, #0
 8001656:	2078      	movs	r0, #120	@ 0x78
 8001658:	f000 fbbc 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800165c:	22a6      	movs	r2, #166	@ 0xa6
 800165e:	2100      	movs	r1, #0
 8001660:	2078      	movs	r0, #120	@ 0x78
 8001662:	f000 fbb7 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001666:	22a8      	movs	r2, #168	@ 0xa8
 8001668:	2100      	movs	r1, #0
 800166a:	2078      	movs	r0, #120	@ 0x78
 800166c:	f000 fbb2 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001670:	223f      	movs	r2, #63	@ 0x3f
 8001672:	2100      	movs	r1, #0
 8001674:	2078      	movs	r0, #120	@ 0x78
 8001676:	f000 fbad 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800167a:	22a4      	movs	r2, #164	@ 0xa4
 800167c:	2100      	movs	r1, #0
 800167e:	2078      	movs	r0, #120	@ 0x78
 8001680:	f000 fba8 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001684:	22d3      	movs	r2, #211	@ 0xd3
 8001686:	2100      	movs	r1, #0
 8001688:	2078      	movs	r0, #120	@ 0x78
 800168a:	f000 fba3 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	@ 0x78
 8001694:	f000 fb9e 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001698:	22d5      	movs	r2, #213	@ 0xd5
 800169a:	2100      	movs	r1, #0
 800169c:	2078      	movs	r0, #120	@ 0x78
 800169e:	f000 fb99 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016a2:	22f0      	movs	r2, #240	@ 0xf0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2078      	movs	r0, #120	@ 0x78
 80016a8:	f000 fb94 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016ac:	22d9      	movs	r2, #217	@ 0xd9
 80016ae:	2100      	movs	r1, #0
 80016b0:	2078      	movs	r0, #120	@ 0x78
 80016b2:	f000 fb8f 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016b6:	2222      	movs	r2, #34	@ 0x22
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	@ 0x78
 80016bc:	f000 fb8a 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016c0:	22da      	movs	r2, #218	@ 0xda
 80016c2:	2100      	movs	r1, #0
 80016c4:	2078      	movs	r0, #120	@ 0x78
 80016c6:	f000 fb85 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016ca:	2212      	movs	r2, #18
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	@ 0x78
 80016d0:	f000 fb80 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016d4:	22db      	movs	r2, #219	@ 0xdb
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	@ 0x78
 80016da:	f000 fb7b 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016de:	2220      	movs	r2, #32
 80016e0:	2100      	movs	r1, #0
 80016e2:	2078      	movs	r0, #120	@ 0x78
 80016e4:	f000 fb76 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80016e8:	228d      	movs	r2, #141	@ 0x8d
 80016ea:	2100      	movs	r1, #0
 80016ec:	2078      	movs	r0, #120	@ 0x78
 80016ee:	f000 fb71 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016f2:	2214      	movs	r2, #20
 80016f4:	2100      	movs	r1, #0
 80016f6:	2078      	movs	r0, #120	@ 0x78
 80016f8:	f000 fb6c 	bl	8001dd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016fc:	22af      	movs	r2, #175	@ 0xaf
 80016fe:	2100      	movs	r1, #0
 8001700:	2078      	movs	r0, #120	@ 0x78
 8001702:	f000 fb67 	bl	8001dd4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001706:	222e      	movs	r2, #46	@ 0x2e
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	@ 0x78
 800170c:	f000 fb62 	bl	8001dd4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f843 	bl	800179c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001716:	f000 f813 	bl	8001740 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <SSD1306_Init+0x184>)
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <SSD1306_Init+0x184>)
 8001722:	2200      	movs	r2, #0
 8001724:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SSD1306_Init+0x184>)
 8001728:	2201      	movs	r2, #1
 800172a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000324 	.word	0x20000324
 800173c:	200012e4 	.word	0x200012e4

08001740 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e01d      	b.n	8001788 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3b50      	subs	r3, #80	@ 0x50
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	@ 0x78
 8001758:	f000 fb3c 	bl	8001dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	@ 0x78
 8001762:	f000 fb37 	bl	8001dd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001766:	2210      	movs	r2, #16
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	@ 0x78
 800176c:	f000 fb32 	bl	8001dd4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	01db      	lsls	r3, r3, #7
 8001774:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <SSD1306_UpdateScreen+0x58>)
 8001776:	441a      	add	r2, r3
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	2078      	movs	r0, #120	@ 0x78
 800177e:	f000 fac3 	bl	8001d08 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	3301      	adds	r3, #1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d9de      	bls.n	800174c <SSD1306_UpdateScreen+0xc>
	}
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000ee4 	.word	0x20000ee4

0800179c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <SSD1306_Fill+0x14>
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <SSD1306_Fill+0x16>
 80017b0:	23ff      	movs	r3, #255	@ 0xff
 80017b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b6:	4619      	mov	r1, r3
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <SSD1306_Fill+0x2c>)
 80017ba:	f00a f82d 	bl	800b818 <memset>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000ee4 	.word	0x20000ee4

080017cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	460b      	mov	r3, r1
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	70fb      	strb	r3, [r7, #3]
	if (
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80017e2:	d848      	bhi.n	8001876 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80017e8:	d845      	bhi.n	8001876 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <SSD1306_DrawPixel+0xb8>)
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11a      	bne.n	800183c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	b298      	uxth	r0, r3
 800180e:	4603      	mov	r3, r0
 8001810:	01db      	lsls	r3, r3, #7
 8001812:	4413      	add	r3, r2
 8001814:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <SSD1306_DrawPixel+0xbc>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	b25a      	sxtb	r2, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	b25b      	sxtb	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b259      	sxtb	r1, r3
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	4603      	mov	r3, r0
 8001830:	01db      	lsls	r3, r3, #7
 8001832:	4413      	add	r3, r2
 8001834:	b2c9      	uxtb	r1, r1
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <SSD1306_DrawPixel+0xbc>)
 8001838:	54d1      	strb	r1, [r2, r3]
 800183a:	e01d      	b.n	8001878 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	b298      	uxth	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	01db      	lsls	r3, r3, #7
 8001848:	4413      	add	r3, r2
 800184a:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <SSD1306_DrawPixel+0xbc>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	b25a      	sxtb	r2, r3
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	b259      	sxtb	r1, r3
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	4603      	mov	r3, r0
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	4413      	add	r3, r2
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <SSD1306_DrawPixel+0xbc>)
 8001872:	54d1      	strb	r1, [r2, r3]
 8001874:	e000      	b.n	8001878 <SSD1306_DrawPixel+0xac>
		return;
 8001876:	bf00      	nop
	}
}
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200012e4 	.word	0x200012e4
 8001888:	20000ee4 	.word	0x20000ee4

0800188c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4613      	mov	r3, r2
 800189a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800189c:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SSD1306_GotoXY+0x28>)
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <SSD1306_GotoXY+0x28>)
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	8053      	strh	r3, [r2, #2]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	200012e4 	.word	0x200012e4

080018b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <SSD1306_Putc+0xf8>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
	if (
 80018d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d6:	dc07      	bgt.n	80018e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <SSD1306_Putc+0xf8>)
 80018da:	885b      	ldrh	r3, [r3, #2]
 80018dc:	461a      	mov	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018e6:	dd01      	ble.n	80018ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e05d      	b.n	80019a8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e04b      	b.n	800198a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	3b20      	subs	r3, #32
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	7849      	ldrb	r1, [r1, #1]
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4619      	mov	r1, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	440b      	add	r3, r1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e030      	b.n	8001978 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <SSD1306_Putc+0xf8>)
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4413      	add	r3, r2
 8001930:	b298      	uxth	r0, r3
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <SSD1306_Putc+0xf8>)
 8001934:	885a      	ldrh	r2, [r3, #2]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4413      	add	r3, r2
 800193c:	b29b      	uxth	r3, r3
 800193e:	79ba      	ldrb	r2, [r7, #6]
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff ff43 	bl	80017cc <SSD1306_DrawPixel>
 8001946:	e014      	b.n	8001972 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <SSD1306_Putc+0xf8>)
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	b29b      	uxth	r3, r3
 8001950:	4413      	add	r3, r2
 8001952:	b298      	uxth	r0, r3
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <SSD1306_Putc+0xf8>)
 8001956:	885a      	ldrh	r2, [r3, #2]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b299      	uxth	r1, r3
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	f7ff ff2d 	bl	80017cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4293      	cmp	r3, r2
 8001982:	d3c8      	bcc.n	8001916 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	461a      	mov	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	4293      	cmp	r3, r2
 8001994:	d3ad      	bcc.n	80018f2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SSD1306_Putc+0xf8>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <SSD1306_Putc+0xf8>)
 80019a4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200012e4 	.word	0x200012e4

080019b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019c2:	e012      	b.n	80019ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff73 	bl	80018b8 <SSD1306_Putc>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d002      	beq.n	80019e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	e008      	b.n	80019f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1e8      	bne.n	80019c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80019fe:	b590      	push	{r4, r7, lr}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4604      	mov	r4, r0
 8001a06:	4608      	mov	r0, r1
 8001a08:	4611      	mov	r1, r2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4603      	mov	r3, r0
 8001a12:	80bb      	strh	r3, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a20:	d901      	bls.n	8001a26 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001a22:	237f      	movs	r3, #127	@ 0x7f
 8001a24:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a2a:	d901      	bls.n	8001a30 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001a2c:	237f      	movs	r3, #127	@ 0x7f
 8001a2e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a34:	d901      	bls.n	8001a3a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001a36:	233f      	movs	r3, #63	@ 0x3f
 8001a38:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001a3a:	883b      	ldrh	r3, [r7, #0]
 8001a3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a3e:	d901      	bls.n	8001a44 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001a40:	233f      	movs	r3, #63	@ 0x3f
 8001a42:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d205      	bcs.n	8001a58 <SSD1306_DrawLine+0x5a>
 8001a4c:	887a      	ldrh	r2, [r7, #2]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	e004      	b.n	8001a62 <SSD1306_DrawLine+0x64>
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001a64:	88ba      	ldrh	r2, [r7, #4]
 8001a66:	883b      	ldrh	r3, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d205      	bcs.n	8001a78 <SSD1306_DrawLine+0x7a>
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	e004      	b.n	8001a82 <SSD1306_DrawLine+0x84>
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	883b      	ldrh	r3, [r7, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d201      	bcs.n	8001a90 <SSD1306_DrawLine+0x92>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e001      	b.n	8001a94 <SSD1306_DrawLine+0x96>
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001a96:	88ba      	ldrh	r2, [r7, #4]
 8001a98:	883b      	ldrh	r3, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d201      	bcs.n	8001aa2 <SSD1306_DrawLine+0xa4>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e001      	b.n	8001aa6 <SSD1306_DrawLine+0xa8>
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001aa8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dd06      	ble.n	8001ac2 <SSD1306_DrawLine+0xc4>
 8001ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ab8:	0fda      	lsrs	r2, r3, #31
 8001aba:	4413      	add	r3, r2
 8001abc:	105b      	asrs	r3, r3, #1
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	e006      	b.n	8001ad0 <SSD1306_DrawLine+0xd2>
 8001ac2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ac6:	0fda      	lsrs	r2, r3, #31
 8001ac8:	4413      	add	r3, r2
 8001aca:	105b      	asrs	r3, r3, #1
 8001acc:	425b      	negs	r3, r3
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d129      	bne.n	8001b2e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001ada:	883a      	ldrh	r2, [r7, #0]
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d205      	bcs.n	8001aee <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001ae2:	883b      	ldrh	r3, [r7, #0]
 8001ae4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001aea:	893b      	ldrh	r3, [r7, #8]
 8001aec:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d205      	bcs.n	8001b02 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001afe:	893b      	ldrh	r3, [r7, #8]
 8001b00:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001b02:	88bb      	ldrh	r3, [r7, #4]
 8001b04:	82bb      	strh	r3, [r7, #20]
 8001b06:	e00c      	b.n	8001b22 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001b08:	8ab9      	ldrh	r1, [r7, #20]
 8001b0a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fe5b 	bl	80017cc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	82bb      	strh	r3, [r7, #20]
 8001b22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dded      	ble.n	8001b08 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8001b2c:	e05f      	b.n	8001bee <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8001b2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d129      	bne.n	8001b8a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001b36:	883a      	ldrh	r2, [r7, #0]
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d205      	bcs.n	8001b4a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001b3e:	883b      	ldrh	r3, [r7, #0]
 8001b40:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001b46:	893b      	ldrh	r3, [r7, #8]
 8001b48:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d205      	bcs.n	8001b5e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001b5a:	893b      	ldrh	r3, [r7, #8]
 8001b5c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	82bb      	strh	r3, [r7, #20]
 8001b62:	e00c      	b.n	8001b7e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001b64:	8abb      	ldrh	r3, [r7, #20]
 8001b66:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b6a:	88b9      	ldrh	r1, [r7, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe2d 	bl	80017cc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001b72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	82bb      	strh	r3, [r7, #20]
 8001b7e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dded      	ble.n	8001b64 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8001b88:	e031      	b.n	8001bee <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001b8a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b8e:	88b9      	ldrh	r1, [r7, #4]
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe1a 	bl	80017cc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d103      	bne.n	8001ba8 <SSD1306_DrawLine+0x1aa>
 8001ba0:	88ba      	ldrh	r2, [r7, #4]
 8001ba2:	883b      	ldrh	r3, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d021      	beq.n	8001bec <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001ba8:	8afb      	ldrh	r3, [r7, #22]
 8001baa:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001bac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dd08      	ble.n	8001bcc <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001bba:	8afa      	ldrh	r2, [r7, #22]
 8001bbc:	8a3b      	ldrh	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001bc4:	89fa      	ldrh	r2, [r7, #14]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4413      	add	r3, r2
 8001bca:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001bcc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dad8      	bge.n	8001b8a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001bd8:	8afa      	ldrh	r2, [r7, #22]
 8001bda:	8a7b      	ldrh	r3, [r7, #18]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001be2:	89ba      	ldrh	r2, [r7, #12]
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001bea:	e7ce      	b.n	8001b8a <SSD1306_DrawLine+0x18c>
			break;
 8001bec:	bf00      	nop
		}
	}
}
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	4603      	mov	r3, r0
 8001c08:	80bb      	strh	r3, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	807b      	strh	r3, [r7, #2]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c16:	d853      	bhi.n	8001cc0 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c1c:	d850      	bhi.n	8001cc0 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4413      	add	r3, r2
 8001c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c26:	dd03      	ble.n	8001c30 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001c2e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001c30:	88ba      	ldrh	r2, [r7, #4]
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c38:	dd03      	ble.n	8001c42 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001c3a:	88bb      	ldrh	r3, [r7, #4]
 8001c3c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001c40:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	88bc      	ldrh	r4, [r7, #4]
 8001c4c:	88b9      	ldrh	r1, [r7, #4]
 8001c4e:	88f8      	ldrh	r0, [r7, #6]
 8001c50:	7e3b      	ldrb	r3, [r7, #24]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4623      	mov	r3, r4
 8001c56:	f7ff fed2 	bl	80019fe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001c5a:	88ba      	ldrh	r2, [r7, #4]
 8001c5c:	883b      	ldrh	r3, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b299      	uxth	r1, r3
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4413      	add	r3, r2
 8001c68:	b29c      	uxth	r4, r3
 8001c6a:	88ba      	ldrh	r2, [r7, #4]
 8001c6c:	883b      	ldrh	r3, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	88f8      	ldrh	r0, [r7, #6]
 8001c74:	7e3b      	ldrb	r3, [r7, #24]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	f7ff febf 	bl	80019fe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001c80:	88ba      	ldrh	r2, [r7, #4]
 8001c82:	883b      	ldrh	r3, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	b29c      	uxth	r4, r3
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	88b9      	ldrh	r1, [r7, #4]
 8001c8c:	88f8      	ldrh	r0, [r7, #6]
 8001c8e:	7e3b      	ldrb	r3, [r7, #24]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7ff feb3 	bl	80019fe <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b298      	uxth	r0, r3
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b29c      	uxth	r4, r3
 8001ca8:	88ba      	ldrh	r2, [r7, #4]
 8001caa:	883b      	ldrh	r3, [r7, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	88b9      	ldrh	r1, [r7, #4]
 8001cb2:	7e3b      	ldrb	r3, [r7, #24]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	4622      	mov	r2, r4
 8001cba:	f7ff fea0 	bl	80019fe <SSD1306_DrawLine>
 8001cbe:	e000      	b.n	8001cc2 <SSD1306_DrawRectangle+0xce>
		return;
 8001cc0:	bf00      	nop
}
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}

08001cc8 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff fd65 	bl	800179c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001cd2:	f7ff fd35 	bl	8001740 <SSD1306_UpdateScreen>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <ssd1306_I2C_Init+0x28>)
 8001ce4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ce6:	e002      	b.n	8001cee <ssd1306_I2C_Init+0x12>
		p--;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0003d090 	.word	0x0003d090

08001d08 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0c7      	sub	sp, #284	@ 0x11c
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001d16:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001d1a:	600a      	str	r2, [r1, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d22:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d26:	4622      	mov	r2, r4
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d2e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001d32:	4602      	mov	r2, r0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d3e:	460a      	mov	r2, r1
 8001d40:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d4a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d4e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d5c:	e015      	b.n	8001d8a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d62:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d66:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d72:	3301      	adds	r3, #1
 8001d74:	7811      	ldrb	r1, [r2, #0]
 8001d76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d7a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d7e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d80:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d94:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d8df      	bhi.n	8001d5e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001da2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f107 020c 	add.w	r2, r7, #12
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	9000      	str	r0, [sp, #0]
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001dc2:	f002 f8c5 	bl	8003f50 <HAL_I2C_Master_Transmit>
}
 8001dc6:	bf00      	nop
 8001dc8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	20000324 	.word	0x20000324

08001dd4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	460b      	mov	r3, r1
 8001de0:	71bb      	strb	r3, [r7, #6]
 8001de2:	4613      	mov	r3, r2
 8001de4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	230a      	movs	r3, #10
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <ssd1306_I2C_Write+0x38>)
 8001dfe:	f002 f8a7 	bl	8003f50 <HAL_I2C_Master_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000324 	.word	0x20000324

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_MspInit+0x54>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	210f      	movs	r1, #15
 8001e52:	f06f 0001 	mvn.w	r0, #1
 8001e56:	f001 f955 	bl	8003104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <HAL_I2C_MspInit+0x84>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12b      	bne.n	8001ee2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea6:	23c0      	movs	r3, #192	@ 0xc0
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <HAL_I2C_MspInit+0x8c>)
 8001ec2:	f001 fd4b 	bl	800395c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_I2C_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	@ 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	@ (8001f7c <HAL_SPI_MspInit+0x84>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12b      	bne.n	8001f72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f52:	23e0      	movs	r3, #224	@ 0xe0
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f62:	2305      	movs	r3, #5
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <HAL_SPI_MspInit+0x8c>)
 8001f6e:	f001 fcf5 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013000 	.word	0x40013000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x48>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d115      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	201d      	movs	r0, #29
 8001fbc:	f001 f8a2 	bl	8003104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fc0:	201d      	movs	r0, #29
 8001fc2:	f001 f8bb 	bl	800313c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a35      	ldr	r2, [pc, #212]	@ (80020cc <HAL_UART_MspInit+0xf4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d163      	bne.n	80020c2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	4a33      	ldr	r2, [pc, #204]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6453      	str	r3, [r2, #68]	@ 0x44
 800200a:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a2c      	ldr	r2, [pc, #176]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_UART_MspInit+0xf8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002032:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4821      	ldr	r0, [pc, #132]	@ (80020d4 <HAL_UART_MspInit+0xfc>)
 8002050:	f001 fc84 	bl	800395c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002056:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <HAL_UART_MspInit+0x104>)
 8002058:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 800205c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002060:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002074:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002088:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002096:	4810      	ldr	r0, [pc, #64]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 8002098:	f001 f85e 	bl	8003158 <HAL_DMA_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020a2:	f7ff fa1b 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 80020aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ac:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_UART_MspInit+0x100>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	2025      	movs	r0, #37	@ 0x25
 80020b8:	f001 f824 	bl	8003104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020bc:	2025      	movs	r0, #37	@ 0x25
 80020be:	f001 f83d 	bl	800313c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	@ 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	20000460 	.word	0x20000460
 80020dc:	40026440 	.word	0x40026440

080020e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08e      	sub	sp, #56	@ 0x38
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_InitTick+0xe4>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	4a32      	ldr	r2, [pc, #200]	@ (80021c4 <HAL_InitTick+0xe4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002100:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_InitTick+0xe4>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800210c:	f107 0210 	add.w	r2, r7, #16
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fffa 	bl	8005110 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002126:	f002 ffcb 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 800212a:	6378      	str	r0, [r7, #52]	@ 0x34
 800212c:	e004      	b.n	8002138 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800212e:	f002 ffc7 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8002132:	4603      	mov	r3, r0
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213a:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_InitTick+0xe8>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3b01      	subs	r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_InitTick+0xec>)
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_InitTick+0xf0>)
 800214a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_InitTick+0xec>)
 800214e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002152:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_InitTick+0xec>)
 8002156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002158:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_InitTick+0xec>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_InitTick+0xec>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_InitTick+0xec>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800216c:	4817      	ldr	r0, [pc, #92]	@ (80021cc <HAL_InitTick+0xec>)
 800216e:	f003 fdd7 	bl	8005d20 <HAL_TIM_Base_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11b      	bne.n	80021b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002180:	4812      	ldr	r0, [pc, #72]	@ (80021cc <HAL_InitTick+0xec>)
 8002182:	f003 fe1d 	bl	8005dc0 <HAL_TIM_Base_Start_IT>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800218c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002194:	201e      	movs	r0, #30
 8002196:	f000 ffd1 	bl	800313c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d808      	bhi.n	80021b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	201e      	movs	r0, #30
 80021a6:	f000 ffad 	bl	8003104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <HAL_InitTick+0xf4>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e002      	b.n	80021b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3738      	adds	r7, #56	@ 0x38
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	200012ec 	.word	0x200012ec
 80021d0:	40000800 	.word	0x40000800
 80021d4:	200002ac 	.word	0x200002ac

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <NMI_Handler+0x4>

080021e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <MemManage_Handler+0x4>

080021f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <UsageFault_Handler+0x4>

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002212:	2004      	movs	r0, #4
 8002214:	f001 fd40 	bl	8003c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <TIM3_IRQHandler+0x10>)
 8002222:	f003 fe2f 	bl	8005e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200003d0 	.word	0x200003d0

08002230 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <TIM4_IRQHandler+0x10>)
 8002236:	f003 fe25 	bl	8005e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200012ec 	.word	0x200012ec

08002244 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <USART1_IRQHandler+0x10>)
 800224a:	f004 fa93 	bl	8006774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000418 	.word	0x20000418

08002258 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <DMA2_Stream2_IRQHandler+0x10>)
 800225e:	f001 f913 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000460 	.word	0x20000460

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <SystemInit+0x20>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	4a05      	ldr	r2, [pc, #20]	@ (800228c <SystemInit+0x20>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002294:	f7ff ffea 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	@ (80022cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	@ (80022dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022be:	f009 fab9 	bl	800b834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe f91b 	bl	80004fc <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80022d4:	0800c488 	.word	0x0800c488
  ldr r2, =_sbss
 80022d8:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80022dc:	20005e4c 	.word	0x20005e4c

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>
	...

080022e4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <NRF24_DelayMicroSeconds+0x3c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <NRF24_DelayMicroSeconds+0x40>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9a      	lsrs	r2, r3, #18
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002304:	bf00      	nop
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1fa      	bne.n	8002306 <NRF24_DelayMicroSeconds+0x22>
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200002a8 	.word	0x200002a8
 8002324:	165e9f81 	.word	0x165e9f81

08002328 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <NRF24_csn+0x20>
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <NRF24_csn+0x38>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <NRF24_csn+0x3c>)
 800233c:	8811      	ldrh	r1, [r2, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fc8f 	bl	8003c64 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002346:	e007      	b.n	8002358 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <NRF24_csn+0x38>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a05      	ldr	r2, [pc, #20]	@ (8002364 <NRF24_csn+0x3c>)
 800234e:	8811      	ldrh	r1, [r2, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f001 fc86 	bl	8003c64 <HAL_GPIO_WritePin>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20001348 	.word	0x20001348
 8002364:	2000134c 	.word	0x2000134c

08002368 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <NRF24_ce+0x20>
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <NRF24_ce+0x38>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <NRF24_ce+0x3c>)
 800237c:	8811      	ldrh	r1, [r2, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f001 fc6f 	bl	8003c64 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002386:	e007      	b.n	8002398 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <NRF24_ce+0x38>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <NRF24_ce+0x3c>)
 800238e:	8811      	ldrh	r1, [r2, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fc66 	bl	8003c64 <HAL_GPIO_WritePin>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20001348 	.word	0x20001348
 80023a4:	2000134e 	.word	0x2000134e

080023a8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff ffb8 	bl	8002328 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80023c2:	f107 010c 	add.w	r1, r7, #12
 80023c6:	2364      	movs	r3, #100	@ 0x64
 80023c8:	2201      	movs	r2, #1
 80023ca:	480a      	ldr	r0, [pc, #40]	@ (80023f4 <NRF24_read_register+0x4c>)
 80023cc:	f002 ff5b 	bl	8005286 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	2364      	movs	r3, #100	@ 0x64
 80023d8:	2201      	movs	r2, #1
 80023da:	4806      	ldr	r0, [pc, #24]	@ (80023f4 <NRF24_read_register+0x4c>)
 80023dc:	f003 f896 	bl	800550c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80023e0:	7b7b      	ldrb	r3, [r7, #13]
 80023e2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff ff9f 	bl	8002328 <NRF24_csn>
	return retData;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20001350 	.word	0x20001350

080023f8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff ff8d 	bl	8002328 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	b2db      	uxtb	r3, r3
 8002416:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	2364      	movs	r3, #100	@ 0x64
 800241e:	2201      	movs	r2, #1
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <NRF24_read_registerN+0x4c>)
 8002422:	f002 ff30 	bl	8005286 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	b29a      	uxth	r2, r3
 800242a:	2364      	movs	r3, #100	@ 0x64
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <NRF24_read_registerN+0x4c>)
 8002430:	f003 f86c 	bl	800550c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8002434:	2001      	movs	r0, #1
 8002436:	f7ff ff77 	bl	8002328 <NRF24_csn>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001350 	.word	0x20001350

08002448 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	460a      	mov	r2, r1
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4613      	mov	r3, r2
 8002456:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff ff65 	bl	8002328 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f043 0320 	orr.w	r3, r3, #32
 8002464:	b2db      	uxtb	r3, r3
 8002466:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002468:	79bb      	ldrb	r3, [r7, #6]
 800246a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800246c:	f107 010c 	add.w	r1, r7, #12
 8002470:	2364      	movs	r3, #100	@ 0x64
 8002472:	2202      	movs	r2, #2
 8002474:	4804      	ldr	r0, [pc, #16]	@ (8002488 <NRF24_write_register+0x40>)
 8002476:	f002 ff06 	bl	8005286 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff ff54 	bl	8002328 <NRF24_csn>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20001350 	.word	0x20001350

0800248c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff ff43 	bl	8002328 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f043 0320 	orr.w	r3, r3, #32
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80024ac:	f107 010c 	add.w	r1, r7, #12
 80024b0:	2364      	movs	r3, #100	@ 0x64
 80024b2:	2201      	movs	r2, #1
 80024b4:	4808      	ldr	r0, [pc, #32]	@ (80024d8 <NRF24_write_registerN+0x4c>)
 80024b6:	f002 fee6 	bl	8005286 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	2364      	movs	r3, #100	@ 0x64
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <NRF24_write_registerN+0x4c>)
 80024c4:	f002 fedf 	bl	8005286 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff ff2d 	bl	8002328 <NRF24_csn>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20001350 	.word	0x20001350

080024dc <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7ff ff1d 	bl	8002328 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80024ee:	23a0      	movs	r3, #160	@ 0xa0
 80024f0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80024f2:	f107 010f 	add.w	r1, r7, #15
 80024f6:	2364      	movs	r3, #100	@ 0x64
 80024f8:	2201      	movs	r2, #1
 80024fa:	4808      	ldr	r0, [pc, #32]	@ (800251c <NRF24_write_payload+0x40>)
 80024fc:	f002 fec3 	bl	8005286 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2364      	movs	r3, #100	@ 0x64
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <NRF24_write_payload+0x40>)
 800250a:	f002 febc 	bl	8005286 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800250e:	2001      	movs	r0, #1
 8002510:	f7ff ff0a 	bl	8002328 <NRF24_csn>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20001350 	.word	0x20001350

08002520 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800252c:	f000 fa82 	bl	8002a34 <NRF24_getPayloadSize>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	4293      	cmp	r3, r2
 8002538:	d303      	bcc.n	8002542 <NRF24_read_payload+0x22>
 800253a:	f000 fa7b 	bl	8002a34 <NRF24_getPayloadSize>
 800253e:	4603      	mov	r3, r0
 8002540:	e000      	b.n	8002544 <NRF24_read_payload+0x24>
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff feee 	bl	8002328 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800254c:	2361      	movs	r3, #97	@ 0x61
 800254e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002550:	f107 010e 	add.w	r1, r7, #14
 8002554:	2364      	movs	r3, #100	@ 0x64
 8002556:	2201      	movs	r2, #1
 8002558:	4808      	ldr	r0, [pc, #32]	@ (800257c <NRF24_read_payload+0x5c>)
 800255a:	f002 fe94 	bl	8005286 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b29a      	uxth	r2, r3
 8002562:	2364      	movs	r3, #100	@ 0x64
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4805      	ldr	r0, [pc, #20]	@ (800257c <NRF24_read_payload+0x5c>)
 8002568:	f002 ffd0 	bl	800550c <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff fedb 	bl	8002328 <NRF24_csn>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20001350 	.word	0x20001350

08002580 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002584:	21ff      	movs	r1, #255	@ 0xff
 8002586:	20e1      	movs	r0, #225	@ 0xe1
 8002588:	f7ff ff5e 	bl	8002448 <NRF24_write_register>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002594:	21ff      	movs	r1, #255	@ 0xff
 8002596:	20e2      	movs	r0, #226	@ 0xe2
 8002598:	f7ff ff56 	bl	8002448 <NRF24_write_register>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80025a6:	2007      	movs	r0, #7
 80025a8:	f7ff fefe 	bl	80023a8 <NRF24_read_register>
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80025b0:	79fb      	ldrb	r3, [r7, #7]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 80025bc:	b084      	sub	sp, #16
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f107 0c10 	add.w	ip, r7, #16
 80025c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80025cc:	4b64      	ldr	r3, [pc, #400]	@ (8002760 <NRF24_begin+0x1a4>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2258      	movs	r2, #88	@ 0x58
 80025d6:	4619      	mov	r1, r3
 80025d8:	f009 f950 	bl	800b87c <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 80025dc:	4b61      	ldr	r3, [pc, #388]	@ (8002764 <NRF24_begin+0x1a8>)
 80025de:	4a62      	ldr	r2, [pc, #392]	@ (8002768 <NRF24_begin+0x1ac>)
 80025e0:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 80025e2:	4b62      	ldr	r3, [pc, #392]	@ (800276c <NRF24_begin+0x1b0>)
 80025e4:	2208      	movs	r2, #8
 80025e6:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 80025e8:	4b61      	ldr	r3, [pc, #388]	@ (8002770 <NRF24_begin+0x1b4>)
 80025ea:	2210      	movs	r2, #16
 80025ec:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff fe9a 	bl	8002328 <NRF24_csn>
	NRF24_ce(0);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff feb7 	bl	8002368 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80025fa:	2005      	movs	r0, #5
 80025fc:	f000 fca6 	bl	8002f4c <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8002600:	2108      	movs	r1, #8
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff ff20 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8002608:	213f      	movs	r1, #63	@ 0x3f
 800260a:	2001      	movs	r0, #1
 800260c:	f7ff ff1c 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8002610:	2103      	movs	r1, #3
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff ff18 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8002618:	2103      	movs	r1, #3
 800261a:	2003      	movs	r0, #3
 800261c:	f7ff ff14 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8002620:	2103      	movs	r1, #3
 8002622:	2004      	movs	r0, #4
 8002624:	f7ff ff10 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8002628:	2102      	movs	r1, #2
 800262a:	2005      	movs	r0, #5
 800262c:	f7ff ff0c 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8002630:	210f      	movs	r1, #15
 8002632:	2006      	movs	r0, #6
 8002634:	f7ff ff08 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8002638:	210e      	movs	r1, #14
 800263a:	2007      	movs	r0, #7
 800263c:	f7ff ff04 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8002640:	2100      	movs	r1, #0
 8002642:	2008      	movs	r0, #8
 8002644:	f7ff ff00 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 8002648:	2100      	movs	r1, #0
 800264a:	2009      	movs	r0, #9
 800264c:	f7ff fefc 	bl	8002448 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002650:	23e7      	movs	r3, #231	@ 0xe7
 8002652:	713b      	strb	r3, [r7, #4]
 8002654:	23e7      	movs	r3, #231	@ 0xe7
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	23e7      	movs	r3, #231	@ 0xe7
 800265a:	70bb      	strb	r3, [r7, #2]
 800265c:	23e7      	movs	r3, #231	@ 0xe7
 800265e:	707b      	strb	r3, [r7, #1]
 8002660:	23e7      	movs	r3, #231	@ 0xe7
 8002662:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8002664:	463b      	mov	r3, r7
 8002666:	2205      	movs	r2, #5
 8002668:	4619      	mov	r1, r3
 800266a:	200a      	movs	r0, #10
 800266c:	f7ff ff0e 	bl	800248c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8002670:	23c2      	movs	r3, #194	@ 0xc2
 8002672:	713b      	strb	r3, [r7, #4]
 8002674:	23c2      	movs	r3, #194	@ 0xc2
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	23c2      	movs	r3, #194	@ 0xc2
 800267a:	70bb      	strb	r3, [r7, #2]
 800267c:	23c2      	movs	r3, #194	@ 0xc2
 800267e:	707b      	strb	r3, [r7, #1]
 8002680:	23c2      	movs	r3, #194	@ 0xc2
 8002682:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8002684:	463b      	mov	r3, r7
 8002686:	2205      	movs	r2, #5
 8002688:	4619      	mov	r1, r3
 800268a:	200b      	movs	r0, #11
 800268c:	f7ff fefe 	bl	800248c <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8002690:	21c3      	movs	r1, #195	@ 0xc3
 8002692:	200c      	movs	r0, #12
 8002694:	f7ff fed8 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 8002698:	21c4      	movs	r1, #196	@ 0xc4
 800269a:	200d      	movs	r0, #13
 800269c:	f7ff fed4 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 80026a0:	21c5      	movs	r1, #197	@ 0xc5
 80026a2:	200e      	movs	r0, #14
 80026a4:	f7ff fed0 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 80026a8:	21c6      	movs	r1, #198	@ 0xc6
 80026aa:	200f      	movs	r0, #15
 80026ac:	f7ff fecc 	bl	8002448 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80026b0:	23e7      	movs	r3, #231	@ 0xe7
 80026b2:	713b      	strb	r3, [r7, #4]
 80026b4:	23e7      	movs	r3, #231	@ 0xe7
 80026b6:	70fb      	strb	r3, [r7, #3]
 80026b8:	23e7      	movs	r3, #231	@ 0xe7
 80026ba:	70bb      	strb	r3, [r7, #2]
 80026bc:	23e7      	movs	r3, #231	@ 0xe7
 80026be:	707b      	strb	r3, [r7, #1]
 80026c0:	23e7      	movs	r3, #231	@ 0xe7
 80026c2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80026c4:	463b      	mov	r3, r7
 80026c6:	2205      	movs	r2, #5
 80026c8:	4619      	mov	r1, r3
 80026ca:	2010      	movs	r0, #16
 80026cc:	f7ff fede 	bl	800248c <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 80026d0:	2100      	movs	r1, #0
 80026d2:	2011      	movs	r0, #17
 80026d4:	f7ff feb8 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 80026d8:	2100      	movs	r1, #0
 80026da:	2012      	movs	r0, #18
 80026dc:	f7ff feb4 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80026e0:	2100      	movs	r1, #0
 80026e2:	2013      	movs	r0, #19
 80026e4:	f7ff feb0 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80026e8:	2100      	movs	r1, #0
 80026ea:	2014      	movs	r0, #20
 80026ec:	f7ff feac 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	2015      	movs	r0, #21
 80026f4:	f7ff fea8 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 80026f8:	2100      	movs	r1, #0
 80026fa:	2016      	movs	r0, #22
 80026fc:	f7ff fea4 	bl	8002448 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8002700:	f000 fbc8 	bl	8002e94 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8002704:	2100      	movs	r1, #0
 8002706:	201c      	movs	r0, #28
 8002708:	f7ff fe9e 	bl	8002448 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 800270c:	2100      	movs	r1, #0
 800270e:	201d      	movs	r0, #29
 8002710:	f7ff fe9a 	bl	8002448 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8002714:	210f      	movs	r1, #15
 8002716:	200f      	movs	r0, #15
 8002718:	f000 f944 	bl	80029a4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800271c:	2003      	movs	r0, #3
 800271e:	f000 fa2a 	bl	8002b76 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8002722:	2000      	movs	r0, #0
 8002724:	f000 fa60 	bl	8002be8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8002728:	2002      	movs	r0, #2
 800272a:	f000 faa3 	bl	8002c74 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800272e:	f000 f9f5 	bl	8002b1c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8002732:	2020      	movs	r0, #32
 8002734:	f000 f966 	bl	8002a04 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 8002738:	f000 fac4 	bl	8002cc4 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 800273c:	f000 fba2 	bl	8002e84 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8002740:	204c      	movs	r0, #76	@ 0x4c
 8002742:	f000 f94a 	bl	80029da <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002746:	f7ff ff1b 	bl	8002580 <NRF24_flush_tx>
	NRF24_flush_rx();
 800274a:	f7ff ff21 	bl	8002590 <NRF24_flush_rx>

	NRF24_powerDown();
 800274e:	f000 face 	bl	8002cee <NRF24_powerDown>

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800275c:	b004      	add	sp, #16
 800275e:	4770      	bx	lr
 8002760:	20001350 	.word	0x20001350
 8002764:	20001348 	.word	0x20001348
 8002768:	40020000 	.word	0x40020000
 800276c:	2000134c 	.word	0x2000134c
 8002770:	2000134e 	.word	0x2000134e

08002774 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002778:	2000      	movs	r0, #0
 800277a:	f7ff fe15 	bl	80023a8 <NRF24_read_register>
 800277e:	4603      	mov	r3, r0
 8002780:	f043 0303 	orr.w	r3, r3, #3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff fe5d 	bl	8002448 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <NRF24_startListening+0x48>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	4313      	orrs	r3, r2
 8002796:	d004      	beq.n	80027a2 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002798:	2205      	movs	r2, #5
 800279a:	4908      	ldr	r1, [pc, #32]	@ (80027bc <NRF24_startListening+0x48>)
 800279c:	200a      	movs	r0, #10
 800279e:	f7ff fe75 	bl	800248c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80027a2:	f7ff feed 	bl	8002580 <NRF24_flush_tx>
	NRF24_flush_rx();
 80027a6:	f7ff fef3 	bl	8002590 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff fddc 	bl	8002368 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80027b0:	2096      	movs	r0, #150	@ 0x96
 80027b2:	f7ff fd97 	bl	80022e4 <NRF24_DelayMicroSeconds>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001338 	.word	0x20001338

080027c0 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff fdcf 	bl	8002368 <NRF24_ce>
	NRF24_flush_tx();
 80027ca:	f7ff fed9 	bl	8002580 <NRF24_flush_tx>
	NRF24_flush_rx();
 80027ce:	f7ff fedf 	bl	8002590 <NRF24_flush_rx>
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80027e4:	f000 fb4e 	bl	8002e84 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fabd 	bl	8002d6c <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80027f2:	f000 fb9f 	bl	8002f34 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80027f8:	230a      	movs	r3, #10
 80027fa:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80027fc:	f107 030d 	add.w	r3, r7, #13
 8002800:	2201      	movs	r2, #1
 8002802:	4619      	mov	r1, r3
 8002804:	2008      	movs	r0, #8
 8002806:	f7ff fdf7 	bl	80023f8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800280a:	f7ff fec9 	bl	80025a0 <NRF24_get_status>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <NRF24_write+0x54>
 800281c:	f000 fb8a 	bl	8002f34 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8e7      	bhi.n	80027fc <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800282c:	f107 010b 	add.w	r1, r7, #11
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4a0c      	ldr	r2, [pc, #48]	@ (8002868 <NRF24_write+0x90>)
 8002836:	4618      	mov	r0, r3
 8002838:	f000 faf1 	bl	8002e1e <NRF24_whatHappened>
	retStatus = tx_ok;
 800283c:	7b3b      	ldrb	r3, [r7, #12]
 800283e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <NRF24_write+0x90>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8002848:	f000 f900 	bl	8002a4c <NRF24_getDynamicPayloadSize>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <NRF24_write+0x94>)
 8002852:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8002854:	f000 f80c 	bl	8002870 <NRF24_available>
	NRF24_flush_tx();
 8002858:	f7ff fe92 	bl	8002580 <NRF24_flush_tx>
	return retStatus;
 800285c:	7bbb      	ldrb	r3, [r7, #14]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20001340 	.word	0x20001340
 800286c:	20001341 	.word	0x20001341

08002870 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002874:	2000      	movs	r0, #0
 8002876:	f000 fa49 	bl	8002d0c <NRF24_availablePipe>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}

08002880 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fe45 	bl	8002520 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002896:	2017      	movs	r0, #23
 8002898:	f7ff fd86 	bl	80023a8 <NRF24_read_register>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80028a4:	f7ff fe74 	bl	8002590 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80028a8:	f000 f8d0 	bl	8002a4c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80028ca:	463b      	mov	r3, r7
 80028cc:	2205      	movs	r2, #5
 80028ce:	4619      	mov	r1, r3
 80028d0:	200a      	movs	r0, #10
 80028d2:	f7ff fddb 	bl	800248c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80028d6:	463b      	mov	r3, r7
 80028d8:	2205      	movs	r2, #5
 80028da:	4619      	mov	r1, r3
 80028dc:	2010      	movs	r0, #16
 80028de:	f7ff fdd5 	bl	800248c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80028e2:	2320      	movs	r3, #32
 80028e4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <NRF24_openWritingPipe+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf28      	it	cs
 80028f0:	4613      	movcs	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	2011      	movs	r0, #17
 80028f8:	f7ff fda6 	bl	8002448 <NRF24_write_register>
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20001342 	.word	0x20001342

08002908 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4601      	mov	r1, r0
 8002910:	e9c7 2300 	strd	r2, r3, [r7]
 8002914:	460b      	mov	r3, r1
 8002916:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800291e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002922:	491c      	ldr	r1, [pc, #112]	@ (8002994 <NRF24_openReadingPipe+0x8c>)
 8002924:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d82d      	bhi.n	800298a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d808      	bhi.n	8002946 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <NRF24_openReadingPipe+0x90>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	4639      	mov	r1, r7
 800293c:	2205      	movs	r2, #5
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fda4 	bl	800248c <NRF24_write_registerN>
 8002944:	e007      	b.n	8002956 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <NRF24_openReadingPipe+0x90>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	4639      	mov	r1, r7
 800294e:	2201      	movs	r2, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fd9b 	bl	800248c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	4a10      	ldr	r2, [pc, #64]	@ (800299c <NRF24_openReadingPipe+0x94>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <NRF24_openReadingPipe+0x98>)
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fd70 	bl	8002448 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002968:	2002      	movs	r0, #2
 800296a:	f7ff fd1d 	bl	80023a8 <NRF24_read_register>
 800296e:	4603      	mov	r3, r0
 8002970:	b25a      	sxtb	r2, r3
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	2002      	movs	r0, #2
 8002986:	f7ff fd5f 	bl	8002448 <NRF24_write_register>
	}

}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001338 	.word	0x20001338
 8002998:	0800c35c 	.word	0x0800c35c
 800299c:	0800c364 	.word	0x0800c364
 80029a0:	20001342 	.word	0x20001342

080029a4 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4619      	mov	r1, r3
 80029cc:	2004      	movs	r0, #4
 80029ce:	f7ff fd3b 	bl	8002448 <NRF24_write_register>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80029e4:	237f      	movs	r3, #127	@ 0x7f
 80029e6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bf28      	it	cs
 80029f0:	4613      	movcs	r3, r2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	2005      	movs	r0, #5
 80029f8:	f7ff fd26 	bl	8002448 <NRF24_write_register>
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	bf28      	it	cs
 8002a1a:	4613      	movcs	r3, r2
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <NRF24_setPayloadSize+0x2c>)
 8002a20:	701a      	strb	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20001342 	.word	0x20001342

08002a34 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return payload_size;
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <NRF24_getPayloadSize+0x14>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20001342 	.word	0x20001342

08002a4c <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002a50:	2060      	movs	r0, #96	@ 0x60
 8002a52:	f7ff fca9 	bl	80023a8 <NRF24_read_register>
 8002a56:	4603      	mov	r3, r0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002a60:	201d      	movs	r0, #29
 8002a62:	f7ff fca1 	bl	80023a8 <NRF24_read_register>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f043 0306 	orr.w	r3, r3, #6
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	201d      	movs	r0, #29
 8002a72:	f7ff fce9 	bl	8002448 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002a76:	201d      	movs	r0, #29
 8002a78:	f7ff fc96 	bl	80023a8 <NRF24_read_register>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8002a82:	f000 fa07 	bl	8002e94 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002a86:	201d      	movs	r0, #29
 8002a88:	f7ff fc8e 	bl	80023a8 <NRF24_read_register>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f043 0306 	orr.w	r3, r3, #6
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	201d      	movs	r0, #29
 8002a98:	f7ff fcd6 	bl	8002448 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002a9c:	201c      	movs	r0, #28
 8002a9e:	f7ff fc83 	bl	80023a8 <NRF24_read_register>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f043 0303 	orr.w	r3, r3, #3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	201c      	movs	r0, #28
 8002aae:	f7ff fccb 	bl	8002448 <NRF24_write_register>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8002abc:	201d      	movs	r0, #29
 8002abe:	f7ff fc73 	bl	80023a8 <NRF24_read_register>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	201d      	movs	r0, #29
 8002ace:	f7ff fcbb 	bl	8002448 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002ad2:	201d      	movs	r0, #29
 8002ad4:	f7ff fc68 	bl	80023a8 <NRF24_read_register>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8002ade:	f000 f9d9 	bl	8002e94 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8002ae2:	201d      	movs	r0, #29
 8002ae4:	f7ff fc60 	bl	80023a8 <NRF24_read_register>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	201d      	movs	r0, #29
 8002af4:	f7ff fca8 	bl	8002448 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002af8:	201c      	movs	r0, #28
 8002afa:	f7ff fc55 	bl	80023a8 <NRF24_read_register>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	201c      	movs	r0, #28
 8002b0a:	f7ff fc9d 	bl	8002448 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8002b0e:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <NRF24_enableDynamicPayloads+0x60>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20001343 	.word	0x20001343

08002b1c <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002b20:	201d      	movs	r0, #29
 8002b22:	f7ff fc41 	bl	80023a8 <NRF24_read_register>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	201d      	movs	r0, #29
 8002b32:	f7ff fc89 	bl	8002448 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002b36:	2100      	movs	r1, #0
 8002b38:	201c      	movs	r0, #28
 8002b3a:	f7ff fc85 	bl	8002448 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002b3e:	4b02      	ldr	r3, [pc, #8]	@ (8002b48 <NRF24_disableDynamicPayloads+0x2c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20001343 	.word	0x20001343

08002b4c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8002b5c:	213f      	movs	r1, #63	@ 0x3f
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7ff fc72 	bl	8002448 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002b64:	e003      	b.n	8002b6e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002b66:	2100      	movs	r1, #0
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7ff fc6d 	bl	8002448 <NRF24_write_register>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002b80:	2006      	movs	r0, #6
 8002b82:	f7ff fc11 	bl	80023a8 <NRF24_read_register>
 8002b86:	4603      	mov	r3, r0
 8002b88:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	f023 0306 	bic.w	r3, r3, #6
 8002b90:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d104      	bne.n	8002ba2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	f043 0306 	orr.w	r3, r3, #6
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e019      	b.n	8002bd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d104      	bne.n	8002bb2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e011      	b.n	8002bd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d104      	bne.n	8002bc2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	f043 0302 	orr.w	r3, r3, #2
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e009      	b.n	8002bd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d103      	bne.n	8002bd6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	f043 0306 	orr.w	r3, r3, #6
 8002bd4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	2006      	movs	r0, #6
 8002bdc:	f7ff fc34 	bl	8002448 <NRF24_write_register>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002bf6:	2006      	movs	r0, #6
 8002bf8:	f7ff fbd6 	bl	80023a8 <NRF24_read_register>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <NRF24_setDataRate+0x88>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002c06:	7bbb      	ldrb	r3, [r7, #14]
 8002c08:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002c0c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d107      	bne.n	8002c24 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002c14:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <NRF24_setDataRate+0x88>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	73bb      	strb	r3, [r7, #14]
 8002c22:	e00d      	b.n	8002c40 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <NRF24_setDataRate+0x88>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002c30:	7bbb      	ldrb	r3, [r7, #14]
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	73bb      	strb	r3, [r7, #14]
 8002c38:	e002      	b.n	8002c40 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <NRF24_setDataRate+0x88>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	4619      	mov	r1, r3
 8002c44:	2006      	movs	r0, #6
 8002c46:	f7ff fbff 	bl	8002448 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002c4a:	2006      	movs	r0, #6
 8002c4c:	f7ff fbac 	bl	80023a8 <NRF24_read_register>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d102      	bne.n	8002c60 <NRF24_setDataRate+0x78>
  {
    result = true;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e002      	b.n	8002c66 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <NRF24_setDataRate+0x88>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20001344 	.word	0x20001344

08002c74 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff fb92 	bl	80023a8 <NRF24_read_register>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f023 030c 	bic.w	r3, r3, #12
 8002c8a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00f      	beq.n	8002cb2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d104      	bne.n	8002ca2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e007      	b.n	8002cb2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7ff fbc6 	bl	8002448 <NRF24_write_register>
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7ff fb6c 	bl	80023a8 <NRF24_read_register>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cda:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7ff fbb1 	bl	8002448 <NRF24_write_register>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7ff fb58 	bl	80023a8 <NRF24_read_register>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f023 0302 	bic.w	r3, r3, #2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff fba0 	bl	8002448 <NRF24_write_register>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002d14:	f7ff fc44 	bl	80025a0 <NRF24_get_status>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002d48:	2140      	movs	r1, #64	@ 0x40
 8002d4a:	2007      	movs	r0, #7
 8002d4c:	f7ff fb7c 	bl	8002448 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	2007      	movs	r0, #7
 8002d5e:	f7ff fb73 	bl	8002448 <NRF24_write_register>
    }
  }
  return result;
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff faf5 	bl	8002368 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7ff fb12 	bl	80023a8 <NRF24_read_register>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fb57 	bl	8002448 <NRF24_write_register>
  NRF24_ce(1);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff fae4 	bl	8002368 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002da0:	2096      	movs	r0, #150	@ 0x96
 8002da2:	f7ff fa9f 	bl	80022e4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fb96 	bl	80024dc <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f7ff fad9 	bl	8002368 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002db6:	200f      	movs	r0, #15
 8002db8:	f7ff fa94 	bl	80022e4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7ff fad3 	bl	8002368 <NRF24_ce>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	6039      	str	r1, [r7, #0]
 8002dd4:	71fb      	strb	r3, [r7, #7]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8002dde:	2320      	movs	r3, #32
 8002de0:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8002de2:	7afa      	ldrb	r2, [r7, #11]
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	4293      	cmp	r3, r2
 8002de8:	bf28      	it	cs
 8002dea:	4613      	movcs	r3, r2
 8002dec:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff fa9a 	bl	8002328 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	f063 0357 	orn	r3, r3, #87	@ 0x57
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	7aba      	ldrb	r2, [r7, #10]
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb3e 	bl	800248c <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7ff fa89 	bl	8002328 <NRF24_csn>
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002e2a:	f7ff fbb9 	bl	80025a0 <NRF24_get_status>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002e38:	2170      	movs	r1, #112	@ 0x70
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f7ff fb04 	bl	8002448 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	701a      	strb	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002e88:	2170      	movs	r1, #112	@ 0x70
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f7ff fadc 	bl	8002448 <NRF24_write_register>
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff fa44 	bl	8002328 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002ea0:	2350      	movs	r3, #80	@ 0x50
 8002ea2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002ea4:	2373      	movs	r3, #115	@ 0x73
 8002ea6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002ea8:	1d39      	adds	r1, r7, #4
 8002eaa:	2364      	movs	r3, #100	@ 0x64
 8002eac:	2202      	movs	r2, #2
 8002eae:	4805      	ldr	r0, [pc, #20]	@ (8002ec4 <NRF24_ACTIVATE_cmd+0x30>)
 8002eb0:	f002 f9e9 	bl	8005286 <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f7ff fa37 	bl	8002328 <NRF24_csn>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20001350 	.word	0x20001350

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <HAL_Init+0x40>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_Init+0x40>)
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <HAL_Init+0x40>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f000 f8fc 	bl	80030ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef6:	200f      	movs	r0, #15
 8002ef8:	f7ff f8f2 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002efc:	f7fe ff88 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_IncTick+0x20>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_IncTick+0x24>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <HAL_IncTick+0x24>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200002b0 	.word	0x200002b0
 8002f30:	200013a8 	.word	0x200013a8

08002f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return uwTick;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_GetTick+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200013a8 	.word	0x200013a8

08002f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff ffee 	bl	8002f34 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d005      	beq.n	8002f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <HAL_Delay+0x44>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f72:	bf00      	nop
 8002f74:	f7ff ffde 	bl	8002f34 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8f7      	bhi.n	8002f74 <HAL_Delay+0x28>
  {
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200002b0 	.word	0x200002b0

08002f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	@ (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	490c      	ldr	r1, [pc, #48]	@ (8003080 <__NVIC_SetPriority+0x4c>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	440b      	add	r3, r1
 8003058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800305c:	e00a      	b.n	8003074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4908      	ldr	r1, [pc, #32]	@ (8003084 <__NVIC_SetPriority+0x50>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	3b04      	subs	r3, #4
 800306c:	0112      	lsls	r2, r2, #4
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	440b      	add	r3, r1
 8003072:	761a      	strb	r2, [r3, #24]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf28      	it	cs
 80030a6:	2304      	movcs	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d902      	bls.n	80030b8 <NVIC_EncodePriority+0x30>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3b03      	subs	r3, #3
 80030b6:	e000      	b.n	80030ba <NVIC_EncodePriority+0x32>
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	401a      	ands	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43d9      	mvns	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	4313      	orrs	r3, r2
         );
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	@ 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff4c 	bl	8002f94 <__NVIC_SetPriorityGrouping>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003116:	f7ff ff61 	bl	8002fdc <__NVIC_GetPriorityGrouping>
 800311a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	6978      	ldr	r0, [r7, #20]
 8003122:	f7ff ffb1 	bl	8003088 <NVIC_EncodePriority>
 8003126:	4602      	mov	r2, r0
 8003128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff80 	bl	8003034 <__NVIC_SetPriority>
}
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff54 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff fee6 	bl	8002f34 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e099      	b.n	80032a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003194:	e00f      	b.n	80031b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003196:	f7ff fecd 	bl	8002f34 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d908      	bls.n	80031b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e078      	b.n	80032a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e8      	bne.n	8003196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <HAL_DMA_Init+0x158>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	2b04      	cmp	r3, #4
 8003248:	d117      	bne.n	800327a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb01 	bl	8003864 <DMA_CheckFifoParam>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2240      	movs	r2, #64	@ 0x40
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003276:	2301      	movs	r3, #1
 8003278:	e016      	b.n	80032a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fab8 	bl	80037f8 <DMA_CalcBaseAndBitshift>
 8003288:	4603      	mov	r3, r0
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	223f      	movs	r2, #63	@ 0x3f
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	f010803f 	.word	0xf010803f

080032b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_DMA_Start_IT+0x26>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e040      	b.n	800335c <HAL_DMA_Start_IT+0xa8>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d12f      	bne.n	800334e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa4a 	bl	800379c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	223f      	movs	r2, #63	@ 0x3f
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0216 	orr.w	r2, r2, #22
 8003322:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e005      	b.n	800335a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003372:	f7ff fddf 	bl	8002f34 <HAL_GetTick>
 8003376:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d008      	beq.n	8003396 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2280      	movs	r2, #128	@ 0x80
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e052      	b.n	800343c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0216 	bic.w	r2, r2, #22
 80033a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <HAL_DMA_Abort+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0208 	bic.w	r2, r2, #8
 80033d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e6:	e013      	b.n	8003410 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e8:	f7ff fda4 	bl	8002f34 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d90c      	bls.n	8003410 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e015      	b.n	800343c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e4      	bne.n	80033e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	223f      	movs	r2, #63	@ 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e00c      	b.n	800347c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2205      	movs	r2, #5
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003494:	4b8e      	ldr	r3, [pc, #568]	@ (80036d0 <HAL_DMA_IRQHandler+0x248>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a8e      	ldr	r2, [pc, #568]	@ (80036d4 <HAL_DMA_IRQHandler+0x24c>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	2208      	movs	r2, #8
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01a      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	2208      	movs	r2, #8
 80034e2:	409a      	lsls	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	2204      	movs	r2, #4
 8003530:	409a      	lsls	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	2204      	movs	r2, #4
 800354e:	409a      	lsls	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	2210      	movs	r2, #16
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d043      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	2210      	movs	r2, #16
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d024      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
 80035b6:	e01f      	b.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e016      	b.n	80035f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0208 	bic.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	2220      	movs	r2, #32
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 808f 	beq.w	8003728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8087 	beq.w	8003728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	2220      	movs	r2, #32
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b05      	cmp	r3, #5
 8003630:	d136      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0216 	bic.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_DMA_IRQHandler+0x1da>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	223f      	movs	r2, #63	@ 0x3f
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d07e      	beq.n	8003794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
        }
        return;
 800369e:	e079      	b.n	8003794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e02c      	b.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
 80036ce:	bf00      	nop
 80036d0:	200002a8 	.word	0x200002a8
 80036d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e01e      	b.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10f      	bne.n	8003718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0210 	bic.w	r2, r2, #16
 8003706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372c:	2b00      	cmp	r3, #0
 800372e:	d032      	beq.n	8003796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2205      	movs	r2, #5
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3301      	adds	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	429a      	cmp	r2, r3
 800375e:	d307      	bcc.n	8003770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f2      	bne.n	8003754 <HAL_DMA_IRQHandler+0x2cc>
 800376e:	e000      	b.n	8003772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e000      	b.n	8003796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003794:	bf00      	nop
    }
  }
}
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d108      	bne.n	80037dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037da:	e007      	b.n	80037ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	3b10      	subs	r3, #16
 8003808:	4a14      	ldr	r2, [pc, #80]	@ (800385c <DMA_CalcBaseAndBitshift+0x64>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003812:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <DMA_CalcBaseAndBitshift+0x68>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d909      	bls.n	800383a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	659a      	str	r2, [r3, #88]	@ 0x58
 8003838:	e007      	b.n	800384a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	aaaaaaab 	.word	0xaaaaaaab
 8003860:	0800c36c 	.word	0x0800c36c

08003864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11f      	bne.n	80038be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d856      	bhi.n	8003932 <DMA_CheckFifoParam+0xce>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <DMA_CheckFifoParam+0x28>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038af 	.word	0x080038af
 8003894:	0800389d 	.word	0x0800389d
 8003898:	08003933 	.word	0x08003933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d046      	beq.n	8003936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ac:	e043      	b.n	8003936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038b6:	d140      	bne.n	800393a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e03d      	b.n	800393a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c6:	d121      	bne.n	800390c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d837      	bhi.n	800393e <DMA_CheckFifoParam+0xda>
 80038ce:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <DMA_CheckFifoParam+0x70>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038eb 	.word	0x080038eb
 80038dc:	080038e5 	.word	0x080038e5
 80038e0:	080038fd 	.word	0x080038fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e030      	b.n	800394c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d025      	beq.n	8003942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fa:	e022      	b.n	8003942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003904:	d11f      	bne.n	8003946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390a:	e01c      	b.n	8003946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d903      	bls.n	800391a <DMA_CheckFifoParam+0xb6>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d003      	beq.n	8003920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003918:	e018      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      break;
 800391e:	e015      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e00b      	b.n	800394a <DMA_CheckFifoParam+0xe6>
      break;
 8003932:	bf00      	nop
 8003934:	e00a      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e008      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e006      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;   
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800394a:	bf00      	nop
    }
  } 
  
  return status; 
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e159      	b.n	8003c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8148 	bne.w	8003c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d130      	bne.n	8003a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a2 	beq.w	8003c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b57      	ldr	r3, [pc, #348]	@ (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	4a56      	ldr	r2, [pc, #344]	@ (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af2:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003afe:	4a52      	ldr	r2, [pc, #328]	@ (8003c48 <HAL_GPIO_Init+0x2ec>)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a49      	ldr	r2, [pc, #292]	@ (8003c4c <HAL_GPIO_Init+0x2f0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x202>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a48      	ldr	r2, [pc, #288]	@ (8003c50 <HAL_GPIO_Init+0x2f4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x1fe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a47      	ldr	r2, [pc, #284]	@ (8003c54 <HAL_GPIO_Init+0x2f8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a46      	ldr	r2, [pc, #280]	@ (8003c58 <HAL_GPIO_Init+0x2fc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x1f6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a45      	ldr	r2, [pc, #276]	@ (8003c5c <HAL_GPIO_Init+0x300>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x1f2>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b4e:	2307      	movs	r3, #7
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b70:	4935      	ldr	r1, [pc, #212]	@ (8003c48 <HAL_GPIO_Init+0x2ec>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bcc:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfc:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c20:	4a0f      	ldr	r2, [pc, #60]	@ (8003c60 <HAL_GPIO_Init+0x304>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	f67f aea2 	bls.w	8003978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	@ 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cae:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc febc 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40013c00 	.word	0x40013c00

08003cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e12b      	b.n	8003f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fe f8ba 	bl	8001e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	@ 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f001 f9c8 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8003d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a81      	ldr	r2, [pc, #516]	@ (8003f3c <HAL_I2C_Init+0x274>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d807      	bhi.n	8003d4c <HAL_I2C_Init+0x84>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a80      	ldr	r2, [pc, #512]	@ (8003f40 <HAL_I2C_Init+0x278>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	bf94      	ite	ls
 8003d44:	2301      	movls	r3, #1
 8003d46:	2300      	movhi	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e006      	b.n	8003d5a <HAL_I2C_Init+0x92>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f44 <HAL_I2C_Init+0x27c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0e7      	b.n	8003f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a78      	ldr	r2, [pc, #480]	@ (8003f48 <HAL_I2C_Init+0x280>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0c9b      	lsrs	r3, r3, #18
 8003d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a6a      	ldr	r2, [pc, #424]	@ (8003f3c <HAL_I2C_Init+0x274>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d802      	bhi.n	8003d9c <HAL_I2C_Init+0xd4>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e009      	b.n	8003db0 <HAL_I2C_Init+0xe8>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	4a69      	ldr	r2, [pc, #420]	@ (8003f4c <HAL_I2C_Init+0x284>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	3301      	adds	r3, #1
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	495c      	ldr	r1, [pc, #368]	@ (8003f3c <HAL_I2C_Init+0x274>)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d819      	bhi.n	8003e04 <HAL_I2C_Init+0x13c>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e59      	subs	r1, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003de4:	400b      	ands	r3, r1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_I2C_Init+0x138>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e59      	subs	r1, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	e051      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e00:	2304      	movs	r3, #4
 8003e02:	e04f      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <HAL_I2C_Init+0x168>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e58      	subs	r0, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	440b      	add	r3, r1
 8003e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e012      	b.n	8003e56 <HAL_I2C_Init+0x18e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	0099      	lsls	r1, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Init+0x196>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e022      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10e      	bne.n	8003e84 <HAL_I2C_Init+0x1bc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1e58      	subs	r0, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	440b      	add	r3, r1
 8003e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e82:	e00f      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	0099      	lsls	r1, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	6809      	ldr	r1, [r1, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ed2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6911      	ldr	r1, [r2, #16]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	4311      	orrs	r1, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	000186a0 	.word	0x000186a0
 8003f40:	001e847f 	.word	0x001e847f
 8003f44:	003d08ff 	.word	0x003d08ff
 8003f48:	431bde83 	.word	0x431bde83
 8003f4c:	10624dd3 	.word	0x10624dd3

08003f50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	817b      	strh	r3, [r7, #10]
 8003f60:	4613      	mov	r3, r2
 8003f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7fe ffe6 	bl	8002f34 <HAL_GetTick>
 8003f68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	f040 80e0 	bne.w	8004138 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4970      	ldr	r1, [pc, #448]	@ (8004144 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fa92 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0d3      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2C_Master_Transmit+0x50>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e0cc      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d007      	beq.n	8003fc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2221      	movs	r2, #33	@ 0x21
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	893a      	ldrh	r2, [r7, #8]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a50      	ldr	r2, [pc, #320]	@ (8004148 <HAL_I2C_Master_Transmit+0x1f8>)
 8004006:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004008:	8979      	ldrh	r1, [r7, #10]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f9ca 	bl	80043a8 <I2C_MasterRequestWrite>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e08d      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004034:	e066      	b.n	8004104 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	6a39      	ldr	r1, [r7, #32]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fb50 	bl	80046e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	2b04      	cmp	r3, #4
 800404c:	d107      	bne.n	800405e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06b      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11b      	bne.n	80040d8 <HAL_I2C_Master_Transmit+0x188>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d017      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	781a      	ldrb	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	6a39      	ldr	r1, [r7, #32]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb47 	bl	8004770 <I2C_WaitOnBTFFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d107      	bne.n	8004100 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e01a      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d194      	bne.n	8004036 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	00100002 	.word	0x00100002
 8004148:	ffff0000 	.word	0xffff0000

0800414c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	@ 0x28
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	460b      	mov	r3, r1
 800415a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800415c:	f7fe feea 	bl	8002f34 <HAL_GetTick>
 8004160:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 8111 	bne.w	8004396 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2319      	movs	r3, #25
 800417a:	2201      	movs	r2, #1
 800417c:	4988      	ldr	r1, [pc, #544]	@ (80043a0 <HAL_I2C_IsDeviceReady+0x254>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f994 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	e104      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2C_IsDeviceReady+0x50>
 8004198:	2302      	movs	r3, #2
 800419a:	e0fd      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d007      	beq.n	80041c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2224      	movs	r2, #36	@ 0x24
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a70      	ldr	r2, [pc, #448]	@ (80043a4 <HAL_I2C_IsDeviceReady+0x258>)
 80041e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f952 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d103      	bne.n	8004226 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0b6      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004238:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800423a:	f7fe fe7b 	bl	8002f34 <HAL_GetTick>
 800423e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800426e:	e025      	b.n	80042bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fe fe60 	bl	8002f34 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <HAL_I2C_IsDeviceReady+0x13a>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	22a0      	movs	r2, #160	@ 0xa0
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80042c6:	d005      	beq.n	80042d4 <HAL_I2C_IsDeviceReady+0x188>
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_I2C_IsDeviceReady+0x188>
 80042ce:	7dbb      	ldrb	r3, [r7, #22]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0cd      	beq.n	8004270 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d129      	bne.n	800433e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2319      	movs	r3, #25
 8004316:	2201      	movs	r2, #1
 8004318:	4921      	ldr	r1, [pc, #132]	@ (80043a0 <HAL_I2C_IsDeviceReady+0x254>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8c6 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e036      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e02c      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004356:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2319      	movs	r3, #25
 800435e:	2201      	movs	r2, #1
 8004360:	490f      	ldr	r1, [pc, #60]	@ (80043a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8a2 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e012      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3301      	adds	r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	f4ff af32 	bcc.w	80041e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	00100002 	.word	0x00100002
 80043a4:	ffff0000 	.word	0xffff0000

080043a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	460b      	mov	r3, r1
 80043b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d006      	beq.n	80043d2 <I2C_MasterRequestWrite+0x2a>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d003      	beq.n	80043d2 <I2C_MasterRequestWrite+0x2a>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043d0:	d108      	bne.n	80043e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e00b      	b.n	80043fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	2b12      	cmp	r3, #18
 80043ea:	d107      	bne.n	80043fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f84f 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004422:	d103      	bne.n	800442c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e035      	b.n	800449c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004438:	d108      	bne.n	800444c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443a:	897b      	ldrh	r3, [r7, #10]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004448:	611a      	str	r2, [r3, #16]
 800444a:	e01b      	b.n	8004484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	11db      	asrs	r3, r3, #7
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0306 	and.w	r3, r3, #6
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f063 030f 	orn	r3, r3, #15
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	490e      	ldr	r1, [pc, #56]	@ (80044a4 <I2C_MasterRequestWrite+0xfc>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f898 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e010      	b.n	800449c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4907      	ldr	r1, [pc, #28]	@ (80044a8 <I2C_MasterRequestWrite+0x100>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f888 	bl	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	00010008 	.word	0x00010008
 80044a8:	00010002 	.word	0x00010002

080044ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044bc:	e048      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d044      	beq.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe fd35 	bl	8002f34 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d139      	bne.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10d      	bne.n	8004502 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	e00c      	b.n	800451c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	429a      	cmp	r2, r3
 8004520:	d116      	bne.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e023      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10d      	bne.n	8004576 <I2C_WaitOnFlagUntilTimeout+0xca>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	e00c      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	43da      	mvns	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d093      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ae:	e071      	b.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045be:	d123      	bne.n	8004608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e067      	b.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d041      	beq.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004610:	f7fe fc90 	bl	8002f34 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d136      	bne.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10c      	bne.n	800464a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e00b      	b.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e021      	b.n	80046d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10c      	bne.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	43da      	mvns	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e00b      	b.n	80046d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f af6d 	bne.w	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ec:	e034      	b.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f886 	bl	8004800 <I2C_IsAcknowledgeFailed>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e034      	b.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d028      	beq.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fe fc15 	bl	8002f34 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11d      	bne.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d016      	beq.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b80      	cmp	r3, #128	@ 0x80
 8004764:	d1c3      	bne.n	80046ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477c:	e034      	b.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f83e 	bl	8004800 <I2C_IsAcknowledgeFailed>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e034      	b.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d028      	beq.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fe fbcd 	bl	8002f34 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11d      	bne.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d016      	beq.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e007      	b.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d1c3      	bne.n	800477e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004816:	d11b      	bne.n	8004850 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004820:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e267      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d075      	beq.n	800496a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487e:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d00c      	beq.n	80048a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488a:	4b85      	ldr	r3, [pc, #532]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004892:	2b08      	cmp	r3, #8
 8004894:	d112      	bne.n	80048bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4b82      	ldr	r3, [pc, #520]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a2:	d10b      	bne.n	80048bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05b      	beq.n	8004968 <HAL_RCC_OscConfig+0x108>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d157      	bne.n	8004968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e242      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c4:	d106      	bne.n	80048d4 <HAL_RCC_OscConfig+0x74>
 80048c6:	4b76      	ldr	r3, [pc, #472]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a75      	ldr	r2, [pc, #468]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e01d      	b.n	8004910 <HAL_RCC_OscConfig+0xb0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x98>
 80048de:	4b70      	ldr	r3, [pc, #448]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6f      	ldr	r2, [pc, #444]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6c      	ldr	r2, [pc, #432]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0xb0>
 80048f8:	4b69      	ldr	r3, [pc, #420]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a68      	ldr	r2, [pc, #416]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80048fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b66      	ldr	r3, [pc, #408]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a65      	ldr	r2, [pc, #404]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 800490a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe fb0c 	bl	8002f34 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004920:	f7fe fb08 	bl	8002f34 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	@ 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e207      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0xc0>
 800493e:	e014      	b.n	800496a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe faf8 	bl	8002f34 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004948:	f7fe faf4 	bl	8002f34 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	@ 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1f3      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495a:	4b51      	ldr	r3, [pc, #324]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0xe8>
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004976:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004982:	4b47      	ldr	r3, [pc, #284]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498a:	2b08      	cmp	r3, #8
 800498c:	d11c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b44      	ldr	r3, [pc, #272]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499a:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x152>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1c7      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4937      	ldr	r1, [pc, #220]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	e03a      	b.n	8004a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_OscConfig+0x244>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fe faad 	bl	8002f34 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049de:	f7fe faa9 	bl	8002f34 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e1a8      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fc:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4925      	ldr	r1, [pc, #148]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a12:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <HAL_RCC_OscConfig+0x244>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fa8c 	bl	8002f34 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe fa88 	bl	8002f34 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e187      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d036      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_RCC_OscConfig+0x248>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fe fa6c 	bl	8002f34 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a60:	f7fe fa68 	bl	8002f34 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e167      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a72:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_OscConfig+0x240>)
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x200>
 8004a7e:	e01b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_OscConfig+0x248>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fe fa55 	bl	8002f34 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	e00e      	b.n	8004aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fe fa51 	bl	8002f34 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d907      	bls.n	8004aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e150      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	4b88      	ldr	r3, [pc, #544]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ea      	bne.n	8004a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8097 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b81      	ldr	r3, [pc, #516]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	4b7d      	ldr	r3, [pc, #500]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b77      	ldr	r3, [pc, #476]	@ (8004cd4 <HAL_RCC_OscConfig+0x474>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d118      	bne.n	8004b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b02:	4b74      	ldr	r3, [pc, #464]	@ (8004cd4 <HAL_RCC_OscConfig+0x474>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a73      	ldr	r2, [pc, #460]	@ (8004cd4 <HAL_RCC_OscConfig+0x474>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fa11 	bl	8002f34 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b16:	f7fe fa0d 	bl	8002f34 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e10c      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x474>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x2ea>
 8004b3c:	4b64      	ldr	r3, [pc, #400]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	4a63      	ldr	r2, [pc, #396]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b48:	e01c      	b.n	8004b84 <HAL_RCC_OscConfig+0x324>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x30c>
 8004b52:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	4a5b      	ldr	r2, [pc, #364]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0x324>
 8004b6c:	4b58      	ldr	r3, [pc, #352]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	4a57      	ldr	r2, [pc, #348]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b78:	4b55      	ldr	r3, [pc, #340]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	4a54      	ldr	r2, [pc, #336]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f023 0304 	bic.w	r3, r3, #4
 8004b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fe f9d2 	bl	8002f34 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fe f9ce 	bl	8002f34 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0cb      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ee      	beq.n	8004b94 <HAL_RCC_OscConfig+0x334>
 8004bb6:	e014      	b.n	8004be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb8:	f7fe f9bc 	bl	8002f34 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fe f9b8 	bl	8002f34 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0b5      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ee      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be8:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	4a38      	ldr	r2, [pc, #224]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80a1 	beq.w	8004d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bfe:	4b34      	ldr	r3, [pc, #208]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d05c      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d141      	bne.n	8004c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	4b31      	ldr	r3, [pc, #196]	@ (8004cd8 <HAL_RCC_OscConfig+0x478>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe f98c 	bl	8002f34 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fe f988 	bl	8002f34 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e087      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c32:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	3b01      	subs	r3, #1
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	491b      	ldr	r1, [pc, #108]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c68:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd8 <HAL_RCC_OscConfig+0x478>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fe f961 	bl	8002f34 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fe f95d 	bl	8002f34 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e05c      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c88:	4b11      	ldr	r3, [pc, #68]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x416>
 8004c94:	e054      	b.n	8004d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <HAL_RCC_OscConfig+0x478>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe f94a 	bl	8002f34 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe f946 	bl	8002f34 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e045      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x444>
 8004cc2:	e03d      	b.n	8004d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e038      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d4c <HAL_RCC_OscConfig+0x4ec>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d028      	beq.n	8004d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d121      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d11a      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d111      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023800 	.word	0x40023800

08004d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0cc      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d64:	4b68      	ldr	r3, [pc, #416]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d90c      	bls.n	8004d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b65      	ldr	r3, [pc, #404]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b63      	ldr	r3, [pc, #396]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0b8      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da4:	4b59      	ldr	r3, [pc, #356]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4a58      	ldr	r2, [pc, #352]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dbc:	4b53      	ldr	r3, [pc, #332]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a52      	ldr	r2, [pc, #328]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc8:	4b50      	ldr	r3, [pc, #320]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	494d      	ldr	r1, [pc, #308]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d044      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dee:	4b47      	ldr	r3, [pc, #284]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d119      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07f      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e06f      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e067      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2e:	4b37      	ldr	r3, [pc, #220]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4934      	ldr	r1, [pc, #208]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e40:	f7fe f878 	bl	8002f34 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7fe f874 	bl	8002f34 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e04f      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 020c 	and.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1eb      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b25      	ldr	r3, [pc, #148]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d20c      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e86:	4b20      	ldr	r3, [pc, #128]	@ (8004f08 <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e032      	b.n	8004efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea4:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4916      	ldr	r1, [pc, #88]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec2:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ed6:	f000 f821 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	490a      	ldr	r1, [pc, #40]	@ (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	5ccb      	ldrb	r3, [r1, r3]
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd f8f2 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40023c00 	.word	0x40023c00
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800c344 	.word	0x0800c344
 8004f14:	200002a8 	.word	0x200002a8
 8004f18:	200002ac 	.word	0x200002ac

08004f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f20:	b090      	sub	sp, #64	@ 0x40
 8004f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f34:	4b59      	ldr	r3, [pc, #356]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d00d      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x40>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	f200 80a1 	bhi.w	8005088 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f4e:	e09b      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b53      	ldr	r3, [pc, #332]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f52:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004f54:	e09b      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f56:	4b53      	ldr	r3, [pc, #332]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f5a:	e098      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f66:	4b4d      	ldr	r3, [pc, #308]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d028      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b4a      	ldr	r3, [pc, #296]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	2200      	movs	r2, #0
 8004f7a:	623b      	str	r3, [r7, #32]
 8004f7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f84:	2100      	movs	r1, #0
 8004f86:	4b47      	ldr	r3, [pc, #284]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f88:	fb03 f201 	mul.w	r2, r3, r1
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	4a43      	ldr	r2, [pc, #268]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f96:	fba0 1202 	umull	r1, r2, r0, r2
 8004f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa2:	4413      	add	r3, r2
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa8:	2200      	movs	r2, #0
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004fb6:	f7fb f913 	bl	80001e0 <__aeabi_uldivmod>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc2:	e053      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc4:	4b35      	ldr	r3, [pc, #212]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	099b      	lsrs	r3, r3, #6
 8004fca:	2200      	movs	r2, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	617a      	str	r2, [r7, #20]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fd6:	f04f 0b00 	mov.w	fp, #0
 8004fda:	4652      	mov	r2, sl
 8004fdc:	465b      	mov	r3, fp
 8004fde:	f04f 0000 	mov.w	r0, #0
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	0159      	lsls	r1, r3, #5
 8004fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fec:	0150      	lsls	r0, r2, #5
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ff6:	eb63 090b 	sbc.w	r9, r3, fp
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005006:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800500a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800500e:	ebb2 0408 	subs.w	r4, r2, r8
 8005012:	eb63 0509 	sbc.w	r5, r3, r9
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	00eb      	lsls	r3, r5, #3
 8005020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005024:	00e2      	lsls	r2, r4, #3
 8005026:	4614      	mov	r4, r2
 8005028:	461d      	mov	r5, r3
 800502a:	eb14 030a 	adds.w	r3, r4, sl
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	eb45 030b 	adc.w	r3, r5, fp
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005042:	4629      	mov	r1, r5
 8005044:	028b      	lsls	r3, r1, #10
 8005046:	4621      	mov	r1, r4
 8005048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800504c:	4621      	mov	r1, r4
 800504e:	028a      	lsls	r2, r1, #10
 8005050:	4610      	mov	r0, r2
 8005052:	4619      	mov	r1, r3
 8005054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005056:	2200      	movs	r2, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005060:	f7fb f8be 	bl	80001e0 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4613      	mov	r3, r2
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800506c:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	3301      	adds	r3, #1
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800507c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005086:	e002      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800508c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005090:	4618      	mov	r0, r3
 8005092:	3740      	adds	r7, #64	@ 0x40
 8005094:	46bd      	mov	sp, r7
 8005096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	017d7840 	.word	0x017d7840

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ac:	4b03      	ldr	r3, [pc, #12]	@ (80050bc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ae:	681b      	ldr	r3, [r3, #0]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	200002a8 	.word	0x200002a8

080050c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c4:	f7ff fff0 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	@ (80050e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0800c354 	.word	0x0800c354

080050e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ec:	f7ff ffdc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0b5b      	lsrs	r3, r3, #13
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	0800c354 	.word	0x0800c354

08005110 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	220f      	movs	r2, #15
 800511e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005120:	4b12      	ldr	r3, [pc, #72]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005138:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <HAL_RCC_GetClockConfig+0x60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0207 	and.w	r2, r3, #7
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40023c00 	.word	0x40023c00

08005174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07b      	b.n	800527e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005196:	d009      	beq.n	80051ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	61da      	str	r2, [r3, #28]
 800519e:	e005      	b.n	80051ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fe96 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005230:	ea42 0103 	orr.w	r1, r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	0c1b      	lsrs	r3, r3, #16
 800524a:	f003 0104 	and.w	r1, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f003 0210 	and.w	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800526c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_SPI_Transmit+0x22>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e12d      	b.n	8005504 <HAL_SPI_Transmit+0x27e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b0:	f7fd fe40 	bl	8002f34 <HAL_GetTick>
 80052b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
 80052c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052ca:	e116      	b.n	80054fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Transmit+0x52>
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052dc:	e10d      	b.n	80054fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2203      	movs	r2, #3
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	88fa      	ldrh	r2, [r7, #6]
 80052f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005324:	d10f      	bne.n	8005346 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	d007      	beq.n	8005364 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800536c:	d14f      	bne.n	800540e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_SPI_Transmit+0xf6>
 8005376:	8afb      	ldrh	r3, [r7, #22]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d142      	bne.n	8005402 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	1c9a      	adds	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053a0:	e02f      	b.n	8005402 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d112      	bne.n	80053d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053d4:	e015      	b.n	8005402 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d6:	f7fd fdad 	bl	8002f34 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d803      	bhi.n	80053ee <HAL_SPI_Transmit+0x168>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d102      	bne.n	80053f4 <HAL_SPI_Transmit+0x16e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005400:	e07b      	b.n	80054fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ca      	bne.n	80053a2 <HAL_SPI_Transmit+0x11c>
 800540c:	e050      	b.n	80054b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_SPI_Transmit+0x196>
 8005416:	8afb      	ldrh	r3, [r7, #22]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d144      	bne.n	80054a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005442:	e030      	b.n	80054a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d113      	bne.n	800547a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005478:	e015      	b.n	80054a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547a:	f7fd fd5b 	bl	8002f34 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d803      	bhi.n	8005492 <HAL_SPI_Transmit+0x20c>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit+0x212>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80054a4:	e029      	b.n	80054fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1c9      	bne.n	8005444 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fbdf 	bl	8005c78 <SPI_EndRxTxTransaction>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e003      	b.n	80054fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005502:	7ffb      	ldrb	r3, [r7, #31]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005530:	e0fb      	b.n	800572a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800553a:	d112      	bne.n	8005562 <HAL_SPI_Receive+0x56>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10e      	bne.n	8005562 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2204      	movs	r2, #4
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f8ef 	bl	800573c <HAL_SPI_TransmitReceive>
 800555e:	4603      	mov	r3, r0
 8005560:	e0e8      	b.n	8005734 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_SPI_Receive+0x64>
 800556c:	2302      	movs	r3, #2
 800556e:	e0e1      	b.n	8005734 <HAL_SPI_Receive+0x228>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005578:	f7fd fcdc 	bl	8002f34 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_Receive+0x7e>
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800558e:	e0cc      	b.n	800572a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2204      	movs	r2, #4
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d6:	d10f      	bne.n	80055f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d007      	beq.n	8005616 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d16a      	bne.n	80056f4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800561e:	e032      	b.n	8005686 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d115      	bne.n	800565a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f103 020c 	add.w	r2, r3, #12
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005658:	e015      	b.n	8005686 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800565a:	f7fd fc6b 	bl	8002f34 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d803      	bhi.n	8005672 <HAL_SPI_Receive+0x166>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d102      	bne.n	8005678 <HAL_SPI_Receive+0x16c>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005684:	e051      	b.n	800572a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1c7      	bne.n	8005620 <HAL_SPI_Receive+0x114>
 8005690:	e035      	b.n	80056fe <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d113      	bne.n	80056c8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056aa:	b292      	uxth	r2, r2
 80056ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056c6:	e015      	b.n	80056f4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c8:	f7fd fc34 	bl	8002f34 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d803      	bhi.n	80056e0 <HAL_SPI_Receive+0x1d4>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d102      	bne.n	80056e6 <HAL_SPI_Receive+0x1da>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80056f2:	e01a      	b.n	800572a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1c9      	bne.n	8005692 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa52 	bl	8005bac <SPI_EndRxTransaction>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
 8005720:	e003      	b.n	800572a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	@ 0x30
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x26>
 800575e:	2302      	movs	r3, #2
 8005760:	e198      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x358>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800576a:	f7fd fbe3 	bl	8002f34 <HAL_GetTick>
 800576e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005780:	887b      	ldrh	r3, [r7, #2]
 8005782:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005784:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005788:	2b01      	cmp	r3, #1
 800578a:	d00f      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x70>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005792:	d107      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x68>
 800579c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d003      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80057aa:	e16d      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_SPI_TransmitReceive+0x82>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_TransmitReceive+0x82>
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80057c4:	e160      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d003      	beq.n	80057da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2205      	movs	r2, #5
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	887a      	ldrh	r2, [r7, #2]
 8005802:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d007      	beq.n	800582e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005836:	d17c      	bne.n	8005932 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x10a>
 8005840:	8b7b      	ldrh	r3, [r7, #26]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d16a      	bne.n	800591c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	1c9a      	adds	r2, r3, #2
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586a:	e057      	b.n	800591c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d11b      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x176>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <HAL_SPI_TransmitReceive+0x176>
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d113      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	881a      	ldrh	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d119      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x1b8>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d014      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	b292      	uxth	r2, r2
 80058d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f0:	2301      	movs	r3, #1
 80058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f4:	f7fd fb1e 	bl	8002f34 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005900:	429a      	cmp	r2, r3
 8005902:	d80b      	bhi.n	800591c <HAL_SPI_TransmitReceive+0x1e0>
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d007      	beq.n	800591c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800591a:	e0b5      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1a2      	bne.n	800586c <HAL_SPI_TransmitReceive+0x130>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d19d      	bne.n	800586c <HAL_SPI_TransmitReceive+0x130>
 8005930:	e080      	b.n	8005a34 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x204>
 800593a:	8b7b      	ldrh	r3, [r7, #26]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d16f      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005966:	e05b      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11c      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x274>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d017      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x274>
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d114      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d119      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x2b6>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d014      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ee:	2301      	movs	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f2:	f7fd fa9f 	bl	8002f34 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d803      	bhi.n	8005a0a <HAL_SPI_TransmitReceive+0x2ce>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d102      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x2d4>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005a1e:	e033      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d19e      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x22c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d199      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f91d 	bl	8005c78 <SPI_EndRxTxTransaction>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d006      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005a50:	e01a      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a7e:	e003      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3730      	adds	r7, #48	@ 0x30
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aac:	f7fd fa42 	bl	8002f34 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005abc:	f7fd fa3a 	bl	8002f34 <HAL_GetTick>
 8005ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	@ (8005ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	015b      	lsls	r3, r3, #5
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	e054      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d050      	beq.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005adc:	f7fd fa2a 	bl	8002f34 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d13d      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b0a:	d111      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b14:	d004      	beq.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b1e:	d107      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b38:	d10f      	bne.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e017      	b.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d19b      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200002a8 	.word	0x200002a8

08005bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bc0:	d111      	bne.n	8005be6 <SPI_EndRxTransaction+0x3a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bca:	d004      	beq.n	8005bd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd4:	d107      	bne.n	8005be6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005be4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bee:	d12a      	bne.n	8005c46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf8:	d012      	beq.n	8005c20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2180      	movs	r1, #128	@ 0x80
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ff49 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d02d      	beq.n	8005c6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e026      	b.n	8005c6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2101      	movs	r1, #1
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff ff36 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01a      	beq.n	8005c6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e013      	b.n	8005c6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2101      	movs	r1, #1
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff ff23 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff ff04 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e032      	b.n	8005d10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005caa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <SPI_EndRxTxTransaction+0xa0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <SPI_EndRxTxTransaction+0xa4>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	0d5b      	lsrs	r3, r3, #21
 8005cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc8:	d112      	bne.n	8005cf0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2180      	movs	r1, #128	@ 0x80
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fee1 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d016      	beq.n	8005d0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e00f      	b.n	8005d10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d06:	2b80      	cmp	r3, #128	@ 0x80
 8005d08:	d0f2      	beq.n	8005cf0 <SPI_EndRxTxTransaction+0x78>
 8005d0a:	e000      	b.n	8005d0e <SPI_EndRxTxTransaction+0x96>
        break;
 8005d0c:	bf00      	nop
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200002a8 	.word	0x200002a8
 8005d1c:	165e9f81 	.word	0x165e9f81

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e041      	b.n	8005db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f91e 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 f9ea 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d001      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e044      	b.n	8005e62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xb0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x6c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d013      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x6c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x6c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a19      	ldr	r2, [pc, #100]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x6c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xbc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x6c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d111      	bne.n	8005e50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d010      	beq.n	8005e60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4e:	e007      	b.n	8005e60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	40014000 	.word	0x40014000

08005e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0202 	mvn.w	r2, #2
 8005eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f914 	bl	80060fc <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f906 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f917 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0204 	mvn.w	r2, #4
 8005f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8ee 	bl	80060fc <HAL_TIM_IC_CaptureCallback>
 8005f20:	e005      	b.n	8005f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f8e0 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f8f1 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0208 	mvn.w	r2, #8
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8c8 	bl	80060fc <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8ba 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8cb 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0210 	mvn.w	r2, #16
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8a2 	bl	80060fc <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f894 	bl	80060e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8a5 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0201 	mvn.w	r2, #1
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb fa64 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 faa6 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f876 	bl	8006124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0220 	mvn.w	r2, #32
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa78 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006078:	2302      	movs	r3, #2
 800607a:	e031      	b.n	80060e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8de 	bl	8006250 <TIM_SlaveTimer_SetConfig>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e018      	b.n	80060e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a3a      	ldr	r2, [pc, #232]	@ (8006234 <TIM_Base_SetConfig+0xfc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x38>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x38>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <TIM_Base_SetConfig+0x100>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x38>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a36      	ldr	r2, [pc, #216]	@ (800623c <TIM_Base_SetConfig+0x104>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x38>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a35      	ldr	r2, [pc, #212]	@ (8006240 <TIM_Base_SetConfig+0x108>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2b      	ldr	r2, [pc, #172]	@ (8006234 <TIM_Base_SetConfig+0xfc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01b      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006190:	d017      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a28      	ldr	r2, [pc, #160]	@ (8006238 <TIM_Base_SetConfig+0x100>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a27      	ldr	r2, [pc, #156]	@ (800623c <TIM_Base_SetConfig+0x104>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a26      	ldr	r2, [pc, #152]	@ (8006240 <TIM_Base_SetConfig+0x108>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a25      	ldr	r2, [pc, #148]	@ (8006244 <TIM_Base_SetConfig+0x10c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a24      	ldr	r2, [pc, #144]	@ (8006248 <TIM_Base_SetConfig+0x110>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0x8a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a23      	ldr	r2, [pc, #140]	@ (800624c <TIM_Base_SetConfig+0x114>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006234 <TIM_Base_SetConfig+0xfc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d105      	bne.n	8006226 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
  }
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40010000 	.word	0x40010000
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800

08006250 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b70      	cmp	r3, #112	@ 0x70
 8006298:	d01a      	beq.n	80062d0 <TIM_SlaveTimer_SetConfig+0x80>
 800629a:	2b70      	cmp	r3, #112	@ 0x70
 800629c:	d860      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 800629e:	2b60      	cmp	r3, #96	@ 0x60
 80062a0:	d054      	beq.n	800634c <TIM_SlaveTimer_SetConfig+0xfc>
 80062a2:	2b60      	cmp	r3, #96	@ 0x60
 80062a4:	d85c      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 80062a6:	2b50      	cmp	r3, #80	@ 0x50
 80062a8:	d046      	beq.n	8006338 <TIM_SlaveTimer_SetConfig+0xe8>
 80062aa:	2b50      	cmp	r3, #80	@ 0x50
 80062ac:	d858      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 80062ae:	2b40      	cmp	r3, #64	@ 0x40
 80062b0:	d019      	beq.n	80062e6 <TIM_SlaveTimer_SetConfig+0x96>
 80062b2:	2b40      	cmp	r3, #64	@ 0x40
 80062b4:	d854      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 80062b6:	2b30      	cmp	r3, #48	@ 0x30
 80062b8:	d055      	beq.n	8006366 <TIM_SlaveTimer_SetConfig+0x116>
 80062ba:	2b30      	cmp	r3, #48	@ 0x30
 80062bc:	d850      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d051      	beq.n	8006366 <TIM_SlaveTimer_SetConfig+0x116>
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d84c      	bhi.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04d      	beq.n	8006366 <TIM_SlaveTimer_SetConfig+0x116>
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d04b      	beq.n	8006366 <TIM_SlaveTimer_SetConfig+0x116>
 80062ce:	e047      	b.n	8006360 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	f000 f8a6 	bl	8006430 <TIM_ETR_SetConfig>
      break;
 80062e4:	e040      	b.n	8006368 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d101      	bne.n	80062f2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e03b      	b.n	800636a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006318:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
      break;
 8006336:	e017      	b.n	8006368 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006344:	461a      	mov	r2, r3
 8006346:	f000 f814 	bl	8006372 <TIM_TI1_ConfigInputStage>
      break;
 800634a:	e00d      	b.n	8006368 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006358:	461a      	mov	r2, r3
 800635a:	f000 f839 	bl	80063d0 <TIM_TI2_ConfigInputStage>
      break;
 800635e:	e003      	b.n	8006368 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	75fb      	strb	r3, [r7, #23]
      break;
 8006364:	e000      	b.n	8006368 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006366:	bf00      	nop
  }

  return status;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 0201 	bic.w	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800639c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 030a 	bic.w	r3, r3, #10
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0210 	bic.w	r2, r3, #16
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	031b      	lsls	r3, r3, #12
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800644a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	431a      	orrs	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e050      	b.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d4:	d013      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a15      	ldr	r2, [pc, #84]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a13      	ldr	r2, [pc, #76]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d10c      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4313      	orrs	r3, r2
 800650e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40014000 	.word	0x40014000

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e042      	b.n	800660c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb fd1c 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	@ 0x24
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 ff4f 	bl	800745c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695a      	ldr	r2, [r3, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	@ 0x28
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b20      	cmp	r3, #32
 8006632:	d175      	bne.n	8006720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_UART_Transmit+0x2c>
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e06e      	b.n	8006722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006652:	f7fc fc6f 	bl	8002f34 <HAL_GetTick>
 8006656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666c:	d108      	bne.n	8006680 <HAL_UART_Transmit+0x6c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e003      	b.n	8006688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006688:	e02e      	b.n	80066e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	2180      	movs	r1, #128	@ 0x80
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fc27 	bl	8006ee8 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e03a      	b.n	8006722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3302      	adds	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e007      	b.n	80066da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1cb      	bne.n	800668a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2140      	movs	r1, #64	@ 0x40
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fbf3 	bl	8006ee8 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	4613      	mov	r3, r2
 8006736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b20      	cmp	r3, #32
 8006742:	d112      	bne.n	800676a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Receive_DMA+0x26>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e00b      	b.n	800676c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	461a      	mov	r2, r3
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fc1b 	bl	8006f9c <UART_Start_Receive_DMA>
 8006766:	4603      	mov	r3, r0
 8006768:	e000      	b.n	800676c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800676a:	2302      	movs	r3, #2
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b0ba      	sub	sp, #232	@ 0xe8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800679a:	2300      	movs	r3, #0
 800679c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80067b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_UART_IRQHandler+0x66>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fd83 	bl	80072de <UART_Receive_IT>
      return;
 80067d8:	e25b      	b.n	8006c92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80de 	beq.w	80069a0 <HAL_UART_IRQHandler+0x22c>
 80067e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80d1 	beq.w	80069a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <HAL_UART_IRQHandler+0xae>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <HAL_UART_IRQHandler+0xd2>
 800682e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	f043 0202 	orr.w	r2, r3, #2
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <HAL_UART_IRQHandler+0xf6>
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	f043 0204 	orr.w	r2, r3, #4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d011      	beq.n	800689a <HAL_UART_IRQHandler+0x126>
 8006876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d105      	bne.n	800688e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f043 0208 	orr.w	r2, r3, #8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 81f2 	beq.w	8006c88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_UART_IRQHandler+0x14e>
 80068b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fd0e 	bl	80072de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <HAL_UART_IRQHandler+0x17a>
 80068e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d04f      	beq.n	800698e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fc16 	bl	8007120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fe:	2b40      	cmp	r3, #64	@ 0x40
 8006900:	d141      	bne.n	8006986 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800691c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800692e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800693a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1d9      	bne.n	8006902 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d013      	beq.n	800697e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b54 <HAL_UART_IRQHandler+0x3e0>)
 800695c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006962:	4618      	mov	r0, r3
 8006964:	f7fc fd6e 	bl	8003444 <HAL_DMA_Abort_IT>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	e00e      	b.n	800699c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f99e 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	e00a      	b.n	800699c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f99a 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	e006      	b.n	800699c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f996 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800699a:	e175      	b.n	8006c88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	bf00      	nop
    return;
 800699e:	e173      	b.n	8006c88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	f040 814f 	bne.w	8006c48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8148 	beq.w	8006c48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8141 	beq.w	8006c48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	f040 80b6 	bne.w	8006b58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8145 	beq.w	8006c8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	f080 813e 	bcs.w	8006c8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a22:	f000 8088 	beq.w	8006b36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1d9      	bne.n	8006a26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3314      	adds	r3, #20
 8006a78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3314      	adds	r3, #20
 8006a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e1      	bne.n	8006a72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ad2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e3      	bne.n	8006af4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fc fc17 	bl	8003364 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8c1 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b52:	e09b      	b.n	8006c8c <HAL_UART_IRQHandler+0x518>
 8006b54:	080071e7 	.word	0x080071e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 808e 	beq.w	8006c90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8089 	beq.w	8006c90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ba2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e3      	bne.n	8006b7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e3      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c20:	61fa      	str	r2, [r7, #28]
 8006c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e3      	bne.n	8006bfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f847 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c46:	e023      	b.n	8006c90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_UART_IRQHandler+0x4f4>
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fad4 	bl	800720e <UART_Transmit_IT>
    return;
 8006c66:	e014      	b.n	8006c92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00e      	beq.n	8006c92 <HAL_UART_IRQHandler+0x51e>
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fb14 	bl	80072ae <UART_EndTransmit_IT>
    return;
 8006c86:	e004      	b.n	8006c92 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c88:	bf00      	nop
 8006c8a:	e002      	b.n	8006c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c90:	bf00      	nop
  }
}
 8006c92:	37e8      	adds	r7, #232	@ 0xe8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b09c      	sub	sp, #112	@ 0x70
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d172      	bne.n	8006dee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d30:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e5      	bne.n	8006d0e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3314      	adds	r3, #20
 8006d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d62:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	623b      	str	r3, [r7, #32]
   return(result);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d119      	bne.n	8006dee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
 8006dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dda:	61fa      	str	r2, [r7, #28]
 8006ddc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	69b9      	ldr	r1, [r7, #24]
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	617b      	str	r3, [r7, #20]
   return(result);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df0:	2200      	movs	r2, #0
 8006df2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d106      	bne.n	8006e0a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e00:	4619      	mov	r1, r3
 8006e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e04:	f7ff ff66 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e08:	e002      	b.n	8006e10 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e0c:	f7f9 fe1e 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 8006e10:	bf00      	nop
 8006e12:	3770      	adds	r7, #112	@ 0x70
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d108      	bne.n	8006e46 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff ff48 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e44:	e002      	b.n	8006e4c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff ff30 	bl	8006cac <HAL_UART_RxHalfCpltCallback>
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b80      	cmp	r3, #128	@ 0x80
 8006e72:	bf0c      	ite	eq
 8006e74:	2301      	moveq	r3, #1
 8006e76:	2300      	movne	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b21      	cmp	r3, #33	@ 0x21
 8006e86:	d108      	bne.n	8006e9a <UART_DMAError+0x46>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f000 f91b 	bl	80070d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea4:	2b40      	cmp	r3, #64	@ 0x40
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2301      	moveq	r3, #1
 8006eaa:	2300      	movne	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b22      	cmp	r3, #34	@ 0x22
 8006eba:	d108      	bne.n	8006ece <UART_DMAError+0x7a>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006ec8:	68b8      	ldr	r0, [r7, #8]
 8006eca:	f000 f929 	bl	8007120 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	f043 0210 	orr.w	r2, r3, #16
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eda:	68b8      	ldr	r0, [r7, #8]
 8006edc:	f7ff fef0 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef8:	e03b      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d037      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f02:	f7fc f817 	bl	8002f34 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	6a3a      	ldr	r2, [r7, #32]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d302      	bcc.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e03a      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d023      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b80      	cmp	r3, #128	@ 0x80
 8006f2e:	d020      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b40      	cmp	r3, #64	@ 0x40
 8006f34:	d01d      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d116      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f8e0 	bl	8007120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2208      	movs	r2, #8
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00f      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d0b4      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b098      	sub	sp, #96	@ 0x60
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2222      	movs	r2, #34	@ 0x22
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80070c4 <UART_Start_Receive_DMA+0x128>)
 8006fca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80070c8 <UART_Start_Receive_DMA+0x12c>)
 8006fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80070cc <UART_Start_Receive_DMA+0x130>)
 8006fda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	f7fc f95a 	bl	80032b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d019      	beq.n	8007052 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800702e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800703e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007040:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800704c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3314      	adds	r3, #20
 8007058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	657b      	str	r3, [r7, #84]	@ 0x54
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007072:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3314      	adds	r3, #20
 800708c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	617b      	str	r3, [r7, #20]
   return(result);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800709c:	653b      	str	r3, [r7, #80]	@ 0x50
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80070a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6a39      	ldr	r1, [r7, #32]
 80070ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3760      	adds	r7, #96	@ 0x60
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08006ced 	.word	0x08006ced
 80070c8:	08006e19 	.word	0x08006e19
 80070cc:	08006e55 	.word	0x08006e55

080070d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	@ 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	61ba      	str	r2, [r7, #24]
 80070fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6979      	ldr	r1, [r7, #20]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e5      	bne.n	80070d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007114:	bf00      	nop
 8007116:	3724      	adds	r7, #36	@ 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007120:	b480      	push	{r7}
 8007122:	b095      	sub	sp, #84	@ 0x54
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800713e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330c      	adds	r3, #12
 8007146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007148:	643a      	str	r2, [r7, #64]	@ 0x40
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800714e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e5      	bne.n	8007128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3314      	adds	r3, #20
 8007162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	61fb      	str	r3, [r7, #28]
   return(result);
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3314      	adds	r3, #20
 800717a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800717c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800717e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e5      	bne.n	800715c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007194:	2b01      	cmp	r3, #1
 8007196:	d119      	bne.n	80071cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f023 0310 	bic.w	r3, r3, #16
 80071ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b8:	61ba      	str	r2, [r7, #24]
 80071ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6979      	ldr	r1, [r7, #20]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	613b      	str	r3, [r7, #16]
   return(result);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e5      	bne.n	8007198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071da:	bf00      	nop
 80071dc:	3754      	adds	r7, #84	@ 0x54
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff fd5d 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b21      	cmp	r3, #33	@ 0x21
 8007220:	d13e      	bne.n	80072a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722a:	d114      	bne.n	8007256 <UART_Transmit_IT+0x48>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d110      	bne.n	8007256 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007248:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]
 8007254:	e008      	b.n	8007268 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6211      	str	r1, [r2, #32]
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29b      	uxth	r3, r3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4619      	mov	r1, r3
 8007276:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10f      	bne.n	800729c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800728a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800729a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	e000      	b.n	80072a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072a0:	2302      	movs	r3, #2
  }
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fce2 	bl	8006c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b08c      	sub	sp, #48	@ 0x30
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b22      	cmp	r3, #34	@ 0x22
 80072f0:	f040 80ae 	bne.w	8007450 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072fc:	d117      	bne.n	800732e <UART_Receive_IT+0x50>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d113      	bne.n	800732e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731c:	b29a      	uxth	r2, r3
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	629a      	str	r2, [r3, #40]	@ 0x28
 800732c:	e026      	b.n	800737c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007340:	d007      	beq.n	8007352 <UART_Receive_IT+0x74>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <UART_Receive_IT+0x82>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e008      	b.n	8007372 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736c:	b2da      	uxtb	r2, r3
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29b      	uxth	r3, r3
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4619      	mov	r1, r3
 800738a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800738c:	2b00      	cmp	r3, #0
 800738e:	d15d      	bne.n	800744c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0220 	bic.w	r2, r2, #32
 800739e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0201 	bic.w	r2, r2, #1
 80073be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d135      	bne.n	8007442 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	613b      	str	r3, [r7, #16]
   return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f023 0310 	bic.w	r3, r3, #16
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fc:	623a      	str	r2, [r7, #32]
 80073fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	61bb      	str	r3, [r7, #24]
   return(result);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b10      	cmp	r3, #16
 800741c:	d10a      	bne.n	8007434 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fc4a 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8007440:	e002      	b.n	8007448 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7f9 fb02 	bl	8000a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	e002      	b.n	8007452 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	e000      	b.n	8007452 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007450:	2302      	movs	r3, #2
  }
}
 8007452:	4618      	mov	r0, r3
 8007454:	3730      	adds	r7, #48	@ 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800745c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007460:	b0c0      	sub	sp, #256	@ 0x100
 8007462:	af00      	add	r7, sp, #0
 8007464:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	68d9      	ldr	r1, [r3, #12]
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	ea40 0301 	orr.w	r3, r0, r1
 8007484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	431a      	orrs	r2, r3
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	431a      	orrs	r2, r3
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074b4:	f021 010c 	bic.w	r1, r1, #12
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074c2:	430b      	orrs	r3, r1
 80074c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	6999      	ldr	r1, [r3, #24]
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	ea40 0301 	orr.w	r3, r0, r1
 80074e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007728 <UART_SetConfig+0x2cc>)
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d005      	beq.n	80074fc <UART_SetConfig+0xa0>
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b8d      	ldr	r3, [pc, #564]	@ (800772c <UART_SetConfig+0x2d0>)
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d104      	bne.n	8007506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074fc:	f7fd fdf4 	bl	80050e8 <HAL_RCC_GetPCLK2Freq>
 8007500:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007504:	e003      	b.n	800750e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007506:	f7fd fddb 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 800750a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007518:	f040 810c 	bne.w	8007734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800751c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007520:	2200      	movs	r2, #0
 8007522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007526:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800752a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800752e:	4622      	mov	r2, r4
 8007530:	462b      	mov	r3, r5
 8007532:	1891      	adds	r1, r2, r2
 8007534:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007536:	415b      	adcs	r3, r3
 8007538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800753a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800753e:	4621      	mov	r1, r4
 8007540:	eb12 0801 	adds.w	r8, r2, r1
 8007544:	4629      	mov	r1, r5
 8007546:	eb43 0901 	adc.w	r9, r3, r1
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800755a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800755e:	4690      	mov	r8, r2
 8007560:	4699      	mov	r9, r3
 8007562:	4623      	mov	r3, r4
 8007564:	eb18 0303 	adds.w	r3, r8, r3
 8007568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800756c:	462b      	mov	r3, r5
 800756e:	eb49 0303 	adc.w	r3, r9, r3
 8007572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007582:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800758a:	460b      	mov	r3, r1
 800758c:	18db      	adds	r3, r3, r3
 800758e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007590:	4613      	mov	r3, r2
 8007592:	eb42 0303 	adc.w	r3, r2, r3
 8007596:	657b      	str	r3, [r7, #84]	@ 0x54
 8007598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800759c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075a0:	f7f8 fe1e 	bl	80001e0 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4b61      	ldr	r3, [pc, #388]	@ (8007730 <UART_SetConfig+0x2d4>)
 80075aa:	fba3 2302 	umull	r2, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	011c      	lsls	r4, r3, #4
 80075b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	1891      	adds	r1, r2, r2
 80075ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075cc:	415b      	adcs	r3, r3
 80075ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075d4:	4641      	mov	r1, r8
 80075d6:	eb12 0a01 	adds.w	sl, r2, r1
 80075da:	4649      	mov	r1, r9
 80075dc:	eb43 0b01 	adc.w	fp, r3, r1
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075f4:	4692      	mov	sl, r2
 80075f6:	469b      	mov	fp, r3
 80075f8:	4643      	mov	r3, r8
 80075fa:	eb1a 0303 	adds.w	r3, sl, r3
 80075fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007602:	464b      	mov	r3, r9
 8007604:	eb4b 0303 	adc.w	r3, fp, r3
 8007608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007618:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800761c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007620:	460b      	mov	r3, r1
 8007622:	18db      	adds	r3, r3, r3
 8007624:	643b      	str	r3, [r7, #64]	@ 0x40
 8007626:	4613      	mov	r3, r2
 8007628:	eb42 0303 	adc.w	r3, r2, r3
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
 800762e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007636:	f7f8 fdd3 	bl	80001e0 <__aeabi_uldivmod>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4611      	mov	r1, r2
 8007640:	4b3b      	ldr	r3, [pc, #236]	@ (8007730 <UART_SetConfig+0x2d4>)
 8007642:	fba3 2301 	umull	r2, r3, r3, r1
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	2264      	movs	r2, #100	@ 0x64
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	1acb      	subs	r3, r1, r3
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007656:	4b36      	ldr	r3, [pc, #216]	@ (8007730 <UART_SetConfig+0x2d4>)
 8007658:	fba3 2302 	umull	r2, r3, r3, r2
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007664:	441c      	add	r4, r3
 8007666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766a:	2200      	movs	r2, #0
 800766c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007670:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	1891      	adds	r1, r2, r2
 800767e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007680:	415b      	adcs	r3, r3
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007688:	4641      	mov	r1, r8
 800768a:	1851      	adds	r1, r2, r1
 800768c:	6339      	str	r1, [r7, #48]	@ 0x30
 800768e:	4649      	mov	r1, r9
 8007690:	414b      	adcs	r3, r1
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076a0:	4659      	mov	r1, fp
 80076a2:	00cb      	lsls	r3, r1, #3
 80076a4:	4651      	mov	r1, sl
 80076a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076aa:	4651      	mov	r1, sl
 80076ac:	00ca      	lsls	r2, r1, #3
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	4642      	mov	r2, r8
 80076b6:	189b      	adds	r3, r3, r2
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076bc:	464b      	mov	r3, r9
 80076be:	460a      	mov	r2, r1
 80076c0:	eb42 0303 	adc.w	r3, r2, r3
 80076c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076dc:	460b      	mov	r3, r1
 80076de:	18db      	adds	r3, r3, r3
 80076e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e2:	4613      	mov	r3, r2
 80076e4:	eb42 0303 	adc.w	r3, r2, r3
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076f2:	f7f8 fd75 	bl	80001e0 <__aeabi_uldivmod>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007730 <UART_SetConfig+0x2d4>)
 80076fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	2164      	movs	r1, #100	@ 0x64
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	3332      	adds	r3, #50	@ 0x32
 800770e:	4a08      	ldr	r2, [pc, #32]	@ (8007730 <UART_SetConfig+0x2d4>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	f003 0207 	and.w	r2, r3, #7
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4422      	add	r2, r4
 8007722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007724:	e106      	b.n	8007934 <UART_SetConfig+0x4d8>
 8007726:	bf00      	nop
 8007728:	40011000 	.word	0x40011000
 800772c:	40011400 	.word	0x40011400
 8007730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007738:	2200      	movs	r2, #0
 800773a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800773e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007746:	4642      	mov	r2, r8
 8007748:	464b      	mov	r3, r9
 800774a:	1891      	adds	r1, r2, r2
 800774c:	6239      	str	r1, [r7, #32]
 800774e:	415b      	adcs	r3, r3
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
 8007752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007756:	4641      	mov	r1, r8
 8007758:	1854      	adds	r4, r2, r1
 800775a:	4649      	mov	r1, r9
 800775c:	eb43 0501 	adc.w	r5, r3, r1
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	00eb      	lsls	r3, r5, #3
 800776a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800776e:	00e2      	lsls	r2, r4, #3
 8007770:	4614      	mov	r4, r2
 8007772:	461d      	mov	r5, r3
 8007774:	4643      	mov	r3, r8
 8007776:	18e3      	adds	r3, r4, r3
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800777c:	464b      	mov	r3, r9
 800777e:	eb45 0303 	adc.w	r3, r5, r3
 8007782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077a2:	4629      	mov	r1, r5
 80077a4:	008b      	lsls	r3, r1, #2
 80077a6:	4621      	mov	r1, r4
 80077a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ac:	4621      	mov	r1, r4
 80077ae:	008a      	lsls	r2, r1, #2
 80077b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077b4:	f7f8 fd14 	bl	80001e0 <__aeabi_uldivmod>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4b60      	ldr	r3, [pc, #384]	@ (8007940 <UART_SetConfig+0x4e4>)
 80077be:	fba3 2302 	umull	r2, r3, r3, r2
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	011c      	lsls	r4, r3, #4
 80077c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077d8:	4642      	mov	r2, r8
 80077da:	464b      	mov	r3, r9
 80077dc:	1891      	adds	r1, r2, r2
 80077de:	61b9      	str	r1, [r7, #24]
 80077e0:	415b      	adcs	r3, r3
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e8:	4641      	mov	r1, r8
 80077ea:	1851      	adds	r1, r2, r1
 80077ec:	6139      	str	r1, [r7, #16]
 80077ee:	4649      	mov	r1, r9
 80077f0:	414b      	adcs	r3, r1
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007800:	4659      	mov	r1, fp
 8007802:	00cb      	lsls	r3, r1, #3
 8007804:	4651      	mov	r1, sl
 8007806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800780a:	4651      	mov	r1, sl
 800780c:	00ca      	lsls	r2, r1, #3
 800780e:	4610      	mov	r0, r2
 8007810:	4619      	mov	r1, r3
 8007812:	4603      	mov	r3, r0
 8007814:	4642      	mov	r2, r8
 8007816:	189b      	adds	r3, r3, r2
 8007818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800781c:	464b      	mov	r3, r9
 800781e:	460a      	mov	r2, r1
 8007820:	eb42 0303 	adc.w	r3, r2, r3
 8007824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007832:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007840:	4649      	mov	r1, r9
 8007842:	008b      	lsls	r3, r1, #2
 8007844:	4641      	mov	r1, r8
 8007846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800784a:	4641      	mov	r1, r8
 800784c:	008a      	lsls	r2, r1, #2
 800784e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007852:	f7f8 fcc5 	bl	80001e0 <__aeabi_uldivmod>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4611      	mov	r1, r2
 800785c:	4b38      	ldr	r3, [pc, #224]	@ (8007940 <UART_SetConfig+0x4e4>)
 800785e:	fba3 2301 	umull	r2, r3, r3, r1
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	2264      	movs	r2, #100	@ 0x64
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	1acb      	subs	r3, r1, r3
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	3332      	adds	r3, #50	@ 0x32
 8007870:	4a33      	ldr	r2, [pc, #204]	@ (8007940 <UART_SetConfig+0x4e4>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800787c:	441c      	add	r4, r3
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007882:	2200      	movs	r2, #0
 8007884:	673b      	str	r3, [r7, #112]	@ 0x70
 8007886:	677a      	str	r2, [r7, #116]	@ 0x74
 8007888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800788c:	4642      	mov	r2, r8
 800788e:	464b      	mov	r3, r9
 8007890:	1891      	adds	r1, r2, r2
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	415b      	adcs	r3, r3
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800789c:	4641      	mov	r1, r8
 800789e:	1851      	adds	r1, r2, r1
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	4649      	mov	r1, r9
 80078a4:	414b      	adcs	r3, r1
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078b4:	4659      	mov	r1, fp
 80078b6:	00cb      	lsls	r3, r1, #3
 80078b8:	4651      	mov	r1, sl
 80078ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078be:	4651      	mov	r1, sl
 80078c0:	00ca      	lsls	r2, r1, #3
 80078c2:	4610      	mov	r0, r2
 80078c4:	4619      	mov	r1, r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	4642      	mov	r2, r8
 80078ca:	189b      	adds	r3, r3, r2
 80078cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078ce:	464b      	mov	r3, r9
 80078d0:	460a      	mov	r2, r1
 80078d2:	eb42 0303 	adc.w	r3, r2, r3
 80078d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80078e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078f0:	4649      	mov	r1, r9
 80078f2:	008b      	lsls	r3, r1, #2
 80078f4:	4641      	mov	r1, r8
 80078f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078fa:	4641      	mov	r1, r8
 80078fc:	008a      	lsls	r2, r1, #2
 80078fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007902:	f7f8 fc6d 	bl	80001e0 <__aeabi_uldivmod>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <UART_SetConfig+0x4e4>)
 800790c:	fba3 1302 	umull	r1, r3, r3, r2
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	2164      	movs	r1, #100	@ 0x64
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	3332      	adds	r3, #50	@ 0x32
 800791e:	4a08      	ldr	r2, [pc, #32]	@ (8007940 <UART_SetConfig+0x4e4>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f003 020f 	and.w	r2, r3, #15
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4422      	add	r2, r4
 8007932:	609a      	str	r2, [r3, #8]
}
 8007934:	bf00      	nop
 8007936:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800793a:	46bd      	mov	sp, r7
 800793c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007940:	51eb851f 	.word	0x51eb851f

08007944 <__NVIC_SetPriority>:
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007954:	2b00      	cmp	r3, #0
 8007956:	db0a      	blt.n	800796e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	490c      	ldr	r1, [pc, #48]	@ (8007990 <__NVIC_SetPriority+0x4c>)
 800795e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007962:	0112      	lsls	r2, r2, #4
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	440b      	add	r3, r1
 8007968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800796c:	e00a      	b.n	8007984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	4908      	ldr	r1, [pc, #32]	@ (8007994 <__NVIC_SetPriority+0x50>)
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	3b04      	subs	r3, #4
 800797c:	0112      	lsls	r2, r2, #4
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	440b      	add	r3, r1
 8007982:	761a      	strb	r2, [r3, #24]
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	e000e100 	.word	0xe000e100
 8007994:	e000ed00 	.word	0xe000ed00

08007998 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <SysTick_Handler+0x1c>)
 800799e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079a0:	f002 fd00 	bl	800a3a4 <xTaskGetSchedulerState>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d001      	beq.n	80079ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079aa:	f003 fc2d 	bl	800b208 <xPortSysTickHandler>
  }
}
 80079ae:	bf00      	nop
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	e000e010 	.word	0xe000e010

080079b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079bc:	2100      	movs	r1, #0
 80079be:	f06f 0004 	mvn.w	r0, #4
 80079c2:	f7ff ffbf 	bl	8007944 <__NVIC_SetPriority>
#endif
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079d2:	f3ef 8305 	mrs	r3, IPSR
 80079d6:	603b      	str	r3, [r7, #0]
  return(result);
 80079d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80079de:	f06f 0305 	mvn.w	r3, #5
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	e00c      	b.n	8007a00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a10 <osKernelInitialize+0x44>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079ee:	4b08      	ldr	r3, [pc, #32]	@ (8007a10 <osKernelInitialize+0x44>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	e002      	b.n	8007a00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80079fa:	f04f 33ff 	mov.w	r3, #4294967295
 80079fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a00:	687b      	ldr	r3, [r7, #4]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	200013ac 	.word	0x200013ac

08007a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1a:	f3ef 8305 	mrs	r3, IPSR
 8007a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a26:	f06f 0305 	mvn.w	r3, #5
 8007a2a:	607b      	str	r3, [r7, #4]
 8007a2c:	e010      	b.n	8007a50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <osKernelStart+0x48>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d109      	bne.n	8007a4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a36:	f7ff ffbf 	bl	80079b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <osKernelStart+0x48>)
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a40:	f001 ff90 	bl	8009964 <vTaskStartScheduler>
      stat = osOK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	e002      	b.n	8007a50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a50:	687b      	ldr	r3, [r7, #4]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200013ac 	.word	0x200013ac

08007a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08e      	sub	sp, #56	@ 0x38
 8007a64:	af04      	add	r7, sp, #16
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a70:	f3ef 8305 	mrs	r3, IPSR
 8007a74:	617b      	str	r3, [r7, #20]
  return(result);
 8007a76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d17e      	bne.n	8007b7a <osThreadNew+0x11a>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d07b      	beq.n	8007b7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a82:	2380      	movs	r3, #128	@ 0x80
 8007a84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a86:	2318      	movs	r3, #24
 8007a88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d045      	beq.n	8007b26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <osThreadNew+0x48>
        name = attr->name;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <osThreadNew+0x6e>
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2b38      	cmp	r3, #56	@ 0x38
 8007ac0:	d805      	bhi.n	8007ace <osThreadNew+0x6e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <osThreadNew+0x72>
        return (NULL);
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e054      	b.n	8007b7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	089b      	lsrs	r3, r3, #2
 8007ae0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00e      	beq.n	8007b08 <osThreadNew+0xa8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b63      	cmp	r3, #99	@ 0x63
 8007af0:	d90a      	bls.n	8007b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d006      	beq.n	8007b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <osThreadNew+0xa8>
        mem = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	e010      	b.n	8007b2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10c      	bne.n	8007b2a <osThreadNew+0xca>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <osThreadNew+0xca>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <osThreadNew+0xca>
          mem = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	e001      	b.n	8007b2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d110      	bne.n	8007b52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b38:	9202      	str	r2, [sp, #8]
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6a3a      	ldr	r2, [r7, #32]
 8007b44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f001 fc4e 	bl	80093e8 <xTaskCreateStatic>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	e013      	b.n	8007b7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d110      	bne.n	8007b7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f107 0310 	add.w	r3, r7, #16
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fc9c 	bl	80094a8 <xTaskCreate>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <osThreadNew+0x11a>
            hTask = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b7a:	693b      	ldr	r3, [r7, #16]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3728      	adds	r7, #40	@ 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b90:	f3ef 8305 	mrs	r3, IPSR
 8007b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007b9c:	f06f 0305 	mvn.w	r3, #5
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e017      	b.n	8007bd4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007baa:	f06f 0303 	mvn.w	r3, #3
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e010      	b.n	8007bd4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007bb2:	6938      	ldr	r0, [r7, #16]
 8007bb4:	f001 fe6e 	bl	8009894 <eTaskGetState>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d005      	beq.n	8007bce <osThreadTerminate+0x4a>
      stat = osOK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f001 fdba 	bl	8009740 <vTaskDelete>
 8007bcc:	e002      	b.n	8007bd4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007bce:	f06f 0302 	mvn.w	r3, #2
 8007bd2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007bd4:	697b      	ldr	r3, [r7, #20]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007be6:	f3ef 8305 	mrs	r3, IPSR
 8007bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <osDelay+0x1c>
    stat = osErrorISR;
 8007bf2:	f06f 0305 	mvn.w	r3, #5
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	e007      	b.n	8007c0a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fe0f 	bl	8009828 <vTaskDelay>
    }
  }

  return (stat);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c26:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d12d      	bne.n	8007c88 <osEventFlagsNew+0x74>
    mem = -1;
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d015      	beq.n	8007c64 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <osEventFlagsNew+0x3a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b1f      	cmp	r3, #31
 8007c46:	d902      	bls.n	8007c4e <osEventFlagsNew+0x3a>
        mem = 1;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e00c      	b.n	8007c68 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d108      	bne.n	8007c68 <osEventFlagsNew+0x54>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d104      	bne.n	8007c68 <osEventFlagsNew+0x54>
          mem = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	e001      	b.n	8007c68 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d106      	bne.n	8007c7c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f9f8 	bl	8008068 <xEventGroupCreateStatic>
 8007c78:	6178      	str	r0, [r7, #20]
 8007c7a:	e005      	b.n	8007c88 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007c82:	f000 fa2a 	bl	80080da <xEventGroupCreate>
 8007c86:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007c88:	697b      	ldr	r3, [r7, #20]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <osEventFlagsSet+0x1c>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cae:	d303      	bcc.n	8007cb8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007cb0:	f06f 0303 	mvn.w	r3, #3
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e028      	b.n	8007d0a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb8:	f3ef 8305 	mrs	r3, IPSR
 8007cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01d      	beq.n	8007d00 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007cc8:	f107 0308 	add.w	r3, r7, #8
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6938      	ldr	r0, [r7, #16]
 8007cd2:	f000 fbab 	bl	800842c <xEventGroupSetBitsFromISR>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007cdc:	f06f 0302 	mvn.w	r3, #2
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e012      	b.n	8007d0a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <osEventFlagsSet+0x76>
 8007cee:	4b09      	ldr	r3, [pc, #36]	@ (8007d14 <osEventFlagsSet+0x80>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	e004      	b.n	8007d0a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6938      	ldr	r0, [r7, #16]
 8007d04:	f000 fad6 	bl	80082b4 <xEventGroupSetBits>
 8007d08:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007d0a:	697b      	ldr	r3, [r7, #20]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	@ 0x30
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <osEventFlagsWait+0x20>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d36:	d303      	bcc.n	8007d40 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007d38:	f06f 0303 	mvn.w	r3, #3
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e04b      	b.n	8007dd8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d40:	f3ef 8305 	mrs	r3, IPSR
 8007d44:	617b      	str	r3, [r7, #20]
  return(result);
 8007d46:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007d4c:	f06f 0305 	mvn.w	r3, #5
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	e041      	b.n	8007dd8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d62:	e001      	b.n	8007d68 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	e001      	b.n	8007d7c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	69b8      	ldr	r0, [r7, #24]
 8007d88:	f000 f9c2 	bl	8008110 <xEventGroupWaitBits>
 8007d8c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d010      	beq.n	8007dba <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d019      	beq.n	8007dd8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007daa:	f06f 0301 	mvn.w	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e012      	b.n	8007dd8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007db2:	f06f 0302 	mvn.w	r3, #2
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	e00e      	b.n	8007dd8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007dca:	f06f 0301 	mvn.w	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e002      	b.n	8007dd8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007dd2:	f06f 0302 	mvn.w	r3, #2
 8007dd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3728      	adds	r7, #40	@ 0x28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b088      	sub	sp, #32
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dee:	f3ef 8305 	mrs	r3, IPSR
 8007df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007df4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d174      	bne.n	8007ee4 <osMutexNew+0x102>
    if (attr != NULL) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e001      	b.n	8007e0c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <osMutexNew+0x3a>
      rmtx = 1U;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e001      	b.n	8007e20 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d15c      	bne.n	8007ee4 <osMutexNew+0x102>
      mem = -1;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d015      	beq.n	8007e62 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d006      	beq.n	8007e4c <osMutexNew+0x6a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e44:	d902      	bls.n	8007e4c <osMutexNew+0x6a>
          mem = 1;
 8007e46:	2301      	movs	r3, #1
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	e00c      	b.n	8007e66 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <osMutexNew+0x84>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <osMutexNew+0x84>
            mem = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	e001      	b.n	8007e66 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d112      	bne.n	8007e92 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4619      	mov	r1, r3
 8007e78:	2004      	movs	r0, #4
 8007e7a:	f000 fd16 	bl	80088aa <xQueueCreateMutexStatic>
 8007e7e:	61f8      	str	r0, [r7, #28]
 8007e80:	e016      	b.n	8007eb0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	4619      	mov	r1, r3
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f000 fd0e 	bl	80088aa <xQueueCreateMutexStatic>
 8007e8e:	61f8      	str	r0, [r7, #28]
 8007e90:	e00e      	b.n	8007eb0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e9e:	2004      	movs	r0, #4
 8007ea0:	f000 fceb 	bl	800887a <xQueueCreateMutex>
 8007ea4:	61f8      	str	r0, [r7, #28]
 8007ea6:	e003      	b.n	8007eb0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f000 fce6 	bl	800887a <xQueueCreateMutex>
 8007eae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <osMutexNew+0xee>
        if (attr != NULL) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <osMutexNew+0xe2>
          name = attr->name;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e001      	b.n	8007ec8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007ec8:	68f9      	ldr	r1, [r7, #12]
 8007eca:	69f8      	ldr	r0, [r7, #28]
 8007ecc:	f001 fa2e 	bl	800932c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d006      	beq.n	8007ee4 <osMutexNew+0x102>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007ee4:	69fb      	ldr	r3, [r7, #28]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f023 0301 	bic.w	r3, r3, #1
 8007efe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f0c:	f3ef 8305 	mrs	r3, IPSR
 8007f10:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f12:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007f18:	f06f 0305 	mvn.w	r3, #5
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e02c      	b.n	8007f7a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007f26:	f06f 0303 	mvn.w	r3, #3
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e025      	b.n	8007f7a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d011      	beq.n	8007f58 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6938      	ldr	r0, [r7, #16]
 8007f38:	f000 fd07 	bl	800894a <xQueueTakeMutexRecursive>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d01b      	beq.n	8007f7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007f48:	f06f 0301 	mvn.w	r3, #1
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e014      	b.n	8007f7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f50:	f06f 0302 	mvn.w	r3, #2
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e010      	b.n	8007f7a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f000 ffae 	bl	8008ebc <xQueueSemaphoreTake>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d009      	beq.n	8007f7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007f6c:	f06f 0301 	mvn.w	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	e002      	b.n	8007f7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f74:	f06f 0302 	mvn.w	r3, #2
 8007f78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f7a:	697b      	ldr	r3, [r7, #20]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa0:	f3ef 8305 	mrs	r3, IPSR
 8007fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007fac:	f06f 0305 	mvn.w	r3, #5
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	e01f      	b.n	8007ff4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007fba:	f06f 0303 	mvn.w	r3, #3
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e018      	b.n	8007ff4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d009      	beq.n	8007fdc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007fc8:	6938      	ldr	r0, [r7, #16]
 8007fca:	f000 fc89 	bl	80088e0 <xQueueGiveMutexRecursive>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d00f      	beq.n	8007ff4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fd4:	f06f 0302 	mvn.w	r3, #2
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e00b      	b.n	8007ff4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007fdc:	2300      	movs	r3, #0
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	6938      	ldr	r0, [r7, #16]
 8007fe4:	f000 fce8 	bl	80089b8 <xQueueGenericSend>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fee:	f06f 0302 	mvn.w	r3, #2
 8007ff2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4a07      	ldr	r2, [pc, #28]	@ (800802c <vApplicationGetIdleTaskMemory+0x2c>)
 8008010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4a06      	ldr	r2, [pc, #24]	@ (8008030 <vApplicationGetIdleTaskMemory+0x30>)
 8008016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2280      	movs	r2, #128	@ 0x80
 800801c:	601a      	str	r2, [r3, #0]
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	200013b0 	.word	0x200013b0
 8008030:	20001414 	.word	0x20001414

08008034 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a07      	ldr	r2, [pc, #28]	@ (8008060 <vApplicationGetTimerTaskMemory+0x2c>)
 8008044:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	4a06      	ldr	r2, [pc, #24]	@ (8008064 <vApplicationGetTimerTaskMemory+0x30>)
 800804a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008052:	601a      	str	r2, [r3, #0]
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20001614 	.word	0x20001614
 8008064:	20001678 	.word	0x20001678

08008068 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800808e:	2320      	movs	r3, #32
 8008090:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b20      	cmp	r3, #32
 8008096:	d00b      	beq.n	80080b0 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	60fb      	str	r3, [r7, #12]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f9c5 	bl	8008454 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2201      	movs	r2, #1
 80080ce:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80080d0:	697b      	ldr	r3, [r7, #20]
	}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80080e0:	2020      	movs	r0, #32
 80080e2:	f003 f923 	bl	800b32c <pvPortMalloc>
 80080e6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9ab 	bl	8008454 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008104:	687b      	ldr	r3, [r7, #4]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b090      	sub	sp, #64	@ 0x40
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <xEventGroupWaitBits+0x38>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	623b      	str	r3, [r7, #32]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800814e:	d30b      	bcc.n	8008168 <xEventGroupWaitBits+0x58>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61fb      	str	r3, [r7, #28]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <xEventGroupWaitBits+0x76>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	61bb      	str	r3, [r7, #24]
}
 8008180:	bf00      	nop
 8008182:	bf00      	nop
 8008184:	e7fd      	b.n	8008182 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008186:	f002 f90d 	bl	800a3a4 <xTaskGetSchedulerState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <xEventGroupWaitBits+0x86>
 8008190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <xEventGroupWaitBits+0x8a>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xEventGroupWaitBits+0x8c>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	617b      	str	r3, [r7, #20]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80081b8:	f001 fc3e 	bl	8009a38 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80081bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081c8:	f000 f90d 	bl	80083e6 <prvTestWaitCondition>
 80081cc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00e      	beq.n	80081f2 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d028      	beq.n	8008234 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	401a      	ands	r2, r3
 80081ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e020      	b.n	8008234 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80081f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80081f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008200:	e018      	b.n	8008234 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800820e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800821c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	1d18      	adds	r0, r3, #4
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	4313      	orrs	r3, r2
 8008228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800822a:	4619      	mov	r1, r3
 800822c:	f001 fe1a 	bl	8009e64 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008234:	f001 fc0e 	bl	8009a54 <xTaskResumeAll>
 8008238:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800823a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800823c:	2b00      	cmp	r3, #0
 800823e:	d031      	beq.n	80082a4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	2b00      	cmp	r3, #0
 8008244:	d107      	bne.n	8008256 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8008246:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <xEventGroupWaitBits+0x1a0>)
 8008248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008256:	f002 fa1f 	bl	800a698 <uxTaskResetEventItemValue>
 800825a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800825c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d11a      	bne.n	800829c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8008266:	f002 ff3f 	bl	800b0e8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800826a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008276:	f000 f8b6 	bl	80083e6 <prvTestWaitCondition>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	43db      	mvns	r3, r3
 800828e:	401a      	ands	r2, r3
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8008298:	f002 ff58 	bl	800b14c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800829c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80082a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3740      	adds	r7, #64	@ 0x40
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08e      	sub	sp, #56	@ 0x38
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80082be:	2300      	movs	r3, #0
 80082c0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <xEventGroupSetBits+0x34>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	613b      	str	r3, [r7, #16]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ee:	d30b      	bcc.n	8008308 <xEventGroupSetBits+0x54>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	3304      	adds	r3, #4
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	3308      	adds	r3, #8
 8008312:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008314:	f001 fb90 	bl	8009a38 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	431a      	orrs	r2, r3
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800832a:	e03c      	b.n	80083a6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800832c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008338:	2300      	movs	r3, #0
 800833a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008342:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800834a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d108      	bne.n	8008368 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008362:	2301      	movs	r3, #1
 8008364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008366:	e008      	b.n	800837a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	4013      	ands	r3, r2
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	429a      	cmp	r2, r3
 8008374:	d101      	bne.n	800837a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800837a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d010      	beq.n	80083a2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800838a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800839a:	4619      	mov	r1, r3
 800839c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800839e:	f001 fe2f 	bl	800a000 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80083a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d1be      	bne.n	800832c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	43db      	mvns	r3, r3
 80083b6:	401a      	ands	r2, r3
 80083b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ba:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80083bc:	f001 fb4a 	bl	8009a54 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	681b      	ldr	r3, [r3, #0]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3738      	adds	r7, #56	@ 0x38
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff6b 	bl	80082b4 <xEventGroupSetBits>
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80083e6:	b480      	push	{r7}
 80083e8:	b087      	sub	sp, #28
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008406:	2301      	movs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e007      	b.n	800841c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4013      	ands	r3, r2
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	429a      	cmp	r2, r3
 8008416:	d101      	bne.n	800841c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008418:	2301      	movs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800841c:	697b      	ldr	r3, [r7, #20]
}
 800841e:	4618      	mov	r0, r3
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	4804      	ldr	r0, [pc, #16]	@ (8008450 <xEventGroupSetBitsFromISR+0x24>)
 8008440:	f002 fd04 	bl	800ae4c <xTimerPendFunctionCallFromISR>
 8008444:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008446:	697b      	ldr	r3, [r7, #20]
	}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	080083cd 	.word	0x080083cd

08008454 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f103 0208 	add.w	r2, r3, #8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f04f 32ff 	mov.w	r2, #4294967295
 800846c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f103 0208 	add.w	r2, r3, #8
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f103 0208 	add.w	r2, r3, #8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	601a      	str	r2, [r3, #0]
}
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d103      	bne.n	8008516 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e00c      	b.n	8008530 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3308      	adds	r3, #8
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e002      	b.n	8008524 <vListInsert+0x2e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	429a      	cmp	r2, r3
 800852e:	d2f6      	bcs.n	800851e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]
}
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6892      	ldr	r2, [r2, #8]
 800857e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6852      	ldr	r2, [r2, #4]
 8008588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d103      	bne.n	800859c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	1e5a      	subs	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10b      	bne.n	80085e8 <xQueueGenericReset+0x2c>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60bb      	str	r3, [r7, #8]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085e8:	f002 fd7e 	bl	800b0e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008618:	3b01      	subs	r3, #1
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	441a      	add	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	22ff      	movs	r2, #255	@ 0xff
 800862c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	22ff      	movs	r2, #255	@ 0xff
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d114      	bne.n	8008668 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01a      	beq.n	800867c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3310      	adds	r3, #16
 800864a:	4618      	mov	r0, r3
 800864c:	f001 fc74 	bl	8009f38 <xTaskRemoveFromEventList>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d012      	beq.n	800867c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008656:	4b0d      	ldr	r3, [pc, #52]	@ (800868c <xQueueGenericReset+0xd0>)
 8008658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	e009      	b.n	800867c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3310      	adds	r3, #16
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fef1 	bl	8008454 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3324      	adds	r3, #36	@ 0x24
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff feec 	bl	8008454 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800867c:	f002 fd66 	bl	800b14c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008680:	2301      	movs	r3, #1
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	@ 0x38
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	e7fd      	b.n	80086d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <xQueueGenericCreateStatic+0x56>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <xQueueGenericCreateStatic+0x5a>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericCreateStatic+0x5c>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	623b      	str	r3, [r7, #32]
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	e7fd      	b.n	8008704 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <xQueueGenericCreateStatic+0x84>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <xQueueGenericCreateStatic+0x88>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <xQueueGenericCreateStatic+0x8a>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61fb      	str	r3, [r7, #28]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008736:	2350      	movs	r3, #80	@ 0x50
 8008738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b50      	cmp	r3, #80	@ 0x50
 800873e:	d00b      	beq.n	8008758 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	61bb      	str	r3, [r7, #24]
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008758:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00d      	beq.n	8008780 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800876c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f840 	bl	8008800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008782:	4618      	mov	r0, r3
 8008784:	3730      	adds	r7, #48	@ 0x30
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800878a:	b580      	push	{r7, lr}
 800878c:	b08a      	sub	sp, #40	@ 0x28
 800878e:	af02      	add	r7, sp, #8
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	4613      	mov	r3, r2
 8008796:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	613b      	str	r3, [r7, #16]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3350      	adds	r3, #80	@ 0x50
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fdb1 	bl	800b32c <pvPortMalloc>
 80087ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d011      	beq.n	80087f6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	3350      	adds	r3, #80	@ 0x50
 80087da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087e4:	79fa      	ldrb	r2, [r7, #7]
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f805 	bl	8008800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087f6:	69bb      	ldr	r3, [r7, #24]
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e002      	b.n	8008822 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800882e:	2101      	movs	r1, #1
 8008830:	69b8      	ldr	r0, [r7, #24]
 8008832:	f7ff fec3 	bl	80085bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00e      	beq.n	8008872 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	2100      	movs	r1, #0
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8a3 	bl	80089b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	4603      	mov	r3, r0
 8008882:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	2300      	movs	r3, #0
 800888a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	461a      	mov	r2, r3
 8008890:	6939      	ldr	r1, [r7, #16]
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f7ff ff79 	bl	800878a <xQueueGenericCreate>
 8008898:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff ffd3 	bl	8008846 <prvInitialiseMutex>

		return xNewQueue;
 80088a0:	68fb      	ldr	r3, [r7, #12]
	}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b088      	sub	sp, #32
 80088ae:	af02      	add	r7, sp, #8
 80088b0:	4603      	mov	r3, r0
 80088b2:	6039      	str	r1, [r7, #0]
 80088b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088b6:	2301      	movs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2200      	movs	r2, #0
 80088c6:	6939      	ldr	r1, [r7, #16]
 80088c8:	6978      	ldr	r0, [r7, #20]
 80088ca:	f7ff fee1 	bl	8008690 <xQueueGenericCreateStatic>
 80088ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff ffb8 	bl	8008846 <prvInitialiseMutex>

		return xNewQueue;
 80088d6:	68fb      	ldr	r3, [r7, #12]
	}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80088e0:	b590      	push	{r4, r7, lr}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	689c      	ldr	r4, [r3, #8]
 800890e:	f001 fd39 	bl	800a384 <xTaskGetCurrentTaskHandle>
 8008912:	4603      	mov	r3, r0
 8008914:	429c      	cmp	r4, r3
 8008916:	d111      	bne.n	800893c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	1e5a      	subs	r2, r3, #1
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d105      	bne.n	8008936 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800892a:	2300      	movs	r3, #0
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	6938      	ldr	r0, [r7, #16]
 8008932:	f000 f841 	bl	80089b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008936:	2301      	movs	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e001      	b.n	8008940 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008940:	697b      	ldr	r3, [r7, #20]
	}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	bd90      	pop	{r4, r7, pc}

0800894a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800894a:	b590      	push	{r4, r7, lr}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10b      	bne.n	8008976 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60fb      	str	r3, [r7, #12]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	689c      	ldr	r4, [r3, #8]
 800897a:	f001 fd03 	bl	800a384 <xTaskGetCurrentTaskHandle>
 800897e:	4603      	mov	r3, r0
 8008980:	429c      	cmp	r4, r3
 8008982:	d107      	bne.n	8008994 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800898e:	2301      	movs	r3, #1
 8008990:	617b      	str	r3, [r7, #20]
 8008992:	e00c      	b.n	80089ae <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6938      	ldr	r0, [r7, #16]
 8008998:	f000 fa90 	bl	8008ebc <xQueueSemaphoreTake>
 800899c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80089ae:	697b      	ldr	r3, [r7, #20]
	}
 80089b0:	4618      	mov	r0, r3
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}

080089b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08e      	sub	sp, #56	@ 0x38
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <xQueueGenericSend+0x34>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <xQueueGenericSend+0x42>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <xQueueGenericSend+0x46>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueGenericSend+0x48>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10b      	bne.n	8008a1c <xQueueGenericSend+0x64>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d103      	bne.n	8008a2a <xQueueGenericSend+0x72>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <xQueueGenericSend+0x76>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e000      	b.n	8008a30 <xQueueGenericSend+0x78>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <xQueueGenericSend+0x94>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	623b      	str	r3, [r7, #32]
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a4c:	f001 fcaa 	bl	800a3a4 <xTaskGetSchedulerState>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <xQueueGenericSend+0xa4>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <xQueueGenericSend+0xa8>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <xQueueGenericSend+0xaa>
 8008a60:	2300      	movs	r3, #0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10b      	bne.n	8008a7e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	61fb      	str	r3, [r7, #28]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a7e:	f002 fb33 	bl	800b0e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d302      	bcc.n	8008a94 <xQueueGenericSend+0xdc>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d129      	bne.n	8008ae8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a9a:	f000 fb37 	bl	800910c <prvCopyDataToQueue>
 8008a9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d010      	beq.n	8008aca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aaa:	3324      	adds	r3, #36	@ 0x24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fa43 	bl	8009f38 <xTaskRemoveFromEventList>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d013      	beq.n	8008ae0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb8 <xQueueGenericSend+0x200>)
 8008aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	e00a      	b.n	8008ae0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d007      	beq.n	8008ae0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ad0:	4b39      	ldr	r3, [pc, #228]	@ (8008bb8 <xQueueGenericSend+0x200>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ae0:	f002 fb34 	bl	800b14c <vPortExitCritical>
				return pdPASS;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e063      	b.n	8008bb0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d103      	bne.n	8008af6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aee:	f002 fb2d 	bl	800b14c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e05c      	b.n	8008bb0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008afc:	f107 0314 	add.w	r3, r7, #20
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fae1 	bl	800a0c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b0a:	f002 fb1f 	bl	800b14c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b0e:	f000 ff93 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b12:	f002 fae9 	bl	800b0e8 <vPortEnterCritical>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b22:	d103      	bne.n	8008b2c <xQueueGenericSend+0x174>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d103      	bne.n	8008b42 <xQueueGenericSend+0x18a>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b42:	f002 fb03 	bl	800b14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b46:	1d3a      	adds	r2, r7, #4
 8008b48:	f107 0314 	add.w	r3, r7, #20
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fad0 	bl	800a0f4 <xTaskCheckForTimeOut>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d124      	bne.n	8008ba4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b5c:	f000 fbce 	bl	80092fc <prvIsQueueFull>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d018      	beq.n	8008b98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b68:	3310      	adds	r3, #16
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 f952 	bl	8009e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b76:	f000 fb59 	bl	800922c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b7a:	f000 ff6b 	bl	8009a54 <xTaskResumeAll>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f af7c 	bne.w	8008a7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b86:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <xQueueGenericSend+0x200>)
 8008b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	e772      	b.n	8008a7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b9a:	f000 fb47 	bl	800922c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b9e:	f000 ff59 	bl	8009a54 <xTaskResumeAll>
 8008ba2:	e76c      	b.n	8008a7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ba6:	f000 fb41 	bl	800922c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008baa:	f000 ff53 	bl	8009a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3738      	adds	r7, #56	@ 0x38
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b090      	sub	sp, #64	@ 0x40
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSendFromISR+0x3e>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <xQueueGenericSendFromISR+0x42>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericSendFromISR+0x44>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c16:	bf00      	nop
 8008c18:	bf00      	nop
 8008c1a:	e7fd      	b.n	8008c18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d103      	bne.n	8008c2a <xQueueGenericSendFromISR+0x6e>
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSendFromISR+0x72>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSendFromISR+0x74>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10b      	bne.n	8008c4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c4c:	f002 fb2c 	bl	800b2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c50:	f3ef 8211 	mrs	r2, BASEPRI
 8008c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61fa      	str	r2, [r7, #28]
 8008c66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <xQueueGenericSendFromISR+0xc2>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d12f      	bne.n	8008cde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c94:	f000 fa3a 	bl	800910c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d112      	bne.n	8008cc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d016      	beq.n	8008cd8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	3324      	adds	r3, #36	@ 0x24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 f942 	bl	8009f38 <xTaskRemoveFromEventList>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00e      	beq.n	8008cd8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e007      	b.n	8008cd8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ccc:	3301      	adds	r3, #1
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	b25a      	sxtb	r2, r3
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cdc:	e001      	b.n	8008ce2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3740      	adds	r7, #64	@ 0x40
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08c      	sub	sp, #48	@ 0x30
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <xQueueReceive+0x32>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	623b      	str	r3, [r7, #32]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <xQueueReceive+0x40>
 8008d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <xQueueReceive+0x44>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <xQueueReceive+0x46>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10b      	bne.n	8008d5a <xQueueReceive+0x62>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	61fb      	str	r3, [r7, #28]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d5a:	f001 fb23 	bl	800a3a4 <xTaskGetSchedulerState>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d102      	bne.n	8008d6a <xQueueReceive+0x72>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <xQueueReceive+0x76>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e000      	b.n	8008d70 <xQueueReceive+0x78>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <xQueueReceive+0x94>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	61bb      	str	r3, [r7, #24]
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d8c:	f002 f9ac 	bl	800b0e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01f      	beq.n	8008ddc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da0:	f000 fa1e 	bl	80091e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	1e5a      	subs	r2, r3, #1
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00f      	beq.n	8008dd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	3310      	adds	r3, #16
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 f8bd 	bl	8009f38 <xTaskRemoveFromEventList>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d007      	beq.n	8008dd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8008eb8 <xQueueReceive+0x1c0>)
 8008dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dd4:	f002 f9ba 	bl	800b14c <vPortExitCritical>
				return pdPASS;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e069      	b.n	8008eb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d103      	bne.n	8008dea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008de2:	f002 f9b3 	bl	800b14c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e062      	b.n	8008eb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008df0:	f107 0310 	add.w	r3, r7, #16
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 f967 	bl	800a0c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dfe:	f002 f9a5 	bl	800b14c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e02:	f000 fe19 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e06:	f002 f96f 	bl	800b0e8 <vPortEnterCritical>
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e10:	b25b      	sxtb	r3, r3
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d103      	bne.n	8008e20 <xQueueReceive+0x128>
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d103      	bne.n	8008e36 <xQueueReceive+0x13e>
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e36:	f002 f989 	bl	800b14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e3a:	1d3a      	adds	r2, r7, #4
 8008e3c:	f107 0310 	add.w	r3, r7, #16
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 f956 	bl	800a0f4 <xTaskCheckForTimeOut>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d123      	bne.n	8008e96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e50:	f000 fa3e 	bl	80092d0 <prvIsQueueEmpty>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d017      	beq.n	8008e8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5c:	3324      	adds	r3, #36	@ 0x24
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 ffd8 	bl	8009e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6a:	f000 f9df 	bl	800922c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e6e:	f000 fdf1 	bl	8009a54 <xTaskResumeAll>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d189      	bne.n	8008d8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e78:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <xQueueReceive+0x1c0>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	e780      	b.n	8008d8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e8c:	f000 f9ce 	bl	800922c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e90:	f000 fde0 	bl	8009a54 <xTaskResumeAll>
 8008e94:	e77a      	b.n	8008d8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e98:	f000 f9c8 	bl	800922c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e9c:	f000 fdda 	bl	8009a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea2:	f000 fa15 	bl	80092d0 <prvIsQueueEmpty>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f43f af6f 	beq.w	8008d8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3730      	adds	r7, #48	@ 0x30
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08e      	sub	sp, #56	@ 0x38
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10b      	bne.n	8008ef0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	623b      	str	r3, [r7, #32]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	61fb      	str	r3, [r7, #28]
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f10:	f001 fa48 	bl	800a3a4 <xTaskGetSchedulerState>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d102      	bne.n	8008f20 <xQueueSemaphoreTake+0x64>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <xQueueSemaphoreTake+0x68>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e000      	b.n	8008f26 <xQueueSemaphoreTake+0x6a>
 8008f24:	2300      	movs	r3, #0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	61bb      	str	r3, [r7, #24]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f42:	f002 f8d1 	bl	800b0e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d024      	beq.n	8008f9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f54:	1e5a      	subs	r2, r3, #1
 8008f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f62:	f001 fbb1 	bl	800a6c8 <pvTaskIncrementMutexHeldCount>
 8008f66:	4602      	mov	r2, r0
 8008f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00f      	beq.n	8008f94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f76:	3310      	adds	r3, #16
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 ffdd 	bl	8009f38 <xTaskRemoveFromEventList>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d007      	beq.n	8008f94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f84:	4b54      	ldr	r3, [pc, #336]	@ (80090d8 <xQueueSemaphoreTake+0x21c>)
 8008f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f94:	f002 f8da 	bl	800b14c <vPortExitCritical>
				return pdPASS;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e098      	b.n	80090ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d112      	bne.n	8008fc8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	617b      	str	r3, [r7, #20]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fc0:	f002 f8c4 	bl	800b14c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e082      	b.n	80090ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f878 	bl	800a0c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fdc:	f002 f8b6 	bl	800b14c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fe0:	f000 fd2a 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fe4:	f002 f880 	bl	800b0e8 <vPortEnterCritical>
 8008fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d103      	bne.n	8008ffe <xQueueSemaphoreTake+0x142>
 8008ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009004:	b25b      	sxtb	r3, r3
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d103      	bne.n	8009014 <xQueueSemaphoreTake+0x158>
 800900c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009014:	f002 f89a 	bl	800b14c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009018:	463a      	mov	r2, r7
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f867 	bl	800a0f4 <xTaskCheckForTimeOut>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d132      	bne.n	8009092 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800902c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800902e:	f000 f94f 	bl	80092d0 <prvIsQueueEmpty>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d026      	beq.n	8009086 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009040:	f002 f852 	bl	800b0e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	4618      	mov	r0, r3
 800904a:	f001 f9c9 	bl	800a3e0 <xTaskPriorityInherit>
 800904e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009050:	f002 f87c 	bl	800b14c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009056:	3324      	adds	r3, #36	@ 0x24
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fedb 	bl	8009e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009062:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009064:	f000 f8e2 	bl	800922c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009068:	f000 fcf4 	bl	8009a54 <xTaskResumeAll>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	f47f af67 	bne.w	8008f42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009074:	4b18      	ldr	r3, [pc, #96]	@ (80090d8 <xQueueSemaphoreTake+0x21c>)
 8009076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	e75d      	b.n	8008f42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009088:	f000 f8d0 	bl	800922c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800908c:	f000 fce2 	bl	8009a54 <xTaskResumeAll>
 8009090:	e757      	b.n	8008f42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009092:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009094:	f000 f8ca 	bl	800922c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009098:	f000 fcdc 	bl	8009a54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800909c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800909e:	f000 f917 	bl	80092d0 <prvIsQueueEmpty>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f43f af4c 	beq.w	8008f42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80090b0:	f002 f81a 	bl	800b0e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090b6:	f000 f811 	bl	80090dc <prvGetDisinheritPriorityAfterTimeout>
 80090ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 fa64 	bl	800a590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090c8:	f002 f840 	bl	800b14c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3738      	adds	r7, #56	@ 0x38
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d006      	beq.n	80090fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e001      	b.n	80090fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10d      	bne.n	8009146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d14d      	bne.n	80091ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	4618      	mov	r0, r3
 8009138:	f001 f9ba 	bl	800a4b0 <xTaskPriorityDisinherit>
 800913c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	e043      	b.n	80091ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d119      	bne.n	8009180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6858      	ldr	r0, [r3, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009154:	461a      	mov	r2, r3
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	f002 fb90 	bl	800b87c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	d32b      	bcc.n	80091ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	e026      	b.n	80091ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68d8      	ldr	r0, [r3, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009188:	461a      	mov	r2, r3
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	f002 fb76 	bl	800b87c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009198:	425b      	negs	r3, r3
 800919a:	441a      	add	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d207      	bcs.n	80091bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b4:	425b      	negs	r3, r3
 80091b6:	441a      	add	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d105      	bne.n	80091ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80091d6:	697b      	ldr	r3, [r7, #20]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d018      	beq.n	8009224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fa:	441a      	add	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	429a      	cmp	r2, r3
 800920a:	d303      	bcc.n	8009214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68d9      	ldr	r1, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	461a      	mov	r2, r3
 800921e:	6838      	ldr	r0, [r7, #0]
 8009220:	f002 fb2c 	bl	800b87c <memcpy>
	}
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009234:	f001 ff58 	bl	800b0e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800923e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009240:	e011      	b.n	8009266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d012      	beq.n	8009270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3324      	adds	r3, #36	@ 0x24
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fe72 	bl	8009f38 <xTaskRemoveFromEventList>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800925a:	f000 ffaf 	bl	800a1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	3b01      	subs	r3, #1
 8009262:	b2db      	uxtb	r3, r3
 8009264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800926a:	2b00      	cmp	r3, #0
 800926c:	dce9      	bgt.n	8009242 <prvUnlockQueue+0x16>
 800926e:	e000      	b.n	8009272 <prvUnlockQueue+0x46>
					break;
 8009270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	22ff      	movs	r2, #255	@ 0xff
 8009276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800927a:	f001 ff67 	bl	800b14c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800927e:	f001 ff33 	bl	800b0e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800928a:	e011      	b.n	80092b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d012      	beq.n	80092ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3310      	adds	r3, #16
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fe4d 	bl	8009f38 <xTaskRemoveFromEventList>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092a4:	f000 ff8a 	bl	800a1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dce9      	bgt.n	800928c <prvUnlockQueue+0x60>
 80092b8:	e000      	b.n	80092bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	22ff      	movs	r2, #255	@ 0xff
 80092c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092c4:	f001 ff42 	bl	800b14c <vPortExitCritical>
}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092d8:	f001 ff06 	bl	800b0e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092e4:	2301      	movs	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e001      	b.n	80092ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ee:	f001 ff2d 	bl	800b14c <vPortExitCritical>

	return xReturn;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009304:	f001 fef0 	bl	800b0e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009310:	429a      	cmp	r2, r3
 8009312:	d102      	bne.n	800931a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e001      	b.n	800931e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800931e:	f001 ff15 	bl	800b14c <vPortExitCritical>

	return xReturn;
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e014      	b.n	8009366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800933c:	4a0f      	ldr	r2, [pc, #60]	@ (800937c <vQueueAddToRegistry+0x50>)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10b      	bne.n	8009360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009348:	490c      	ldr	r1, [pc, #48]	@ (800937c <vQueueAddToRegistry+0x50>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009352:	4a0a      	ldr	r2, [pc, #40]	@ (800937c <vQueueAddToRegistry+0x50>)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800935e:	e006      	b.n	800936e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3301      	adds	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b07      	cmp	r3, #7
 800936a:	d9e7      	bls.n	800933c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20001a78 	.word	0x20001a78

08009380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009390:	f001 feaa 	bl	800b0e8 <vPortEnterCritical>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800939a:	b25b      	sxtb	r3, r3
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d103      	bne.n	80093aa <vQueueWaitForMessageRestricted+0x2a>
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093b0:	b25b      	sxtb	r3, r3
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b6:	d103      	bne.n	80093c0 <vQueueWaitForMessageRestricted+0x40>
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c0:	f001 fec4 	bl	800b14c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	3324      	adds	r3, #36	@ 0x24
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fd83 	bl	8009ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7ff ff26 	bl	800922c <prvUnlockQueue>
	}
 80093e0:	bf00      	nop
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	@ 0x38
 80093ec:	af04      	add	r7, sp, #16
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10b      	bne.n	8009414 <xTaskCreateStatic+0x2c>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	623b      	str	r3, [r7, #32]
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	e7fd      	b.n	8009410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <xTaskCreateStatic+0x4a>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61fb      	str	r3, [r7, #28]
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	e7fd      	b.n	800942e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009432:	2364      	movs	r3, #100	@ 0x64
 8009434:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b64      	cmp	r3, #100	@ 0x64
 800943a:	d00b      	beq.n	8009454 <xTaskCreateStatic+0x6c>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	61bb      	str	r3, [r7, #24]
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009454:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01e      	beq.n	800949a <xTaskCreateStatic+0xb2>
 800945c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01b      	beq.n	800949a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800946c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946e:	2202      	movs	r2, #2
 8009470:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009474:	2300      	movs	r3, #0
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	9302      	str	r3, [sp, #8]
 800947c:	f107 0314 	add.w	r3, r7, #20
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f850 	bl	8009532 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009492:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009494:	f000 f8e4 	bl	8009660 <prvAddNewTaskToReadyList>
 8009498:	e001      	b.n	800949e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800949e:	697b      	ldr	r3, [r7, #20]
	}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3728      	adds	r7, #40	@ 0x28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	@ 0x30
 80094ac:	af04      	add	r7, sp, #16
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4618      	mov	r0, r3
 80094be:	f001 ff35 	bl	800b32c <pvPortMalloc>
 80094c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094ca:	2064      	movs	r0, #100	@ 0x64
 80094cc:	f001 ff2e 	bl	800b32c <pvPortMalloc>
 80094d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80094de:	e005      	b.n	80094ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094e0:	6978      	ldr	r0, [r7, #20]
 80094e2:	f001 fff1 	bl	800b4c8 <vPortFree>
 80094e6:	e001      	b.n	80094ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d017      	beq.n	8009522 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094fa:	88fa      	ldrh	r2, [r7, #6]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f80e 	bl	8009532 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009516:	69f8      	ldr	r0, [r7, #28]
 8009518:	f000 f8a2 	bl	8009660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800951c:	2301      	movs	r3, #1
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e002      	b.n	8009528 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295
 8009526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009528:	69bb      	ldr	r3, [r7, #24]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b088      	sub	sp, #32
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	461a      	mov	r2, r3
 800954a:	21a5      	movs	r1, #165	@ 0xa5
 800954c:	f002 f964 	bl	800b818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800955a:	3b01      	subs	r3, #1
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	f023 0307 	bic.w	r3, r3, #7
 8009568:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	617b      	str	r3, [r7, #20]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01f      	beq.n	80095d8 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009598:	2300      	movs	r3, #0
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	e012      	b.n	80095c4 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	7819      	ldrb	r1, [r3, #0]
 80095a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	4413      	add	r3, r2
 80095ac:	3334      	adds	r3, #52	@ 0x34
 80095ae:	460a      	mov	r2, r1
 80095b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	4413      	add	r3, r2
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	3301      	adds	r3, #1
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	2b0f      	cmp	r3, #15
 80095c8:	d9e9      	bls.n	800959e <prvInitialiseNewTask+0x6c>
 80095ca:	e000      	b.n	80095ce <prvInitialiseNewTask+0x9c>
			{
				break;
 80095cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095d6:	e003      	b.n	80095e0 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e2:	2b37      	cmp	r3, #55	@ 0x37
 80095e4:	d901      	bls.n	80095ea <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095e6:	2337      	movs	r3, #55	@ 0x37
 80095e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095f4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	2200      	movs	r2, #0
 80095fa:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	3304      	adds	r3, #4
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe ff47 	bl	8008494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	3318      	adds	r3, #24
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe ff42 	bl	8008494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	2200      	movs	r2, #0
 800962a:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	2200      	movs	r2, #0
 8009630:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	69b8      	ldr	r0, [r7, #24]
 8009640:	f001 fc24 	bl	800ae8c <pxPortInitialiseStack>
 8009644:	4602      	mov	r2, r0
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800964a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009656:	bf00      	nop
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009668:	f001 fd3e 	bl	800b0e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800966c:	4b2d      	ldr	r3, [pc, #180]	@ (8009724 <prvAddNewTaskToReadyList+0xc4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	4a2c      	ldr	r2, [pc, #176]	@ (8009724 <prvAddNewTaskToReadyList+0xc4>)
 8009674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009676:	4b2c      	ldr	r3, [pc, #176]	@ (8009728 <prvAddNewTaskToReadyList+0xc8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800967e:	4a2a      	ldr	r2, [pc, #168]	@ (8009728 <prvAddNewTaskToReadyList+0xc8>)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009684:	4b27      	ldr	r3, [pc, #156]	@ (8009724 <prvAddNewTaskToReadyList+0xc4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d110      	bne.n	80096ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800968c:	f000 fdbc 	bl	800a208 <prvInitialiseTaskLists>
 8009690:	e00d      	b.n	80096ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009692:	4b26      	ldr	r3, [pc, #152]	@ (800972c <prvAddNewTaskToReadyList+0xcc>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800969a:	4b23      	ldr	r3, [pc, #140]	@ (8009728 <prvAddNewTaskToReadyList+0xc8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d802      	bhi.n	80096ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009728 <prvAddNewTaskToReadyList+0xc8>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096ae:	4b20      	ldr	r3, [pc, #128]	@ (8009730 <prvAddNewTaskToReadyList+0xd0>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009730 <prvAddNewTaskToReadyList+0xd0>)
 80096b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80096b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009730 <prvAddNewTaskToReadyList+0xd0>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009734 <prvAddNewTaskToReadyList+0xd4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d903      	bls.n	80096d4 <prvAddNewTaskToReadyList+0x74>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	4a18      	ldr	r2, [pc, #96]	@ (8009734 <prvAddNewTaskToReadyList+0xd4>)
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4a15      	ldr	r2, [pc, #84]	@ (8009738 <prvAddNewTaskToReadyList+0xd8>)
 80096e2:	441a      	add	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3304      	adds	r3, #4
 80096e8:	4619      	mov	r1, r3
 80096ea:	4610      	mov	r0, r2
 80096ec:	f7fe fedf 	bl	80084ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096f0:	f001 fd2c 	bl	800b14c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096f4:	4b0d      	ldr	r3, [pc, #52]	@ (800972c <prvAddNewTaskToReadyList+0xcc>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00e      	beq.n	800971a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <prvAddNewTaskToReadyList+0xc8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009706:	429a      	cmp	r2, r3
 8009708:	d207      	bcs.n	800971a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800970a:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <prvAddNewTaskToReadyList+0xdc>)
 800970c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20001f8c 	.word	0x20001f8c
 8009728:	20001ab8 	.word	0x20001ab8
 800972c:	20001f98 	.word	0x20001f98
 8009730:	20001fa8 	.word	0x20001fa8
 8009734:	20001f94 	.word	0x20001f94
 8009738:	20001abc 	.word	0x20001abc
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009748:	f001 fcce 	bl	800b0e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <vTaskDelete+0x18>
 8009752:	4b2d      	ldr	r3, [pc, #180]	@ (8009808 <vTaskDelete+0xc8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	e000      	b.n	800975a <vTaskDelete+0x1a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3304      	adds	r3, #4
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe ff01 	bl	8008568 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3318      	adds	r3, #24
 8009772:	4618      	mov	r0, r3
 8009774:	f7fe fef8 	bl	8008568 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009778:	4b24      	ldr	r3, [pc, #144]	@ (800980c <vTaskDelete+0xcc>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	4a23      	ldr	r2, [pc, #140]	@ (800980c <vTaskDelete+0xcc>)
 8009780:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009782:	4b21      	ldr	r3, [pc, #132]	@ (8009808 <vTaskDelete+0xc8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	429a      	cmp	r2, r3
 800978a:	d10b      	bne.n	80097a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	481f      	ldr	r0, [pc, #124]	@ (8009810 <vTaskDelete+0xd0>)
 8009794:	f7fe fe8b 	bl	80084ae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009798:	4b1e      	ldr	r3, [pc, #120]	@ (8009814 <vTaskDelete+0xd4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	4a1d      	ldr	r2, [pc, #116]	@ (8009814 <vTaskDelete+0xd4>)
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	e009      	b.n	80097b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80097a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009818 <vTaskDelete+0xd8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009818 <vTaskDelete+0xd8>)
 80097ac:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fd98 	bl	800a2e4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80097b4:	f000 fdc6 	bl	800a344 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80097b8:	f001 fcc8 	bl	800b14c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80097bc:	4b17      	ldr	r3, [pc, #92]	@ (800981c <vTaskDelete+0xdc>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01c      	beq.n	80097fe <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80097c4:	4b10      	ldr	r3, [pc, #64]	@ (8009808 <vTaskDelete+0xc8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d117      	bne.n	80097fe <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80097ce:	4b14      	ldr	r3, [pc, #80]	@ (8009820 <vTaskDelete+0xe0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <vTaskDelete+0xae>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60bb      	str	r3, [r7, #8]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <vTaskDelete+0xe4>)
 80097f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20001ab8 	.word	0x20001ab8
 800980c:	20001fa8 	.word	0x20001fa8
 8009810:	20001f60 	.word	0x20001f60
 8009814:	20001f74 	.word	0x20001f74
 8009818:	20001f8c 	.word	0x20001f8c
 800981c:	20001f98 	.word	0x20001f98
 8009820:	20001fb4 	.word	0x20001fb4
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d018      	beq.n	800986c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <vTaskDelay+0x64>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00b      	beq.n	800985a <vTaskDelay+0x32>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	60bb      	str	r3, [r7, #8]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800985a:	f000 f8ed 	bl	8009a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 ff45 	bl	800a6f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009866:	f000 f8f5 	bl	8009a54 <xTaskResumeAll>
 800986a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009872:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <vTaskDelay+0x68>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20001fb4 	.word	0x20001fb4
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <eTaskGetState+0x2a>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60bb      	str	r3, [r7, #8]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80098be:	4b24      	ldr	r3, [pc, #144]	@ (8009950 <eTaskGetState+0xbc>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d102      	bne.n	80098ce <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80098c8:	2300      	movs	r3, #0
 80098ca:	77fb      	strb	r3, [r7, #31]
 80098cc:	e03a      	b.n	8009944 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80098ce:	f001 fc0b 	bl	800b0e8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80098d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009954 <eTaskGetState+0xc0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098de:	4b1e      	ldr	r3, [pc, #120]	@ (8009958 <eTaskGetState+0xc4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80098e4:	f001 fc32 	bl	800b14c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d003      	beq.n	80098f8 <eTaskGetState+0x64>
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d102      	bne.n	80098fe <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80098f8:	2302      	movs	r3, #2
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e022      	b.n	8009944 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4a16      	ldr	r2, [pc, #88]	@ (800995c <eTaskGetState+0xc8>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d112      	bne.n	800992c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d102      	bne.n	8009920 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800991a:	2302      	movs	r3, #2
 800991c:	77fb      	strb	r3, [r7, #31]
 800991e:	e011      	b.n	8009944 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8009920:	2303      	movs	r3, #3
 8009922:	77fb      	strb	r3, [r7, #31]
 8009924:	e00e      	b.n	8009944 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009926:	2302      	movs	r3, #2
 8009928:	77fb      	strb	r3, [r7, #31]
 800992a:	e00b      	b.n	8009944 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	4a0c      	ldr	r2, [pc, #48]	@ (8009960 <eTaskGetState+0xcc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d002      	beq.n	800993a <eTaskGetState+0xa6>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800993a:	2304      	movs	r3, #4
 800993c:	77fb      	strb	r3, [r7, #31]
 800993e:	e001      	b.n	8009944 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009940:	2301      	movs	r3, #1
 8009942:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009944:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009946:	4618      	mov	r0, r3
 8009948:	3720      	adds	r7, #32
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20001ab8 	.word	0x20001ab8
 8009954:	20001f44 	.word	0x20001f44
 8009958:	20001f48 	.word	0x20001f48
 800995c:	20001f78 	.word	0x20001f78
 8009960:	20001f60 	.word	0x20001f60

08009964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08a      	sub	sp, #40	@ 0x28
 8009968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009972:	463a      	mov	r2, r7
 8009974:	1d39      	adds	r1, r7, #4
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fb40 	bl	8008000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	9202      	str	r2, [sp, #8]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	2300      	movs	r3, #0
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	2300      	movs	r3, #0
 8009990:	460a      	mov	r2, r1
 8009992:	4923      	ldr	r1, [pc, #140]	@ (8009a20 <vTaskStartScheduler+0xbc>)
 8009994:	4823      	ldr	r0, [pc, #140]	@ (8009a24 <vTaskStartScheduler+0xc0>)
 8009996:	f7ff fd27 	bl	80093e8 <xTaskCreateStatic>
 800999a:	4603      	mov	r3, r0
 800999c:	4a22      	ldr	r2, [pc, #136]	@ (8009a28 <vTaskStartScheduler+0xc4>)
 800999e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099a0:	4b21      	ldr	r3, [pc, #132]	@ (8009a28 <vTaskStartScheduler+0xc4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099a8:	2301      	movs	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	e001      	b.n	80099b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d102      	bne.n	80099be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099b8:	f000 feee 	bl	800a798 <xTimerCreateTimerTask>
 80099bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d118      	bne.n	80099f6 <vTaskStartScheduler+0x92>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	613b      	str	r3, [r7, #16]
}
 80099d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099d8:	4b14      	ldr	r3, [pc, #80]	@ (8009a2c <vTaskStartScheduler+0xc8>)
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099e0:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <vTaskStartScheduler+0xcc>)
 80099e2:	2201      	movs	r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099e6:	4b13      	ldr	r3, [pc, #76]	@ (8009a34 <vTaskStartScheduler+0xd0>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80099ec:	f7f6 fd70 	bl	80004d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099f0:	f001 fad6 	bl	800afa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099f4:	e00f      	b.n	8009a16 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d10b      	bne.n	8009a16 <vTaskStartScheduler+0xb2>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	60fb      	str	r3, [r7, #12]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <vTaskStartScheduler+0xae>
}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	0800b9ec 	.word	0x0800b9ec
 8009a24:	0800a1d5 	.word	0x0800a1d5
 8009a28:	20001fb0 	.word	0x20001fb0
 8009a2c:	20001fac 	.word	0x20001fac
 8009a30:	20001f98 	.word	0x20001f98
 8009a34:	20001f90 	.word	0x20001f90

08009a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a3c:	4b04      	ldr	r3, [pc, #16]	@ (8009a50 <vTaskSuspendAll+0x18>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	4a03      	ldr	r2, [pc, #12]	@ (8009a50 <vTaskSuspendAll+0x18>)
 8009a44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a46:	bf00      	nop
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20001fb4 	.word	0x20001fb4

08009a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a62:	4b42      	ldr	r3, [pc, #264]	@ (8009b6c <xTaskResumeAll+0x118>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10b      	bne.n	8009a82 <xTaskResumeAll+0x2e>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	603b      	str	r3, [r7, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	e7fd      	b.n	8009a7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a82:	f001 fb31 	bl	800b0e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a86:	4b39      	ldr	r3, [pc, #228]	@ (8009b6c <xTaskResumeAll+0x118>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a37      	ldr	r2, [pc, #220]	@ (8009b6c <xTaskResumeAll+0x118>)
 8009a8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a90:	4b36      	ldr	r3, [pc, #216]	@ (8009b6c <xTaskResumeAll+0x118>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d162      	bne.n	8009b5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a98:	4b35      	ldr	r3, [pc, #212]	@ (8009b70 <xTaskResumeAll+0x11c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d05e      	beq.n	8009b5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa0:	e02f      	b.n	8009b02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa2:	4b34      	ldr	r3, [pc, #208]	@ (8009b74 <xTaskResumeAll+0x120>)
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3318      	adds	r3, #24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fd5a 	bl	8008568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fd55 	bl	8008568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8009b78 <xTaskResumeAll+0x124>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d903      	bls.n	8009ad2 <xTaskResumeAll+0x7e>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	4a2a      	ldr	r2, [pc, #168]	@ (8009b78 <xTaskResumeAll+0x124>)
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4a27      	ldr	r2, [pc, #156]	@ (8009b7c <xTaskResumeAll+0x128>)
 8009ae0:	441a      	add	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fe fce0 	bl	80084ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	4b23      	ldr	r3, [pc, #140]	@ (8009b80 <xTaskResumeAll+0x12c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d302      	bcc.n	8009b02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009afc:	4b21      	ldr	r3, [pc, #132]	@ (8009b84 <xTaskResumeAll+0x130>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b02:	4b1c      	ldr	r3, [pc, #112]	@ (8009b74 <xTaskResumeAll+0x120>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1cb      	bne.n	8009aa2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b10:	f000 fc18 	bl	800a344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b14:	4b1c      	ldr	r3, [pc, #112]	@ (8009b88 <xTaskResumeAll+0x134>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d010      	beq.n	8009b42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b20:	f000 f846 	bl	8009bb0 <xTaskIncrementTick>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b2a:	4b16      	ldr	r3, [pc, #88]	@ (8009b84 <xTaskResumeAll+0x130>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f1      	bne.n	8009b20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b3c:	4b12      	ldr	r3, [pc, #72]	@ (8009b88 <xTaskResumeAll+0x134>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b42:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <xTaskResumeAll+0x130>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <xTaskResumeAll+0x138>)
 8009b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b5e:	f001 faf5 	bl	800b14c <vPortExitCritical>

	return xAlreadyYielded;
 8009b62:	68bb      	ldr	r3, [r7, #8]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20001fb4 	.word	0x20001fb4
 8009b70:	20001f8c 	.word	0x20001f8c
 8009b74:	20001f4c 	.word	0x20001f4c
 8009b78:	20001f94 	.word	0x20001f94
 8009b7c:	20001abc 	.word	0x20001abc
 8009b80:	20001ab8 	.word	0x20001ab8
 8009b84:	20001fa0 	.word	0x20001fa0
 8009b88:	20001f9c 	.word	0x20001f9c
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b96:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <xTaskGetTickCount+0x1c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b9c:	687b      	ldr	r3, [r7, #4]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20001f90 	.word	0x20001f90

08009bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bba:	4b4f      	ldr	r3, [pc, #316]	@ (8009cf8 <xTaskIncrementTick+0x148>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 8090 	bne.w	8009ce4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8009cfc <xTaskIncrementTick+0x14c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8009cfc <xTaskIncrementTick+0x14c>)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d121      	bne.n	8009c1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bd8:	4b49      	ldr	r3, [pc, #292]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	603b      	str	r3, [r7, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	e7fd      	b.n	8009bf6 <xTaskIncrementTick+0x46>
 8009bfa:	4b41      	ldr	r3, [pc, #260]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	4b40      	ldr	r3, [pc, #256]	@ (8009d04 <xTaskIncrementTick+0x154>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a3e      	ldr	r2, [pc, #248]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	4a3e      	ldr	r2, [pc, #248]	@ (8009d04 <xTaskIncrementTick+0x154>)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d08 <xTaskIncrementTick+0x158>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	4a3c      	ldr	r2, [pc, #240]	@ (8009d08 <xTaskIncrementTick+0x158>)
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	f000 fb94 	bl	800a344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d349      	bcc.n	8009cba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c26:	4b36      	ldr	r3, [pc, #216]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c30:	4b36      	ldr	r3, [pc, #216]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295
 8009c36:	601a      	str	r2, [r3, #0]
					break;
 8009c38:	e03f      	b.n	8009cba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c3a:	4b31      	ldr	r3, [pc, #196]	@ (8009d00 <xTaskIncrementTick+0x150>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d203      	bcs.n	8009c5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c52:	4a2e      	ldr	r2, [pc, #184]	@ (8009d0c <xTaskIncrementTick+0x15c>)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c58:	e02f      	b.n	8009cba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fc82 	bl	8008568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3318      	adds	r3, #24
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fc79 	bl	8008568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7a:	4b25      	ldr	r3, [pc, #148]	@ (8009d10 <xTaskIncrementTick+0x160>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d903      	bls.n	8009c8a <xTaskIncrementTick+0xda>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	4a22      	ldr	r2, [pc, #136]	@ (8009d10 <xTaskIncrementTick+0x160>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4a1f      	ldr	r2, [pc, #124]	@ (8009d14 <xTaskIncrementTick+0x164>)
 8009c98:	441a      	add	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fe fc04 	bl	80084ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009caa:	4b1b      	ldr	r3, [pc, #108]	@ (8009d18 <xTaskIncrementTick+0x168>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d3b8      	bcc.n	8009c26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cb8:	e7b5      	b.n	8009c26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cba:	4b17      	ldr	r3, [pc, #92]	@ (8009d18 <xTaskIncrementTick+0x168>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc0:	4914      	ldr	r1, [pc, #80]	@ (8009d14 <xTaskIncrementTick+0x164>)
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d901      	bls.n	8009cd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cd6:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <xTaskIncrementTick+0x16c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e004      	b.n	8009cee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d20 <xTaskIncrementTick+0x170>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a0d      	ldr	r2, [pc, #52]	@ (8009d20 <xTaskIncrementTick+0x170>)
 8009cec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cee:	697b      	ldr	r3, [r7, #20]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20001fb4 	.word	0x20001fb4
 8009cfc:	20001f90 	.word	0x20001f90
 8009d00:	20001f44 	.word	0x20001f44
 8009d04:	20001f48 	.word	0x20001f48
 8009d08:	20001fa4 	.word	0x20001fa4
 8009d0c:	20001fac 	.word	0x20001fac
 8009d10:	20001f94 	.word	0x20001f94
 8009d14:	20001abc 	.word	0x20001abc
 8009d18:	20001ab8 	.word	0x20001ab8
 8009d1c:	20001fa0 	.word	0x20001fa0
 8009d20:	20001f9c 	.word	0x20001f9c

08009d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d2a:	4b34      	ldr	r3, [pc, #208]	@ (8009dfc <vTaskSwitchContext+0xd8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d32:	4b33      	ldr	r3, [pc, #204]	@ (8009e00 <vTaskSwitchContext+0xdc>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d38:	e05b      	b.n	8009df2 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 8009d3a:	4b31      	ldr	r3, [pc, #196]	@ (8009e00 <vTaskSwitchContext+0xdc>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009d40:	f7f6 fbcd 	bl	80004de <getRunTimeCounterValue>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a2f      	ldr	r2, [pc, #188]	@ (8009e04 <vTaskSwitchContext+0xe0>)
 8009d48:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8009e04 <vTaskSwitchContext+0xe0>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8009e08 <vTaskSwitchContext+0xe4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d909      	bls.n	8009d6a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009d56:	4b2d      	ldr	r3, [pc, #180]	@ (8009e0c <vTaskSwitchContext+0xe8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009d5c:	4a29      	ldr	r2, [pc, #164]	@ (8009e04 <vTaskSwitchContext+0xe0>)
 8009d5e:	6810      	ldr	r0, [r2, #0]
 8009d60:	4a29      	ldr	r2, [pc, #164]	@ (8009e08 <vTaskSwitchContext+0xe4>)
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	1a82      	subs	r2, r0, r2
 8009d66:	440a      	add	r2, r1
 8009d68:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d6a:	4b26      	ldr	r3, [pc, #152]	@ (8009e04 <vTaskSwitchContext+0xe0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a26      	ldr	r2, [pc, #152]	@ (8009e08 <vTaskSwitchContext+0xe4>)
 8009d70:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d72:	4b27      	ldr	r3, [pc, #156]	@ (8009e10 <vTaskSwitchContext+0xec>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e011      	b.n	8009d9e <vTaskSwitchContext+0x7a>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10b      	bne.n	8009d98 <vTaskSwitchContext+0x74>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	607b      	str	r3, [r7, #4]
}
 8009d92:	bf00      	nop
 8009d94:	bf00      	nop
 8009d96:	e7fd      	b.n	8009d94 <vTaskSwitchContext+0x70>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	491d      	ldr	r1, [pc, #116]	@ (8009e14 <vTaskSwitchContext+0xf0>)
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0e3      	beq.n	8009d7a <vTaskSwitchContext+0x56>
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4a15      	ldr	r2, [pc, #84]	@ (8009e14 <vTaskSwitchContext+0xf0>)
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60bb      	str	r3, [r7, #8]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	605a      	str	r2, [r3, #4]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d104      	bne.n	8009de2 <vTaskSwitchContext+0xbe>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	605a      	str	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a08      	ldr	r2, [pc, #32]	@ (8009e0c <vTaskSwitchContext+0xe8>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	4a08      	ldr	r2, [pc, #32]	@ (8009e10 <vTaskSwitchContext+0xec>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6013      	str	r3, [r2, #0]
}
 8009df2:	bf00      	nop
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20001fb4 	.word	0x20001fb4
 8009e00:	20001fa0 	.word	0x20001fa0
 8009e04:	20001fbc 	.word	0x20001fbc
 8009e08:	20001fb8 	.word	0x20001fb8
 8009e0c:	20001ab8 	.word	0x20001ab8
 8009e10:	20001f94 	.word	0x20001f94
 8009e14:	20001abc 	.word	0x20001abc

08009e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10b      	bne.n	8009e40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	e7fd      	b.n	8009e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e40:	4b07      	ldr	r3, [pc, #28]	@ (8009e60 <vTaskPlaceOnEventList+0x48>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3318      	adds	r3, #24
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7fe fb54 	bl	80084f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e4e:	2101      	movs	r1, #1
 8009e50:	6838      	ldr	r0, [r7, #0]
 8009e52:	f000 fc4d 	bl	800a6f0 <prvAddCurrentTaskToDelayedList>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001ab8 	.word	0x20001ab8

08009e64 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	617b      	str	r3, [r7, #20]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009e8e:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	613b      	str	r3, [r7, #16]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009eae:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <vTaskPlaceOnUnorderedEventList+0x78>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009eb8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eba:	4b08      	ldr	r3, [pc, #32]	@ (8009edc <vTaskPlaceOnUnorderedEventList+0x78>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3318      	adds	r3, #24
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7fe faf3 	bl	80084ae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ec8:	2101      	movs	r1, #1
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fc10 	bl	800a6f0 <prvAddCurrentTaskToDelayedList>
}
 8009ed0:	bf00      	nop
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20001fb4 	.word	0x20001fb4
 8009edc:	20001ab8 	.word	0x20001ab8

08009ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10b      	bne.n	8009f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	617b      	str	r3, [r7, #20]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3318      	adds	r3, #24
 8009f10:	4619      	mov	r1, r3
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7fe facb 	bl	80084ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f000 fbe2 	bl	800a6f0 <prvAddCurrentTaskToDelayedList>
	}
 8009f2c:	bf00      	nop
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20001ab8 	.word	0x20001ab8

08009f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10b      	bne.n	8009f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60fb      	str	r3, [r7, #12]
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3318      	adds	r3, #24
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fafc 	bl	8008568 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f70:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe8 <xTaskRemoveFromEventList+0xb0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11d      	bne.n	8009fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe faf3 	bl	8008568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f86:	4b19      	ldr	r3, [pc, #100]	@ (8009fec <xTaskRemoveFromEventList+0xb4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d903      	bls.n	8009f96 <xTaskRemoveFromEventList+0x5e>
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f92:	4a16      	ldr	r2, [pc, #88]	@ (8009fec <xTaskRemoveFromEventList+0xb4>)
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4a13      	ldr	r2, [pc, #76]	@ (8009ff0 <xTaskRemoveFromEventList+0xb8>)
 8009fa4:	441a      	add	r2, r3
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4610      	mov	r0, r2
 8009fae:	f7fe fa7e 	bl	80084ae <vListInsertEnd>
 8009fb2:	e005      	b.n	8009fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	3318      	adds	r3, #24
 8009fb8:	4619      	mov	r1, r3
 8009fba:	480e      	ldr	r0, [pc, #56]	@ (8009ff4 <xTaskRemoveFromEventList+0xbc>)
 8009fbc:	f7fe fa77 	bl	80084ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <xTaskRemoveFromEventList+0xc0>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d905      	bls.n	8009fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ffc <xTaskRemoveFromEventList+0xc4>)
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	e001      	b.n	8009fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fde:	697b      	ldr	r3, [r7, #20]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20001fb4 	.word	0x20001fb4
 8009fec:	20001f94 	.word	0x20001f94
 8009ff0:	20001abc 	.word	0x20001abc
 8009ff4:	20001f4c 	.word	0x20001f4c
 8009ff8:	20001ab8 	.word	0x20001ab8
 8009ffc:	20001fa0 	.word	0x20001fa0

0800a000 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a00a:	4b2a      	ldr	r3, [pc, #168]	@ (800a0b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	613b      	str	r3, [r7, #16]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10b      	bne.n	800a058 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60fb      	str	r3, [r7, #12]
}
 800a052:	bf00      	nop
 800a054:	bf00      	nop
 800a056:	e7fd      	b.n	800a054 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fe fa85 	bl	8008568 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	3304      	adds	r3, #4
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fa80 	bl	8008568 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06c:	4b12      	ldr	r3, [pc, #72]	@ (800a0b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d903      	bls.n	800a07c <vTaskRemoveFromUnorderedEventList+0x7c>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	4a0f      	ldr	r2, [pc, #60]	@ (800a0b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4a0c      	ldr	r2, [pc, #48]	@ (800a0bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a08a:	441a      	add	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fe fa0b 	bl	80084ae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09c:	4b08      	ldr	r3, [pc, #32]	@ (800a0c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d902      	bls.n	800a0ac <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a0a6:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]
	}
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20001fb4 	.word	0x20001fb4
 800a0b8:	20001f94 	.word	0x20001f94
 800a0bc:	20001abc 	.word	0x20001abc
 800a0c0:	20001ab8 	.word	0x20001ab8
 800a0c4:	20001fa0 	.word	0x20001fa0

0800a0c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0d0:	4b06      	ldr	r3, [pc, #24]	@ (800a0ec <vTaskInternalSetTimeOutState+0x24>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <vTaskInternalSetTimeOutState+0x28>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	605a      	str	r2, [r3, #4]
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20001fa4 	.word	0x20001fa4
 800a0f0:	20001f90 	.word	0x20001f90

0800a0f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	60fb      	str	r3, [r7, #12]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a13a:	f000 ffd5 	bl	800b0e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a13e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b4 <xTaskCheckForTimeOut+0xc0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d102      	bne.n	800a15e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e023      	b.n	800a1a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b15      	ldr	r3, [pc, #84]	@ (800a1b8 <xTaskCheckForTimeOut+0xc4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d007      	beq.n	800a17a <xTaskCheckForTimeOut+0x86>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	429a      	cmp	r2, r3
 800a172:	d302      	bcc.n	800a17a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e015      	b.n	800a1a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d20b      	bcs.n	800a19c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ff99 	bl	800a0c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e004      	b.n	800a1a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1a6:	f000 ffd1 	bl	800b14c <vPortExitCritical>

	return xReturn;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20001f90 	.word	0x20001f90
 800a1b8:	20001fa4 	.word	0x20001fa4

0800a1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1c0:	4b03      	ldr	r3, [pc, #12]	@ (800a1d0 <vTaskMissedYield+0x14>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	20001fa0 	.word	0x20001fa0

0800a1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1dc:	f000 f854 	bl	800a288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <prvIdleTask+0x2c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d907      	bls.n	800a1f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a1e8:	4b06      	ldr	r3, [pc, #24]	@ (800a204 <prvIdleTask+0x30>)
 800a1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a1f8:	f7f6 f979 	bl	80004ee <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a1fc:	e7ee      	b.n	800a1dc <prvIdleTask+0x8>
 800a1fe:	bf00      	nop
 800a200:	20001abc 	.word	0x20001abc
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a20e:	2300      	movs	r3, #0
 800a210:	607b      	str	r3, [r7, #4]
 800a212:	e00c      	b.n	800a22e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4a12      	ldr	r2, [pc, #72]	@ (800a268 <prvInitialiseTaskLists+0x60>)
 800a220:	4413      	add	r3, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe f916 	bl	8008454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3301      	adds	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b37      	cmp	r3, #55	@ 0x37
 800a232:	d9ef      	bls.n	800a214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a234:	480d      	ldr	r0, [pc, #52]	@ (800a26c <prvInitialiseTaskLists+0x64>)
 800a236:	f7fe f90d 	bl	8008454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a23a:	480d      	ldr	r0, [pc, #52]	@ (800a270 <prvInitialiseTaskLists+0x68>)
 800a23c:	f7fe f90a 	bl	8008454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a240:	480c      	ldr	r0, [pc, #48]	@ (800a274 <prvInitialiseTaskLists+0x6c>)
 800a242:	f7fe f907 	bl	8008454 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a246:	480c      	ldr	r0, [pc, #48]	@ (800a278 <prvInitialiseTaskLists+0x70>)
 800a248:	f7fe f904 	bl	8008454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a24c:	480b      	ldr	r0, [pc, #44]	@ (800a27c <prvInitialiseTaskLists+0x74>)
 800a24e:	f7fe f901 	bl	8008454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a252:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <prvInitialiseTaskLists+0x78>)
 800a254:	4a05      	ldr	r2, [pc, #20]	@ (800a26c <prvInitialiseTaskLists+0x64>)
 800a256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a258:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <prvInitialiseTaskLists+0x7c>)
 800a25a:	4a05      	ldr	r2, [pc, #20]	@ (800a270 <prvInitialiseTaskLists+0x68>)
 800a25c:	601a      	str	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20001abc 	.word	0x20001abc
 800a26c:	20001f1c 	.word	0x20001f1c
 800a270:	20001f30 	.word	0x20001f30
 800a274:	20001f4c 	.word	0x20001f4c
 800a278:	20001f60 	.word	0x20001f60
 800a27c:	20001f78 	.word	0x20001f78
 800a280:	20001f44 	.word	0x20001f44
 800a284:	20001f48 	.word	0x20001f48

0800a288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a28e:	e019      	b.n	800a2c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a290:	f000 ff2a 	bl	800b0e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a294:	4b10      	ldr	r3, [pc, #64]	@ (800a2d8 <prvCheckTasksWaitingTermination+0x50>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe f961 	bl	8008568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <prvCheckTasksWaitingTermination+0x54>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4a0b      	ldr	r2, [pc, #44]	@ (800a2dc <prvCheckTasksWaitingTermination+0x54>)
 800a2ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e0 <prvCheckTasksWaitingTermination+0x58>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a2e0 <prvCheckTasksWaitingTermination+0x58>)
 800a2b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2ba:	f000 ff47 	bl	800b14c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f810 	bl	800a2e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2c4:	4b06      	ldr	r3, [pc, #24]	@ (800a2e0 <prvCheckTasksWaitingTermination+0x58>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e1      	bne.n	800a290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20001f60 	.word	0x20001f60
 800a2dc:	20001f8c 	.word	0x20001f8c
 800a2e0:	20001f74 	.word	0x20001f74

0800a2e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d108      	bne.n	800a308 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 f8e4 	bl	800b4c8 <vPortFree>
				vPortFree( pxTCB );
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 f8e1 	bl	800b4c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a306:	e019      	b.n	800a33c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d103      	bne.n	800a31a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 f8d8 	bl	800b4c8 <vPortFree>
	}
 800a318:	e010      	b.n	800a33c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a320:	2b02      	cmp	r3, #2
 800a322:	d00b      	beq.n	800a33c <prvDeleteTCB+0x58>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	60fb      	str	r3, [r7, #12]
}
 800a336:	bf00      	nop
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <prvDeleteTCB+0x54>
	}
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34a:	4b0c      	ldr	r3, [pc, #48]	@ (800a37c <prvResetNextTaskUnblockTime+0x38>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a354:	4b0a      	ldr	r3, [pc, #40]	@ (800a380 <prvResetNextTaskUnblockTime+0x3c>)
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a35c:	e008      	b.n	800a370 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a35e:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <prvResetNextTaskUnblockTime+0x38>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	4a04      	ldr	r2, [pc, #16]	@ (800a380 <prvResetNextTaskUnblockTime+0x3c>)
 800a36e:	6013      	str	r3, [r2, #0]
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20001f44 	.word	0x20001f44
 800a380:	20001fac 	.word	0x20001fac

0800a384 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a38a:	4b05      	ldr	r3, [pc, #20]	@ (800a3a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a390:	687b      	ldr	r3, [r7, #4]
	}
 800a392:	4618      	mov	r0, r3
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20001ab8 	.word	0x20001ab8

0800a3a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d8 <xTaskGetSchedulerState+0x34>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	607b      	str	r3, [r7, #4]
 800a3b6:	e008      	b.n	800a3ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b8:	4b08      	ldr	r3, [pc, #32]	@ (800a3dc <xTaskGetSchedulerState+0x38>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	e001      	b.n	800a3ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3ca:	687b      	ldr	r3, [r7, #4]
	}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20001f98 	.word	0x20001f98
 800a3dc:	20001fb4 	.word	0x20001fb4

0800a3e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d051      	beq.n	800a49a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a4a4 <xTaskPriorityInherit+0xc4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d241      	bcs.n	800a488 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db06      	blt.n	800a41a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a40c:	4b25      	ldr	r3, [pc, #148]	@ (800a4a4 <xTaskPriorityInherit+0xc4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a412:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6959      	ldr	r1, [r3, #20]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a422:	4613      	mov	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4a1f      	ldr	r2, [pc, #124]	@ (800a4a8 <xTaskPriorityInherit+0xc8>)
 800a42c:	4413      	add	r3, r2
 800a42e:	4299      	cmp	r1, r3
 800a430:	d122      	bne.n	800a478 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe f896 	bl	8008568 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a43c:	4b19      	ldr	r3, [pc, #100]	@ (800a4a4 <xTaskPriorityInherit+0xc4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44a:	4b18      	ldr	r3, [pc, #96]	@ (800a4ac <xTaskPriorityInherit+0xcc>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d903      	bls.n	800a45a <xTaskPriorityInherit+0x7a>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a456:	4a15      	ldr	r2, [pc, #84]	@ (800a4ac <xTaskPriorityInherit+0xcc>)
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	4613      	mov	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4a10      	ldr	r2, [pc, #64]	@ (800a4a8 <xTaskPriorityInherit+0xc8>)
 800a468:	441a      	add	r2, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7fe f81c 	bl	80084ae <vListInsertEnd>
 800a476:	e004      	b.n	800a482 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a478:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a4 <xTaskPriorityInherit+0xc4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a482:	2301      	movs	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e008      	b.n	800a49a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a48c:	4b05      	ldr	r3, [pc, #20]	@ (800a4a4 <xTaskPriorityInherit+0xc4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a492:	429a      	cmp	r2, r3
 800a494:	d201      	bcs.n	800a49a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a496:	2301      	movs	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a49a:	68fb      	ldr	r3, [r7, #12]
	}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20001ab8 	.word	0x20001ab8
 800a4a8:	20001abc 	.word	0x20001abc
 800a4ac:	20001f94 	.word	0x20001f94

0800a4b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d058      	beq.n	800a578 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a584 <xTaskPriorityDisinherit+0xd4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d00b      	beq.n	800a4e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60bb      	str	r3, [r7, #8]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50c:	1e5a      	subs	r2, r3, #1
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d02c      	beq.n	800a578 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a522:	2b00      	cmp	r3, #0
 800a524:	d128      	bne.n	800a578 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe f81c 	bl	8008568 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a548:	4b0f      	ldr	r3, [pc, #60]	@ (800a588 <xTaskPriorityDisinherit+0xd8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d903      	bls.n	800a558 <xTaskPriorityDisinherit+0xa8>
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	4a0c      	ldr	r2, [pc, #48]	@ (800a588 <xTaskPriorityDisinherit+0xd8>)
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4a09      	ldr	r2, [pc, #36]	@ (800a58c <xTaskPriorityDisinherit+0xdc>)
 800a566:	441a      	add	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fd ff9d 	bl	80084ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a578:	697b      	ldr	r3, [r7, #20]
	}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20001ab8 	.word	0x20001ab8
 800a588:	20001f94 	.word	0x20001f94
 800a58c:	20001abc 	.word	0x20001abc

0800a590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d06c      	beq.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d902      	bls.n	800a5d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	61fb      	str	r3, [r7, #28]
 800a5d6:	e002      	b.n	800a5de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d04c      	beq.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d147      	bne.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5f2:	4b26      	ldr	r3, [pc, #152]	@ (800a68c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d10b      	bne.n	800a614 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60bb      	str	r3, [r7, #8]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a618:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	69fa      	ldr	r2, [r7, #28]
 800a61e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	db04      	blt.n	800a632 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	6959      	ldr	r1, [r3, #20]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4a13      	ldr	r2, [pc, #76]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a642:	4413      	add	r3, r2
 800a644:	4299      	cmp	r1, r3
 800a646:	d11c      	bne.n	800a682 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	3304      	adds	r3, #4
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fd ff8b 	bl	8008568 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a656:	4b0f      	ldr	r3, [pc, #60]	@ (800a694 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d903      	bls.n	800a666 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a662:	4a0c      	ldr	r2, [pc, #48]	@ (800a694 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4a07      	ldr	r2, [pc, #28]	@ (800a690 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a674:	441a      	add	r2, r3
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	3304      	adds	r3, #4
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7fd ff16 	bl	80084ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a682:	bf00      	nop
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20001ab8 	.word	0x20001ab8
 800a690:	20001abc 	.word	0x20001abc
 800a694:	20001f94 	.word	0x20001f94

0800a698 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a69e:	4b09      	ldr	r3, [pc, #36]	@ (800a6c4 <uxTaskResetEventItemValue+0x2c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a6:	4b07      	ldr	r3, [pc, #28]	@ (800a6c4 <uxTaskResetEventItemValue+0x2c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ac:	4b05      	ldr	r3, [pc, #20]	@ (800a6c4 <uxTaskResetEventItemValue+0x2c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a6b4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a6b6:	687b      	ldr	r3, [r7, #4]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20001ab8 	.word	0x20001ab8

0800a6c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a6cc:	4b07      	ldr	r3, [pc, #28]	@ (800a6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6da:	3201      	adds	r2, #1
 800a6dc:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800a6de:	4b03      	ldr	r3, [pc, #12]	@ (800a6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
	}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	20001ab8 	.word	0x20001ab8

0800a6f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6fa:	4b21      	ldr	r3, [pc, #132]	@ (800a780 <prvAddCurrentTaskToDelayedList+0x90>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a700:	4b20      	ldr	r3, [pc, #128]	@ (800a784 <prvAddCurrentTaskToDelayedList+0x94>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3304      	adds	r3, #4
 800a706:	4618      	mov	r0, r3
 800a708:	f7fd ff2e 	bl	8008568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	d10a      	bne.n	800a72a <prvAddCurrentTaskToDelayedList+0x3a>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a71a:	4b1a      	ldr	r3, [pc, #104]	@ (800a784 <prvAddCurrentTaskToDelayedList+0x94>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3304      	adds	r3, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4819      	ldr	r0, [pc, #100]	@ (800a788 <prvAddCurrentTaskToDelayedList+0x98>)
 800a724:	f7fd fec3 	bl	80084ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a728:	e026      	b.n	800a778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4413      	add	r3, r2
 800a730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a732:	4b14      	ldr	r3, [pc, #80]	@ (800a784 <prvAddCurrentTaskToDelayedList+0x94>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d209      	bcs.n	800a756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a742:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b0f      	ldr	r3, [pc, #60]	@ (800a784 <prvAddCurrentTaskToDelayedList+0x94>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f7fd fed1 	bl	80084f6 <vListInsert>
}
 800a754:	e010      	b.n	800a778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a756:	4b0e      	ldr	r3, [pc, #56]	@ (800a790 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b0a      	ldr	r3, [pc, #40]	@ (800a784 <prvAddCurrentTaskToDelayedList+0x94>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3304      	adds	r3, #4
 800a760:	4619      	mov	r1, r3
 800a762:	4610      	mov	r0, r2
 800a764:	f7fd fec7 	bl	80084f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d202      	bcs.n	800a778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a772:	4a08      	ldr	r2, [pc, #32]	@ (800a794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6013      	str	r3, [r2, #0]
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20001f90 	.word	0x20001f90
 800a784:	20001ab8 	.word	0x20001ab8
 800a788:	20001f78 	.word	0x20001f78
 800a78c:	20001f48 	.word	0x20001f48
 800a790:	20001f44 	.word	0x20001f44
 800a794:	20001fac 	.word	0x20001fac

0800a798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7a2:	f000 fb13 	bl	800adcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a81c <xTimerCreateTimerTask+0x84>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d021      	beq.n	800a7f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7b6:	1d3a      	adds	r2, r7, #4
 800a7b8:	f107 0108 	add.w	r1, r7, #8
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd fc37 	bl	8008034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	9202      	str	r2, [sp, #8]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	460a      	mov	r2, r1
 800a7d8:	4911      	ldr	r1, [pc, #68]	@ (800a820 <xTimerCreateTimerTask+0x88>)
 800a7da:	4812      	ldr	r0, [pc, #72]	@ (800a824 <xTimerCreateTimerTask+0x8c>)
 800a7dc:	f7fe fe04 	bl	80093e8 <xTaskCreateStatic>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4a11      	ldr	r2, [pc, #68]	@ (800a828 <xTimerCreateTimerTask+0x90>)
 800a7e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a7e6:	4b10      	ldr	r3, [pc, #64]	@ (800a828 <xTimerCreateTimerTask+0x90>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	613b      	str	r3, [r7, #16]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a810:	697b      	ldr	r3, [r7, #20]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20001ff0 	.word	0x20001ff0
 800a820:	0800ba1c 	.word	0x0800ba1c
 800a824:	0800a965 	.word	0x0800a965
 800a828:	20001ff4 	.word	0x20001ff4

0800a82c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	@ 0x28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10b      	bne.n	800a85c <xTimerGenericCommand+0x30>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	623b      	str	r3, [r7, #32]
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	e7fd      	b.n	800a858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a85c:	4b19      	ldr	r3, [pc, #100]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d02a      	beq.n	800a8ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b05      	cmp	r3, #5
 800a874:	dc18      	bgt.n	800a8a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a876:	f7ff fd95 	bl	800a3a4 <xTaskGetSchedulerState>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d109      	bne.n	800a894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a880:	4b10      	ldr	r3, [pc, #64]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a882:	6818      	ldr	r0, [r3, #0]
 800a884:	f107 0110 	add.w	r1, r7, #16
 800a888:	2300      	movs	r3, #0
 800a88a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a88c:	f7fe f894 	bl	80089b8 <xQueueGenericSend>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24
 800a892:	e012      	b.n	800a8ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a894:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	f107 0110 	add.w	r1, r7, #16
 800a89c:	2300      	movs	r3, #0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f7fe f88a 	bl	80089b8 <xQueueGenericSend>
 800a8a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a8a6:	e008      	b.n	800a8ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8a8:	4b06      	ldr	r3, [pc, #24]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f107 0110 	add.w	r1, r7, #16
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	f7fe f982 	bl	8008bbc <xQueueGenericSendFromISR>
 800a8b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	@ 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20001ff0 	.word	0x20001ff0

0800a8c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d2:	4b23      	ldr	r3, [pc, #140]	@ (800a960 <prvProcessExpiredTimer+0x98>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fe41 	bl	8008568 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d023      	beq.n	800a93c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	18d1      	adds	r1, r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	6978      	ldr	r0, [r7, #20]
 800a902:	f000 f8d5 	bl	800aab0 <prvInsertTimerInActiveList>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d020      	beq.n	800a94e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a90c:	2300      	movs	r3, #0
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f7ff ff88 	bl	800a82c <xTimerGenericCommand>
 800a91c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d114      	bne.n	800a94e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	60fb      	str	r3, [r7, #12]
}
 800a936:	bf00      	nop
 800a938:	bf00      	nop
 800a93a:	e7fd      	b.n	800a938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	4798      	blx	r3
}
 800a956:	bf00      	nop
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20001fe8 	.word	0x20001fe8

0800a964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f859 	bl	800aa28 <prvGetNextExpireTime>
 800a976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f805 	bl	800a98c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a982:	f000 f8d7 	bl	800ab34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a986:	bf00      	nop
 800a988:	e7f0      	b.n	800a96c <prvTimerTask+0x8>
	...

0800a98c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a996:	f7ff f84f 	bl	8009a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f866 	bl	800aa70 <prvSampleTimeNow>
 800a9a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d130      	bne.n	800aa0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d806      	bhi.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9ba:	f7ff f84b 	bl	8009a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff81 	bl	800a8c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9c6:	e024      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d008      	beq.n	800a9e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ce:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <prvProcessTimerOrBlockTask+0x90>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <prvProcessTimerOrBlockTask+0x50>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e000      	b.n	800a9de <prvProcessTimerOrBlockTask+0x52>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <prvProcessTimerOrBlockTask+0x94>)
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f7fe fcc7 	bl	8009380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9f2:	f7ff f82f 	bl	8009a54 <xTaskResumeAll>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9fc:	4b09      	ldr	r3, [pc, #36]	@ (800aa24 <prvProcessTimerOrBlockTask+0x98>)
 800a9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	f3bf 8f6f 	isb	sy
}
 800aa0c:	e001      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa0e:	f7ff f821 	bl	8009a54 <xTaskResumeAll>
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20001fec 	.word	0x20001fec
 800aa20:	20001ff0 	.word	0x20001ff0
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa30:	4b0e      	ldr	r3, [pc, #56]	@ (800aa6c <prvGetNextExpireTime+0x44>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <prvGetNextExpireTime+0x16>
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	e000      	b.n	800aa40 <prvGetNextExpireTime+0x18>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d105      	bne.n	800aa58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <prvGetNextExpireTime+0x44>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e001      	b.n	800aa5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20001fe8 	.word	0x20001fe8

0800aa70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa78:	f7ff f88a 	bl	8009b90 <xTaskGetTickCount>
 800aa7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	@ (800aaac <prvSampleTimeNow+0x3c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d205      	bcs.n	800aa94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa88:	f000 f93a 	bl	800ad00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e002      	b.n	800aa9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa9a:	4a04      	ldr	r2, [pc, #16]	@ (800aaac <prvSampleTimeNow+0x3c>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20001ff8 	.word	0x20001ff8

0800aab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d812      	bhi.n	800aafc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1ad2      	subs	r2, r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e01b      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaea:	4b10      	ldr	r3, [pc, #64]	@ (800ab2c <prvInsertTimerInActiveList+0x7c>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fd fcfe 	bl	80084f6 <vListInsert>
 800aafa:	e012      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d206      	bcs.n	800ab12 <prvInsertTimerInActiveList+0x62>
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d302      	bcc.n	800ab12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
 800ab10:	e007      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab12:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <prvInsertTimerInActiveList+0x80>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7fd fcea 	bl	80084f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab22:	697b      	ldr	r3, [r7, #20]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20001fec 	.word	0x20001fec
 800ab30:	20001fe8 	.word	0x20001fe8

0800ab34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08e      	sub	sp, #56	@ 0x38
 800ab38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab3a:	e0ce      	b.n	800acda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	da19      	bge.n	800ab76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab42:	1d3b      	adds	r3, r7, #4
 800ab44:	3304      	adds	r3, #4
 800ab46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10b      	bne.n	800ab66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	61fb      	str	r3, [r7, #28]
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	e7fd      	b.n	800ab62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab6c:	6850      	ldr	r0, [r2, #4]
 800ab6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab70:	6892      	ldr	r2, [r2, #8]
 800ab72:	4611      	mov	r1, r2
 800ab74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f2c0 80ae 	blt.w	800acda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fd fcea 	bl	8008568 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab94:	463b      	mov	r3, r7
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff ff6a 	bl	800aa70 <prvSampleTimeNow>
 800ab9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b09      	cmp	r3, #9
 800aba2:	f200 8097 	bhi.w	800acd4 <prvProcessReceivedCommands+0x1a0>
 800aba6:	a201      	add	r2, pc, #4	@ (adr r2, 800abac <prvProcessReceivedCommands+0x78>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abd5 	.word	0x0800abd5
 800abb0:	0800abd5 	.word	0x0800abd5
 800abb4:	0800abd5 	.word	0x0800abd5
 800abb8:	0800ac4b 	.word	0x0800ac4b
 800abbc:	0800ac5f 	.word	0x0800ac5f
 800abc0:	0800acab 	.word	0x0800acab
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abd5 	.word	0x0800abd5
 800abcc:	0800ac4b 	.word	0x0800ac4b
 800abd0:	0800ac5f 	.word	0x0800ac5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	18d1      	adds	r1, r2, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf4:	f7ff ff5c 	bl	800aab0 <prvInsertTimerInActiveList>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d06c      	beq.n	800acd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d061      	beq.n	800acd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	441a      	add	r2, r3
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	2300      	movs	r3, #0
 800ac22:	2100      	movs	r1, #0
 800ac24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac26:	f7ff fe01 	bl	800a82c <xTimerGenericCommand>
 800ac2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d152      	bne.n	800acd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	61bb      	str	r3, [r7, #24]
}
 800ac44:	bf00      	nop
 800ac46:	bf00      	nop
 800ac48:	e7fd      	b.n	800ac46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac50:	f023 0301 	bic.w	r3, r3, #1
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac5c:	e03d      	b.n	800acda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac64:	f043 0301 	orr.w	r3, r3, #1
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	617b      	str	r3, [r7, #20]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	18d1      	adds	r1, r2, r3
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aca4:	f7ff ff04 	bl	800aab0 <prvInsertTimerInActiveList>
					break;
 800aca8:	e017      	b.n	800acda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d103      	bne.n	800acc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800acb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acba:	f000 fc05 	bl	800b4c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acbe:	e00c      	b.n	800acda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acc6:	f023 0301 	bic.w	r3, r3, #1
 800acca:	b2da      	uxtb	r2, r3
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acd2:	e002      	b.n	800acda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <prvProcessReceivedCommands+0x1a6>
					break;
 800acd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acda:	4b08      	ldr	r3, [pc, #32]	@ (800acfc <prvProcessReceivedCommands+0x1c8>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	1d39      	adds	r1, r7, #4
 800ace0:	2200      	movs	r2, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe f808 	bl	8008cf8 <xQueueReceive>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	f47f af26 	bne.w	800ab3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	3730      	adds	r7, #48	@ 0x30
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20001ff0 	.word	0x20001ff0

0800ad00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad06:	e049      	b.n	800ad9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad08:	4b2e      	ldr	r3, [pc, #184]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad12:	4b2c      	ldr	r3, [pc, #176]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fd fc21 	bl	8008568 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad34:	f003 0304 	and.w	r3, r3, #4
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d02f      	beq.n	800ad9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4413      	add	r3, r2
 800ad44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d90e      	bls.n	800ad6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad5a:	4b1a      	ldr	r3, [pc, #104]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f7fd fbc6 	bl	80084f6 <vListInsert>
 800ad6a:	e017      	b.n	800ad9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	2300      	movs	r3, #0
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	2100      	movs	r1, #0
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fd58 	bl	800a82c <xTimerGenericCommand>
 800ad7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10b      	bne.n	800ad9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	603b      	str	r3, [r7, #0]
}
 800ad96:	bf00      	nop
 800ad98:	bf00      	nop
 800ad9a:	e7fd      	b.n	800ad98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad9c:	4b09      	ldr	r3, [pc, #36]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1b0      	bne.n	800ad08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ada6:	4b07      	ldr	r3, [pc, #28]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800adac:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <prvSwitchTimerLists+0xc8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a04      	ldr	r2, [pc, #16]	@ (800adc4 <prvSwitchTimerLists+0xc4>)
 800adb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adb4:	4a04      	ldr	r2, [pc, #16]	@ (800adc8 <prvSwitchTimerLists+0xc8>)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	6013      	str	r3, [r2, #0]
}
 800adba:	bf00      	nop
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20001fe8 	.word	0x20001fe8
 800adc8:	20001fec 	.word	0x20001fec

0800adcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800add2:	f000 f989 	bl	800b0e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800add6:	4b15      	ldr	r3, [pc, #84]	@ (800ae2c <prvCheckForValidListAndQueue+0x60>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d120      	bne.n	800ae20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adde:	4814      	ldr	r0, [pc, #80]	@ (800ae30 <prvCheckForValidListAndQueue+0x64>)
 800ade0:	f7fd fb38 	bl	8008454 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ade4:	4813      	ldr	r0, [pc, #76]	@ (800ae34 <prvCheckForValidListAndQueue+0x68>)
 800ade6:	f7fd fb35 	bl	8008454 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adea:	4b13      	ldr	r3, [pc, #76]	@ (800ae38 <prvCheckForValidListAndQueue+0x6c>)
 800adec:	4a10      	ldr	r2, [pc, #64]	@ (800ae30 <prvCheckForValidListAndQueue+0x64>)
 800adee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adf0:	4b12      	ldr	r3, [pc, #72]	@ (800ae3c <prvCheckForValidListAndQueue+0x70>)
 800adf2:	4a10      	ldr	r2, [pc, #64]	@ (800ae34 <prvCheckForValidListAndQueue+0x68>)
 800adf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adf6:	2300      	movs	r3, #0
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	4b11      	ldr	r3, [pc, #68]	@ (800ae40 <prvCheckForValidListAndQueue+0x74>)
 800adfc:	4a11      	ldr	r2, [pc, #68]	@ (800ae44 <prvCheckForValidListAndQueue+0x78>)
 800adfe:	2110      	movs	r1, #16
 800ae00:	200a      	movs	r0, #10
 800ae02:	f7fd fc45 	bl	8008690 <xQueueGenericCreateStatic>
 800ae06:	4603      	mov	r3, r0
 800ae08:	4a08      	ldr	r2, [pc, #32]	@ (800ae2c <prvCheckForValidListAndQueue+0x60>)
 800ae0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae0c:	4b07      	ldr	r3, [pc, #28]	@ (800ae2c <prvCheckForValidListAndQueue+0x60>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae14:	4b05      	ldr	r3, [pc, #20]	@ (800ae2c <prvCheckForValidListAndQueue+0x60>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	490b      	ldr	r1, [pc, #44]	@ (800ae48 <prvCheckForValidListAndQueue+0x7c>)
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fa86 	bl	800932c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae20:	f000 f994 	bl	800b14c <vPortExitCritical>
}
 800ae24:	bf00      	nop
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20001ff0 	.word	0x20001ff0
 800ae30:	20001fc0 	.word	0x20001fc0
 800ae34:	20001fd4 	.word	0x20001fd4
 800ae38:	20001fe8 	.word	0x20001fe8
 800ae3c:	20001fec 	.word	0x20001fec
 800ae40:	2000209c 	.word	0x2000209c
 800ae44:	20001ffc 	.word	0x20001ffc
 800ae48:	0800ba24 	.word	0x0800ba24

0800ae4c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08a      	sub	sp, #40	@ 0x28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ae5a:	f06f 0301 	mvn.w	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae6c:	4b06      	ldr	r3, [pc, #24]	@ (800ae88 <xTimerPendFunctionCallFromISR+0x3c>)
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	f107 0114 	add.w	r1, r7, #20
 800ae74:	2300      	movs	r3, #0
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	f7fd fea0 	bl	8008bbc <xQueueGenericSendFromISR>
 800ae7c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3728      	adds	r7, #40	@ 0x28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20001ff0 	.word	0x20001ff0

0800ae8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aebc:	4a0c      	ldr	r2, [pc, #48]	@ (800aef0 <pxPortInitialiseStack+0x64>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b14      	subs	r3, #20
 800aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f06f 0202 	mvn.w	r2, #2
 800aeda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b20      	subs	r3, #32
 800aee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aee2:	68fb      	ldr	r3, [r7, #12]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	0800aef5 	.word	0x0800aef5

0800aef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aefe:	4b13      	ldr	r3, [pc, #76]	@ (800af4c <prvTaskExitError+0x58>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d00b      	beq.n	800af20 <prvTaskExitError+0x2c>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	60fb      	str	r3, [r7, #12]
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <prvTaskExitError+0x28>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60bb      	str	r3, [r7, #8]
}
 800af32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af34:	bf00      	nop
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0fc      	beq.n	800af36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	200002b4 	.word	0x200002b4

0800af50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af50:	4b07      	ldr	r3, [pc, #28]	@ (800af70 <pxCurrentTCBConst2>)
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	6808      	ldr	r0, [r1, #0]
 800af56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f380 8809 	msr	PSP, r0
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	4770      	bx	lr
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst2>:
 800af70:	20001ab8 	.word	0x20001ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af78:	4808      	ldr	r0, [pc, #32]	@ (800af9c <prvPortStartFirstTask+0x24>)
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f380 8808 	msr	MSP, r0
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8814 	msr	CONTROL, r0
 800af8a:	b662      	cpsie	i
 800af8c:	b661      	cpsie	f
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	df00      	svc	0
 800af98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af9a:	bf00      	nop
 800af9c:	e000ed08 	.word	0xe000ed08

0800afa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afa6:	4b47      	ldr	r3, [pc, #284]	@ (800b0c4 <xPortStartScheduler+0x124>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a47      	ldr	r2, [pc, #284]	@ (800b0c8 <xPortStartScheduler+0x128>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d10b      	bne.n	800afc8 <xPortStartScheduler+0x28>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afc8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0c4 <xPortStartScheduler+0x124>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a3f      	ldr	r2, [pc, #252]	@ (800b0cc <xPortStartScheduler+0x12c>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d10b      	bne.n	800afea <xPortStartScheduler+0x4a>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60fb      	str	r3, [r7, #12]
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	e7fd      	b.n	800afe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afea:	4b39      	ldr	r3, [pc, #228]	@ (800b0d0 <xPortStartScheduler+0x130>)
 800afec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	22ff      	movs	r2, #255	@ 0xff
 800affa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b31      	ldr	r3, [pc, #196]	@ (800b0d4 <xPortStartScheduler+0x134>)
 800b010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b012:	4b31      	ldr	r3, [pc, #196]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b014:	2207      	movs	r2, #7
 800b016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b018:	e009      	b.n	800b02e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b01a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3b01      	subs	r3, #1
 800b020:	4a2d      	ldr	r2, [pc, #180]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	b2db      	uxtb	r3, r3
 800b032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b036:	2b80      	cmp	r3, #128	@ 0x80
 800b038:	d0ef      	beq.n	800b01a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b03a:	4b27      	ldr	r3, [pc, #156]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f1c3 0307 	rsb	r3, r3, #7
 800b042:	2b04      	cmp	r3, #4
 800b044:	d00b      	beq.n	800b05e <xPortStartScheduler+0xbe>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	60bb      	str	r3, [r7, #8]
}
 800b058:	bf00      	nop
 800b05a:	bf00      	nop
 800b05c:	e7fd      	b.n	800b05a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b05e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	021b      	lsls	r3, r3, #8
 800b064:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b068:	4b1b      	ldr	r3, [pc, #108]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b070:	4a19      	ldr	r2, [pc, #100]	@ (800b0d8 <xPortStartScheduler+0x138>)
 800b072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	b2da      	uxtb	r2, r3
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b07c:	4b17      	ldr	r3, [pc, #92]	@ (800b0dc <xPortStartScheduler+0x13c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a16      	ldr	r2, [pc, #88]	@ (800b0dc <xPortStartScheduler+0x13c>)
 800b082:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b088:	4b14      	ldr	r3, [pc, #80]	@ (800b0dc <xPortStartScheduler+0x13c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a13      	ldr	r2, [pc, #76]	@ (800b0dc <xPortStartScheduler+0x13c>)
 800b08e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b094:	f000 f8da 	bl	800b24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b098:	4b11      	ldr	r3, [pc, #68]	@ (800b0e0 <xPortStartScheduler+0x140>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b09e:	f000 f8f9 	bl	800b294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0a2:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <xPortStartScheduler+0x144>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b0e4 <xPortStartScheduler+0x144>)
 800b0a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b0ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0ae:	f7ff ff63 	bl	800af78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0b2:	f7fe fe37 	bl	8009d24 <vTaskSwitchContext>
	prvTaskExitError();
 800b0b6:	f7ff ff1d 	bl	800aef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	e000ed00 	.word	0xe000ed00
 800b0c8:	410fc271 	.word	0x410fc271
 800b0cc:	410fc270 	.word	0x410fc270
 800b0d0:	e000e400 	.word	0xe000e400
 800b0d4:	200020ec 	.word	0x200020ec
 800b0d8:	200020f0 	.word	0x200020f0
 800b0dc:	e000ed20 	.word	0xe000ed20
 800b0e0:	200002b4 	.word	0x200002b4
 800b0e4:	e000ef34 	.word	0xe000ef34

0800b0e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	607b      	str	r3, [r7, #4]
}
 800b100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b102:	4b10      	ldr	r3, [pc, #64]	@ (800b144 <vPortEnterCritical+0x5c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3301      	adds	r3, #1
 800b108:	4a0e      	ldr	r2, [pc, #56]	@ (800b144 <vPortEnterCritical+0x5c>)
 800b10a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b10c:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <vPortEnterCritical+0x5c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d110      	bne.n	800b136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b114:	4b0c      	ldr	r3, [pc, #48]	@ (800b148 <vPortEnterCritical+0x60>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <vPortEnterCritical+0x4e>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	603b      	str	r3, [r7, #0]
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	e7fd      	b.n	800b132 <vPortEnterCritical+0x4a>
	}
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	200002b4 	.word	0x200002b4
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b152:	4b12      	ldr	r3, [pc, #72]	@ (800b19c <vPortExitCritical+0x50>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10b      	bne.n	800b172 <vPortExitCritical+0x26>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	e7fd      	b.n	800b16e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b172:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	4a08      	ldr	r2, [pc, #32]	@ (800b19c <vPortExitCritical+0x50>)
 800b17a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b17c:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <vPortExitCritical+0x50>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d105      	bne.n	800b190 <vPortExitCritical+0x44>
 800b184:	2300      	movs	r3, #0
 800b186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f383 8811 	msr	BASEPRI, r3
}
 800b18e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	200002b4 	.word	0x200002b4

0800b1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1a0:	f3ef 8009 	mrs	r0, PSP
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4b15      	ldr	r3, [pc, #84]	@ (800b200 <pxCurrentTCBConst>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	f01e 0f10 	tst.w	lr, #16
 800b1b0:	bf08      	it	eq
 800b1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ba:	6010      	str	r0, [r2, #0]
 800b1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b1c4:	f380 8811 	msr	BASEPRI, r0
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f7fe fda8 	bl	8009d24 <vTaskSwitchContext>
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f380 8811 	msr	BASEPRI, r0
 800b1dc:	bc09      	pop	{r0, r3}
 800b1de:	6819      	ldr	r1, [r3, #0]
 800b1e0:	6808      	ldr	r0, [r1, #0]
 800b1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e6:	f01e 0f10 	tst.w	lr, #16
 800b1ea:	bf08      	it	eq
 800b1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1f0:	f380 8809 	msr	PSP, r0
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst>:
 800b200:	20001ab8 	.word	0x20001ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	607b      	str	r3, [r7, #4]
}
 800b220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b222:	f7fe fcc5 	bl	8009bb0 <xTaskIncrementTick>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <xPortSysTickHandler+0x40>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f383 8811 	msr	BASEPRI, r3
}
 800b23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b250:	4b0b      	ldr	r3, [pc, #44]	@ (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b256:	4b0b      	ldr	r3, [pc, #44]	@ (800b284 <vPortSetupTimerInterrupt+0x38>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b25c:	4b0a      	ldr	r3, [pc, #40]	@ (800b288 <vPortSetupTimerInterrupt+0x3c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0a      	ldr	r2, [pc, #40]	@ (800b28c <vPortSetupTimerInterrupt+0x40>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	099b      	lsrs	r3, r3, #6
 800b268:	4a09      	ldr	r2, [pc, #36]	@ (800b290 <vPortSetupTimerInterrupt+0x44>)
 800b26a:	3b01      	subs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b26e:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b270:	2207      	movs	r2, #7
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e010 	.word	0xe000e010
 800b284:	e000e018 	.word	0xe000e018
 800b288:	200002a8 	.word	0x200002a8
 800b28c:	10624dd3 	.word	0x10624dd3
 800b290:	e000e014 	.word	0xe000e014

0800b294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b2a4 <vPortEnableVFP+0x10>
 800b298:	6801      	ldr	r1, [r0, #0]
 800b29a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b29e:	6001      	str	r1, [r0, #0]
 800b2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2a2:	bf00      	nop
 800b2a4:	e000ed88 	.word	0xe000ed88

0800b2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d915      	bls.n	800b2e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ba:	4a18      	ldr	r2, [pc, #96]	@ (800b31c <vPortValidateInterruptPriority+0x74>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2c4:	4b16      	ldr	r3, [pc, #88]	@ (800b320 <vPortValidateInterruptPriority+0x78>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	7afa      	ldrb	r2, [r7, #11]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d20b      	bcs.n	800b2e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b324 <vPortValidateInterruptPriority+0x7c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b328 <vPortValidateInterruptPriority+0x80>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d90b      	bls.n	800b30e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	603b      	str	r3, [r7, #0]
}
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
 800b30c:	e7fd      	b.n	800b30a <vPortValidateInterruptPriority+0x62>
	}
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	e000e3f0 	.word	0xe000e3f0
 800b320:	200020ec 	.word	0x200020ec
 800b324:	e000ed0c 	.word	0xe000ed0c
 800b328:	200020f0 	.word	0x200020f0

0800b32c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	@ 0x28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b338:	f7fe fb7e 	bl	8009a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b33c:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b0 <pvPortMalloc+0x184>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b344:	f000 f924 	bl	800b590 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b348:	4b5a      	ldr	r3, [pc, #360]	@ (800b4b4 <pvPortMalloc+0x188>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4013      	ands	r3, r2
 800b350:	2b00      	cmp	r3, #0
 800b352:	f040 8095 	bne.w	800b480 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d01e      	beq.n	800b39a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b35c:	2208      	movs	r2, #8
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d015      	beq.n	800b39a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f023 0307 	bic.w	r3, r3, #7
 800b374:	3308      	adds	r3, #8
 800b376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <pvPortMalloc+0x6e>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	617b      	str	r3, [r7, #20]
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop
 800b398:	e7fd      	b.n	800b396 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d06f      	beq.n	800b480 <pvPortMalloc+0x154>
 800b3a0:	4b45      	ldr	r3, [pc, #276]	@ (800b4b8 <pvPortMalloc+0x18c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d86a      	bhi.n	800b480 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3aa:	4b44      	ldr	r3, [pc, #272]	@ (800b4bc <pvPortMalloc+0x190>)
 800b3ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3ae:	4b43      	ldr	r3, [pc, #268]	@ (800b4bc <pvPortMalloc+0x190>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3b4:	e004      	b.n	800b3c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d903      	bls.n	800b3d2 <pvPortMalloc+0xa6>
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f1      	bne.n	800b3b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3d2:	4b37      	ldr	r3, [pc, #220]	@ (800b4b0 <pvPortMalloc+0x184>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d051      	beq.n	800b480 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	4413      	add	r3, r2
 800b3e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	1ad2      	subs	r2, r2, r3
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d920      	bls.n	800b440 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4413      	add	r3, r2
 800b404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00b      	beq.n	800b428 <pvPortMalloc+0xfc>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	613b      	str	r3, [r7, #16]
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	e7fd      	b.n	800b424 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b43a:	69b8      	ldr	r0, [r7, #24]
 800b43c:	f000 f90a 	bl	800b654 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b440:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b8 <pvPortMalloc+0x18c>)
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b8 <pvPortMalloc+0x18c>)
 800b44c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b44e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b8 <pvPortMalloc+0x18c>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c0 <pvPortMalloc+0x194>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d203      	bcs.n	800b462 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b45a:	4b17      	ldr	r3, [pc, #92]	@ (800b4b8 <pvPortMalloc+0x18c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a18      	ldr	r2, [pc, #96]	@ (800b4c0 <pvPortMalloc+0x194>)
 800b460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	4b13      	ldr	r3, [pc, #76]	@ (800b4b4 <pvPortMalloc+0x188>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	431a      	orrs	r2, r3
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b476:	4b13      	ldr	r3, [pc, #76]	@ (800b4c4 <pvPortMalloc+0x198>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	4a11      	ldr	r2, [pc, #68]	@ (800b4c4 <pvPortMalloc+0x198>)
 800b47e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b480:	f7fe fae8 	bl	8009a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <pvPortMalloc+0x17a>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60fb      	str	r3, [r7, #12]
}
 800b4a0:	bf00      	nop
 800b4a2:	bf00      	nop
 800b4a4:	e7fd      	b.n	800b4a2 <pvPortMalloc+0x176>
	return pvReturn;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3728      	adds	r7, #40	@ 0x28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20005cfc 	.word	0x20005cfc
 800b4b4:	20005d10 	.word	0x20005d10
 800b4b8:	20005d00 	.word	0x20005d00
 800b4bc:	20005cf4 	.word	0x20005cf4
 800b4c0:	20005d04 	.word	0x20005d04
 800b4c4:	20005d08 	.word	0x20005d08

0800b4c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d04f      	beq.n	800b57a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4da:	2308      	movs	r3, #8
 800b4dc:	425b      	negs	r3, r3
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	4b25      	ldr	r3, [pc, #148]	@ (800b584 <vPortFree+0xbc>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10b      	bne.n	800b50e <vPortFree+0x46>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00b      	beq.n	800b52e <vPortFree+0x66>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60bb      	str	r3, [r7, #8]
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	e7fd      	b.n	800b52a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	4b14      	ldr	r3, [pc, #80]	@ (800b584 <vPortFree+0xbc>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4013      	ands	r3, r2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d01e      	beq.n	800b57a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d11a      	bne.n	800b57a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	4b0e      	ldr	r3, [pc, #56]	@ (800b584 <vPortFree+0xbc>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	43db      	mvns	r3, r3
 800b54e:	401a      	ands	r2, r3
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b554:	f7fe fa70 	bl	8009a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <vPortFree+0xc0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4413      	add	r3, r2
 800b562:	4a09      	ldr	r2, [pc, #36]	@ (800b588 <vPortFree+0xc0>)
 800b564:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b566:	6938      	ldr	r0, [r7, #16]
 800b568:	f000 f874 	bl	800b654 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b56c:	4b07      	ldr	r3, [pc, #28]	@ (800b58c <vPortFree+0xc4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3301      	adds	r3, #1
 800b572:	4a06      	ldr	r2, [pc, #24]	@ (800b58c <vPortFree+0xc4>)
 800b574:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b576:	f7fe fa6d 	bl	8009a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b57a:	bf00      	nop
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20005d10 	.word	0x20005d10
 800b588:	20005d00 	.word	0x20005d00
 800b58c:	20005d0c 	.word	0x20005d0c

0800b590 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b596:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b59a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b59c:	4b27      	ldr	r3, [pc, #156]	@ (800b63c <prvHeapInit+0xac>)
 800b59e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00c      	beq.n	800b5c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 0307 	bic.w	r3, r3, #7
 800b5b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	4a1f      	ldr	r2, [pc, #124]	@ (800b63c <prvHeapInit+0xac>)
 800b5c0:	4413      	add	r3, r2
 800b5c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <prvHeapInit+0xb0>)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b640 <prvHeapInit+0xb0>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	4413      	add	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5dc:	2208      	movs	r2, #8
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	1a9b      	subs	r3, r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0307 	bic.w	r3, r3, #7
 800b5ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4a15      	ldr	r2, [pc, #84]	@ (800b644 <prvHeapInit+0xb4>)
 800b5f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5f2:	4b14      	ldr	r3, [pc, #80]	@ (800b644 <prvHeapInit+0xb4>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5fa:	4b12      	ldr	r3, [pc, #72]	@ (800b644 <prvHeapInit+0xb4>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	1ad2      	subs	r2, r2, r3
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b610:	4b0c      	ldr	r3, [pc, #48]	@ (800b644 <prvHeapInit+0xb4>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	4a0a      	ldr	r2, [pc, #40]	@ (800b648 <prvHeapInit+0xb8>)
 800b61e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	4a09      	ldr	r2, [pc, #36]	@ (800b64c <prvHeapInit+0xbc>)
 800b626:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b628:	4b09      	ldr	r3, [pc, #36]	@ (800b650 <prvHeapInit+0xc0>)
 800b62a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b62e:	601a      	str	r2, [r3, #0]
}
 800b630:	bf00      	nop
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	200020f4 	.word	0x200020f4
 800b640:	20005cf4 	.word	0x20005cf4
 800b644:	20005cfc 	.word	0x20005cfc
 800b648:	20005d04 	.word	0x20005d04
 800b64c:	20005d00 	.word	0x20005d00
 800b650:	20005d10 	.word	0x20005d10

0800b654 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b65c:	4b28      	ldr	r3, [pc, #160]	@ (800b700 <prvInsertBlockIntoFreeList+0xac>)
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	e002      	b.n	800b668 <prvInsertBlockIntoFreeList+0x14>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d8f7      	bhi.n	800b662 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	4413      	add	r3, r2
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	d108      	bne.n	800b696 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	441a      	add	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d118      	bne.n	800b6dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	4b15      	ldr	r3, [pc, #84]	@ (800b704 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d00d      	beq.n	800b6d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	e008      	b.n	800b6e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <prvInsertBlockIntoFreeList+0xb0>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	e003      	b.n	800b6e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d002      	beq.n	800b6f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20005cf4 	.word	0x20005cf4
 800b704:	20005cfc 	.word	0x20005cfc

0800b708 <atoi>:
 800b708:	220a      	movs	r2, #10
 800b70a:	2100      	movs	r1, #0
 800b70c:	f000 b87a 	b.w	800b804 <strtol>

0800b710 <_strtol_l.constprop.0>:
 800b710:	2b24      	cmp	r3, #36	@ 0x24
 800b712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b716:	4686      	mov	lr, r0
 800b718:	4690      	mov	r8, r2
 800b71a:	d801      	bhi.n	800b720 <_strtol_l.constprop.0+0x10>
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d106      	bne.n	800b72e <_strtol_l.constprop.0+0x1e>
 800b720:	f000 f882 	bl	800b828 <__errno>
 800b724:	2316      	movs	r3, #22
 800b726:	6003      	str	r3, [r0, #0]
 800b728:	2000      	movs	r0, #0
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	4834      	ldr	r0, [pc, #208]	@ (800b800 <_strtol_l.constprop.0+0xf0>)
 800b730:	460d      	mov	r5, r1
 800b732:	462a      	mov	r2, r5
 800b734:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b738:	5d06      	ldrb	r6, [r0, r4]
 800b73a:	f016 0608 	ands.w	r6, r6, #8
 800b73e:	d1f8      	bne.n	800b732 <_strtol_l.constprop.0+0x22>
 800b740:	2c2d      	cmp	r4, #45	@ 0x2d
 800b742:	d12d      	bne.n	800b7a0 <_strtol_l.constprop.0+0x90>
 800b744:	782c      	ldrb	r4, [r5, #0]
 800b746:	2601      	movs	r6, #1
 800b748:	1c95      	adds	r5, r2, #2
 800b74a:	f033 0210 	bics.w	r2, r3, #16
 800b74e:	d109      	bne.n	800b764 <_strtol_l.constprop.0+0x54>
 800b750:	2c30      	cmp	r4, #48	@ 0x30
 800b752:	d12a      	bne.n	800b7aa <_strtol_l.constprop.0+0x9a>
 800b754:	782a      	ldrb	r2, [r5, #0]
 800b756:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b75a:	2a58      	cmp	r2, #88	@ 0x58
 800b75c:	d125      	bne.n	800b7aa <_strtol_l.constprop.0+0x9a>
 800b75e:	786c      	ldrb	r4, [r5, #1]
 800b760:	2310      	movs	r3, #16
 800b762:	3502      	adds	r5, #2
 800b764:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b768:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b76c:	2200      	movs	r2, #0
 800b76e:	fbbc f9f3 	udiv	r9, ip, r3
 800b772:	4610      	mov	r0, r2
 800b774:	fb03 ca19 	mls	sl, r3, r9, ip
 800b778:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b77c:	2f09      	cmp	r7, #9
 800b77e:	d81b      	bhi.n	800b7b8 <_strtol_l.constprop.0+0xa8>
 800b780:	463c      	mov	r4, r7
 800b782:	42a3      	cmp	r3, r4
 800b784:	dd27      	ble.n	800b7d6 <_strtol_l.constprop.0+0xc6>
 800b786:	1c57      	adds	r7, r2, #1
 800b788:	d007      	beq.n	800b79a <_strtol_l.constprop.0+0x8a>
 800b78a:	4581      	cmp	r9, r0
 800b78c:	d320      	bcc.n	800b7d0 <_strtol_l.constprop.0+0xc0>
 800b78e:	d101      	bne.n	800b794 <_strtol_l.constprop.0+0x84>
 800b790:	45a2      	cmp	sl, r4
 800b792:	db1d      	blt.n	800b7d0 <_strtol_l.constprop.0+0xc0>
 800b794:	fb00 4003 	mla	r0, r0, r3, r4
 800b798:	2201      	movs	r2, #1
 800b79a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b79e:	e7eb      	b.n	800b778 <_strtol_l.constprop.0+0x68>
 800b7a0:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7a2:	bf04      	itt	eq
 800b7a4:	782c      	ldrbeq	r4, [r5, #0]
 800b7a6:	1c95      	addeq	r5, r2, #2
 800b7a8:	e7cf      	b.n	800b74a <_strtol_l.constprop.0+0x3a>
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1da      	bne.n	800b764 <_strtol_l.constprop.0+0x54>
 800b7ae:	2c30      	cmp	r4, #48	@ 0x30
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2308      	moveq	r3, #8
 800b7b4:	230a      	movne	r3, #10
 800b7b6:	e7d5      	b.n	800b764 <_strtol_l.constprop.0+0x54>
 800b7b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7bc:	2f19      	cmp	r7, #25
 800b7be:	d801      	bhi.n	800b7c4 <_strtol_l.constprop.0+0xb4>
 800b7c0:	3c37      	subs	r4, #55	@ 0x37
 800b7c2:	e7de      	b.n	800b782 <_strtol_l.constprop.0+0x72>
 800b7c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7c8:	2f19      	cmp	r7, #25
 800b7ca:	d804      	bhi.n	800b7d6 <_strtol_l.constprop.0+0xc6>
 800b7cc:	3c57      	subs	r4, #87	@ 0x57
 800b7ce:	e7d8      	b.n	800b782 <_strtol_l.constprop.0+0x72>
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	e7e1      	b.n	800b79a <_strtol_l.constprop.0+0x8a>
 800b7d6:	1c53      	adds	r3, r2, #1
 800b7d8:	d108      	bne.n	800b7ec <_strtol_l.constprop.0+0xdc>
 800b7da:	2322      	movs	r3, #34	@ 0x22
 800b7dc:	f8ce 3000 	str.w	r3, [lr]
 800b7e0:	4660      	mov	r0, ip
 800b7e2:	f1b8 0f00 	cmp.w	r8, #0
 800b7e6:	d0a0      	beq.n	800b72a <_strtol_l.constprop.0+0x1a>
 800b7e8:	1e69      	subs	r1, r5, #1
 800b7ea:	e006      	b.n	800b7fa <_strtol_l.constprop.0+0xea>
 800b7ec:	b106      	cbz	r6, 800b7f0 <_strtol_l.constprop.0+0xe0>
 800b7ee:	4240      	negs	r0, r0
 800b7f0:	f1b8 0f00 	cmp.w	r8, #0
 800b7f4:	d099      	beq.n	800b72a <_strtol_l.constprop.0+0x1a>
 800b7f6:	2a00      	cmp	r2, #0
 800b7f8:	d1f6      	bne.n	800b7e8 <_strtol_l.constprop.0+0xd8>
 800b7fa:	f8c8 1000 	str.w	r1, [r8]
 800b7fe:	e794      	b.n	800b72a <_strtol_l.constprop.0+0x1a>
 800b800:	0800c375 	.word	0x0800c375

0800b804 <strtol>:
 800b804:	4613      	mov	r3, r2
 800b806:	460a      	mov	r2, r1
 800b808:	4601      	mov	r1, r0
 800b80a:	4802      	ldr	r0, [pc, #8]	@ (800b814 <strtol+0x10>)
 800b80c:	6800      	ldr	r0, [r0, #0]
 800b80e:	f7ff bf7f 	b.w	800b710 <_strtol_l.constprop.0>
 800b812:	bf00      	nop
 800b814:	200002b8 	.word	0x200002b8

0800b818 <memset>:
 800b818:	4402      	add	r2, r0
 800b81a:	4603      	mov	r3, r0
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d100      	bne.n	800b822 <memset+0xa>
 800b820:	4770      	bx	lr
 800b822:	f803 1b01 	strb.w	r1, [r3], #1
 800b826:	e7f9      	b.n	800b81c <memset+0x4>

0800b828 <__errno>:
 800b828:	4b01      	ldr	r3, [pc, #4]	@ (800b830 <__errno+0x8>)
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	200002b8 	.word	0x200002b8

0800b834 <__libc_init_array>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4d0d      	ldr	r5, [pc, #52]	@ (800b86c <__libc_init_array+0x38>)
 800b838:	4c0d      	ldr	r4, [pc, #52]	@ (800b870 <__libc_init_array+0x3c>)
 800b83a:	1b64      	subs	r4, r4, r5
 800b83c:	10a4      	asrs	r4, r4, #2
 800b83e:	2600      	movs	r6, #0
 800b840:	42a6      	cmp	r6, r4
 800b842:	d109      	bne.n	800b858 <__libc_init_array+0x24>
 800b844:	4d0b      	ldr	r5, [pc, #44]	@ (800b874 <__libc_init_array+0x40>)
 800b846:	4c0c      	ldr	r4, [pc, #48]	@ (800b878 <__libc_init_array+0x44>)
 800b848:	f000 f826 	bl	800b898 <_init>
 800b84c:	1b64      	subs	r4, r4, r5
 800b84e:	10a4      	asrs	r4, r4, #2
 800b850:	2600      	movs	r6, #0
 800b852:	42a6      	cmp	r6, r4
 800b854:	d105      	bne.n	800b862 <__libc_init_array+0x2e>
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	f855 3b04 	ldr.w	r3, [r5], #4
 800b85c:	4798      	blx	r3
 800b85e:	3601      	adds	r6, #1
 800b860:	e7ee      	b.n	800b840 <__libc_init_array+0xc>
 800b862:	f855 3b04 	ldr.w	r3, [r5], #4
 800b866:	4798      	blx	r3
 800b868:	3601      	adds	r6, #1
 800b86a:	e7f2      	b.n	800b852 <__libc_init_array+0x1e>
 800b86c:	0800c480 	.word	0x0800c480
 800b870:	0800c480 	.word	0x0800c480
 800b874:	0800c480 	.word	0x0800c480
 800b878:	0800c484 	.word	0x0800c484

0800b87c <memcpy>:
 800b87c:	440a      	add	r2, r1
 800b87e:	4291      	cmp	r1, r2
 800b880:	f100 33ff 	add.w	r3, r0, #4294967295
 800b884:	d100      	bne.n	800b888 <memcpy+0xc>
 800b886:	4770      	bx	lr
 800b888:	b510      	push	{r4, lr}
 800b88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b88e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b892:	4291      	cmp	r1, r2
 800b894:	d1f9      	bne.n	800b88a <memcpy+0xe>
 800b896:	bd10      	pop	{r4, pc}

0800b898 <_init>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	bf00      	nop
 800b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b89e:	bc08      	pop	{r3}
 800b8a0:	469e      	mov	lr, r3
 800b8a2:	4770      	bx	lr

0800b8a4 <_fini>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr
