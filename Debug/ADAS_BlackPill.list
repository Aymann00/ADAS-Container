
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009fe0  08009fe0  0000afe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a370  0800a370  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a370  0800a370  0000b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a378  0800a378  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a378  0800a378  0000b378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a37c  0800a37c  0000b37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a380  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000572c  20000088  0800a408  0000c088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200057b4  0800a408  0000c7b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be26  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5b  00000000  00000000  00027ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b4  00000000  00000000  0002d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019334  00000000  00000000  0002e954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b28a  00000000  00000000  00047c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bae0  00000000  00000000  00062f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe9f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce8  00000000  00000000  000fea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  00105720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fc8 	.word	0x08009fc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009fc8 	.word	0x08009fc8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000500:	f001 fe44 	bl	800218c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000504:	f000 f8b2 	bl	800066c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000508:	f000 fa0c 	bl	8000924 <MX_GPIO_Init>
	MX_DMA_Init();
 800050c:	f000 f9ea 	bl	80008e4 <MX_DMA_Init>
	MX_SPI1_Init();
 8000510:	f000 f914 	bl	800073c <MX_SPI1_Init>
	MX_TIM3_Init();
 8000514:	f000 f948 	bl	80007a8 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000518:	f000 f9ba 	bl	8000890 <MX_USART1_UART_Init>
	MX_TIM10_Init();
 800051c:	f000 f994 	bl	8000848 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000520:	f005 fdea 	bl	80060f8 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 8000524:	482f      	ldr	r0, [pc, #188]	@ (80005e4 <main+0xe8>)
 8000526:	f005 fff2 	bl	800650e <osMutexNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a2e      	ldr	r2, [pc, #184]	@ (80005e8 <main+0xec>)
 800052e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a2e      	ldr	r2, [pc, #184]	@ (80005ec <main+0xf0>)
 8000532:	2100      	movs	r1, #0
 8000534:	482e      	ldr	r0, [pc, #184]	@ (80005f0 <main+0xf4>)
 8000536:	f005 fe29 	bl	800618c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a2d      	ldr	r2, [pc, #180]	@ (80005f4 <main+0xf8>)
 800053e:	6013      	str	r3, [r2, #0]

	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 8000540:	4a2d      	ldr	r2, [pc, #180]	@ (80005f8 <main+0xfc>)
 8000542:	2100      	movs	r1, #0
 8000544:	482d      	ldr	r0, [pc, #180]	@ (80005fc <main+0x100>)
 8000546:	f005 fe21 	bl	800618c <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <main+0x104>)
 800054e:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 8000550:	4a2c      	ldr	r2, [pc, #176]	@ (8000604 <main+0x108>)
 8000552:	2100      	movs	r1, #0
 8000554:	482c      	ldr	r0, [pc, #176]	@ (8000608 <main+0x10c>)
 8000556:	f005 fe19 	bl	800618c <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a2b      	ldr	r2, [pc, #172]	@ (800060c <main+0x110>)
 800055e:	6013      	str	r3, [r2, #0]

	/* creation of Local_Task */
	Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 8000560:	4a2b      	ldr	r2, [pc, #172]	@ (8000610 <main+0x114>)
 8000562:	2100      	movs	r1, #0
 8000564:	482b      	ldr	r0, [pc, #172]	@ (8000614 <main+0x118>)
 8000566:	f005 fe11 	bl	800618c <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a2a      	ldr	r2, [pc, #168]	@ (8000618 <main+0x11c>)
 800056e:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 8000570:	4a2a      	ldr	r2, [pc, #168]	@ (800061c <main+0x120>)
 8000572:	2100      	movs	r1, #0
 8000574:	482a      	ldr	r0, [pc, #168]	@ (8000620 <main+0x124>)
 8000576:	f005 fe09 	bl	800618c <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a29      	ldr	r2, [pc, #164]	@ (8000624 <main+0x128>)
 800057e:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 8000580:	4a29      	ldr	r2, [pc, #164]	@ (8000628 <main+0x12c>)
 8000582:	2100      	movs	r1, #0
 8000584:	4829      	ldr	r0, [pc, #164]	@ (800062c <main+0x130>)
 8000586:	f005 fe01 	bl	800618c <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a28      	ldr	r2, [pc, #160]	@ (8000630 <main+0x134>)
 800058e:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 8000590:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <main+0x138>)
 8000592:	2100      	movs	r1, #0
 8000594:	4828      	ldr	r0, [pc, #160]	@ (8000638 <main+0x13c>)
 8000596:	f005 fdf9 	bl	800618c <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a27      	ldr	r2, [pc, #156]	@ (800063c <main+0x140>)
 800059e:	6013      	str	r3, [r2, #0]

	/* creation of Receiveing */
	ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 80005a0:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <main+0x144>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4827      	ldr	r0, [pc, #156]	@ (8000644 <main+0x148>)
 80005a6:	f005 fdf1 	bl	800618c <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <main+0x14c>)
 80005ae:	6013      	str	r3, [r2, #0]

	/* creation of FCW_Algo */
	FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005b0:	4a26      	ldr	r2, [pc, #152]	@ (800064c <main+0x150>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4826      	ldr	r0, [pc, #152]	@ (8000650 <main+0x154>)
 80005b6:	f005 fde9 	bl	800618c <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a25      	ldr	r2, [pc, #148]	@ (8000654 <main+0x158>)
 80005be:	6013      	str	r3, [r2, #0]

	/* creation of EEBL_Algo */
	EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005c0:	4a25      	ldr	r2, [pc, #148]	@ (8000658 <main+0x15c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4825      	ldr	r0, [pc, #148]	@ (800065c <main+0x160>)
 80005c6:	f005 fde1 	bl	800618c <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <main+0x164>)
 80005ce:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005d0:	4824      	ldr	r0, [pc, #144]	@ (8000664 <main+0x168>)
 80005d2:	f005 feb5 	bl	8006340 <osEventFlagsNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a23      	ldr	r2, [pc, #140]	@ (8000668 <main+0x16c>)
 80005da:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005dc:	f005 fdb0 	bl	8006140 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xe4>
 80005e4:	0800a21c 	.word	0x0800a21c
 80005e8:	2000025c 	.word	0x2000025c
 80005ec:	0800a0b4 	.word	0x0800a0b4
 80005f0:	08000ae5 	.word	0x08000ae5
 80005f4:	20000234 	.word	0x20000234
 80005f8:	0800a0d8 	.word	0x0800a0d8
 80005fc:	08000af5 	.word	0x08000af5
 8000600:	20000238 	.word	0x20000238
 8000604:	0800a0fc 	.word	0x0800a0fc
 8000608:	08000ba5 	.word	0x08000ba5
 800060c:	2000023c 	.word	0x2000023c
 8000610:	0800a120 	.word	0x0800a120
 8000614:	08000c19 	.word	0x08000c19
 8000618:	20000240 	.word	0x20000240
 800061c:	0800a144 	.word	0x0800a144
 8000620:	08000cc9 	.word	0x08000cc9
 8000624:	20000244 	.word	0x20000244
 8000628:	0800a168 	.word	0x0800a168
 800062c:	08000d45 	.word	0x08000d45
 8000630:	20000248 	.word	0x20000248
 8000634:	0800a18c 	.word	0x0800a18c
 8000638:	08000e05 	.word	0x08000e05
 800063c:	2000024c 	.word	0x2000024c
 8000640:	0800a1b0 	.word	0x0800a1b0
 8000644:	08000ec9 	.word	0x08000ec9
 8000648:	20000250 	.word	0x20000250
 800064c:	0800a1d4 	.word	0x0800a1d4
 8000650:	08001051 	.word	0x08001051
 8000654:	20000254 	.word	0x20000254
 8000658:	0800a1f8 	.word	0x0800a1f8
 800065c:	08001071 	.word	0x08001071
 8000660:	20000258 	.word	0x20000258
 8000664:	0800a22c 	.word	0x0800a22c
 8000668:	20000260 	.word	0x20000260

0800066c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 fc64 	bl	8009f48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <SystemClock_Config+0xc8>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <SystemClock_Config+0xc8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <SystemClock_Config+0xcc>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemClock_Config+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80006dc:	2319      	movs	r3, #25
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006e0:	2390      	movs	r3, #144	@ 0x90
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fc4b 	bl	8002f8c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006fc:	f000 fd04 	bl	8001108 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000710:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fead 	bl	800347c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000728:	f000 fcee 	bl	8001108 <Error_Handler>
	}
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000742:	4a18      	ldr	r2, [pc, #96]	@ (80007a4 <MX_SPI1_Init+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800074c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000770:	2220      	movs	r2, #32
 8000772:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_SPI1_Init+0x64>)
 8000788:	220a      	movs	r2, #10
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_SPI1_Init+0x64>)
 800078e:	f003 f887 	bl	80038a0 <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000798:	f000 fcb6 	bl	8001108 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000a4 	.word	0x200000a4
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <MX_TIM3_Init+0x9c>)
 80007ca:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007de:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ec:	4814      	ldr	r0, [pc, #80]	@ (8000840 <MX_TIM3_Init+0x98>)
 80007ee:	f003 fe2d 	bl	800444c <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80007f8:	f000 fc86 	bl	8001108 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM3_Init+0x98>)
 800080c:	f003 ffc0 	bl	8004790 <HAL_TIM_SlaveConfigSynchro>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 8000816:	f000 fc77 	bl	8001108 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_TIM3_Init+0x98>)
 8000828:	f004 f9b8 	bl	8004b9c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 8000832:	f000 fc69 	bl	8001108 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000fc 	.word	0x200000fc
 8000844:	40000400 	.word	0x40000400

08000848 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_TIM10_Init+0x40>)
 800084e:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <MX_TIM10_Init+0x44>)
 8000850:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 144;
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_TIM10_Init+0x40>)
 8000854:	2290      	movs	r2, #144	@ 0x90
 8000856:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_TIM10_Init+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 50000;
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_TIM10_Init+0x40>)
 8000860:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000864:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_TIM10_Init+0x40>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_TIM10_Init+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_TIM10_Init+0x40>)
 8000874:	f003 fdea 	bl	800444c <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 800087e:	f000 fc43 	bl	8001108 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000144 	.word	0x20000144
 800088c:	40014400 	.word	0x40014400

08000890 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f004 f9ea 	bl	8004ca0 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80008d2:	f000 fc19 	bl	8001108 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000018c 	.word	0x2000018c
 80008e0:	40011000 	.word	0x40011000

080008e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	203a      	movs	r0, #58	@ 0x3a
 800090c:	f001 fd5c 	bl	80023c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000910:	203a      	movs	r0, #58	@ 0x3a
 8000912:	f001 fd75 	bl	8002400 <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_GPIO_Init+0xa8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a22      	ldr	r2, [pc, #136]	@ (80009cc <MX_GPIO_Init+0xa8>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_GPIO_Init+0xa8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <MX_GPIO_Init+0xa8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_GPIO_Init+0xa8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2118      	movs	r1, #24
 8000976:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <MX_GPIO_Init+0xac>)
 8000978:	f002 fad6 	bl	8002f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097c:	2304      	movs	r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000980:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000984:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0xac>)
 8000992:	f002 f945 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000996:	2318      	movs	r3, #24
 8000998:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_GPIO_Init+0xac>)
 80009ae:	f002 f937 	bl	8002c20 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	2008      	movs	r0, #8
 80009b8:	f001 fd06 	bl	80023c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009bc:	2008      	movs	r0, #8
 80009be:	f001 fd1f 	bl	8002400 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <HAL_UART_RxCpltCallback+0x1c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 fce0 	bl	80063c0 <osEventFlagsSet>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000260 	.word	0x20000260

08000a0c <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 8000a14:	2300      	movs	r3, #0
 8000a16:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	82bb      	strh	r3, [r7, #20]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	82fb      	strh	r3, [r7, #22]
 8000a20:	e04f      	b.n	8000ac2 <_CalcAvgDistance+0xb6>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 8000a26:	8afb      	ldrh	r3, [r7, #22]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	461a      	mov	r2, r3
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3b03      	subs	r3, #3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000a3c:	8afb      	ldrh	r3, [r7, #22]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	3303      	adds	r3, #3
 8000a4e:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	82bb      	strh	r3, [r7, #20]
 8000a54:	e020      	b.n	8000a98 <_CalcAvgDistance+0x8c>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000a56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <_CalcAvgDistance+0xcc>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	441a      	add	r2, r3
 8000a66:	1211      	asrs	r1, r2, #8
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	1a8a      	subs	r2, r1, r2
 8000a6c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000a70:	fb01 f202 	mul.w	r2, r1, r2
 8000a74:	1a9a      	subs	r2, r3, r2
 8000a76:	4613      	mov	r3, r2
 8000a78:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000a7a:	897b      	ldrh	r3, [r7, #10]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4413      	add	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	82bb      	strh	r3, [r7, #20]
 8000a98:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a9c:	89bb      	ldrh	r3, [r7, #12]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	ddd9      	ble.n	8000a56 <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <_CalcAvgDistance+0xd0>)
 8000aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	0852      	lsrs	r2, r2, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	089a      	lsrs	r2, r3, #2
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	b291      	uxth	r1, r2
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <_CalcAvgDistance+0xd4>)
 8000ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000abc:	8afb      	ldrh	r3, [r7, #22]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	82fb      	strh	r3, [r7, #22]
 8000ac2:	8afb      	ldrh	r3, [r7, #22]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d9ac      	bls.n	8000a22 <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <_CalcAvgDistance+0xd4>)
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	371c      	adds	r7, #28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	b60b60b7 	.word	0xb60b60b7
 8000adc:	24924925 	.word	0x24924925
 8000ae0:	20000c44 	.word	0x20000c44

08000ae4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f005 fc0c 	bl	800630a <osDelay>
 8000af2:	e7fb      	b.n	8000aec <StartDefaultTask+0x8>

08000af4 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b095      	sub	sp, #84	@ 0x54
 8000af8:	af12      	add	r7, sp, #72	@ 0x48
 8000afa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Init_Task */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000afc:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000b00:	4921      	ldr	r1, [pc, #132]	@ (8000b88 <Init_Task+0x94>)
 8000b02:	4822      	ldr	r0, [pc, #136]	@ (8000b8c <Init_Task+0x98>)
 8000b04:	f004 f9a7 	bl	8004e56 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <Init_Task+0x9c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fd82 	bl	800661a <osMutexAcquire>

	NRF24_begin(hspi1);
 8000b16:	4c1f      	ldr	r4, [pc, #124]	@ (8000b94 <Init_Task+0xa0>)
 8000b18:	4668      	mov	r0, sp
 8000b1a:	f104 0310 	add.w	r3, r4, #16
 8000b1e:	2248      	movs	r2, #72	@ 0x48
 8000b20:	4619      	mov	r1, r3
 8000b22:	f009 fa43 	bl	8009fac <memcpy>
 8000b26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b2a:	f000 fea9 	bl	8001880 <NRF24_begin>
	NRF24_setAutoAck(true);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 f96e 	bl	8001e10 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000b34:	2020      	movs	r0, #32
 8000b36:	f001 f8c7 	bl	8001cc8 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000b3a:	f001 f91f 	bl	8001d7c <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000b3e:	f001 f8ef 	bl	8001d20 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <Init_Task+0xa4>)
 8000b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 f83f 	bl	8001bcc <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <Init_Task+0xa4>)
 8000b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b54:	4610      	mov	r0, r2
 8000b56:	4619      	mov	r1, r3
 8000b58:	f001 f814 	bl	8001b84 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	490f      	ldr	r1, [pc, #60]	@ (8000b9c <Init_Task+0xa8>)
 8000b60:	2001      	movs	r0, #1
 8000b62:	f001 fa94 	bl	800208e <NRF24_writeAckPayload>
	NRF24_startListening();
 8000b66:	f000 ff67 	bl	8001a38 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <Init_Task+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f005 fd9e 	bl	80066b0 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <Init_Task+0xac>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fb99 	bl	80062b0 <osThreadTerminate>

	/* USER CODE END Init_Task */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000264 	.word	0x20000264
 8000b8c:	2000018c 	.word	0x2000018c
 8000b90:	2000025c 	.word	0x2000025c
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000238 	.word	0x20000238

08000ba4 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <Distance_Calc+0x64>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	f005 fc44 	bl	8006444 <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	81fb      	strh	r3, [r7, #14]
 8000bc0:	e011      	b.n	8000be6 <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000bc2:	89fa      	ldrh	r2, [r7, #14]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <Distance_Calc+0x68>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f009 f932 	bl	8009e38 <atoi>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	b291      	uxth	r1, r2
 8000bda:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <Distance_Calc+0x6c>)
 8000bdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000bec:	d3e9      	bcc.n	8000bc2 <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000bee:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <Distance_Calc+0x6c>)
 8000bf0:	f7ff ff0c 	bl	8000a0c <_CalcAvgDistance>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <Distance_Calc+0x70>)
 8000bf8:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <Distance_Calc+0x64>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fbdd 	bl	80063c0 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000c06:	e7d1      	b.n	8000bac <Distance_Calc+0x8>
 8000c08:	20000260 	.word	0x20000260
 8000c0c:	20000264 	.word	0x20000264
 8000c10:	2000096c 	.word	0x2000096c
 8000c14:	20000c3c 	.word	0x20000c3c

08000c18 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c20:	2311      	movs	r3, #17
 8000c22:	733b      	strb	r3, [r7, #12]
 8000c24:	2301      	movs	r3, #1
 8000c26:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <Localization+0xa8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <Localization+0xa8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	330a      	adds	r3, #10
 8000c3a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <Localization+0xa8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3308      	adds	r3, #8
 8000c46:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <Localization+0xa8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3306      	adds	r3, #6
 8000c52:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <Localization+0xa8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <Localization+0xa8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <Localization+0xa8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <Localization+0xa8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	330e      	adds	r3, #14
 8000c80:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <Localization+0xac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 fcc3 	bl	800661a <osMutexAcquire>

		NRF24_stopListening();
 8000c94:	f000 fef6 	bl	8001a84 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	210a      	movs	r1, #10
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fefc 	bl	8001a9c <NRF24_write>
		NRF24_startListening();
 8000ca4:	f000 fec8 	bl	8001a38 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <Localization+0xac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fcff 	bl	80066b0 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(3000);
 8000cb2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000cb6:	f005 fb28 	bl	800630a <osDelay>
	{
 8000cba:	bf00      	nop
 8000cbc:	e7b0      	b.n	8000c20 <Localization+0x8>
 8000cbe:	bf00      	nop
 8000cc0:	20000c3c 	.word	0x20000c3c
 8000cc4:	2000025c 	.word	0x2000025c

08000cc8 <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <Check_Algorithm+0x70>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2104      	movs	r1, #4
 8000cdc:	f005 fbb2 	bl	8006444 <osEventFlagsWait>

		/* Checking on Front Threshold */
		if( ( Obstcales_Detection[FRONT] <= FCW_Threshold ) && (!( Obstcales_Detection[FRONT] <= EEBL_Threshold )) )
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <Check_Algorithm+0x74>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000cec:	d80d      	bhi.n	8000d0a <Check_Algorithm+0x42>
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <Check_Algorithm+0x74>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cfa:	d906      	bls.n	8000d0a <Check_Algorithm+0x42>
		{
			//Invoke FCW algorithm
			osEventFlagsSet( EventGroupHandle , FCW_ASSERTED ) ;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <Check_Algorithm+0x70>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2103      	movs	r1, #3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fb5c 	bl	80063c0 <osEventFlagsSet>
 8000d08:	e014      	b.n	8000d34 <Check_Algorithm+0x6c>
		}
		else if( Obstcales_Detection[FRONT] <= EEBL_Threshold )
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <Check_Algorithm+0x74>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	330c      	adds	r3, #12
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d16:	d806      	bhi.n	8000d26 <Check_Algorithm+0x5e>
		{
			//Invoke EEBL algorithm
			osEventFlagsSet( EventGroupHandle , EEBL_ASSERTED ) ;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <Check_Algorithm+0x70>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fb4e 	bl	80063c0 <osEventFlagsSet>
 8000d24:	e7d4      	b.n	8000cd0 <Check_Algorithm+0x8>
		}
		else
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)RPI_MOVE, 1, HAL_MAX_DELAY ) ;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <Check_Algorithm+0x78>)
 8000d30:	f004 f806 	bl	8004d40 <HAL_UART_Transmit>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000d34:	e7cc      	b.n	8000cd0 <Check_Algorithm+0x8>
 8000d36:	bf00      	nop
 8000d38:	20000260 	.word	0x20000260
 8000d3c:	20000c3c 	.word	0x20000c3c
 8000d40:	2000018c 	.word	0x2000018c

08000d44 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Algorithm */
	bool Local_BSWLeft = false ;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 8000d54:	2300      	movs	r3, #0
 8000d56:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <BSW_Algorithm+0xb8>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	f005 fb6c 	bl	8006444 <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000d74:	2387      	movs	r3, #135	@ 0x87
 8000d76:	737b      	strb	r3, [r7, #13]
 8000d78:	e012      	b.n	8000da0 <BSW_Algorithm+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <BSW_Algorithm+0xbc>)
 8000d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d009      	beq.n	8000d9a <BSW_Algorithm+0x56>
 8000d86:	7b7b      	ldrb	r3, [r7, #13]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <BSW_Algorithm+0xbc>)
 8000d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000d92:	d802      	bhi.n	8000d9a <BSW_Algorithm+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]

				break;
 8000d98:	e005      	b.n	8000da6 <BSW_Algorithm+0x62>
				Angle_Iterator--)
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	2b59      	cmp	r3, #89	@ 0x59
 8000da4:	d8e9      	bhi.n	8000d7a <BSW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8000da6:	23e1      	movs	r3, #225	@ 0xe1
 8000da8:	817b      	strh	r3, [r7, #10]
 8000daa:	e012      	b.n	8000dd2 <BSW_Algorithm+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8000dac:	897b      	ldrh	r3, [r7, #10]
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <BSW_Algorithm+0xbc>)
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d009      	beq.n	8000dcc <BSW_Algorithm+0x88>
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	4a11      	ldr	r2, [pc, #68]	@ (8000e00 <BSW_Algorithm+0xbc>)
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000dc4:	d802      	bhi.n	8000dcc <BSW_Algorithm+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73bb      	strb	r3, [r7, #14]

				break;
 8000dca:	e006      	b.n	8000dda <BSW_Algorithm+0x96>
				Angle_Iterator++)
 8000dcc:	897b      	ldrh	r3, [r7, #10]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000dd8:	d9e8      	bls.n	8000dac <BSW_Algorithm+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <BSW_Algorithm+0xa6>
 8000de0:	7a7b      	ldrb	r3, [r7, #9]
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0b5      	beq.n	8000d5c <BSW_Algorithm+0x18>
 8000df0:	7a3b      	ldrb	r3, [r7, #8]
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000dfa:	e7af      	b.n	8000d5c <BSW_Algorithm+0x18>
 8000dfc:	20000260 	.word	0x20000260
 8000e00:	2000096c 	.word	0x2000096c

08000e04 <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Algorithm */
	bool Local_DPWLeft = false ;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	bool Local_DPWRight= false ;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73bb      	strb	r3, [r7, #14]
	bool Local_DPWL_LastState = false ;
 8000e14:	2300      	movs	r3, #0
 8000e16:	727b      	strb	r3, [r7, #9]
	bool Local_DPWR_LastState = false ;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	723b      	strb	r3, [r7, #8]


	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	727b      	strb	r3, [r7, #9]
		Local_DPWR_LastState = Local_DPWRight;
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	723b      	strb	r3, [r7, #8]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <DPW_Algorithm+0xbc>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	f005 fb08 	bl	8006444 <osEventFlagsWait>

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 8000e34:	232d      	movs	r3, #45	@ 0x2d
 8000e36:	737b      	strb	r3, [r7, #13]
 8000e38:	e012      	b.n	8000e60 <DPW_Algorithm+0x5c>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <DPW_Algorithm+0xc0>)
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d009      	beq.n	8000e5a <DPW_Algorithm+0x56>
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec4 <DPW_Algorithm+0xc0>)
 8000e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e52:	d802      	bhi.n	8000e5a <DPW_Algorithm+0x56>
			{
				/*break the loop and invoke DPW Left warning*/

				Local_DPWLeft = true;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]

				break;
 8000e58:	e005      	b.n	8000e66 <DPW_Algorithm+0x62>
				Angle_Iterator--)
 8000e5a:	7b7b      	ldrb	r3, [r7, #13]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	2b0e      	cmp	r3, #14
 8000e64:	d8e9      	bhi.n	8000e3a <DPW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8000e66:	f240 133b 	movw	r3, #315	@ 0x13b
 8000e6a:	817b      	strh	r3, [r7, #10]
 8000e6c:	e012      	b.n	8000e94 <DPW_Algorithm+0x90>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8000e6e:	897b      	ldrh	r3, [r7, #10]
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <DPW_Algorithm+0xc0>)
 8000e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <DPW_Algorithm+0x8a>
 8000e7a:	897b      	ldrh	r3, [r7, #10]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <DPW_Algorithm+0xc0>)
 8000e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e86:	d802      	bhi.n	8000e8e <DPW_Algorithm+0x8a>
			{
				/*break the loop and invoke DPW Right warning*/
				Local_DPWRight = true;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73bb      	strb	r3, [r7, #14]
				break;
 8000e8c:	e006      	b.n	8000e9c <DPW_Algorithm+0x98>
				Angle_Iterator++)
 8000e8e:	897b      	ldrh	r3, [r7, #10]
 8000e90:	3301      	adds	r3, #1
 8000e92:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 8000e94:	897b      	ldrh	r3, [r7, #10]
 8000e96:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 8000e9a:	d3e8      	bcc.n	8000e6e <DPW_Algorithm+0x6a>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <DPW_Algorithm+0xa8>
 8000ea2:	7a7b      	ldrb	r3, [r7, #9]
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0b4      	beq.n	8000e1c <DPW_Algorithm+0x18>
 8000eb2:	7a3b      	ldrb	r3, [r7, #8]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
		Local_DPWL_LastState = Local_DPWLeft ;
 8000ebc:	e7ae      	b.n	8000e1c <DPW_Algorithm+0x18>
 8000ebe:	bf00      	nop
 8000ec0:	20000260 	.word	0x20000260
 8000ec4:	2000096c 	.word	0x2000096c

08000ec8 <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 8000ed0:	f000 fe30 	bl	8001b34 <NRF24_available>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 80ae 	beq.w	8001038 <Wireless_Receiving+0x170>
			uint8_t Received_Data[32] = {0};
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ef4:	4b52      	ldr	r3, [pc, #328]	@ (8001040 <Wireless_Receiving+0x178>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 fb8c 	bl	800661a <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2120      	movs	r1, #32
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fe1b 	bl	8001b44 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <Wireless_Receiving+0x178>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 fbcc 	bl	80066b0 <osMutexRelease>

			switch(Received_Data[1])
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d003      	beq.n	8000f26 <Wireless_Receiving+0x5e>
 8000f1e:	2b60      	cmp	r3, #96	@ 0x60
 8000f20:	f000 8087 	beq.w	8001032 <Wireless_Receiving+0x16a>
				break;
			case EEBL_ID :
				/* OLED Warning Front Vehicle Braking */
				break;
			default:
				break;
 8000f24:	e088      	b.n	8001038 <Wireless_Receiving+0x170>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f26:	7c3b      	ldrb	r3, [r7, #16]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	330c      	adds	r3, #12
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f36:	429a      	cmp	r2, r3
 8000f38:	db09      	blt.n	8000f4e <Wireless_Receiving+0x86>
 8000f3a:	7c3b      	ldrb	r3, [r7, #16]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	330c      	adds	r3, #12
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dd13      	ble.n	8000f76 <Wireless_Receiving+0xae>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	330a      	adds	r3, #10
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	db0b      	blt.n	8000f7a <Wireless_Receiving+0xb2>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 8000f62:	7c7b      	ldrb	r3, [r7, #17]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	330e      	adds	r3, #14
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dc01      	bgt.n	8000f7a <Wireless_Receiving+0xb2>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <Wireless_Receiving+0xb4>
 8000f7a:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b2c      	ldr	r3, [pc, #176]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3304      	adds	r3, #4
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	db09      	blt.n	8000fb4 <Wireless_Receiving+0xec>
 8000fa0:	7d3b      	ldrb	r3, [r7, #20]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dd13      	ble.n	8000fdc <Wireless_Receiving+0x114>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	330a      	adds	r3, #10
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	db0b      	blt.n	8000fe0 <Wireless_Receiving+0x118>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + LOCALIZATION_TOLERANCE_VALUE)) ;
 8000fc8:	7c7b      	ldrb	r3, [r7, #17]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <Wireless_Receiving+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	330e      	adds	r3, #14
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dc01      	bgt.n	8000fe0 <Wireless_Receiving+0x118>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + LOCALIZATION_TOLERANCE_VALUE)) ||
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <Wireless_Receiving+0x11a>
 8000fe0:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - LOCALIZATION_TOLERANCE_VALUE) &&
 8000fe2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000fe6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				if(Is_Front){
 8000ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <Wireless_Receiving+0x14a>
					Front_Car_ID = Received_Data[0];
 8000ffa:	7b3a      	ldrb	r2, [r7, #12]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <Wireless_Receiving+0x180>)
 8000ffe:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Back_Car_ID )
 8001000:	7b3a      	ldrb	r2, [r7, #12]
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <Wireless_Receiving+0x184>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d115      	bne.n	8001036 <Wireless_Receiving+0x16e>
						Back_Car_ID = 0;
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <Wireless_Receiving+0x184>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
				break;
 8001010:	e011      	b.n	8001036 <Wireless_Receiving+0x16e>
				else if(Is_Back){
 8001012:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00d      	beq.n	8001036 <Wireless_Receiving+0x16e>
					Back_Car_ID = Received_Data[0];
 800101a:	7b3a      	ldrb	r2, [r7, #12]
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <Wireless_Receiving+0x184>)
 800101e:	701a      	strb	r2, [r3, #0]
					if( Received_Data[0] == Front_Car_ID )
 8001020:	7b3a      	ldrb	r2, [r7, #12]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <Wireless_Receiving+0x180>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d105      	bne.n	8001036 <Wireless_Receiving+0x16e>
						Front_Car_ID = 0;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <Wireless_Receiving+0x180>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
				break;
 8001030:	e001      	b.n	8001036 <Wireless_Receiving+0x16e>
				break;
 8001032:	bf00      	nop
 8001034:	e000      	b.n	8001038 <Wireless_Receiving+0x170>
				break;
 8001036:	bf00      	nop
			}

		}
		osDelay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f005 f966 	bl	800630a <osDelay>
		if(NRF24_available()){
 800103e:	e747      	b.n	8000ed0 <Wireless_Receiving+0x8>
 8001040:	2000025c 	.word	0x2000025c
 8001044:	20000c3c 	.word	0x20000c3c
 8001048:	20000c40 	.word	0x20000c40
 800104c:	20000c41 	.word	0x20000c41

08001050 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <FCW_Algorithm+0x1c>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	2200      	movs	r2, #0
 8001062:	2103      	movs	r1, #3
 8001064:	f005 f9ee 	bl	8006444 <osEventFlagsWait>
 8001068:	e7f6      	b.n	8001058 <FCW_Algorithm+0x8>
 800106a:	bf00      	nop
 800106c:	20000260 	.word	0x20000260

08001070 <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <EEBL_Algorithm+0x64>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	f005 f9de 	bl	8006444 <osEventFlagsWait>

		/* Implement the Algorithm
		 * */
		uint8_t MessageToWarnBackCar[]={CAR_ID,EEBL_ID,Back_Car_ID};
 8001088:	2311      	movs	r3, #17
 800108a:	733b      	strb	r3, [r7, #12]
 800108c:	2360      	movs	r3, #96	@ 0x60
 800108e:	737b      	strb	r3, [r7, #13]
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <EEBL_Algorithm+0x68>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	73bb      	strb	r3, [r7, #14]
		/* Send Message to the Raspberry Pi to Take Actions and Stop Motor */
		HAL_UART_Transmit(&huart1, (uint8_t*)RPI_STOP, 1, HAL_MAX_DELAY ) ;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2201      	movs	r2, #1
 800109c:	2100      	movs	r1, #0
 800109e:	480f      	ldr	r0, [pc, #60]	@ (80010dc <EEBL_Algorithm+0x6c>)
 80010a0:	f003 fe4e 	bl	8004d40 <HAL_UART_Transmit>

		/* Send warning to the Backward Vehicle to check on Algorithm via NRF */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <EEBL_Algorithm+0x70>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fab4 	bl	800661a <osMutexAcquire>

		NRF24_stopListening();
 80010b2:	f000 fce7 	bl	8001a84 <NRF24_stopListening>
		NRF24_write( MessageToWarnBackCar , 3 ) ;
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2103      	movs	r1, #3
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fced 	bl	8001a9c <NRF24_write>
		NRF24_startListening();
 80010c2:	f000 fcb9 	bl	8001a38 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <EEBL_Algorithm+0x70>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 faf0 	bl	80066b0 <osMutexRelease>
	{
 80010d0:	bf00      	nop
 80010d2:	e7d1      	b.n	8001078 <EEBL_Algorithm+0x8>
 80010d4:	20000260 	.word	0x20000260
 80010d8:	20000c41 	.word	0x20000c41
 80010dc:	2000018c 	.word	0x2000018c
 80010e0:	2000025c 	.word	0x2000025c

080010e4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80010f6:	f001 f86b 	bl	80021d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40000800 	.word	0x40000800

08001108 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_MspInit+0x54>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <HAL_MspInit+0x54>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x54>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_MspInit+0x54>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_MspInit+0x54>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x54>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	210f      	movs	r1, #15
 8001156:	f06f 0001 	mvn.w	r0, #1
 800115a:	f001 f935 	bl	80023c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23e0      	movs	r3, #224	@ 0xe0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e2:	f001 fd1d 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <HAL_TIM_Base_MspInit+0x80>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d116      	bne.n	800123c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6413      	str	r3, [r2, #64]	@ 0x40
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	201d      	movs	r0, #29
 8001230:	f001 f8ca 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001234:	201d      	movs	r0, #29
 8001236:	f001 f8e3 	bl	8002400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800123a:	e01a      	b.n	8001272 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_TIM_Base_MspInit+0x88>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d115      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_TIM_Base_MspInit+0x84>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	2019      	movs	r0, #25
 8001268:	f001 f8ae 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800126c:	2019      	movs	r0, #25
 800126e:	f001 f8c7 	bl	8002400 <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000400 	.word	0x40000400
 8001280:	40023800 	.word	0x40023800
 8001284:	40014400 	.word	0x40014400

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a35      	ldr	r2, [pc, #212]	@ (800137c <HAL_UART_MspInit+0xf4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d163      	bne.n	8001372 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a33      	ldr	r2, [pc, #204]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <HAL_UART_MspInit+0xf8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f4:	2307      	movs	r3, #7
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4821      	ldr	r0, [pc, #132]	@ (8001384 <HAL_UART_MspInit+0xfc>)
 8001300:	f001 fc8e 	bl	8002c20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001306:	4a21      	ldr	r2, [pc, #132]	@ (800138c <HAL_UART_MspInit+0x104>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800130c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001310:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001324:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001338:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001346:	4810      	ldr	r0, [pc, #64]	@ (8001388 <HAL_UART_MspInit+0x100>)
 8001348:	f001 f868 	bl	800241c <HAL_DMA_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001352:	f7ff fed9 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_UART_MspInit+0x100>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	2025      	movs	r0, #37	@ 0x25
 8001368:	f001 f82e 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136c:	2025      	movs	r0, #37	@ 0x25
 800136e:	f001 f847 	bl	8002400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40011000 	.word	0x40011000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000
 8001388:	200001d4 	.word	0x200001d4
 800138c:	40026440 	.word	0x40026440

08001390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	@ 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <HAL_InitTick+0xe4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <HAL_InitTick+0xe4>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_InitTick+0xe4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013bc:	f107 0210 	add.w	r2, r7, #16
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fa38 	bl	800383c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d6:	f002 fa09 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 80013da:	6378      	str	r0, [r7, #52]	@ 0x34
 80013dc:	e004      	b.n	80013e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013de:	f002 fa05 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 80013e2:	4603      	mov	r3, r0
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ea:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_InitTick+0xe8>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	3b01      	subs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <HAL_InitTick+0xec>)
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <HAL_InitTick+0xf0>)
 80013fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_InitTick+0xec>)
 80013fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001402:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001404:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_InitTick+0xec>)
 8001406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001408:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_InitTick+0xec>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_InitTick+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_InitTick+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800141c:	4817      	ldr	r0, [pc, #92]	@ (800147c <HAL_InitTick+0xec>)
 800141e:	f003 f815 	bl	800444c <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11b      	bne.n	8001468 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001430:	4812      	ldr	r0, [pc, #72]	@ (800147c <HAL_InitTick+0xec>)
 8001432:	f003 f85b 	bl	80044ec <HAL_TIM_Base_Start_IT>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800143c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001440:	2b00      	cmp	r3, #0
 8001442:	d111      	bne.n	8001468 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001444:	201e      	movs	r0, #30
 8001446:	f000 ffdb 	bl	8002400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d808      	bhi.n	8001462 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	201e      	movs	r0, #30
 8001456:	f000 ffb7 	bl	80023c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_InitTick+0xf4>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e002      	b.n	8001468 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001468:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800146c:	4618      	mov	r0, r3
 800146e:	3738      	adds	r7, #56	@ 0x38
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	431bde83 	.word	0x431bde83
 800147c:	20000c54 	.word	0x20000c54
 8001480:	40000800 	.word	0x40000800
 8001484:	2000002c 	.word	0x2000002c

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <NMI_Handler+0x4>

08001490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <UsageFault_Handler+0x4>

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014c2:	2004      	movs	r0, #4
 80014c4:	f001 fd4a 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014d2:	f003 f86d 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000144 	.word	0x20000144

080014e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM3_IRQHandler+0x10>)
 80014e6:	f003 f863 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000fc 	.word	0x200000fc

080014f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <TIM4_IRQHandler+0x10>)
 80014fa:	f003 f859 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000c54 	.word	0x20000c54

08001508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <USART1_IRQHandler+0x10>)
 800150e:	f003 fcc7 	bl	8004ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000018c 	.word	0x2000018c

0800151c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA2_Stream2_IRQHandler+0x10>)
 8001522:	f001 f913 	bl	800274c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001d4 	.word	0x200001d4

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001558:	f7ff ffea 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f008 fcef 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7fe ffb9 	bl	80004fc <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001598:	0800a380 	.word	0x0800a380
  ldr r2, =_sbss
 800159c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80015a0:	200057b4 	.word	0x200057b4

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <NRF24_DelayMicroSeconds+0x3c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <NRF24_DelayMicroSeconds+0x40>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9a      	lsrs	r2, r3, #18
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80015c8:	bf00      	nop
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	60fa      	str	r2, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1fa      	bne.n	80015ca <NRF24_DelayMicroSeconds+0x22>
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000028 	.word	0x20000028
 80015e8:	165e9f81 	.word	0x165e9f81

080015ec <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <NRF24_csn+0x20>
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <NRF24_csn+0x38>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <NRF24_csn+0x3c>)
 8001600:	8811      	ldrh	r1, [r2, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fc8f 	bl	8002f28 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800160a:	e007      	b.n	800161c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <NRF24_csn+0x38>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <NRF24_csn+0x3c>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fc86 	bl	8002f28 <HAL_GPIO_WritePin>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000cb0 	.word	0x20000cb0
 8001628:	20000cb4 	.word	0x20000cb4

0800162c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <NRF24_ce+0x20>
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <NRF24_ce+0x38>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <NRF24_ce+0x3c>)
 8001640:	8811      	ldrh	r1, [r2, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fc6f 	bl	8002f28 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800164a:	e007      	b.n	800165c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <NRF24_ce+0x38>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <NRF24_ce+0x3c>)
 8001652:	8811      	ldrh	r1, [r2, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fc66 	bl	8002f28 <HAL_GPIO_WritePin>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000cb0 	.word	0x20000cb0
 8001668:	20000cb6 	.word	0x20000cb6

0800166c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff ffb8 	bl	80015ec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	b2db      	uxtb	r3, r3
 8001684:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	2201      	movs	r2, #1
 800168e:	480a      	ldr	r0, [pc, #40]	@ (80016b8 <NRF24_read_register+0x4c>)
 8001690:	f002 f98f 	bl	80039b2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	1c59      	adds	r1, r3, #1
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <NRF24_read_register+0x4c>)
 80016a0:	f002 faca 	bl	8003c38 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80016a4:	7b7b      	ldrb	r3, [r7, #13]
 80016a6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff ff9f 	bl	80015ec <NRF24_csn>
	return retData;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000cb8 	.word	0x20000cb8

080016bc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff ff8d 	bl	80015ec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80016dc:	f107 010c 	add.w	r1, r7, #12
 80016e0:	2364      	movs	r3, #100	@ 0x64
 80016e2:	2201      	movs	r2, #1
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <NRF24_read_registerN+0x4c>)
 80016e6:	f002 f964 	bl	80039b2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	2364      	movs	r3, #100	@ 0x64
 80016f0:	6839      	ldr	r1, [r7, #0]
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <NRF24_read_registerN+0x4c>)
 80016f4:	f002 faa0 	bl	8003c38 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff ff77 	bl	80015ec <NRF24_csn>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000cb8 	.word	0x20000cb8

0800170c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ff65 	bl	80015ec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	b2db      	uxtb	r3, r3
 800172a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001730:	f107 010c 	add.w	r1, r7, #12
 8001734:	2364      	movs	r3, #100	@ 0x64
 8001736:	2202      	movs	r2, #2
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <NRF24_write_register+0x40>)
 800173a:	f002 f93a 	bl	80039b2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff ff54 	bl	80015ec <NRF24_csn>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000cb8 	.word	0x20000cb8

08001750 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ff43 	bl	80015ec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	b2db      	uxtb	r3, r3
 800176e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001770:	f107 010c 	add.w	r1, r7, #12
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	2201      	movs	r2, #1
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <NRF24_write_registerN+0x4c>)
 800177a:	f002 f91a 	bl	80039b2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <NRF24_write_registerN+0x4c>)
 8001788:	f002 f913 	bl	80039b2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff ff2d 	bl	80015ec <NRF24_csn>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000cb8 	.word	0x20000cb8

080017a0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ff1d 	bl	80015ec <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80017b2:	23a0      	movs	r3, #160	@ 0xa0
 80017b4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80017b6:	f107 010f 	add.w	r1, r7, #15
 80017ba:	2364      	movs	r3, #100	@ 0x64
 80017bc:	2201      	movs	r2, #1
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <NRF24_write_payload+0x40>)
 80017c0:	f002 f8f7 	bl	80039b2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <NRF24_write_payload+0x40>)
 80017ce:	f002 f8f0 	bl	80039b2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff ff0a 	bl	80015ec <NRF24_csn>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000cb8 	.word	0x20000cb8

080017e4 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80017f0:	f000 fa82 	bl	8001cf8 <NRF24_getPayloadSize>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d303      	bcc.n	8001806 <NRF24_read_payload+0x22>
 80017fe:	f000 fa7b 	bl	8001cf8 <NRF24_getPayloadSize>
 8001802:	4603      	mov	r3, r0
 8001804:	e000      	b.n	8001808 <NRF24_read_payload+0x24>
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff feee 	bl	80015ec <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001810:	2361      	movs	r3, #97	@ 0x61
 8001812:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001814:	f107 010e 	add.w	r1, r7, #14
 8001818:	2364      	movs	r3, #100	@ 0x64
 800181a:	2201      	movs	r2, #1
 800181c:	4808      	ldr	r0, [pc, #32]	@ (8001840 <NRF24_read_payload+0x5c>)
 800181e:	f002 f8c8 	bl	80039b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	b29a      	uxth	r2, r3
 8001826:	2364      	movs	r3, #100	@ 0x64
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <NRF24_read_payload+0x5c>)
 800182c:	f002 fa04 	bl	8003c38 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff fedb 	bl	80015ec <NRF24_csn>
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000cb8 	.word	0x20000cb8

08001844 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001848:	21ff      	movs	r1, #255	@ 0xff
 800184a:	20e1      	movs	r0, #225	@ 0xe1
 800184c:	f7ff ff5e 	bl	800170c <NRF24_write_register>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001858:	21ff      	movs	r1, #255	@ 0xff
 800185a:	20e2      	movs	r0, #226	@ 0xe2
 800185c:	f7ff ff56 	bl	800170c <NRF24_write_register>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800186a:	2007      	movs	r0, #7
 800186c:	f7ff fefe 	bl	800166c <NRF24_read_register>
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001874:	79fb      	ldrb	r3, [r7, #7]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 8001880:	b084      	sub	sp, #16
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	f107 0c10 	add.w	ip, r7, #16
 800188c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001890:	4b64      	ldr	r3, [pc, #400]	@ (8001a24 <NRF24_begin+0x1a4>)
 8001892:	4618      	mov	r0, r3
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2258      	movs	r2, #88	@ 0x58
 800189a:	4619      	mov	r1, r3
 800189c:	f008 fb86 	bl	8009fac <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 80018a0:	4b61      	ldr	r3, [pc, #388]	@ (8001a28 <NRF24_begin+0x1a8>)
 80018a2:	4a62      	ldr	r2, [pc, #392]	@ (8001a2c <NRF24_begin+0x1ac>)
 80018a4:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 80018a6:	4b62      	ldr	r3, [pc, #392]	@ (8001a30 <NRF24_begin+0x1b0>)
 80018a8:	2208      	movs	r2, #8
 80018aa:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 80018ac:	4b61      	ldr	r3, [pc, #388]	@ (8001a34 <NRF24_begin+0x1b4>)
 80018ae:	2210      	movs	r2, #16
 80018b0:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fe9a 	bl	80015ec <NRF24_csn>
	NRF24_ce(0);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff feb7 	bl	800162c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80018be:	2005      	movs	r0, #5
 80018c0:	f000 fca6 	bl	8002210 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 80018c4:	2108      	movs	r1, #8
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ff20 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 80018cc:	213f      	movs	r1, #63	@ 0x3f
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7ff ff1c 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 80018d4:	2103      	movs	r1, #3
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff ff18 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 80018dc:	2103      	movs	r1, #3
 80018de:	2003      	movs	r0, #3
 80018e0:	f7ff ff14 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 80018e4:	2103      	movs	r1, #3
 80018e6:	2004      	movs	r0, #4
 80018e8:	f7ff ff10 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 80018ec:	2102      	movs	r1, #2
 80018ee:	2005      	movs	r0, #5
 80018f0:	f7ff ff0c 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 80018f4:	210f      	movs	r1, #15
 80018f6:	2006      	movs	r0, #6
 80018f8:	f7ff ff08 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 80018fc:	210e      	movs	r1, #14
 80018fe:	2007      	movs	r0, #7
 8001900:	f7ff ff04 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8001904:	2100      	movs	r1, #0
 8001906:	2008      	movs	r0, #8
 8001908:	f7ff ff00 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 800190c:	2100      	movs	r1, #0
 800190e:	2009      	movs	r0, #9
 8001910:	f7ff fefc 	bl	800170c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001914:	23e7      	movs	r3, #231	@ 0xe7
 8001916:	713b      	strb	r3, [r7, #4]
 8001918:	23e7      	movs	r3, #231	@ 0xe7
 800191a:	70fb      	strb	r3, [r7, #3]
 800191c:	23e7      	movs	r3, #231	@ 0xe7
 800191e:	70bb      	strb	r3, [r7, #2]
 8001920:	23e7      	movs	r3, #231	@ 0xe7
 8001922:	707b      	strb	r3, [r7, #1]
 8001924:	23e7      	movs	r3, #231	@ 0xe7
 8001926:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8001928:	463b      	mov	r3, r7
 800192a:	2205      	movs	r2, #5
 800192c:	4619      	mov	r1, r3
 800192e:	200a      	movs	r0, #10
 8001930:	f7ff ff0e 	bl	8001750 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001934:	23c2      	movs	r3, #194	@ 0xc2
 8001936:	713b      	strb	r3, [r7, #4]
 8001938:	23c2      	movs	r3, #194	@ 0xc2
 800193a:	70fb      	strb	r3, [r7, #3]
 800193c:	23c2      	movs	r3, #194	@ 0xc2
 800193e:	70bb      	strb	r3, [r7, #2]
 8001940:	23c2      	movs	r3, #194	@ 0xc2
 8001942:	707b      	strb	r3, [r7, #1]
 8001944:	23c2      	movs	r3, #194	@ 0xc2
 8001946:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8001948:	463b      	mov	r3, r7
 800194a:	2205      	movs	r2, #5
 800194c:	4619      	mov	r1, r3
 800194e:	200b      	movs	r0, #11
 8001950:	f7ff fefe 	bl	8001750 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8001954:	21c3      	movs	r1, #195	@ 0xc3
 8001956:	200c      	movs	r0, #12
 8001958:	f7ff fed8 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 800195c:	21c4      	movs	r1, #196	@ 0xc4
 800195e:	200d      	movs	r0, #13
 8001960:	f7ff fed4 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 8001964:	21c5      	movs	r1, #197	@ 0xc5
 8001966:	200e      	movs	r0, #14
 8001968:	f7ff fed0 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 800196c:	21c6      	movs	r1, #198	@ 0xc6
 800196e:	200f      	movs	r0, #15
 8001970:	f7ff fecc 	bl	800170c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001974:	23e7      	movs	r3, #231	@ 0xe7
 8001976:	713b      	strb	r3, [r7, #4]
 8001978:	23e7      	movs	r3, #231	@ 0xe7
 800197a:	70fb      	strb	r3, [r7, #3]
 800197c:	23e7      	movs	r3, #231	@ 0xe7
 800197e:	70bb      	strb	r3, [r7, #2]
 8001980:	23e7      	movs	r3, #231	@ 0xe7
 8001982:	707b      	strb	r3, [r7, #1]
 8001984:	23e7      	movs	r3, #231	@ 0xe7
 8001986:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8001988:	463b      	mov	r3, r7
 800198a:	2205      	movs	r2, #5
 800198c:	4619      	mov	r1, r3
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff fede 	bl	8001750 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 8001994:	2100      	movs	r1, #0
 8001996:	2011      	movs	r0, #17
 8001998:	f7ff feb8 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 800199c:	2100      	movs	r1, #0
 800199e:	2012      	movs	r0, #18
 80019a0:	f7ff feb4 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2013      	movs	r0, #19
 80019a8:	f7ff feb0 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2014      	movs	r0, #20
 80019b0:	f7ff feac 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2015      	movs	r0, #21
 80019b8:	f7ff fea8 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 80019bc:	2100      	movs	r1, #0
 80019be:	2016      	movs	r0, #22
 80019c0:	f7ff fea4 	bl	800170c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80019c4:	f000 fbc8 	bl	8002158 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 80019c8:	2100      	movs	r1, #0
 80019ca:	201c      	movs	r0, #28
 80019cc:	f7ff fe9e 	bl	800170c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	201d      	movs	r0, #29
 80019d4:	f7ff fe9a 	bl	800170c <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80019d8:	210f      	movs	r1, #15
 80019da:	200f      	movs	r0, #15
 80019dc:	f000 f944 	bl	8001c68 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 fa2a 	bl	8001e3a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 fa60 	bl	8001eac <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f000 faa3 	bl	8001f38 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80019f2:	f000 f9f5 	bl	8001de0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80019f6:	2020      	movs	r0, #32
 80019f8:	f000 f966 	bl	8001cc8 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 80019fc:	f000 fac4 	bl	8001f88 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001a00:	f000 fba2 	bl	8002148 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001a04:	204c      	movs	r0, #76	@ 0x4c
 8001a06:	f000 f94a 	bl	8001c9e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001a0a:	f7ff ff1b 	bl	8001844 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a0e:	f7ff ff21 	bl	8001854 <NRF24_flush_rx>

	NRF24_powerDown();
 8001a12:	f000 face 	bl	8001fb2 <NRF24_powerDown>

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a20:	b004      	add	sp, #16
 8001a22:	4770      	bx	lr
 8001a24:	20000cb8 	.word	0x20000cb8
 8001a28:	20000cb0 	.word	0x20000cb0
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	20000cb4 	.word	0x20000cb4
 8001a34:	20000cb6 	.word	0x20000cb6

08001a38 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fe15 	bl	800166c <NRF24_read_register>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f043 0303 	orr.w	r3, r3, #3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fe5d 	bl	800170c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <NRF24_startListening+0x48>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <NRF24_startListening+0x48>)
 8001a60:	200a      	movs	r0, #10
 8001a62:	f7ff fe75 	bl	8001750 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8001a66:	f7ff feed 	bl	8001844 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a6a:	f7ff fef3 	bl	8001854 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff fddc 	bl	800162c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001a74:	2096      	movs	r0, #150	@ 0x96
 8001a76:	f7ff fd97 	bl	80015a8 <NRF24_DelayMicroSeconds>
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000ca0 	.word	0x20000ca0

08001a84 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fdcf 	bl	800162c <NRF24_ce>
	NRF24_flush_tx();
 8001a8e:	f7ff fed9 	bl	8001844 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a92:	f7ff fedf 	bl	8001854 <NRF24_flush_rx>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001aa8:	f000 fb4e 	bl	8002148 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fabd 	bl	8002030 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001ab6:	f000 fb9f 	bl	80021f8 <HAL_GetTick>
 8001aba:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001abc:	230a      	movs	r3, #10
 8001abe:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001ac0:	f107 030d 	add.w	r3, r7, #13
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2008      	movs	r0, #8
 8001aca:	f7ff fdf7 	bl	80016bc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001ace:	f7ff fec9 	bl	8001864 <NRF24_get_status>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <NRF24_write+0x54>
 8001ae0:	f000 fb8a 	bl	80021f8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8e7      	bhi.n	8001ac0 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001af0:	f107 010b 	add.w	r1, r7, #11
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <NRF24_write+0x90>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 faf1 	bl	80020e2 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <NRF24_write+0x90>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001b0c:	f000 f900 	bl	8001d10 <NRF24_getDynamicPayloadSize>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <NRF24_write+0x94>)
 8001b16:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001b18:	f000 f80c 	bl	8001b34 <NRF24_available>
	NRF24_flush_tx();
 8001b1c:	f7ff fe92 	bl	8001844 <NRF24_flush_tx>
	return retStatus;
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000ca8 	.word	0x20000ca8
 8001b30:	20000ca9 	.word	0x20000ca9

08001b34 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f000 fa49 	bl	8001fd0 <NRF24_availablePipe>
 8001b3e:	4603      	mov	r3, r0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fe45 	bl	80017e4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001b5a:	2017      	movs	r0, #23
 8001b5c:	f7ff fd86 	bl	800166c <NRF24_read_register>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001b68:	f7ff fe74 	bl	8001854 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001b6c:	f000 f8d0 	bl	8001d10 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2205      	movs	r2, #5
 8001b92:	4619      	mov	r1, r3
 8001b94:	200a      	movs	r0, #10
 8001b96:	f7ff fddb 	bl	8001750 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2010      	movs	r0, #16
 8001ba2:	f7ff fdd5 	bl	8001750 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <NRF24_openWritingPipe+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf28      	it	cs
 8001bb4:	4613      	movcs	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2011      	movs	r0, #17
 8001bbc:	f7ff fda6 	bl	800170c <NRF24_write_register>
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000caa 	.word	0x20000caa

08001bcc <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	e9c7 2300 	strd	r2, r3, [r7]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be6:	491c      	ldr	r1, [pc, #112]	@ (8001c58 <NRF24_openReadingPipe+0x8c>)
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d82d      	bhi.n	8001c4e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d808      	bhi.n	8001c0a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	4a18      	ldr	r2, [pc, #96]	@ (8001c5c <NRF24_openReadingPipe+0x90>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	4639      	mov	r1, r7
 8001c00:	2205      	movs	r2, #5
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fda4 	bl	8001750 <NRF24_write_registerN>
 8001c08:	e007      	b.n	8001c1a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	@ (8001c5c <NRF24_openReadingPipe+0x90>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	4639      	mov	r1, r7
 8001c12:	2201      	movs	r2, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fd9b 	bl	8001750 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <NRF24_openReadingPipe+0x94>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <NRF24_openReadingPipe+0x98>)
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd70 	bl	800170c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7ff fd1d 	bl	800166c <NRF24_read_register>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f7ff fd5f 	bl	800170c <NRF24_write_register>
	}

}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000ca0 	.word	0x20000ca0
 8001c5c:	0800a254 	.word	0x0800a254
 8001c60:	0800a25c 	.word	0x0800a25c
 8001c64:	20000caa 	.word	0x20000caa

08001c68 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2004      	movs	r0, #4
 8001c92:	f7ff fd3b 	bl	800170c <NRF24_write_register>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001ca8:	237f      	movs	r3, #127	@ 0x7f
 8001caa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bf28      	it	cs
 8001cb4:	4613      	movcs	r3, r2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2005      	movs	r0, #5
 8001cbc:	f7ff fd26 	bl	800170c <NRF24_write_register>
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	bf28      	it	cs
 8001cde:	4613      	movcs	r3, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <NRF24_setPayloadSize+0x2c>)
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000caa 	.word	0x20000caa

08001cf8 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return payload_size;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <NRF24_getPayloadSize+0x14>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000caa 	.word	0x20000caa

08001d10 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001d14:	2060      	movs	r0, #96	@ 0x60
 8001d16:	f7ff fca9 	bl	800166c <NRF24_read_register>
 8001d1a:	4603      	mov	r3, r0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001d24:	201d      	movs	r0, #29
 8001d26:	f7ff fca1 	bl	800166c <NRF24_read_register>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f043 0306 	orr.w	r3, r3, #6
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	201d      	movs	r0, #29
 8001d36:	f7ff fce9 	bl	800170c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001d3a:	201d      	movs	r0, #29
 8001d3c:	f7ff fc96 	bl	800166c <NRF24_read_register>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001d46:	f000 fa07 	bl	8002158 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001d4a:	201d      	movs	r0, #29
 8001d4c:	f7ff fc8e 	bl	800166c <NRF24_read_register>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f043 0306 	orr.w	r3, r3, #6
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	201d      	movs	r0, #29
 8001d5c:	f7ff fcd6 	bl	800170c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001d60:	201c      	movs	r0, #28
 8001d62:	f7ff fc83 	bl	800166c <NRF24_read_register>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f043 0303 	orr.w	r3, r3, #3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	201c      	movs	r0, #28
 8001d72:	f7ff fccb 	bl	800170c <NRF24_write_register>
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001d80:	201d      	movs	r0, #29
 8001d82:	f7ff fc73 	bl	800166c <NRF24_read_register>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	201d      	movs	r0, #29
 8001d92:	f7ff fcbb 	bl	800170c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001d96:	201d      	movs	r0, #29
 8001d98:	f7ff fc68 	bl	800166c <NRF24_read_register>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001da2:	f000 f9d9 	bl	8002158 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001da6:	201d      	movs	r0, #29
 8001da8:	f7ff fc60 	bl	800166c <NRF24_read_register>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	201d      	movs	r0, #29
 8001db8:	f7ff fca8 	bl	800170c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001dbc:	201c      	movs	r0, #28
 8001dbe:	f7ff fc55 	bl	800166c <NRF24_read_register>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	201c      	movs	r0, #28
 8001dce:	f7ff fc9d 	bl	800170c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001dd2:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <NRF24_enableDynamicPayloads+0x60>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000cab 	.word	0x20000cab

08001de0 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001de4:	201d      	movs	r0, #29
 8001de6:	f7ff fc41 	bl	800166c <NRF24_read_register>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	201d      	movs	r0, #29
 8001df6:	f7ff fc89 	bl	800170c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	201c      	movs	r0, #28
 8001dfe:	f7ff fc85 	bl	800170c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001e02:	4b02      	ldr	r3, [pc, #8]	@ (8001e0c <NRF24_disableDynamicPayloads+0x2c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000cab 	.word	0x20000cab

08001e10 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001e20:	213f      	movs	r1, #63	@ 0x3f
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff fc72 	bl	800170c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001e28:	e003      	b.n	8001e32 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fc6d 	bl	800170c <NRF24_write_register>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001e44:	2006      	movs	r0, #6
 8001e46:	f7ff fc11 	bl	800166c <NRF24_read_register>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	f023 0306 	bic.w	r3, r3, #6
 8001e54:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d104      	bne.n	8001e66 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	f043 0306 	orr.w	r3, r3, #6
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e019      	b.n	8001e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d104      	bne.n	8001e76 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e011      	b.n	8001e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d104      	bne.n	8001e86 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e009      	b.n	8001e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d103      	bne.n	8001e9a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	f043 0306 	orr.w	r3, r3, #6
 8001e98:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	f7ff fc34 	bl	800170c <NRF24_write_register>
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f7ff fbd6 	bl	800166c <NRF24_read_register>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <NRF24_setDataRate+0x88>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001ed0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d107      	bne.n	8001ee8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <NRF24_setDataRate+0x88>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	73bb      	strb	r3, [r7, #14]
 8001ee6:	e00d      	b.n	8001f04 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <NRF24_setDataRate+0x88>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	73bb      	strb	r3, [r7, #14]
 8001efc:	e002      	b.n	8001f04 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <NRF24_setDataRate+0x88>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	4619      	mov	r1, r3
 8001f08:	2006      	movs	r0, #6
 8001f0a:	f7ff fbff 	bl	800170c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001f0e:	2006      	movs	r0, #6
 8001f10:	f7ff fbac 	bl	800166c <NRF24_read_register>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d102      	bne.n	8001f24 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e002      	b.n	8001f2a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <NRF24_setDataRate+0x88>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000cac 	.word	0x20000cac

08001f38 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fb92 	bl	800166c <NRF24_read_register>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f023 030c 	bic.w	r3, r3, #12
 8001f4e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00f      	beq.n	8001f76 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d104      	bne.n	8001f66 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e007      	b.n	8001f76 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fbc6 	bl	800170c <NRF24_write_register>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fb6c 	bl	800166c <NRF24_read_register>
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f9e:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fbb1 	bl	800170c <NRF24_write_register>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fb58 	bl	800166c <NRF24_read_register>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fba0 	bl	800170c <NRF24_write_register>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001fd8:	f7ff fc44 	bl	8001864 <NRF24_get_status>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d017      	beq.n	8002026 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800200c:	2140      	movs	r1, #64	@ 0x40
 800200e:	2007      	movs	r0, #7
 8002010:	f7ff fb7c 	bl	800170c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800201e:	2120      	movs	r1, #32
 8002020:	2007      	movs	r0, #7
 8002022:	f7ff fb73 	bl	800170c <NRF24_write_register>
    }
  }
  return result;
 8002026:	7bbb      	ldrb	r3, [r7, #14]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff faf5 	bl	800162c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fb12 	bl	800166c <NRF24_read_register>
 8002048:	4603      	mov	r3, r0
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4619      	mov	r1, r3
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fb57 	bl	800170c <NRF24_write_register>
  NRF24_ce(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff fae4 	bl	800162c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8002064:	2096      	movs	r0, #150	@ 0x96
 8002066:	f7ff fa9f 	bl	80015a8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fb96 	bl	80017a0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff fad9 	bl	800162c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800207a:	200f      	movs	r0, #15
 800207c:	f7ff fa94 	bl	80015a8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fad3 	bl	800162c <NRF24_ce>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	6039      	str	r1, [r7, #0]
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	4613      	mov	r3, r2
 800209c:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80020a2:	2320      	movs	r3, #32
 80020a4:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80020a6:	7afa      	ldrb	r2, [r7, #11]
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	4293      	cmp	r3, r2
 80020ac:	bf28      	it	cs
 80020ae:	4613      	movcs	r3, r2
 80020b0:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fa9a 	bl	80015ec <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	f063 0357 	orn	r3, r3, #87	@ 0x57
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	7aba      	ldrb	r2, [r7, #10]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fb3e 	bl	8001750 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fa89 	bl	80015ec <NRF24_csn>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80020ee:	f7ff fbb9 	bl	8001864 <NRF24_get_status>
 80020f2:	4603      	mov	r3, r0
 80020f4:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80020fc:	2170      	movs	r1, #112	@ 0x70
 80020fe:	2007      	movs	r0, #7
 8002100:	f7ff fb04 	bl	800170c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2da      	uxtb	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	701a      	strb	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800214c:	2170      	movs	r1, #112	@ 0x70
 800214e:	2007      	movs	r0, #7
 8002150:	f7ff fadc 	bl	800170c <NRF24_write_register>
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff fa44 	bl	80015ec <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002164:	2350      	movs	r3, #80	@ 0x50
 8002166:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002168:	2373      	movs	r3, #115	@ 0x73
 800216a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800216c:	1d39      	adds	r1, r7, #4
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	2202      	movs	r2, #2
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <NRF24_ACTIVATE_cmd+0x30>)
 8002174:	f001 fc1d 	bl	80039b2 <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff fa37 	bl	80015ec <NRF24_csn>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000cb8 	.word	0x20000cb8

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <HAL_Init+0x40>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_Init+0x40>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_Init+0x40>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f8fc 	bl	80023b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	200f      	movs	r0, #15
 80021bc:	f7ff f8e8 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7fe ffa8 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000030 	.word	0x20000030
 80021f4:	20000d10 	.word	0x20000d10

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000d10 	.word	0x20000d10

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000030 	.word	0x20000030

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	@ (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4c 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023da:	f7ff ff61 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f7ff ffb1 	bl	800234c <NVIC_EncodePriority>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff80 	bl	80022f8 <__NVIC_SetPriority>
}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff54 	bl	80022bc <__NVIC_EnableIRQ>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff fee6 	bl	80021f8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e099      	b.n	800256c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e00f      	b.n	800247a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7ff fecd 	bl	80021f8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d908      	bls.n	800247a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e078      	b.n	800256c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e8      	bne.n	800245a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4b38      	ldr	r3, [pc, #224]	@ (8002574 <HAL_DMA_Init+0x158>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	2b04      	cmp	r3, #4
 800250c:	d117      	bne.n	800253e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fb01 	bl	8002b28 <DMA_CheckFifoParam>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800253a:	2301      	movs	r3, #1
 800253c:	e016      	b.n	800256c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fab8 	bl	8002abc <DMA_CalcBaseAndBitshift>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	223f      	movs	r2, #63	@ 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	f010803f 	.word	0xf010803f

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_DMA_Start_IT+0x26>
 800259a:	2302      	movs	r3, #2
 800259c:	e040      	b.n	8002620 <HAL_DMA_Start_IT+0xa8>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d12f      	bne.n	8002612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa4a 	bl	8002a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	223f      	movs	r2, #63	@ 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0216 	orr.w	r2, r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002636:	f7ff fddf 	bl	80021f8 <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d008      	beq.n	800265a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e052      	b.n	8002700 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0216 	bic.w	r2, r2, #22
 8002668:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002678:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <HAL_DMA_Abort+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0208 	bic.w	r2, r2, #8
 8002698:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	e013      	b.n	80026d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ac:	f7ff fda4 	bl	80021f8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d90c      	bls.n	80026d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e015      	b.n	8002700 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e4      	bne.n	80026ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	223f      	movs	r2, #63	@ 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00c      	b.n	8002740 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2205      	movs	r2, #5
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002758:	4b8e      	ldr	r3, [pc, #568]	@ (8002994 <HAL_DMA_IRQHandler+0x248>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a8e      	ldr	r2, [pc, #568]	@ (8002998 <HAL_DMA_IRQHandler+0x24c>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	2208      	movs	r2, #8
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01a      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	2208      	movs	r2, #8
 80027a6:	409a      	lsls	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	2201      	movs	r2, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2204      	movs	r2, #4
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	2204      	movs	r2, #4
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	f043 0204 	orr.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	2210      	movs	r2, #16
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d043      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d03c      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	2210      	movs	r2, #16
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d024      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	e01f      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
 800288c:	e016      	b.n	80028bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0208 	bic.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2220      	movs	r2, #32
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 808f 	beq.w	80029ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8087 	beq.w	80029ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	2220      	movs	r2, #32
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d136      	bne.n	8002964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0216 	bic.w	r2, r2, #22
 8002904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_DMA_IRQHandler+0x1da>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0208 	bic.w	r2, r2, #8
 8002934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	223f      	movs	r2, #63	@ 0x3f
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d07e      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
        }
        return;
 8002962:	e079      	b.n	8002a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01d      	beq.n	80029ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	2b00      	cmp	r3, #0
 8002986:	d031      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
 8002990:	e02c      	b.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
 8002992:	bf00      	nop
 8002994:	20000028 	.word	0x20000028
 8002998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d023      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e01e      	b.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0210 	bic.w	r2, r2, #16
 80029ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d307      	bcc.n	8002a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x2cc>
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e000      	b.n	8002a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a58:	bf00      	nop
    }
  }
}
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b40      	cmp	r3, #64	@ 0x40
 8002a8c:	d108      	bne.n	8002aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a9e:	e007      	b.n	8002ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3b10      	subs	r3, #16
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <DMA_CalcBaseAndBitshift+0x64>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ad6:	4a13      	ldr	r2, [pc, #76]	@ (8002b24 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d909      	bls.n	8002afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002afc:	e007      	b.n	8002b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	aaaaaaab 	.word	0xaaaaaaab
 8002b24:	0800a264 	.word	0x0800a264

08002b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11f      	bne.n	8002b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d856      	bhi.n	8002bf6 <DMA_CheckFifoParam+0xce>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <DMA_CheckFifoParam+0x28>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b73 	.word	0x08002b73
 8002b58:	08002b61 	.word	0x08002b61
 8002b5c:	08002bf7 	.word	0x08002bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d046      	beq.n	8002bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e043      	b.n	8002bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b7a:	d140      	bne.n	8002bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b80:	e03d      	b.n	8002bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8a:	d121      	bne.n	8002bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d837      	bhi.n	8002c02 <DMA_CheckFifoParam+0xda>
 8002b92:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <DMA_CheckFifoParam+0x70>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002baf 	.word	0x08002baf
 8002ba0:	08002ba9 	.word	0x08002ba9
 8002ba4:	08002bc1 	.word	0x08002bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e030      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d025      	beq.n	8002c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e022      	b.n	8002c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bce:	e01c      	b.n	8002c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d903      	bls.n	8002bde <DMA_CheckFifoParam+0xb6>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d003      	beq.n	8002be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bdc:	e018      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      break;
 8002be2:	e015      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e00b      	b.n	8002c0e <DMA_CheckFifoParam+0xe6>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e00a      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e008      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e006      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
 8002c04:	e004      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
 8002c08:	e002      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e159      	b.n	8002ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8148 	bne.w	8002eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d005      	beq.n	8002c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a2 	beq.w	8002eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b57      	ldr	r3, [pc, #348]	@ (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4a56      	ldr	r2, [pc, #344]	@ (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db6:	4b54      	ldr	r3, [pc, #336]	@ (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a49      	ldr	r2, [pc, #292]	@ (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x202>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a48      	ldr	r2, [pc, #288]	@ (8002f14 <HAL_GPIO_Init+0x2f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x1fe>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a47      	ldr	r2, [pc, #284]	@ (8002f18 <HAL_GPIO_Init+0x2f8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a46      	ldr	r2, [pc, #280]	@ (8002f1c <HAL_GPIO_Init+0x2fc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x1f6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a45      	ldr	r2, [pc, #276]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x1f2>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e008      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e006      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e004      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e002      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e22:	2300      	movs	r3, #0
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f002 0203 	and.w	r2, r2, #3
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	4093      	lsls	r3, r2
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e34:	4935      	ldr	r1, [pc, #212]	@ (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e42:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e66:	4a2f      	ldr	r2, [pc, #188]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e90:	4a24      	ldr	r2, [pc, #144]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e96:	4b23      	ldr	r3, [pc, #140]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eba:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec0:	4b18      	ldr	r3, [pc, #96]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	f67f aea2 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3724      	adds	r7, #36	@ 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020800 	.word	0x40020800
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40013c00 	.word	0x40013c00

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fd2a 	bl	80009d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e267      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4b88      	ldr	r3, [pc, #544]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b85      	ldr	r3, [pc, #532]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b82      	ldr	r3, [pc, #520]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e242      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b76      	ldr	r3, [pc, #472]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a75      	ldr	r2, [pc, #468]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b70      	ldr	r3, [pc, #448]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6f      	ldr	r2, [pc, #444]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b6d      	ldr	r3, [pc, #436]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6c      	ldr	r2, [pc, #432]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b69      	ldr	r3, [pc, #420]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a68      	ldr	r2, [pc, #416]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b66      	ldr	r3, [pc, #408]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a65      	ldr	r2, [pc, #404]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff f8d8 	bl	80021f8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7ff f8d4 	bl	80021f8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	@ 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e207      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b5b      	ldr	r3, [pc, #364]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7ff f8c4 	bl	80021f8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff f8c0 	bl	80021f8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1f3      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b51      	ldr	r3, [pc, #324]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b4a      	ldr	r3, [pc, #296]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b44      	ldr	r3, [pc, #272]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b41      	ldr	r3, [pc, #260]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c7      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4937      	ldr	r1, [pc, #220]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_RCC_OscConfig+0x244>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7ff f879 	bl	80021f8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7ff f875 	bl	80021f8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a8      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4925      	ldr	r1, [pc, #148]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_RCC_OscConfig+0x244>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7ff f858 	bl	80021f8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7ff f854 	bl	80021f8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e187      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d036      	beq.n	80031e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_RCC_OscConfig+0x248>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7ff f838 	bl	80021f8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7ff f834 	bl	80021f8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e167      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_OscConfig+0x240>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e01b      	b.n	80031e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_RCC_OscConfig+0x248>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7ff f821 	bl	80021f8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e00e      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7ff f81d 	bl	80021f8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d907      	bls.n	80031d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e150      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	42470000 	.word	0x42470000
 80031d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b88      	ldr	r3, [pc, #544]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ea      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8097 	beq.w	8003320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b7d      	ldr	r3, [pc, #500]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	4a7c      	ldr	r2, [pc, #496]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	@ 0x40
 8003212:	4b7a      	ldr	r3, [pc, #488]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b77      	ldr	r3, [pc, #476]	@ (8003400 <HAL_RCC_OscConfig+0x474>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b74      	ldr	r3, [pc, #464]	@ (8003400 <HAL_RCC_OscConfig+0x474>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	@ (8003400 <HAL_RCC_OscConfig+0x474>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe ffdd 	bl	80021f8 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe ffd9 	bl	80021f8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e10c      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b6a      	ldr	r3, [pc, #424]	@ (8003400 <HAL_RCC_OscConfig+0x474>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x2ea>
 8003268:	4b64      	ldr	r3, [pc, #400]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a63      	ldr	r2, [pc, #396]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x324>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x30c>
 800327e:	4b5f      	ldr	r3, [pc, #380]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	4a5e      	ldr	r2, [pc, #376]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	@ 0x70
 800328a:	4b5c      	ldr	r3, [pc, #368]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	4a5b      	ldr	r2, [pc, #364]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	@ 0x70
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x324>
 8003298:	4b58      	ldr	r3, [pc, #352]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	4a57      	ldr	r2, [pc, #348]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a4:	4b55      	ldr	r3, [pc, #340]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a54      	ldr	r2, [pc, #336]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe ff9e 	bl	80021f8 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fe ff9a 	bl	80021f8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0cb      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	4b49      	ldr	r3, [pc, #292]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <HAL_RCC_OscConfig+0x334>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fe ff88 	bl	80021f8 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe ff84 	bl	80021f8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0b5      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	4b3e      	ldr	r3, [pc, #248]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b39      	ldr	r3, [pc, #228]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a1 	beq.w	800346c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332a:	4b34      	ldr	r3, [pc, #208]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d05c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d141      	bne.n	80033c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_RCC_OscConfig+0x478>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe ff58 	bl	80021f8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe ff54 	bl	80021f8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e087      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	491b      	ldr	r1, [pc, #108]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_OscConfig+0x478>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe ff2d 	bl	80021f8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe ff29 	bl	80021f8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e05c      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x416>
 80033c0:	e054      	b.n	800346c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <HAL_RCC_OscConfig+0x478>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe ff16 	bl	80021f8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe ff12 	bl	80021f8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e045      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCC_OscConfig+0x470>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x444>
 80033ee:	e03d      	b.n	800346c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e038      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000
 8003404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <HAL_RCC_OscConfig+0x4ec>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d028      	beq.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d121      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d11a      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800343e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003440:	4293      	cmp	r3, r2
 8003442:	d111      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	3b01      	subs	r3, #1
 8003452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cc      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b68      	ldr	r3, [pc, #416]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90c      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b65      	ldr	r3, [pc, #404]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d044      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d119      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b3f      	ldr	r3, [pc, #252]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e067      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b37      	ldr	r3, [pc, #220]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4934      	ldr	r1, [pc, #208]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fe fe44 	bl	80021f8 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe fe40 	bl	80021f8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b25      	ldr	r3, [pc, #148]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d20c      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b22      	ldr	r3, [pc, #136]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	@ (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd feb4 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	0800a23c 	.word	0x0800a23c
 8003640:	20000028 	.word	0x20000028
 8003644:	2000002c 	.word	0x2000002c

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364c:	b090      	sub	sp, #64	@ 0x40
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
 8003654:	2300      	movs	r3, #0
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003658:	2300      	movs	r3, #0
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b59      	ldr	r3, [pc, #356]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80a1 	bhi.w	80037b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e09b      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x184>)
 800367e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003680:	e09b      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b53      	ldr	r3, [pc, #332]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003686:	e098      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b4f      	ldr	r3, [pc, #316]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003692:	4b4d      	ldr	r3, [pc, #308]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b4a      	ldr	r3, [pc, #296]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	2200      	movs	r2, #0
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036b0:	2100      	movs	r1, #0
 80036b2:	4b47      	ldr	r3, [pc, #284]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b4:	fb03 f201 	mul.w	r2, r3, r1
 80036b8:	2300      	movs	r3, #0
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	4413      	add	r3, r2
 80036c0:	4a43      	ldr	r2, [pc, #268]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036c2:	fba0 1202 	umull	r1, r2, r0, r2
 80036c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c8:	460a      	mov	r2, r1
 80036ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ce:	4413      	add	r3, r2
 80036d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d4:	2200      	movs	r2, #0
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	61fa      	str	r2, [r7, #28]
 80036da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036e2:	f7fc fd7d 	bl	80001e0 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4613      	mov	r3, r2
 80036ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ee:	e053      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f0:	4b35      	ldr	r3, [pc, #212]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	2200      	movs	r2, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	617a      	str	r2, [r7, #20]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003702:	f04f 0b00 	mov.w	fp, #0
 8003706:	4652      	mov	r2, sl
 8003708:	465b      	mov	r3, fp
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003718:	0150      	lsls	r0, r2, #5
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	ebb2 080a 	subs.w	r8, r2, sl
 8003722:	eb63 090b 	sbc.w	r9, r3, fp
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800373a:	ebb2 0408 	subs.w	r4, r2, r8
 800373e:	eb63 0509 	sbc.w	r5, r3, r9
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	00eb      	lsls	r3, r5, #3
 800374c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003750:	00e2      	lsls	r2, r4, #3
 8003752:	4614      	mov	r4, r2
 8003754:	461d      	mov	r5, r3
 8003756:	eb14 030a 	adds.w	r3, r4, sl
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	eb45 030b 	adc.w	r3, r5, fp
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800376e:	4629      	mov	r1, r5
 8003770:	028b      	lsls	r3, r1, #10
 8003772:	4621      	mov	r1, r4
 8003774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003778:	4621      	mov	r1, r4
 800377a:	028a      	lsls	r2, r1, #10
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	2200      	movs	r2, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	60fa      	str	r2, [r7, #12]
 8003788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378c:	f7fc fd28 	bl	80001e0 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	3301      	adds	r3, #1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80037a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037b2:	e002      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x184>)
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3740      	adds	r7, #64	@ 0x40
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	017d7840 	.word	0x017d7840

080037d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	@ (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000028 	.word	0x20000028

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	0800a24c 	.word	0x0800a24c

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffdc 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0b5b      	lsrs	r3, r3, #13
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	0800a24c 	.word	0x0800a24c

0800383c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	220f      	movs	r2, #15
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	08db      	lsrs	r3, r3, #3
 8003876:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <HAL_RCC_GetClockConfig+0x60>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0207 	and.w	r2, r3, #7
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07b      	b.n	80039aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	e005      	b.n	80038d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fc3a 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395c:	ea42 0103 	orr.w	r1, r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0104 	and.w	r1, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	f003 0210 	and.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_SPI_Transmit+0x22>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e12d      	b.n	8003c30 <HAL_SPI_Transmit+0x27e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039dc:	f7fe fc0c 	bl	80021f8 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039f6:	e116      	b.n	8003c26 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Transmit+0x52>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a08:	e10d      	b.n	8003c26 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a50:	d10f      	bne.n	8003a72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d007      	beq.n	8003a90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a98:	d14f      	bne.n	8003b3a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0xf6>
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d142      	bne.n	8003b2e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	1c9a      	adds	r2, r3, #2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003acc:	e02f      	b.n	8003b2e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d112      	bne.n	8003b02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b00:	e015      	b.n	8003b2e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b02:	f7fe fb79 	bl	80021f8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d803      	bhi.n	8003b1a <HAL_SPI_Transmit+0x168>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d102      	bne.n	8003b20 <HAL_SPI_Transmit+0x16e>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b2c:	e07b      	b.n	8003c26 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ca      	bne.n	8003ace <HAL_SPI_Transmit+0x11c>
 8003b38:	e050      	b.n	8003bdc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0x196>
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d144      	bne.n	8003bd2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b6e:	e030      	b.n	8003bd2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d113      	bne.n	8003ba6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ba4:	e015      	b.n	8003bd2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba6:	f7fe fb27 	bl	80021f8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d803      	bhi.n	8003bbe <HAL_SPI_Transmit+0x20c>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Transmit+0x212>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003bd0:	e029      	b.n	8003c26 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1c9      	bne.n	8003b70 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fbdf 	bl	80043a4 <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e003      	b.n	8003c26 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c5c:	e0fb      	b.n	8003e56 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c66:	d112      	bne.n	8003c8e <HAL_SPI_Receive+0x56>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10e      	bne.n	8003c8e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2204      	movs	r2, #4
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f8ef 	bl	8003e68 <HAL_SPI_TransmitReceive>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	e0e8      	b.n	8003e60 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_SPI_Receive+0x64>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e0e1      	b.n	8003e60 <HAL_SPI_Receive+0x228>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca4:	f7fe faa8 	bl	80021f8 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Receive+0x7e>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cba:	e0cc      	b.n	8003e56 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d02:	d10f      	bne.n	8003d24 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d007      	beq.n	8003d42 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d16a      	bne.n	8003e20 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d4a:	e032      	b.n	8003db2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d115      	bne.n	8003d86 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f103 020c 	add.w	r2, r3, #12
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d84:	e015      	b.n	8003db2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d86:	f7fe fa37 	bl	80021f8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d803      	bhi.n	8003d9e <HAL_SPI_Receive+0x166>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Receive+0x16c>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003db0:	e051      	b.n	8003e56 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1c7      	bne.n	8003d4c <HAL_SPI_Receive+0x114>
 8003dbc:	e035      	b.n	8003e2a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d113      	bne.n	8003df4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	b292      	uxth	r2, r2
 8003dd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003df2:	e015      	b.n	8003e20 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df4:	f7fe fa00 	bl	80021f8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d803      	bhi.n	8003e0c <HAL_SPI_Receive+0x1d4>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Receive+0x1da>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e1e:	e01a      	b.n	8003e56 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1c9      	bne.n	8003dbe <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa52 	bl	80042d8 <SPI_EndRxTransaction>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
 8003e4c:	e003      	b.n	8003e56 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e76:	2301      	movs	r3, #1
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x26>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e198      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x358>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e96:	f7fe f9af 	bl	80021f8 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d00f      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x70>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ebe:	d107      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x68>
 8003ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d003      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ed6:	e16d      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x82>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x82>
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ef0:	e160      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d003      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2205      	movs	r2, #5
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	887a      	ldrh	r2, [r7, #2]
 8003f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d007      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f62:	d17c      	bne.n	800405e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x10a>
 8003f6c:	8b7b      	ldrh	r3, [r7, #26]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d16a      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	1c9a      	adds	r2, r3, #2
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f96:	e057      	b.n	8004048 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d11b      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x176>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d016      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x176>
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d113      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d119      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x1b8>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d014      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	b292      	uxth	r2, r2
 8004002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800401c:	2301      	movs	r3, #1
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004020:	f7fe f8ea 	bl	80021f8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800402c:	429a      	cmp	r2, r3
 800402e:	d80b      	bhi.n	8004048 <HAL_SPI_TransmitReceive+0x1e0>
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d007      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004046:	e0b5      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1a2      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x130>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d19d      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x130>
 800405c:	e080      	b.n	8004160 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_TransmitReceive+0x204>
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d16f      	bne.n	800414c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	7812      	ldrb	r2, [r2, #0]
 8004078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004092:	e05b      	b.n	800414c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11c      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x274>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x274>
 80040ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d114      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d119      	bne.n	800411e <HAL_SPI_TransmitReceive+0x2b6>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d014      	beq.n	800411e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800411a:	2301      	movs	r3, #1
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800411e:	f7fe f86b 	bl	80021f8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0x2ce>
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <HAL_SPI_TransmitReceive+0x2d4>
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800414a:	e033      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d19e      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x22c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d199      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f91d 	bl	80043a4 <SPI_EndRxTxTransaction>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800417c:	e01a      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041aa:	e003      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3730      	adds	r7, #48	@ 0x30
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041d8:	f7fe f80e 	bl	80021f8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041e8:	f7fe f806 	bl	80021f8 <HAL_GetTick>
 80041ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ee:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	015b      	lsls	r3, r3, #5
 80041f4:	0d1b      	lsrs	r3, r3, #20
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fe:	e054      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d050      	beq.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004208:	f7fd fff6 	bl	80021f8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	429a      	cmp	r2, r3
 8004216:	d902      	bls.n	800421e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d13d      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800422c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004236:	d111      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004240:	d004      	beq.n	800424c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424a:	d107      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800425a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004264:	d10f      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e017      	b.n	80042ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d19b      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000028 	.word	0x20000028

080042d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ec:	d111      	bne.n	8004312 <SPI_EndRxTransaction+0x3a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f6:	d004      	beq.n	8004302 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004300:	d107      	bne.n	8004312 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800431a:	d12a      	bne.n	8004372 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004324:	d012      	beq.n	800434c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff49 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02d      	beq.n	8004398 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e026      	b.n	800439a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2200      	movs	r2, #0
 8004354:	2101      	movs	r1, #1
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ff36 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01a      	beq.n	8004398 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e013      	b.n	800439a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	2101      	movs	r1, #1
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ff23 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e000      	b.n	800439a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2201      	movs	r2, #1
 80043b8:	2102      	movs	r1, #2
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff04 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e032      	b.n	800443c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <SPI_EndRxTxTransaction+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <SPI_EndRxTxTransaction+0xa4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	0d5b      	lsrs	r3, r3, #21
 80043e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f4:	d112      	bne.n	800441c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2180      	movs	r1, #128	@ 0x80
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fee1 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00f      	b.n	800443c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3b01      	subs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d0f2      	beq.n	800441c <SPI_EndRxTxTransaction+0x78>
 8004436:	e000      	b.n	800443a <SPI_EndRxTxTransaction+0x96>
        break;
 8004438:	bf00      	nop
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000028 	.word	0x20000028
 8004448:	165e9f81 	.word	0x165e9f81

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e041      	b.n	80044e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc fec2 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 f9ea 	bl	8004864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d001      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e044      	b.n	800458e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <HAL_TIM_Base_Start_IT+0xb0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d013      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <HAL_TIM_Base_Start_IT+0xc0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d010      	beq.n	800458c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	e007      	b.n	800458c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40010000 	.word	0x40010000
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40014000 	.word	0x40014000

080045b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01b      	beq.n	8004614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0202 	mvn.w	r2, #2
 80045e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f914 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f906 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f917 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0204 	mvn.w	r2, #4
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8ee 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8e0 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8f1 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0208 	mvn.w	r2, #8
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8c8 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8ba 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8cb 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0210 	mvn.w	r2, #16
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2208      	movs	r2, #8
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8a2 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f894 	bl	8004814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8a5 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0201 	mvn.w	r2, #1
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc fce4 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 faa6 	bl	8004c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f876 	bl	8004850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0220 	mvn.w	r2, #32
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa78 	bl	8004c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e031      	b.n	800480c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8de 	bl	800497c <TIM_SlaveTimer_SetConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e018      	b.n	800480c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3a      	ldr	r2, [pc, #232]	@ (8004960 <TIM_Base_SetConfig+0xfc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0x38>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a37      	ldr	r2, [pc, #220]	@ (8004964 <TIM_Base_SetConfig+0x100>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0x38>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a36      	ldr	r2, [pc, #216]	@ (8004968 <TIM_Base_SetConfig+0x104>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0x38>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a35      	ldr	r2, [pc, #212]	@ (800496c <TIM_Base_SetConfig+0x108>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004960 <TIM_Base_SetConfig+0xfc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01b      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048bc:	d017      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <TIM_Base_SetConfig+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a27      	ldr	r2, [pc, #156]	@ (8004968 <TIM_Base_SetConfig+0x104>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a26      	ldr	r2, [pc, #152]	@ (800496c <TIM_Base_SetConfig+0x108>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a25      	ldr	r2, [pc, #148]	@ (8004970 <TIM_Base_SetConfig+0x10c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a24      	ldr	r2, [pc, #144]	@ (8004974 <TIM_Base_SetConfig+0x110>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0e      	ldr	r2, [pc, #56]	@ (8004960 <TIM_Base_SetConfig+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]
  }
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40014000 	.word	0x40014000
 8004974:	40014400 	.word	0x40014400
 8004978:	40014800 	.word	0x40014800

0800497c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004998:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b70      	cmp	r3, #112	@ 0x70
 80049c4:	d01a      	beq.n	80049fc <TIM_SlaveTimer_SetConfig+0x80>
 80049c6:	2b70      	cmp	r3, #112	@ 0x70
 80049c8:	d860      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049ca:	2b60      	cmp	r3, #96	@ 0x60
 80049cc:	d054      	beq.n	8004a78 <TIM_SlaveTimer_SetConfig+0xfc>
 80049ce:	2b60      	cmp	r3, #96	@ 0x60
 80049d0:	d85c      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049d2:	2b50      	cmp	r3, #80	@ 0x50
 80049d4:	d046      	beq.n	8004a64 <TIM_SlaveTimer_SetConfig+0xe8>
 80049d6:	2b50      	cmp	r3, #80	@ 0x50
 80049d8:	d858      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049da:	2b40      	cmp	r3, #64	@ 0x40
 80049dc:	d019      	beq.n	8004a12 <TIM_SlaveTimer_SetConfig+0x96>
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	d854      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049e2:	2b30      	cmp	r3, #48	@ 0x30
 80049e4:	d055      	beq.n	8004a92 <TIM_SlaveTimer_SetConfig+0x116>
 80049e6:	2b30      	cmp	r3, #48	@ 0x30
 80049e8:	d850      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d051      	beq.n	8004a92 <TIM_SlaveTimer_SetConfig+0x116>
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d84c      	bhi.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d04d      	beq.n	8004a92 <TIM_SlaveTimer_SetConfig+0x116>
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d04b      	beq.n	8004a92 <TIM_SlaveTimer_SetConfig+0x116>
 80049fa:	e047      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	f000 f8a6 	bl	8004b5c <TIM_ETR_SetConfig>
      break;
 8004a10:	e040      	b.n	8004a94 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d101      	bne.n	8004a1e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e03b      	b.n	8004a96 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a44:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
      break;
 8004a62:	e017      	b.n	8004a94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a70:	461a      	mov	r2, r3
 8004a72:	f000 f814 	bl	8004a9e <TIM_TI1_ConfigInputStage>
      break;
 8004a76:	e00d      	b.n	8004a94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a84:	461a      	mov	r2, r3
 8004a86:	f000 f839 	bl	8004afc <TIM_TI2_ConfigInputStage>
      break;
 8004a8a:	e003      	b.n	8004a94 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e000      	b.n	8004a94 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004a92:	bf00      	nop
  }

  return status;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 0201 	bic.w	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 030a 	bic.w	r3, r3, #10
 8004ada:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	031b      	lsls	r3, r3, #12
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	021a      	lsls	r2, r3, #8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e050      	b.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c00:	d013      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a18      	ldr	r2, [pc, #96]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a13      	ldr	r2, [pc, #76]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40014000 	.word	0x40014000

08004c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e042      	b.n	8004d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fade 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	@ 0x24
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 ff4f 	bl	8005b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d175      	bne.n	8004e4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_UART_Transmit+0x2c>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e06e      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	@ 0x21
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7e:	f7fd fa3b 	bl	80021f8 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d98:	d108      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e003      	b.n	8004db4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004db4:	e02e      	b.n	8004e14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fc27 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e03a      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3302      	adds	r3, #2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e007      	b.n	8004e06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1cb      	bne.n	8004db6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2140      	movs	r1, #64	@ 0x40
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fbf3 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d112      	bne.n	8004e96 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Receive_DMA+0x26>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e00b      	b.n	8004e98 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fc1b 	bl	80056c8 <UART_Start_Receive_DMA>
 8004e92:	4603      	mov	r3, r0
 8004e94:	e000      	b.n	8004e98 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_UART_IRQHandler+0x66>
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fd83 	bl	8005a0a <UART_Receive_IT>
      return;
 8004f04:	e25b      	b.n	80053be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80de 	beq.w	80050cc <HAL_UART_IRQHandler+0x22c>
 8004f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80d1 	beq.w	80050cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_UART_IRQHandler+0xae>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_UART_IRQHandler+0xd2>
 8004f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	f043 0202 	orr.w	r2, r3, #2
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_UART_IRQHandler+0xf6>
 8004f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	f043 0204 	orr.w	r2, r3, #4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d011      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x126>
 8004fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d105      	bne.n	8004fba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 81f2 	beq.w	80053b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_IRQHandler+0x14e>
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fd0e 	bl	8005a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <HAL_UART_IRQHandler+0x17a>
 8005012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d04f      	beq.n	80050ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fc16 	bl	800584c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502a:	2b40      	cmp	r3, #64	@ 0x40
 800502c:	d141      	bne.n	80050b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800504c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800505a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800505e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1d9      	bne.n	800502e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d013      	beq.n	80050aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005086:	4a7e      	ldr	r2, [pc, #504]	@ (8005280 <HAL_UART_IRQHandler+0x3e0>)
 8005088:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	4618      	mov	r0, r3
 8005090:	f7fd fb3a 	bl	8002708 <HAL_DMA_Abort_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	e00e      	b.n	80050c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f99e 	bl	80053ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	e00a      	b.n	80050c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f99a 	bl	80053ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	e006      	b.n	80050c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f996 	bl	80053ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050c6:	e175      	b.n	80053b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	bf00      	nop
    return;
 80050ca:	e173      	b.n	80053b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	f040 814f 	bne.w	8005374 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 8148 	beq.w	8005374 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8141 	beq.w	8005374 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	f040 80b6 	bne.w	8005284 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8145 	beq.w	80053b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005136:	429a      	cmp	r2, r3
 8005138:	f080 813e 	bcs.w	80053b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005142:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514e:	f000 8088 	beq.w	8005262 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005168:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800516c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800517e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800518a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1d9      	bne.n	8005152 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3314      	adds	r3, #20
 80051a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e1      	bne.n	800519e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3314      	adds	r3, #20
 80051fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005200:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005204:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800520c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e3      	bne.n	80051da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005244:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005246:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800524a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e3      	bne.n	8005220 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525c:	4618      	mov	r0, r3
 800525e:	f7fd f9e3 	bl	8002628 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8c1 	bl	8005400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800527e:	e09b      	b.n	80053b8 <HAL_UART_IRQHandler+0x518>
 8005280:	08005913 	.word	0x08005913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800528c:	b29b      	uxth	r3, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 808e 	beq.w	80053bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8089 	beq.w	80053bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80052d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e3      	bne.n	80052aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	623b      	str	r3, [r7, #32]
   return(result);
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005306:	633a      	str	r2, [r7, #48]	@ 0x30
 8005308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800530c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e3      	bne.n	80052e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	60fb      	str	r3, [r7, #12]
   return(result);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0310 	bic.w	r3, r3, #16
 800533e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800534c:	61fa      	str	r2, [r7, #28]
 800534e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	69b9      	ldr	r1, [r7, #24]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	617b      	str	r3, [r7, #20]
   return(result);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e3      	bne.n	8005328 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f847 	bl	8005400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005372:	e023      	b.n	80053bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_UART_IRQHandler+0x4f4>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fad4 	bl	800593a <UART_Transmit_IT>
    return;
 8005392:	e014      	b.n	80053be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <HAL_UART_IRQHandler+0x51e>
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fb14 	bl	80059da <UART_EndTransmit_IT>
    return;
 80053b2:	e004      	b.n	80053be <HAL_UART_IRQHandler+0x51e>
    return;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_UART_IRQHandler+0x51e>
      return;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_UART_IRQHandler+0x51e>
      return;
 80053bc:	bf00      	nop
  }
}
 80053be:	37e8      	adds	r7, #232	@ 0xe8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b09c      	sub	sp, #112	@ 0x70
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d172      	bne.n	800551a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005436:	2200      	movs	r2, #0
 8005438:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800544a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800545a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800545c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005460:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800547e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	667b      	str	r3, [r7, #100]	@ 0x64
 8005486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800548e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005490:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800549c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	623b      	str	r3, [r7, #32]
   return(result);
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80054c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d119      	bne.n	800551a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	617b      	str	r3, [r7, #20]
   return(result);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800551a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800551c:	2200      	movs	r2, #0
 800551e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552c:	4619      	mov	r1, r3
 800552e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005530:	f7ff ff66 	bl	8005400 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005534:	e002      	b.n	800553c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005536:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005538:	f7fb fa58 	bl	80009ec <HAL_UART_RxCpltCallback>
}
 800553c:	bf00      	nop
 800553e:	3770      	adds	r7, #112	@ 0x70
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555c:	2b01      	cmp	r3, #1
 800555e:	d108      	bne.n	8005572 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	4619      	mov	r1, r3
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff ff48 	bl	8005400 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005570:	e002      	b.n	8005578 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ff30 	bl	80053d8 <HAL_UART_RxHalfCpltCallback>
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b21      	cmp	r3, #33	@ 0x21
 80055b2:	d108      	bne.n	80055c6 <UART_DMAError+0x46>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80055c0:	68b8      	ldr	r0, [r7, #8]
 80055c2:	f000 f91b 	bl	80057fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b22      	cmp	r3, #34	@ 0x22
 80055e6:	d108      	bne.n	80055fa <UART_DMAError+0x7a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f000 f929 	bl	800584c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	f043 0210 	orr.w	r2, r3, #16
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005606:	68b8      	ldr	r0, [r7, #8]
 8005608:	f7ff fef0 	bl	80053ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005624:	e03b      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d037      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fc fde3 	bl	80021f8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <UART_WaitOnFlagUntilTimeout+0x30>
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e03a      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d023      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b80      	cmp	r3, #128	@ 0x80
 800565a:	d020      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d01d      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d116      	bne.n	800569e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8e0 	bl	800584c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2208      	movs	r2, #8
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e00f      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4013      	ands	r3, r2
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	bf0c      	ite	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	2300      	movne	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d0b4      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b098      	sub	sp, #96	@ 0x60
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2222      	movs	r2, #34	@ 0x22
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f4:	4a3e      	ldr	r2, [pc, #248]	@ (80057f0 <UART_Start_Receive_DMA+0x128>)
 80056f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	4a3d      	ldr	r2, [pc, #244]	@ (80057f4 <UART_Start_Receive_DMA+0x12c>)
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005704:	4a3c      	ldr	r2, [pc, #240]	@ (80057f8 <UART_Start_Receive_DMA+0x130>)
 8005706:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	2200      	movs	r2, #0
 800570e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	f7fc ff26 	bl	8002578 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d019      	beq.n	800577e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800576a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800576c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e5      	bne.n	800574a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3314      	adds	r3, #20
 8005784:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	657b      	str	r3, [r7, #84]	@ 0x54
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800579e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e5      	bne.n	800577e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3314      	adds	r3, #20
 80057b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	617b      	str	r3, [r7, #20]
   return(result);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80057d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80057d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6a39      	ldr	r1, [r7, #32]
 80057d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3760      	adds	r7, #96	@ 0x60
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	08005419 	.word	0x08005419
 80057f4:	08005545 	.word	0x08005545
 80057f8:	08005581 	.word	0x08005581

080057fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	@ 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60bb      	str	r3, [r7, #8]
   return(result);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	61ba      	str	r2, [r7, #24]
 8005826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6979      	ldr	r1, [r7, #20]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	613b      	str	r3, [r7, #16]
   return(result);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005840:	bf00      	nop
 8005842:	3724      	adds	r7, #36	@ 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b095      	sub	sp, #84	@ 0x54
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800586a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005874:	643a      	str	r2, [r7, #64]	@ 0x40
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800587a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	61fb      	str	r3, [r7, #28]
   return(result);
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3314      	adds	r3, #20
 80058a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d119      	bne.n	80058f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	647b      	str	r3, [r7, #68]	@ 0x44
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e4:	61ba      	str	r2, [r7, #24]
 80058e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005906:	bf00      	nop
 8005908:	3754      	adds	r7, #84	@ 0x54
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fd5d 	bl	80053ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b21      	cmp	r3, #33	@ 0x21
 800594c:	d13e      	bne.n	80059cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005956:	d114      	bne.n	8005982 <UART_Transmit_IT+0x48>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d110      	bne.n	8005982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]
 8005980:	e008      	b.n	8005994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6211      	str	r1, [r2, #32]
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4619      	mov	r1, r3
 80059a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10f      	bne.n	80059c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fce2 	bl	80053c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b08c      	sub	sp, #48	@ 0x30
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b22      	cmp	r3, #34	@ 0x22
 8005a1c:	f040 80ae 	bne.w	8005b7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a28:	d117      	bne.n	8005a5a <UART_Receive_IT+0x50>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d113      	bne.n	8005a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a58:	e026      	b.n	8005aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6c:	d007      	beq.n	8005a7e <UART_Receive_IT+0x74>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <UART_Receive_IT+0x82>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e008      	b.n	8005a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d15d      	bne.n	8005b78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0220 	bic.w	r2, r2, #32
 8005aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d135      	bne.n	8005b6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 0310 	bic.w	r3, r3, #16
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	623a      	str	r2, [r7, #32]
 8005b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d10a      	bne.n	8005b60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fc4a 	bl	8005400 <HAL_UARTEx_RxEventCallback>
 8005b6c:	e002      	b.n	8005b74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fa ff3c 	bl	80009ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e002      	b.n	8005b7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3730      	adds	r7, #48	@ 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b8c:	b0c0      	sub	sp, #256	@ 0x100
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	68d9      	ldr	r1, [r3, #12]
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	ea40 0301 	orr.w	r3, r0, r1
 8005bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005be0:	f021 010c 	bic.w	r1, r1, #12
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c02:	6999      	ldr	r1, [r3, #24]
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	ea40 0301 	orr.w	r3, r0, r1
 8005c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b8f      	ldr	r3, [pc, #572]	@ (8005e54 <UART_SetConfig+0x2cc>)
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d005      	beq.n	8005c28 <UART_SetConfig+0xa0>
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b8d      	ldr	r3, [pc, #564]	@ (8005e58 <UART_SetConfig+0x2d0>)
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d104      	bne.n	8005c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c28:	f7fd fdf4 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8005c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c30:	e003      	b.n	8005c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c32:	f7fd fddb 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8005c36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c44:	f040 810c 	bne.w	8005e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	1891      	adds	r1, r2, r2
 8005c60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c62:	415b      	adcs	r3, r3
 8005c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	eb12 0801 	adds.w	r8, r2, r1
 8005c70:	4629      	mov	r1, r5
 8005c72:	eb43 0901 	adc.w	r9, r3, r1
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8a:	4690      	mov	r8, r2
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	eb18 0303 	adds.w	r3, r8, r3
 8005c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c98:	462b      	mov	r3, r5
 8005c9a:	eb49 0303 	adc.w	r3, r9, r3
 8005c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	18db      	adds	r3, r3, r3
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	eb42 0303 	adc.w	r3, r2, r3
 8005cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ccc:	f7fa fa88 	bl	80001e0 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4b61      	ldr	r3, [pc, #388]	@ (8005e5c <UART_SetConfig+0x2d4>)
 8005cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	011c      	lsls	r4, r3, #4
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d00:	4641      	mov	r1, r8
 8005d02:	eb12 0a01 	adds.w	sl, r2, r1
 8005d06:	4649      	mov	r1, r9
 8005d08:	eb43 0b01 	adc.w	fp, r3, r1
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d20:	4692      	mov	sl, r2
 8005d22:	469b      	mov	fp, r3
 8005d24:	4643      	mov	r3, r8
 8005d26:	eb1a 0303 	adds.w	r3, sl, r3
 8005d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d2e:	464b      	mov	r3, r9
 8005d30:	eb4b 0303 	adc.w	r3, fp, r3
 8005d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	18db      	adds	r3, r3, r3
 8005d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d52:	4613      	mov	r3, r2
 8005d54:	eb42 0303 	adc.w	r3, r2, r3
 8005d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d62:	f7fa fa3d 	bl	80001e0 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <UART_SetConfig+0x2d4>)
 8005d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2264      	movs	r2, #100	@ 0x64
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	1acb      	subs	r3, r1, r3
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d82:	4b36      	ldr	r3, [pc, #216]	@ (8005e5c <UART_SetConfig+0x2d4>)
 8005d84:	fba3 2302 	umull	r2, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d90:	441c      	add	r4, r3
 8005d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dac:	415b      	adcs	r3, r3
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005db4:	4641      	mov	r1, r8
 8005db6:	1851      	adds	r1, r2, r1
 8005db8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dba:	4649      	mov	r1, r9
 8005dbc:	414b      	adcs	r3, r1
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dcc:	4659      	mov	r1, fp
 8005dce:	00cb      	lsls	r3, r1, #3
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	00ca      	lsls	r2, r1, #3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	4642      	mov	r2, r8
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de8:	464b      	mov	r3, r9
 8005dea:	460a      	mov	r2, r1
 8005dec:	eb42 0303 	adc.w	r3, r2, r3
 8005df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e08:	460b      	mov	r3, r1
 8005e0a:	18db      	adds	r3, r3, r3
 8005e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0e:	4613      	mov	r3, r2
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e1e:	f7fa f9df 	bl	80001e0 <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <UART_SetConfig+0x2d4>)
 8005e28:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	2164      	movs	r1, #100	@ 0x64
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	3332      	adds	r3, #50	@ 0x32
 8005e3a:	4a08      	ldr	r2, [pc, #32]	@ (8005e5c <UART_SetConfig+0x2d4>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f003 0207 	and.w	r2, r3, #7
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4422      	add	r2, r4
 8005e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e50:	e106      	b.n	8006060 <UART_SetConfig+0x4d8>
 8005e52:	bf00      	nop
 8005e54:	40011000 	.word	0x40011000
 8005e58:	40011400 	.word	0x40011400
 8005e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e72:	4642      	mov	r2, r8
 8005e74:	464b      	mov	r3, r9
 8005e76:	1891      	adds	r1, r2, r2
 8005e78:	6239      	str	r1, [r7, #32]
 8005e7a:	415b      	adcs	r3, r3
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e82:	4641      	mov	r1, r8
 8005e84:	1854      	adds	r4, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb43 0501 	adc.w	r5, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	00eb      	lsls	r3, r5, #3
 8005e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9a:	00e2      	lsls	r2, r4, #3
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	18e3      	adds	r3, r4, r3
 8005ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	eb45 0303 	adc.w	r3, r5, r3
 8005eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ece:	4629      	mov	r1, r5
 8005ed0:	008b      	lsls	r3, r1, #2
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed8:	4621      	mov	r1, r4
 8005eda:	008a      	lsls	r2, r1, #2
 8005edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ee0:	f7fa f97e 	bl	80001e0 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4b60      	ldr	r3, [pc, #384]	@ (800606c <UART_SetConfig+0x4e4>)
 8005eea:	fba3 2302 	umull	r2, r3, r3, r2
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	011c      	lsls	r4, r3, #4
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005efc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	61b9      	str	r1, [r7, #24]
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f14:	4641      	mov	r1, r8
 8005f16:	1851      	adds	r1, r2, r1
 8005f18:	6139      	str	r1, [r7, #16]
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	414b      	adcs	r3, r1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	00cb      	lsls	r3, r1, #3
 8005f30:	4651      	mov	r1, sl
 8005f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f36:	4651      	mov	r1, sl
 8005f38:	00ca      	lsls	r2, r1, #3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4642      	mov	r2, r8
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f48:	464b      	mov	r3, r9
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	008b      	lsls	r3, r1, #2
 8005f70:	4641      	mov	r1, r8
 8005f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f76:	4641      	mov	r1, r8
 8005f78:	008a      	lsls	r2, r1, #2
 8005f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f7e:	f7fa f92f 	bl	80001e0 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	4b38      	ldr	r3, [pc, #224]	@ (800606c <UART_SetConfig+0x4e4>)
 8005f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2264      	movs	r2, #100	@ 0x64
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	1acb      	subs	r3, r1, r3
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	3332      	adds	r3, #50	@ 0x32
 8005f9c:	4a33      	ldr	r2, [pc, #204]	@ (800606c <UART_SetConfig+0x4e4>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fa8:	441c      	add	r4, r3
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fc8:	4641      	mov	r1, r8
 8005fca:	1851      	adds	r1, r2, r1
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	4649      	mov	r1, r9
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	00cb      	lsls	r3, r1, #3
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fea:	4651      	mov	r1, sl
 8005fec:	00ca      	lsls	r2, r1, #3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	460a      	mov	r2, r1
 8005ffe:	eb42 0303 	adc.w	r3, r2, r3
 8006002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	663b      	str	r3, [r7, #96]	@ 0x60
 800600e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800601c:	4649      	mov	r1, r9
 800601e:	008b      	lsls	r3, r1, #2
 8006020:	4641      	mov	r1, r8
 8006022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006026:	4641      	mov	r1, r8
 8006028:	008a      	lsls	r2, r1, #2
 800602a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800602e:	f7fa f8d7 	bl	80001e0 <__aeabi_uldivmod>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <UART_SetConfig+0x4e4>)
 8006038:	fba3 1302 	umull	r1, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2164      	movs	r1, #100	@ 0x64
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	3332      	adds	r3, #50	@ 0x32
 800604a:	4a08      	ldr	r2, [pc, #32]	@ (800606c <UART_SetConfig+0x4e4>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4422      	add	r2, r4
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006066:	46bd      	mov	sp, r7
 8006068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606c:	51eb851f 	.word	0x51eb851f

08006070 <__NVIC_SetPriority>:
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	6039      	str	r1, [r7, #0]
 800607a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800607c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006080:	2b00      	cmp	r3, #0
 8006082:	db0a      	blt.n	800609a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	490c      	ldr	r1, [pc, #48]	@ (80060bc <__NVIC_SetPriority+0x4c>)
 800608a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608e:	0112      	lsls	r2, r2, #4
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	440b      	add	r3, r1
 8006094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006098:	e00a      	b.n	80060b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	4908      	ldr	r1, [pc, #32]	@ (80060c0 <__NVIC_SetPriority+0x50>)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	3b04      	subs	r3, #4
 80060a8:	0112      	lsls	r2, r2, #4
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	440b      	add	r3, r1
 80060ae:	761a      	strb	r2, [r3, #24]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000e100 	.word	0xe000e100
 80060c0:	e000ed00 	.word	0xe000ed00

080060c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80060c8:	4b05      	ldr	r3, [pc, #20]	@ (80060e0 <SysTick_Handler+0x1c>)
 80060ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80060cc:	f002 fd00 	bl	8008ad0 <xTaskGetSchedulerState>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80060d6:	f003 fc2f 	bl	8009938 <xPortSysTickHandler>
  }
}
 80060da:	bf00      	nop
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000e010 	.word	0xe000e010

080060e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060e8:	2100      	movs	r1, #0
 80060ea:	f06f 0004 	mvn.w	r0, #4
 80060ee:	f7ff ffbf 	bl	8006070 <__NVIC_SetPriority>
#endif
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fe:	f3ef 8305 	mrs	r3, IPSR
 8006102:	603b      	str	r3, [r7, #0]
  return(result);
 8006104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800610a:	f06f 0305 	mvn.w	r3, #5
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	e00c      	b.n	800612c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006112:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <osKernelInitialize+0x44>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800611a:	4b08      	ldr	r3, [pc, #32]	@ (800613c <osKernelInitialize+0x44>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	e002      	b.n	800612c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
 800612a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800612c:	687b      	ldr	r3, [r7, #4]
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000d14 	.word	0x20000d14

08006140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006146:	f3ef 8305 	mrs	r3, IPSR
 800614a:	603b      	str	r3, [r7, #0]
  return(result);
 800614c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006152:	f06f 0305 	mvn.w	r3, #5
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	e010      	b.n	800617c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800615a:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <osKernelStart+0x48>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d109      	bne.n	8006176 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006162:	f7ff ffbf 	bl	80060e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006166:	4b08      	ldr	r3, [pc, #32]	@ (8006188 <osKernelStart+0x48>)
 8006168:	2202      	movs	r2, #2
 800616a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800616c:	f001 ff90 	bl	8008090 <vTaskStartScheduler>
      stat = osOK;
 8006170:	2300      	movs	r3, #0
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	e002      	b.n	800617c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
 800617a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800617c:	687b      	ldr	r3, [r7, #4]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000d14 	.word	0x20000d14

0800618c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	@ 0x38
 8006190:	af04      	add	r7, sp, #16
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619c:	f3ef 8305 	mrs	r3, IPSR
 80061a0:	617b      	str	r3, [r7, #20]
  return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d17e      	bne.n	80062a6 <osThreadNew+0x11a>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d07b      	beq.n	80062a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061b2:	2318      	movs	r3, #24
 80061b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d045      	beq.n	8006252 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osThreadNew+0x48>
        name = attr->name;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <osThreadNew+0x6e>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b38      	cmp	r3, #56	@ 0x38
 80061ec:	d805      	bhi.n	80061fa <osThreadNew+0x6e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <osThreadNew+0x72>
        return (NULL);
 80061fa:	2300      	movs	r3, #0
 80061fc:	e054      	b.n	80062a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <osThreadNew+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b63      	cmp	r3, #99	@ 0x63
 800621c:	d90a      	bls.n	8006234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <osThreadNew+0xa8>
        mem = 1;
 800622e:	2301      	movs	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e010      	b.n	8006256 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10c      	bne.n	8006256 <osThreadNew+0xca>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <osThreadNew+0xca>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <osThreadNew+0xca>
          mem = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	e001      	b.n	8006256 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d110      	bne.n	800627e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006264:	9202      	str	r2, [sp, #8]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f001 fc4e 	bl	8007b14 <xTaskCreateStatic>
 8006278:	4603      	mov	r3, r0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	e013      	b.n	80062a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d110      	bne.n	80062a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	b29a      	uxth	r2, r3
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f001 fc9c 	bl	8007bd4 <xTaskCreate>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d001      	beq.n	80062a6 <osThreadNew+0x11a>
            hTask = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062a6:	693b      	ldr	r3, [r7, #16]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	@ 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062bc:	f3ef 8305 	mrs	r3, IPSR
 80062c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80062c8:	f06f 0305 	mvn.w	r3, #5
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e017      	b.n	8006300 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80062d6:	f06f 0303 	mvn.w	r3, #3
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e010      	b.n	8006300 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f001 fe6e 	bl	8007fc0 <eTaskGetState>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d005      	beq.n	80062fa <osThreadTerminate+0x4a>
      stat = osOK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f001 fdba 	bl	8007e6c <vTaskDelete>
 80062f8:	e002      	b.n	8006300 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80062fa:	f06f 0302 	mvn.w	r3, #2
 80062fe:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006312:	f3ef 8305 	mrs	r3, IPSR
 8006316:	60bb      	str	r3, [r7, #8]
  return(result);
 8006318:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <osDelay+0x1c>
    stat = osErrorISR;
 800631e:	f06f 0305 	mvn.w	r3, #5
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e007      	b.n	8006336 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fe0f 	bl	8007f54 <vTaskDelay>
    }
  }

  return (stat);
 8006336:	68fb      	ldr	r3, [r7, #12]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634c:	f3ef 8305 	mrs	r3, IPSR
 8006350:	60fb      	str	r3, [r7, #12]
  return(result);
 8006352:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006354:	2b00      	cmp	r3, #0
 8006356:	d12d      	bne.n	80063b4 <osEventFlagsNew+0x74>
    mem = -1;
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d015      	beq.n	8006390 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d006      	beq.n	800637a <osEventFlagsNew+0x3a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b1f      	cmp	r3, #31
 8006372:	d902      	bls.n	800637a <osEventFlagsNew+0x3a>
        mem = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	e00c      	b.n	8006394 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <osEventFlagsNew+0x54>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <osEventFlagsNew+0x54>
          mem = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	e001      	b.n	8006394 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d106      	bne.n	80063a8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f9f8 	bl	8006794 <xEventGroupCreateStatic>
 80063a4:	6178      	str	r0, [r7, #20]
 80063a6:	e005      	b.n	80063b4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80063ae:	f000 fa2a 	bl	8006806 <xEventGroupCreate>
 80063b2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <osEventFlagsSet+0x1c>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063da:	d303      	bcc.n	80063e4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80063dc:	f06f 0303 	mvn.w	r3, #3
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e028      	b.n	8006436 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e4:	f3ef 8305 	mrs	r3, IPSR
 80063e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01d      	beq.n	800642c <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	461a      	mov	r2, r3
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6938      	ldr	r0, [r7, #16]
 80063fe:	f000 fbab 	bl	8006b58 <xEventGroupSetBitsFromISR>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8006408:	f06f 0302 	mvn.w	r3, #2
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e012      	b.n	8006436 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <osEventFlagsSet+0x76>
 800641a:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <osEventFlagsSet+0x80>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	e004      	b.n	8006436 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6938      	ldr	r0, [r7, #16]
 8006430:	f000 fad6 	bl	80069e0 <xEventGroupSetBits>
 8006434:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006436:	697b      	ldr	r3, [r7, #20]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	@ 0x30
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <osEventFlagsWait+0x20>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006462:	d303      	bcc.n	800646c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8006464:	f06f 0303 	mvn.w	r3, #3
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	e04b      	b.n	8006504 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646c:	f3ef 8305 	mrs	r3, IPSR
 8006470:	617b      	str	r3, [r7, #20]
  return(result);
 8006472:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8006478:	f06f 0305 	mvn.w	r3, #5
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e041      	b.n	8006504 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
 800648e:	e001      	b.n	8006494 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8006490:	2300      	movs	r3, #0
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800649e:	2300      	movs	r3, #0
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	e001      	b.n	80064a8 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	69b8      	ldr	r0, [r7, #24]
 80064b4:	f000 f9c2 	bl	800683c <xEventGroupWaitBits>
 80064b8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4013      	ands	r3, r2
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d019      	beq.n	8006504 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80064d6:	f06f 0301 	mvn.w	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e012      	b.n	8006504 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80064de:	f06f 0302 	mvn.w	r3, #2
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	e00e      	b.n	8006504 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80064f6:	f06f 0301 	mvn.w	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	e002      	b.n	8006504 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80064fe:	f06f 0302 	mvn.w	r3, #2
 8006502:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006504:	69fb      	ldr	r3, [r7, #28]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3728      	adds	r7, #40	@ 0x28
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800650e:	b580      	push	{r7, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651a:	f3ef 8305 	mrs	r3, IPSR
 800651e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006520:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006522:	2b00      	cmp	r3, #0
 8006524:	d174      	bne.n	8006610 <osMutexNew+0x102>
    if (attr != NULL) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <osMutexNew+0x26>
      type = attr->attr_bits;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e001      	b.n	8006538 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <osMutexNew+0x3a>
      rmtx = 1U;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e001      	b.n	800654c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d15c      	bne.n	8006610 <osMutexNew+0x102>
      mem = -1;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d015      	beq.n	800658e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <osMutexNew+0x6a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006570:	d902      	bls.n	8006578 <osMutexNew+0x6a>
          mem = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e00c      	b.n	8006592 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <osMutexNew+0x84>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <osMutexNew+0x84>
            mem = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	e001      	b.n	8006592 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d112      	bne.n	80065be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4619      	mov	r1, r3
 80065a4:	2004      	movs	r0, #4
 80065a6:	f000 fd16 	bl	8006fd6 <xQueueCreateMutexStatic>
 80065aa:	61f8      	str	r0, [r7, #28]
 80065ac:	e016      	b.n	80065dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	4619      	mov	r1, r3
 80065b4:	2001      	movs	r0, #1
 80065b6:	f000 fd0e 	bl	8006fd6 <xQueueCreateMutexStatic>
 80065ba:	61f8      	str	r0, [r7, #28]
 80065bc:	e00e      	b.n	80065dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80065ca:	2004      	movs	r0, #4
 80065cc:	f000 fceb 	bl	8006fa6 <xQueueCreateMutex>
 80065d0:	61f8      	str	r0, [r7, #28]
 80065d2:	e003      	b.n	80065dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80065d4:	2001      	movs	r0, #1
 80065d6:	f000 fce6 	bl	8006fa6 <xQueueCreateMutex>
 80065da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <osMutexNew+0xee>
        if (attr != NULL) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <osMutexNew+0xe2>
          name = attr->name;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e001      	b.n	80065f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	69f8      	ldr	r0, [r7, #28]
 80065f8:	f001 fa2e 	bl	8007a58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <osMutexNew+0x102>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006610:	69fb      	ldr	r3, [r7, #28]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006638:	f3ef 8305 	mrs	r3, IPSR
 800663c:	60bb      	str	r3, [r7, #8]
  return(result);
 800663e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006644:	f06f 0305 	mvn.w	r3, #5
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e02c      	b.n	80066a6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006652:	f06f 0303 	mvn.w	r3, #3
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e025      	b.n	80066a6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d011      	beq.n	8006684 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6938      	ldr	r0, [r7, #16]
 8006664:	f000 fd07 	bl	8007076 <xQueueTakeMutexRecursive>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d01b      	beq.n	80066a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006674:	f06f 0301 	mvn.w	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e014      	b.n	80066a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800667c:	f06f 0302 	mvn.w	r3, #2
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e010      	b.n	80066a6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6938      	ldr	r0, [r7, #16]
 8006688:	f000 ffae 	bl	80075e8 <xQueueSemaphoreTake>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d009      	beq.n	80066a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006698:	f06f 0301 	mvn.w	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e002      	b.n	80066a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066a0:	f06f 0302 	mvn.w	r3, #2
 80066a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80066a6:	697b      	ldr	r3, [r7, #20]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066cc:	f3ef 8305 	mrs	r3, IPSR
 80066d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80066d8:	f06f 0305 	mvn.w	r3, #5
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	e01f      	b.n	8006720 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80066e6:	f06f 0303 	mvn.w	r3, #3
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e018      	b.n	8006720 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80066f4:	6938      	ldr	r0, [r7, #16]
 80066f6:	f000 fc89 	bl	800700c <xQueueGiveMutexRecursive>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d00f      	beq.n	8006720 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006700:	f06f 0302 	mvn.w	r3, #2
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e00b      	b.n	8006720 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006708:	2300      	movs	r3, #0
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f000 fce8 	bl	80070e4 <xQueueGenericSend>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d002      	beq.n	8006720 <osMutexRelease+0x70>
        stat = osErrorResource;
 800671a:	f06f 0302 	mvn.w	r3, #2
 800671e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006720:	697b      	ldr	r3, [r7, #20]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a07      	ldr	r2, [pc, #28]	@ (8006758 <vApplicationGetIdleTaskMemory+0x2c>)
 800673c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4a06      	ldr	r2, [pc, #24]	@ (800675c <vApplicationGetIdleTaskMemory+0x30>)
 8006742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2280      	movs	r2, #128	@ 0x80
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000d18 	.word	0x20000d18
 800675c:	20000d7c 	.word	0x20000d7c

08006760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a07      	ldr	r2, [pc, #28]	@ (800678c <vApplicationGetTimerTaskMemory+0x2c>)
 8006770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4a06      	ldr	r2, [pc, #24]	@ (8006790 <vApplicationGetTimerTaskMemory+0x30>)
 8006776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800677e:	601a      	str	r2, [r3, #0]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20000f7c 	.word	0x20000f7c
 8006790:	20000fe0 	.word	0x20000fe0

08006794 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80067ba:	2320      	movs	r3, #32
 80067bc:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d00b      	beq.n	80067dc <xEventGroupCreateStatic+0x48>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f9c5 	bl	8006b80 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2201      	movs	r2, #1
 80067fa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80067fc:	697b      	ldr	r3, [r7, #20]
	}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800680c:	2020      	movs	r0, #32
 800680e:	f003 f925 	bl	8009a5c <pvPortMalloc>
 8006812:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f9ab 	bl	8006b80 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006830:	687b      	ldr	r3, [r7, #4]
	}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b090      	sub	sp, #64	@ 0x40
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006852:	2300      	movs	r3, #0
 8006854:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xEventGroupWaitBits+0x38>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800687a:	d30b      	bcc.n	8006894 <xEventGroupWaitBits+0x58>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61fb      	str	r3, [r7, #28]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <xEventGroupWaitBits+0x76>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	61bb      	str	r3, [r7, #24]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068b2:	f002 f90d 	bl	8008ad0 <xTaskGetSchedulerState>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <xEventGroupWaitBits+0x86>
 80068bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <xEventGroupWaitBits+0x8a>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <xEventGroupWaitBits+0x8c>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	617b      	str	r3, [r7, #20]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80068e4:	f001 fc3e 	bl	8008164 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80068e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068f4:	f000 f90d 	bl	8006b12 <prvTestWaitCondition>
 80068f8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006904:	2300      	movs	r3, #0
 8006906:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d028      	beq.n	8006960 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	43db      	mvns	r3, r3
 8006916:	401a      	ands	r2, r3
 8006918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e020      	b.n	8006960 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800691e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30
 800692c:	e018      	b.n	8006960 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006948:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694c:	1d18      	adds	r0, r3, #4
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	4313      	orrs	r3, r2
 8006954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006956:	4619      	mov	r1, r3
 8006958:	f001 fe1a 	bl	8008590 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006960:	f001 fc0e 	bl	8008180 <xTaskResumeAll>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006968:	2b00      	cmp	r3, #0
 800696a:	d031      	beq.n	80069d0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8006972:	4b1a      	ldr	r3, [pc, #104]	@ (80069dc <xEventGroupWaitBits+0x1a0>)
 8006974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006982:	f002 fa1f 	bl	8008dc4 <uxTaskResetEventItemValue>
 8006986:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11a      	bne.n	80069c8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8006992:	f002 ff41 	bl	8009818 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80069a2:	f000 f8b6 	bl	8006b12 <prvTestWaitCondition>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d006      	beq.n	80069c0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80069c4:	f002 ff5a 	bl	800987c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80069c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80069d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3740      	adds	r7, #64	@ 0x40
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	@ 0x38
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80069ea:	2300      	movs	r3, #0
 80069ec:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xEventGroupSetBits+0x34>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	613b      	str	r3, [r7, #16]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a1a:	d30b      	bcc.n	8006a34 <xEventGroupSetBits+0x54>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a36:	3304      	adds	r3, #4
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006a40:	f001 fb90 	bl	8008164 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006a56:	e03c      	b.n	8006ad2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006a6e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a76:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a92:	e008      	b.n	8006aa6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d101      	bne.n	8006aa6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006aca:	f001 fe2f 	bl	800872c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8006ad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d1be      	bne.n	8006a58 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006ae8:	f001 fb4a 	bl	8008180 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3738      	adds	r7, #56	@ 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff6b 	bl	80069e0 <xEventGroupSetBits>
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006b12:	b480      	push	{r7}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b32:	2301      	movs	r3, #1
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e007      	b.n	8006b48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d101      	bne.n	8006b48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006b48:	697b      	ldr	r3, [r7, #20]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	4804      	ldr	r0, [pc, #16]	@ (8006b7c <xEventGroupSetBitsFromISR+0x24>)
 8006b6c:	f002 fd04 	bl	8009578 <xTimerPendFunctionCallFromISR>
 8006b70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006b72:	697b      	ldr	r3, [r7, #20]
	}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	08006af9 	.word	0x08006af9

08006b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f103 0208 	add.w	r2, r3, #8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f103 0208 	add.w	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0208 	add.w	r2, r3, #8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d103      	bne.n	8006c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	e00c      	b.n	8006c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3308      	adds	r3, #8
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e002      	b.n	8006c50 <vListInsert+0x2e>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d2f6      	bcs.n	8006c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6892      	ldr	r2, [r2, #8]
 8006caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6852      	ldr	r2, [r2, #4]
 8006cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d103      	bne.n	8006cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	1e5a      	subs	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <xQueueGenericReset+0x2c>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60bb      	str	r3, [r7, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d14:	f002 fd80 	bl	8009818 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d20:	68f9      	ldr	r1, [r7, #12]
 8006d22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	3b01      	subs	r3, #1
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d4a:	fb01 f303 	mul.w	r3, r1, r3
 8006d4e:	441a      	add	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	22ff      	movs	r2, #255	@ 0xff
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	22ff      	movs	r2, #255	@ 0xff
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d114      	bne.n	8006d94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01a      	beq.n	8006da8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3310      	adds	r3, #16
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 fc74 	bl	8008664 <xTaskRemoveFromEventList>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d012      	beq.n	8006da8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <xQueueGenericReset+0xd0>)
 8006d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	e009      	b.n	8006da8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3310      	adds	r3, #16
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fef1 	bl	8006b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3324      	adds	r3, #36	@ 0x24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff feec 	bl	8006b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006da8:	f002 fd68 	bl	800987c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dac:	2301      	movs	r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	@ 0x38
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <xQueueGenericCreateStatic+0x56>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <xQueueGenericCreateStatic+0x5a>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericCreateStatic+0x5c>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	623b      	str	r3, [r7, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <xQueueGenericCreateStatic+0x84>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <xQueueGenericCreateStatic+0x88>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <xQueueGenericCreateStatic+0x8a>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	61fb      	str	r3, [r7, #28]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e62:	2350      	movs	r3, #80	@ 0x50
 8006e64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b50      	cmp	r3, #80	@ 0x50
 8006e6a:	d00b      	beq.n	8006e84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61bb      	str	r3, [r7, #24]
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00d      	beq.n	8006eac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f840 	bl	8006f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3730      	adds	r7, #48	@ 0x30
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b08a      	sub	sp, #40	@ 0x28
 8006eba:	af02      	add	r7, sp, #8
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	613b      	str	r3, [r7, #16]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3350      	adds	r3, #80	@ 0x50
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f002 fdb3 	bl	8009a5c <pvPortMalloc>
 8006ef6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d011      	beq.n	8006f22 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3350      	adds	r3, #80	@ 0x50
 8006f06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f10:	79fa      	ldrb	r2, [r7, #7]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f805 	bl	8006f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f22:	69bb      	ldr	r3, [r7, #24]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	69b8      	ldr	r0, [r7, #24]
 8006f5e:	f7ff fec3 	bl	8006ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006f92:	2300      	movs	r3, #0
 8006f94:	2200      	movs	r2, #0
 8006f96:	2100      	movs	r1, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f8a3 	bl	80070e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	4603      	mov	r3, r0
 8006fae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	6978      	ldr	r0, [r7, #20]
 8006fc0:	f7ff ff79 	bl	8006eb6 <xQueueGenericCreate>
 8006fc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ffd3 	bl	8006f72 <prvInitialiseMutex>

		return xNewQueue;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
	}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af02      	add	r7, sp, #8
 8006fdc:	4603      	mov	r3, r0
 8006fde:	6039      	str	r1, [r7, #0]
 8006fe0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	6939      	ldr	r1, [r7, #16]
 8006ff4:	6978      	ldr	r0, [r7, #20]
 8006ff6:	f7ff fee1 	bl	8006dbc <xQueueGenericCreateStatic>
 8006ffa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff ffb8 	bl	8006f72 <prvInitialiseMutex>

		return xNewQueue;
 8007002:	68fb      	ldr	r3, [r7, #12]
	}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	689c      	ldr	r4, [r3, #8]
 800703a:	f001 fd39 	bl	8008ab0 <xTaskGetCurrentTaskHandle>
 800703e:	4603      	mov	r3, r0
 8007040:	429c      	cmp	r4, r3
 8007042:	d111      	bne.n	8007068 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	1e5a      	subs	r2, r3, #1
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d105      	bne.n	8007062 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007056:	2300      	movs	r3, #0
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	6938      	ldr	r0, [r7, #16]
 800705e:	f000 f841 	bl	80070e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	e001      	b.n	800706c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800706c:	697b      	ldr	r3, [r7, #20]
	}
 800706e:	4618      	mov	r0, r3
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd90      	pop	{r4, r7, pc}

08007076 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007076:	b590      	push	{r4, r7, lr}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60fb      	str	r3, [r7, #12]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	689c      	ldr	r4, [r3, #8]
 80070a6:	f001 fd03 	bl	8008ab0 <xTaskGetCurrentTaskHandle>
 80070aa:	4603      	mov	r3, r0
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d107      	bne.n	80070c0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e00c      	b.n	80070da <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6938      	ldr	r0, [r7, #16]
 80070c4:	f000 fa90 	bl	80075e8 <xQueueSemaphoreTake>
 80070c8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80070da:	697b      	ldr	r3, [r7, #20]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd90      	pop	{r4, r7, pc}

080070e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08e      	sub	sp, #56	@ 0x38
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xQueueGenericSend+0x34>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <xQueueGenericSend+0x42>
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <xQueueGenericSend+0x46>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericSend+0x48>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <xQueueGenericSend+0x64>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d103      	bne.n	8007156 <xQueueGenericSend+0x72>
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <xQueueGenericSend+0x76>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <xQueueGenericSend+0x78>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <xQueueGenericSend+0x94>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	623b      	str	r3, [r7, #32]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007178:	f001 fcaa 	bl	8008ad0 <xTaskGetSchedulerState>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <xQueueGenericSend+0xa4>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <xQueueGenericSend+0xa8>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <xQueueGenericSend+0xaa>
 800718c:	2300      	movs	r3, #0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <xQueueGenericSend+0xc6>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61fb      	str	r3, [r7, #28]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071aa:	f002 fb35 	bl	8009818 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <xQueueGenericSend+0xdc>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d129      	bne.n	8007214 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071c6:	f000 fb37 	bl	8007838 <prvCopyDataToQueue>
 80071ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d010      	beq.n	80071f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	3324      	adds	r3, #36	@ 0x24
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fa43 	bl	8008664 <xTaskRemoveFromEventList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d013      	beq.n	800720c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071e4:	4b3f      	ldr	r3, [pc, #252]	@ (80072e4 <xQueueGenericSend+0x200>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	e00a      	b.n	800720c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071fc:	4b39      	ldr	r3, [pc, #228]	@ (80072e4 <xQueueGenericSend+0x200>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800720c:	f002 fb36 	bl	800987c <vPortExitCritical>
				return pdPASS;
 8007210:	2301      	movs	r3, #1
 8007212:	e063      	b.n	80072dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800721a:	f002 fb2f 	bl	800987c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800721e:	2300      	movs	r3, #0
 8007220:	e05c      	b.n	80072dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007228:	f107 0314 	add.w	r3, r7, #20
 800722c:	4618      	mov	r0, r3
 800722e:	f001 fae1 	bl	80087f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007236:	f002 fb21 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800723a:	f000 ff93 	bl	8008164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800723e:	f002 faeb 	bl	8009818 <vPortEnterCritical>
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007248:	b25b      	sxtb	r3, r3
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d103      	bne.n	8007258 <xQueueGenericSend+0x174>
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d103      	bne.n	800726e <xQueueGenericSend+0x18a>
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800726e:	f002 fb05 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007272:	1d3a      	adds	r2, r7, #4
 8007274:	f107 0314 	add.w	r3, r7, #20
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fad0 	bl	8008820 <xTaskCheckForTimeOut>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d124      	bne.n	80072d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007286:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007288:	f000 fbce 	bl	8007a28 <prvIsQueueFull>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d018      	beq.n	80072c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	3310      	adds	r3, #16
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f952 	bl	8008544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072a2:	f000 fb59 	bl	8007958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072a6:	f000 ff6b 	bl	8008180 <xTaskResumeAll>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f47f af7c 	bne.w	80071aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80072b2:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <xQueueGenericSend+0x200>)
 80072b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	e772      	b.n	80071aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072c6:	f000 fb47 	bl	8007958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ca:	f000 ff59 	bl	8008180 <xTaskResumeAll>
 80072ce:	e76c      	b.n	80071aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072d2:	f000 fb41 	bl	8007958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072d6:	f000 ff53 	bl	8008180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3738      	adds	r7, #56	@ 0x38
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b090      	sub	sp, #64	@ 0x40
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80072fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <xQueueGenericSendFromISR+0x3e>
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <xQueueGenericSendFromISR+0x42>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <xQueueGenericSendFromISR+0x44>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d103      	bne.n	8007356 <xQueueGenericSendFromISR+0x6e>
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <xQueueGenericSendFromISR+0x72>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueGenericSendFromISR+0x74>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	623b      	str	r3, [r7, #32]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007378:	f002 fb2e 	bl	80099d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800737c:	f3ef 8211 	mrs	r2, BASEPRI
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	61fa      	str	r2, [r7, #28]
 8007392:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007394:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <xQueueGenericSendFromISR+0xc2>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d12f      	bne.n	800740a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073c0:	f000 fa3a 	bl	8007838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d112      	bne.n	80073f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d016      	beq.n	8007404 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	3324      	adds	r3, #36	@ 0x24
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 f942 	bl	8008664 <xTaskRemoveFromEventList>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00e      	beq.n	8007404 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e007      	b.n	8007404 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80073f8:	3301      	adds	r3, #1
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	b25a      	sxtb	r2, r3
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007408:	e001      	b.n	800740e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800740a:	2300      	movs	r3, #0
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800740e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007410:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007418:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800741c:	4618      	mov	r0, r3
 800741e:	3740      	adds	r7, #64	@ 0x40
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08c      	sub	sp, #48	@ 0x30
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <xQueueReceive+0x32>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	623b      	str	r3, [r7, #32]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <xQueueReceive+0x40>
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <xQueueReceive+0x44>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <xQueueReceive+0x46>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <xQueueReceive+0x62>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007486:	f001 fb23 	bl	8008ad0 <xTaskGetSchedulerState>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xQueueReceive+0x72>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueReceive+0x76>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueReceive+0x78>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <xQueueReceive+0x94>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61bb      	str	r3, [r7, #24]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074b8:	f002 f9ae 	bl	8009818 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01f      	beq.n	8007508 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074cc:	f000 fa1e 	bl	800790c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	1e5a      	subs	r2, r3, #1
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00f      	beq.n	8007500 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e2:	3310      	adds	r3, #16
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 f8bd 	bl	8008664 <xTaskRemoveFromEventList>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074f0:	4b3c      	ldr	r3, [pc, #240]	@ (80075e4 <xQueueReceive+0x1c0>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007500:	f002 f9bc 	bl	800987c <vPortExitCritical>
				return pdPASS;
 8007504:	2301      	movs	r3, #1
 8007506:	e069      	b.n	80075dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800750e:	f002 f9b5 	bl	800987c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007512:	2300      	movs	r3, #0
 8007514:	e062      	b.n	80075dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f967 	bl	80087f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007526:	2301      	movs	r3, #1
 8007528:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800752a:	f002 f9a7 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800752e:	f000 fe19 	bl	8008164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007532:	f002 f971 	bl	8009818 <vPortEnterCritical>
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800753c:	b25b      	sxtb	r3, r3
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d103      	bne.n	800754c <xQueueReceive+0x128>
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007552:	b25b      	sxtb	r3, r3
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d103      	bne.n	8007562 <xQueueReceive+0x13e>
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007562:	f002 f98b 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007566:	1d3a      	adds	r2, r7, #4
 8007568:	f107 0310 	add.w	r3, r7, #16
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 f956 	bl	8008820 <xTaskCheckForTimeOut>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d123      	bne.n	80075c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800757a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800757c:	f000 fa3e 	bl	80079fc <prvIsQueueEmpty>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d017      	beq.n	80075b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	3324      	adds	r3, #36	@ 0x24
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f000 ffd8 	bl	8008544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007596:	f000 f9df 	bl	8007958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800759a:	f000 fdf1 	bl	8008180 <xTaskResumeAll>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d189      	bne.n	80074b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80075a4:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <xQueueReceive+0x1c0>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	e780      	b.n	80074b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b8:	f000 f9ce 	bl	8007958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075bc:	f000 fde0 	bl	8008180 <xTaskResumeAll>
 80075c0:	e77a      	b.n	80074b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c4:	f000 f9c8 	bl	8007958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c8:	f000 fdda 	bl	8008180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ce:	f000 fa15 	bl	80079fc <prvIsQueueEmpty>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f43f af6f 	beq.w	80074b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3730      	adds	r7, #48	@ 0x30
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	@ 0x38
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	623b      	str	r3, [r7, #32]
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	e7fd      	b.n	8007618 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800761c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	61fb      	str	r3, [r7, #28]
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800763c:	f001 fa48 	bl	8008ad0 <xTaskGetSchedulerState>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <xQueueSemaphoreTake+0x64>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueSemaphoreTake+0x68>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueSemaphoreTake+0x6a>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61bb      	str	r3, [r7, #24]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800766e:	f002 f8d3 	bl	8009818 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767a:	2b00      	cmp	r3, #0
 800767c:	d024      	beq.n	80076c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d104      	bne.n	8007698 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800768e:	f001 fbb1 	bl	8008df4 <pvTaskIncrementMutexHeldCount>
 8007692:	4602      	mov	r2, r0
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00f      	beq.n	80076c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a2:	3310      	adds	r3, #16
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 ffdd 	bl	8008664 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076b0:	4b54      	ldr	r3, [pc, #336]	@ (8007804 <xQueueSemaphoreTake+0x21c>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076c0:	f002 f8dc 	bl	800987c <vPortExitCritical>
				return pdPASS;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e098      	b.n	80077fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d112      	bne.n	80076f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	617b      	str	r3, [r7, #20]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80076ec:	f002 f8c6 	bl	800987c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e082      	b.n	80077fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 f878 	bl	80087f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007708:	f002 f8b8 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800770c:	f000 fd2a 	bl	8008164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007710:	f002 f882 	bl	8009818 <vPortEnterCritical>
 8007714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007716:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800771a:	b25b      	sxtb	r3, r3
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d103      	bne.n	800772a <xQueueSemaphoreTake+0x142>
 8007722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007730:	b25b      	sxtb	r3, r3
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d103      	bne.n	8007740 <xQueueSemaphoreTake+0x158>
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007740:	f002 f89c 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007744:	463a      	mov	r2, r7
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f001 f867 	bl	8008820 <xTaskCheckForTimeOut>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d132      	bne.n	80077be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800775a:	f000 f94f 	bl	80079fc <prvIsQueueEmpty>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d026      	beq.n	80077b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800776c:	f002 f854 	bl	8009818 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f001 f9c9 	bl	8008b0c <xTaskPriorityInherit>
 800777a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800777c:	f002 f87e 	bl	800987c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007782:	3324      	adds	r3, #36	@ 0x24
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fedb 	bl	8008544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800778e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007790:	f000 f8e2 	bl	8007958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007794:	f000 fcf4 	bl	8008180 <xTaskResumeAll>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	f47f af67 	bne.w	800766e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80077a0:	4b18      	ldr	r3, [pc, #96]	@ (8007804 <xQueueSemaphoreTake+0x21c>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	e75d      	b.n	800766e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b4:	f000 f8d0 	bl	8007958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077b8:	f000 fce2 	bl	8008180 <xTaskResumeAll>
 80077bc:	e757      	b.n	800766e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077c0:	f000 f8ca 	bl	8007958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077c4:	f000 fcdc 	bl	8008180 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077ca:	f000 f917 	bl	80079fc <prvIsQueueEmpty>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f43f af4c 	beq.w	800766e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00d      	beq.n	80077f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80077dc:	f002 f81c 	bl	8009818 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80077e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077e2:	f000 f811 	bl	8007808 <prvGetDisinheritPriorityAfterTimeout>
 80077e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fa64 	bl	8008cbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80077f4:	f002 f842 	bl	800987c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3738      	adds	r7, #56	@ 0x38
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	d006      	beq.n	8007826 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e001      	b.n	800782a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800782a:	68fb      	ldr	r3, [r7, #12]
	}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10d      	bne.n	8007872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d14d      	bne.n	80078fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	4618      	mov	r0, r3
 8007864:	f001 f9ba 	bl	8008bdc <xTaskPriorityDisinherit>
 8007868:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
 8007870:	e043      	b.n	80078fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d119      	bne.n	80078ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6858      	ldr	r0, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007880:	461a      	mov	r2, r3
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	f002 fb92 	bl	8009fac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d32b      	bcc.n	80078fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	e026      	b.n	80078fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68d8      	ldr	r0, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	f002 fb78 	bl	8009fac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	425b      	negs	r3, r3
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d207      	bcs.n	80078e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	425b      	negs	r3, r3
 80078e2:	441a      	add	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d105      	bne.n	80078fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007902:	697b      	ldr	r3, [r7, #20]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d018      	beq.n	8007950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007926:	441a      	add	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d303      	bcc.n	8007940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68d9      	ldr	r1, [r3, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	461a      	mov	r2, r3
 800794a:	6838      	ldr	r0, [r7, #0]
 800794c:	f002 fb2e 	bl	8009fac <memcpy>
	}
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007960:	f001 ff5a 	bl	8009818 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800796a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796c:	e011      	b.n	8007992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3324      	adds	r3, #36	@ 0x24
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fe72 	bl	8008664 <xTaskRemoveFromEventList>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007986:	f000 ffaf 	bl	80088e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	3b01      	subs	r3, #1
 800798e:	b2db      	uxtb	r3, r3
 8007990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007996:	2b00      	cmp	r3, #0
 8007998:	dce9      	bgt.n	800796e <prvUnlockQueue+0x16>
 800799a:	e000      	b.n	800799e <prvUnlockQueue+0x46>
					break;
 800799c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	22ff      	movs	r2, #255	@ 0xff
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80079a6:	f001 ff69 	bl	800987c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079aa:	f001 ff35 	bl	8009818 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079b6:	e011      	b.n	80079dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d012      	beq.n	80079e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3310      	adds	r3, #16
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fe4d 	bl	8008664 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079d0:	f000 ff8a 	bl	80088e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dce9      	bgt.n	80079b8 <prvUnlockQueue+0x60>
 80079e4:	e000      	b.n	80079e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	22ff      	movs	r2, #255	@ 0xff
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079f0:	f001 ff44 	bl	800987c <vPortExitCritical>
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a04:	f001 ff08 	bl	8009818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e001      	b.n	8007a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a1a:	f001 ff2f 	bl	800987c <vPortExitCritical>

	return xReturn;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a30:	f001 fef2 	bl	8009818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d102      	bne.n	8007a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e001      	b.n	8007a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a4a:	f001 ff17 	bl	800987c <vPortExitCritical>

	return xReturn;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e014      	b.n	8007a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a68:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa8 <vQueueAddToRegistry+0x50>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10b      	bne.n	8007a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a74:	490c      	ldr	r1, [pc, #48]	@ (8007aa8 <vQueueAddToRegistry+0x50>)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007aa8 <vQueueAddToRegistry+0x50>)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a8a:	e006      	b.n	8007a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b07      	cmp	r3, #7
 8007a96:	d9e7      	bls.n	8007a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	200013e0 	.word	0x200013e0

08007aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007abc:	f001 feac 	bl	8009818 <vPortEnterCritical>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac6:	b25b      	sxtb	r3, r3
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d103      	bne.n	8007ad6 <vQueueWaitForMessageRestricted+0x2a>
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d103      	bne.n	8007aec <vQueueWaitForMessageRestricted+0x40>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aec:	f001 fec6 	bl	800987c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3324      	adds	r3, #36	@ 0x24
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fd83 	bl	800860c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b06:	6978      	ldr	r0, [r7, #20]
 8007b08:	f7ff ff26 	bl	8007958 <prvUnlockQueue>
	}
 8007b0c:	bf00      	nop
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08e      	sub	sp, #56	@ 0x38
 8007b18:	af04      	add	r7, sp, #16
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	623b      	str	r3, [r7, #32]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	61fb      	str	r3, [r7, #28]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b5e:	2364      	movs	r3, #100	@ 0x64
 8007b60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b64      	cmp	r3, #100	@ 0x64
 8007b66:	d00b      	beq.n	8007b80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61bb      	str	r3, [r7, #24]
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	e7fd      	b.n	8007b7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01e      	beq.n	8007bc6 <xTaskCreateStatic+0xb2>
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01b      	beq.n	8007bc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	f107 0314 	add.w	r3, r7, #20
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f850 	bl	8007c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bc0:	f000 f8e4 	bl	8007d8c <prvAddNewTaskToReadyList>
 8007bc4:	e001      	b.n	8007bca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bca:	697b      	ldr	r3, [r7, #20]
	}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3728      	adds	r7, #40	@ 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08c      	sub	sp, #48	@ 0x30
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 ff37 	bl	8009a5c <pvPortMalloc>
 8007bee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bf6:	2064      	movs	r0, #100	@ 0x64
 8007bf8:	f001 ff30 	bl	8009a5c <pvPortMalloc>
 8007bfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c0a:	e005      	b.n	8007c18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c0c:	6978      	ldr	r0, [r7, #20]
 8007c0e:	f001 fff3 	bl	8009bf8 <vPortFree>
 8007c12:	e001      	b.n	8007c18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d017      	beq.n	8007c4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f80e 	bl	8007c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c42:	69f8      	ldr	r0, [r7, #28]
 8007c44:	f000 f8a2 	bl	8007d8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	61bb      	str	r3, [r7, #24]
 8007c4c:	e002      	b.n	8007c54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c54:	69bb      	ldr	r3, [r7, #24]
	}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b088      	sub	sp, #32
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	461a      	mov	r2, r3
 8007c76:	21a5      	movs	r1, #165	@ 0xa5
 8007c78:	f002 f966 	bl	8009f48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c86:	3b01      	subs	r3, #1
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f023 0307 	bic.w	r3, r3, #7
 8007c94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	617b      	str	r3, [r7, #20]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01f      	beq.n	8007d04 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e012      	b.n	8007cf0 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	7819      	ldrb	r1, [r3, #0]
 8007cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3334      	adds	r3, #52	@ 0x34
 8007cda:	460a      	mov	r2, r1
 8007cdc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	3301      	adds	r3, #1
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d9e9      	bls.n	8007cca <prvInitialiseNewTask+0x6c>
 8007cf6:	e000      	b.n	8007cfa <prvInitialiseNewTask+0x9c>
			{
				break;
 8007cf8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d02:	e003      	b.n	8007d0c <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	2b37      	cmp	r3, #55	@ 0x37
 8007d10:	d901      	bls.n	8007d16 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d12:	2337      	movs	r3, #55	@ 0x37
 8007d14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d20:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2200      	movs	r2, #0
 8007d26:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe ff47 	bl	8006bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	3318      	adds	r3, #24
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe ff42 	bl	8006bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2200      	movs	r2, #0
 8007d56:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	68f9      	ldr	r1, [r7, #12]
 8007d6a:	69b8      	ldr	r0, [r7, #24]
 8007d6c:	f001 fc24 	bl	80095b8 <pxPortInitialiseStack>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d82:	bf00      	nop
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d94:	f001 fd40 	bl	8009818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <prvAddNewTaskToReadyList+0xc4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e50 <prvAddNewTaskToReadyList+0xc4>)
 8007da0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007da2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e54 <prvAddNewTaskToReadyList+0xc8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007daa:	4a2a      	ldr	r2, [pc, #168]	@ (8007e54 <prvAddNewTaskToReadyList+0xc8>)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007db0:	4b27      	ldr	r3, [pc, #156]	@ (8007e50 <prvAddNewTaskToReadyList+0xc4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d110      	bne.n	8007dda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007db8:	f000 fdbc 	bl	8008934 <prvInitialiseTaskLists>
 8007dbc:	e00d      	b.n	8007dda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dbe:	4b26      	ldr	r3, [pc, #152]	@ (8007e58 <prvAddNewTaskToReadyList+0xcc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dc6:	4b23      	ldr	r3, [pc, #140]	@ (8007e54 <prvAddNewTaskToReadyList+0xc8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d802      	bhi.n	8007dda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007e54 <prvAddNewTaskToReadyList+0xc8>)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dda:	4b20      	ldr	r3, [pc, #128]	@ (8007e5c <prvAddNewTaskToReadyList+0xd0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3301      	adds	r3, #1
 8007de0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e5c <prvAddNewTaskToReadyList+0xd0>)
 8007de2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007de4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e5c <prvAddNewTaskToReadyList+0xd0>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <prvAddNewTaskToReadyList+0xd4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d903      	bls.n	8007e00 <prvAddNewTaskToReadyList+0x74>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	4a18      	ldr	r2, [pc, #96]	@ (8007e60 <prvAddNewTaskToReadyList+0xd4>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4a15      	ldr	r2, [pc, #84]	@ (8007e64 <prvAddNewTaskToReadyList+0xd8>)
 8007e0e:	441a      	add	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f7fe fedf 	bl	8006bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e1c:	f001 fd2e 	bl	800987c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e20:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <prvAddNewTaskToReadyList+0xcc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <prvAddNewTaskToReadyList+0xc8>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d207      	bcs.n	8007e46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e36:	4b0c      	ldr	r3, [pc, #48]	@ (8007e68 <prvAddNewTaskToReadyList+0xdc>)
 8007e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	200018f4 	.word	0x200018f4
 8007e54:	20001420 	.word	0x20001420
 8007e58:	20001900 	.word	0x20001900
 8007e5c:	20001910 	.word	0x20001910
 8007e60:	200018fc 	.word	0x200018fc
 8007e64:	20001424 	.word	0x20001424
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e74:	f001 fcd0 	bl	8009818 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <vTaskDelete+0x18>
 8007e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007f34 <vTaskDelete+0xc8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	e000      	b.n	8007e86 <vTaskDelete+0x1a>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe ff01 	bl	8006c94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fef8 	bl	8006c94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007ea4:	4b24      	ldr	r3, [pc, #144]	@ (8007f38 <vTaskDelete+0xcc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	4a23      	ldr	r2, [pc, #140]	@ (8007f38 <vTaskDelete+0xcc>)
 8007eac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007eae:	4b21      	ldr	r3, [pc, #132]	@ (8007f34 <vTaskDelete+0xc8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d10b      	bne.n	8007ed0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	481f      	ldr	r0, [pc, #124]	@ (8007f3c <vTaskDelete+0xd0>)
 8007ec0:	f7fe fe8b 	bl	8006bda <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f40 <vTaskDelete+0xd4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <vTaskDelete+0xd4>)
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	e009      	b.n	8007ee4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f44 <vTaskDelete+0xd8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f44 <vTaskDelete+0xd8>)
 8007ed8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fd98 	bl	8008a10 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007ee0:	f000 fdc6 	bl	8008a70 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007ee4:	f001 fcca 	bl	800987c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007ee8:	4b17      	ldr	r3, [pc, #92]	@ (8007f48 <vTaskDelete+0xdc>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01c      	beq.n	8007f2a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007ef0:	4b10      	ldr	r3, [pc, #64]	@ (8007f34 <vTaskDelete+0xc8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d117      	bne.n	8007f2a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007efa:	4b14      	ldr	r3, [pc, #80]	@ (8007f4c <vTaskDelete+0xe0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <vTaskDelete+0xae>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60bb      	str	r3, [r7, #8]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <vTaskDelete+0xe4>)
 8007f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20001420 	.word	0x20001420
 8007f38:	20001910 	.word	0x20001910
 8007f3c:	200018c8 	.word	0x200018c8
 8007f40:	200018dc 	.word	0x200018dc
 8007f44:	200018f4 	.word	0x200018f4
 8007f48:	20001900 	.word	0x20001900
 8007f4c:	2000191c 	.word	0x2000191c
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <vTaskDelay+0x64>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <vTaskDelay+0x32>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60bb      	str	r3, [r7, #8]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f86:	f000 f8ed 	bl	8008164 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 ff45 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f92:	f000 f8f5 	bl	8008180 <xTaskResumeAll>
 8007f96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d107      	bne.n	8007fae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f9e:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <vTaskDelay+0x68>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000191c 	.word	0x2000191c
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <eTaskGetState+0x2a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007fea:	4b24      	ldr	r3, [pc, #144]	@ (800807c <eTaskGetState+0xbc>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d102      	bne.n	8007ffa <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e03a      	b.n	8008070 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8007ffa:	f001 fc0d 	bl	8009818 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008004:	4b1e      	ldr	r3, [pc, #120]	@ (8008080 <eTaskGetState+0xc0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800800a:	4b1e      	ldr	r3, [pc, #120]	@ (8008084 <eTaskGetState+0xc4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008010:	f001 fc34 	bl	800987c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	d003      	beq.n	8008024 <eTaskGetState+0x64>
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	429a      	cmp	r2, r3
 8008022:	d102      	bne.n	800802a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008024:	2302      	movs	r3, #2
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e022      	b.n	8008070 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <eTaskGetState+0xc8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d112      	bne.n	8008058 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d102      	bne.n	800804c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8008046:	2302      	movs	r3, #2
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e011      	b.n	8008070 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800804c:	2303      	movs	r3, #3
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e00e      	b.n	8008070 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008052:	2302      	movs	r3, #2
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e00b      	b.n	8008070 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4a0c      	ldr	r2, [pc, #48]	@ (800808c <eTaskGetState+0xcc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d002      	beq.n	8008066 <eTaskGetState+0xa6>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008066:	2304      	movs	r3, #4
 8008068:	77fb      	strb	r3, [r7, #31]
 800806a:	e001      	b.n	8008070 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800806c:	2301      	movs	r3, #1
 800806e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008070:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20001420 	.word	0x20001420
 8008080:	200018ac 	.word	0x200018ac
 8008084:	200018b0 	.word	0x200018b0
 8008088:	200018e0 	.word	0x200018e0
 800808c:	200018c8 	.word	0x200018c8

08008090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	@ 0x28
 8008094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800809e:	463a      	mov	r2, r7
 80080a0:	1d39      	adds	r1, r7, #4
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fb40 	bl	800672c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	9202      	str	r2, [sp, #8]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	460a      	mov	r2, r1
 80080be:	4923      	ldr	r1, [pc, #140]	@ (800814c <vTaskStartScheduler+0xbc>)
 80080c0:	4823      	ldr	r0, [pc, #140]	@ (8008150 <vTaskStartScheduler+0xc0>)
 80080c2:	f7ff fd27 	bl	8007b14 <xTaskCreateStatic>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4a22      	ldr	r2, [pc, #136]	@ (8008154 <vTaskStartScheduler+0xc4>)
 80080ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080cc:	4b21      	ldr	r3, [pc, #132]	@ (8008154 <vTaskStartScheduler+0xc4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080d4:	2301      	movs	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e001      	b.n	80080de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d102      	bne.n	80080ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080e4:	f000 feee 	bl	8008ec4 <xTimerCreateTimerTask>
 80080e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d118      	bne.n	8008122 <vTaskStartScheduler+0x92>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008104:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <vTaskStartScheduler+0xc8>)
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800810c:	4b13      	ldr	r3, [pc, #76]	@ (800815c <vTaskStartScheduler+0xcc>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008112:	4b13      	ldr	r3, [pc, #76]	@ (8008160 <vTaskStartScheduler+0xd0>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008118:	f7f8 f9da 	bl	80004d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800811c:	f001 fad8 	bl	80096d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008120:	e00f      	b.n	8008142 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d10b      	bne.n	8008142 <vTaskStartScheduler+0xb2>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60fb      	str	r3, [r7, #12]
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <vTaskStartScheduler+0xae>
}
 8008142:	bf00      	nop
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	0800a074 	.word	0x0800a074
 8008150:	08008901 	.word	0x08008901
 8008154:	20001918 	.word	0x20001918
 8008158:	20001914 	.word	0x20001914
 800815c:	20001900 	.word	0x20001900
 8008160:	200018f8 	.word	0x200018f8

08008164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008168:	4b04      	ldr	r3, [pc, #16]	@ (800817c <vTaskSuspendAll+0x18>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	4a03      	ldr	r2, [pc, #12]	@ (800817c <vTaskSuspendAll+0x18>)
 8008170:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008172:	bf00      	nop
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	2000191c 	.word	0x2000191c

08008180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800818e:	4b42      	ldr	r3, [pc, #264]	@ (8008298 <xTaskResumeAll+0x118>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <xTaskResumeAll+0x2e>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	603b      	str	r3, [r7, #0]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081ae:	f001 fb33 	bl	8009818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081b2:	4b39      	ldr	r3, [pc, #228]	@ (8008298 <xTaskResumeAll+0x118>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	4a37      	ldr	r2, [pc, #220]	@ (8008298 <xTaskResumeAll+0x118>)
 80081ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081bc:	4b36      	ldr	r3, [pc, #216]	@ (8008298 <xTaskResumeAll+0x118>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d162      	bne.n	800828a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081c4:	4b35      	ldr	r3, [pc, #212]	@ (800829c <xTaskResumeAll+0x11c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05e      	beq.n	800828a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081cc:	e02f      	b.n	800822e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ce:	4b34      	ldr	r3, [pc, #208]	@ (80082a0 <xTaskResumeAll+0x120>)
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3318      	adds	r3, #24
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fd5a 	bl	8006c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fd55 	bl	8006c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ee:	4b2d      	ldr	r3, [pc, #180]	@ (80082a4 <xTaskResumeAll+0x124>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d903      	bls.n	80081fe <xTaskResumeAll+0x7e>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	4a2a      	ldr	r2, [pc, #168]	@ (80082a4 <xTaskResumeAll+0x124>)
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4a27      	ldr	r2, [pc, #156]	@ (80082a8 <xTaskResumeAll+0x128>)
 800820c:	441a      	add	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3304      	adds	r3, #4
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f7fe fce0 	bl	8006bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821e:	4b23      	ldr	r3, [pc, #140]	@ (80082ac <xTaskResumeAll+0x12c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008224:	429a      	cmp	r2, r3
 8008226:	d302      	bcc.n	800822e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008228:	4b21      	ldr	r3, [pc, #132]	@ (80082b0 <xTaskResumeAll+0x130>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800822e:	4b1c      	ldr	r3, [pc, #112]	@ (80082a0 <xTaskResumeAll+0x120>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1cb      	bne.n	80081ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800823c:	f000 fc18 	bl	8008a70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008240:	4b1c      	ldr	r3, [pc, #112]	@ (80082b4 <xTaskResumeAll+0x134>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d010      	beq.n	800826e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800824c:	f000 f846 	bl	80082dc <xTaskIncrementTick>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008256:	4b16      	ldr	r3, [pc, #88]	@ (80082b0 <xTaskResumeAll+0x130>)
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3b01      	subs	r3, #1
 8008260:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1f1      	bne.n	800824c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008268:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <xTaskResumeAll+0x134>)
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800826e:	4b10      	ldr	r3, [pc, #64]	@ (80082b0 <xTaskResumeAll+0x130>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008276:	2301      	movs	r3, #1
 8008278:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800827a:	4b0f      	ldr	r3, [pc, #60]	@ (80082b8 <xTaskResumeAll+0x138>)
 800827c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800828a:	f001 faf7 	bl	800987c <vPortExitCritical>

	return xAlreadyYielded;
 800828e:	68bb      	ldr	r3, [r7, #8]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	2000191c 	.word	0x2000191c
 800829c:	200018f4 	.word	0x200018f4
 80082a0:	200018b4 	.word	0x200018b4
 80082a4:	200018fc 	.word	0x200018fc
 80082a8:	20001424 	.word	0x20001424
 80082ac:	20001420 	.word	0x20001420
 80082b0:	20001908 	.word	0x20001908
 80082b4:	20001904 	.word	0x20001904
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <xTaskGetTickCount+0x1c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	200018f8 	.word	0x200018f8

080082dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008424 <xTaskIncrementTick+0x148>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f040 8090 	bne.w	8008410 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008428 <xTaskIncrementTick+0x14c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082f8:	4a4b      	ldr	r2, [pc, #300]	@ (8008428 <xTaskIncrementTick+0x14c>)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d121      	bne.n	8008348 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008304:	4b49      	ldr	r3, [pc, #292]	@ (800842c <xTaskIncrementTick+0x150>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <xTaskIncrementTick+0x4a>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	603b      	str	r3, [r7, #0]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <xTaskIncrementTick+0x46>
 8008326:	4b41      	ldr	r3, [pc, #260]	@ (800842c <xTaskIncrementTick+0x150>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	4b40      	ldr	r3, [pc, #256]	@ (8008430 <xTaskIncrementTick+0x154>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3e      	ldr	r2, [pc, #248]	@ (800842c <xTaskIncrementTick+0x150>)
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	4a3e      	ldr	r2, [pc, #248]	@ (8008430 <xTaskIncrementTick+0x154>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	4b3e      	ldr	r3, [pc, #248]	@ (8008434 <xTaskIncrementTick+0x158>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	4a3c      	ldr	r2, [pc, #240]	@ (8008434 <xTaskIncrementTick+0x158>)
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	f000 fb94 	bl	8008a70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008348:	4b3b      	ldr	r3, [pc, #236]	@ (8008438 <xTaskIncrementTick+0x15c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	d349      	bcc.n	80083e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008352:	4b36      	ldr	r3, [pc, #216]	@ (800842c <xTaskIncrementTick+0x150>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800835c:	4b36      	ldr	r3, [pc, #216]	@ (8008438 <xTaskIncrementTick+0x15c>)
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	601a      	str	r2, [r3, #0]
					break;
 8008364:	e03f      	b.n	80083e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008366:	4b31      	ldr	r3, [pc, #196]	@ (800842c <xTaskIncrementTick+0x150>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d203      	bcs.n	8008386 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800837e:	4a2e      	ldr	r2, [pc, #184]	@ (8008438 <xTaskIncrementTick+0x15c>)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008384:	e02f      	b.n	80083e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fc82 	bl	8006c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	3318      	adds	r3, #24
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fc79 	bl	8006c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	4b25      	ldr	r3, [pc, #148]	@ (800843c <xTaskIncrementTick+0x160>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d903      	bls.n	80083b6 <xTaskIncrementTick+0xda>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	4a22      	ldr	r2, [pc, #136]	@ (800843c <xTaskIncrementTick+0x160>)
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008440 <xTaskIncrementTick+0x164>)
 80083c4:	441a      	add	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f7fe fc04 	bl	8006bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008444 <xTaskIncrementTick+0x168>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	429a      	cmp	r2, r3
 80083de:	d3b8      	bcc.n	8008352 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e4:	e7b5      	b.n	8008352 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083e6:	4b17      	ldr	r3, [pc, #92]	@ (8008444 <xTaskIncrementTick+0x168>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ec:	4914      	ldr	r1, [pc, #80]	@ (8008440 <xTaskIncrementTick+0x164>)
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d901      	bls.n	8008402 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80083fe:	2301      	movs	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008402:	4b11      	ldr	r3, [pc, #68]	@ (8008448 <xTaskIncrementTick+0x16c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e004      	b.n	800841a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008410:	4b0e      	ldr	r3, [pc, #56]	@ (800844c <xTaskIncrementTick+0x170>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	4a0d      	ldr	r2, [pc, #52]	@ (800844c <xTaskIncrementTick+0x170>)
 8008418:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800841a:	697b      	ldr	r3, [r7, #20]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	2000191c 	.word	0x2000191c
 8008428:	200018f8 	.word	0x200018f8
 800842c:	200018ac 	.word	0x200018ac
 8008430:	200018b0 	.word	0x200018b0
 8008434:	2000190c 	.word	0x2000190c
 8008438:	20001914 	.word	0x20001914
 800843c:	200018fc 	.word	0x200018fc
 8008440:	20001424 	.word	0x20001424
 8008444:	20001420 	.word	0x20001420
 8008448:	20001908 	.word	0x20001908
 800844c:	20001904 	.word	0x20001904

08008450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008456:	4b34      	ldr	r3, [pc, #208]	@ (8008528 <vTaskSwitchContext+0xd8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800845e:	4b33      	ldr	r3, [pc, #204]	@ (800852c <vTaskSwitchContext+0xdc>)
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008464:	e05b      	b.n	800851e <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 8008466:	4b31      	ldr	r3, [pc, #196]	@ (800852c <vTaskSwitchContext+0xdc>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800846c:	f7f8 f837 	bl	80004de <getRunTimeCounterValue>
 8008470:	4603      	mov	r3, r0
 8008472:	4a2f      	ldr	r2, [pc, #188]	@ (8008530 <vTaskSwitchContext+0xe0>)
 8008474:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008476:	4b2e      	ldr	r3, [pc, #184]	@ (8008530 <vTaskSwitchContext+0xe0>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b2e      	ldr	r3, [pc, #184]	@ (8008534 <vTaskSwitchContext+0xe4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d909      	bls.n	8008496 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008482:	4b2d      	ldr	r3, [pc, #180]	@ (8008538 <vTaskSwitchContext+0xe8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8008488:	4a29      	ldr	r2, [pc, #164]	@ (8008530 <vTaskSwitchContext+0xe0>)
 800848a:	6810      	ldr	r0, [r2, #0]
 800848c:	4a29      	ldr	r2, [pc, #164]	@ (8008534 <vTaskSwitchContext+0xe4>)
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	1a82      	subs	r2, r0, r2
 8008492:	440a      	add	r2, r1
 8008494:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <vTaskSwitchContext+0xe0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a26      	ldr	r2, [pc, #152]	@ (8008534 <vTaskSwitchContext+0xe4>)
 800849c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <vTaskSwitchContext+0xec>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e011      	b.n	80084ca <vTaskSwitchContext+0x7a>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10b      	bne.n	80084c4 <vTaskSwitchContext+0x74>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	607b      	str	r3, [r7, #4]
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <vTaskSwitchContext+0x70>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	491d      	ldr	r1, [pc, #116]	@ (8008540 <vTaskSwitchContext+0xf0>)
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0e3      	beq.n	80084a6 <vTaskSwitchContext+0x56>
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4a15      	ldr	r2, [pc, #84]	@ (8008540 <vTaskSwitchContext+0xf0>)
 80084ea:	4413      	add	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3308      	adds	r3, #8
 8008500:	429a      	cmp	r2, r3
 8008502:	d104      	bne.n	800850e <vTaskSwitchContext+0xbe>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	605a      	str	r2, [r3, #4]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	4a08      	ldr	r2, [pc, #32]	@ (8008538 <vTaskSwitchContext+0xe8>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <vTaskSwitchContext+0xec>)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6013      	str	r3, [r2, #0]
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	2000191c 	.word	0x2000191c
 800852c:	20001908 	.word	0x20001908
 8008530:	20001924 	.word	0x20001924
 8008534:	20001920 	.word	0x20001920
 8008538:	20001420 	.word	0x20001420
 800853c:	200018fc 	.word	0x200018fc
 8008540:	20001424 	.word	0x20001424

08008544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	60fb      	str	r3, [r7, #12]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800856c:	4b07      	ldr	r3, [pc, #28]	@ (800858c <vTaskPlaceOnEventList+0x48>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3318      	adds	r3, #24
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe fb54 	bl	8006c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800857a:	2101      	movs	r1, #1
 800857c:	6838      	ldr	r0, [r7, #0]
 800857e:	f000 fc4d 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20001420 	.word	0x20001420

08008590 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10b      	bne.n	80085ba <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	617b      	str	r3, [r7, #20]
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	e7fd      	b.n	80085b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80085ba:	4b12      	ldr	r3, [pc, #72]	@ (8008604 <vTaskPlaceOnUnorderedEventList+0x74>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	613b      	str	r3, [r7, #16]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80085da:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <vTaskPlaceOnUnorderedEventList+0x78>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80085e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085e6:	4b08      	ldr	r3, [pc, #32]	@ (8008608 <vTaskPlaceOnUnorderedEventList+0x78>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3318      	adds	r3, #24
 80085ec:	4619      	mov	r1, r3
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7fe faf3 	bl	8006bda <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085f4:	2101      	movs	r1, #1
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fc10 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	2000191c 	.word	0x2000191c
 8008608:	20001420 	.word	0x20001420

0800860c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008636:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <vTaskPlaceOnEventListRestricted+0x54>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3318      	adds	r3, #24
 800863c:	4619      	mov	r1, r3
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7fe facb 	bl	8006bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800864a:	f04f 33ff 	mov.w	r3, #4294967295
 800864e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	68b8      	ldr	r0, [r7, #8]
 8008654:	f000 fbe2 	bl	8008e1c <prvAddCurrentTaskToDelayedList>
	}
 8008658:	bf00      	nop
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20001420 	.word	0x20001420

08008664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	60fb      	str	r3, [r7, #12]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3318      	adds	r3, #24
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fafc 	bl	8006c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800869c:	4b1d      	ldr	r3, [pc, #116]	@ (8008714 <xTaskRemoveFromEventList+0xb0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11d      	bne.n	80086e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe faf3 	bl	8006c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b2:	4b19      	ldr	r3, [pc, #100]	@ (8008718 <xTaskRemoveFromEventList+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d903      	bls.n	80086c2 <xTaskRemoveFromEventList+0x5e>
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	4a16      	ldr	r2, [pc, #88]	@ (8008718 <xTaskRemoveFromEventList+0xb4>)
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4a13      	ldr	r2, [pc, #76]	@ (800871c <xTaskRemoveFromEventList+0xb8>)
 80086d0:	441a      	add	r2, r3
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4619      	mov	r1, r3
 80086d8:	4610      	mov	r0, r2
 80086da:	f7fe fa7e 	bl	8006bda <vListInsertEnd>
 80086de:	e005      	b.n	80086ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3318      	adds	r3, #24
 80086e4:	4619      	mov	r1, r3
 80086e6:	480e      	ldr	r0, [pc, #56]	@ (8008720 <xTaskRemoveFromEventList+0xbc>)
 80086e8:	f7fe fa77 	bl	8006bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <xTaskRemoveFromEventList+0xc0>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d905      	bls.n	8008706 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <xTaskRemoveFromEventList+0xc4>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e001      	b.n	800870a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800870a:	697b      	ldr	r3, [r7, #20]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	2000191c 	.word	0x2000191c
 8008718:	200018fc 	.word	0x200018fc
 800871c:	20001424 	.word	0x20001424
 8008720:	200018b4 	.word	0x200018b4
 8008724:	20001420 	.word	0x20001420
 8008728:	20001908 	.word	0x20001908

0800872c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008736:	4b2a      	ldr	r3, [pc, #168]	@ (80087e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	613b      	str	r3, [r7, #16]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fe fa85 	bl	8006c94 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	3304      	adds	r3, #4
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fa80 	bl	8006c94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008798:	4b12      	ldr	r3, [pc, #72]	@ (80087e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d903      	bls.n	80087a8 <vTaskRemoveFromUnorderedEventList+0x7c>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	4a0f      	ldr	r2, [pc, #60]	@ (80087e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a0c      	ldr	r2, [pc, #48]	@ (80087e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80087b6:	441a      	add	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7fe fa0b 	bl	8006bda <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c8:	4b08      	ldr	r3, [pc, #32]	@ (80087ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d902      	bls.n	80087d8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80087d4:	2201      	movs	r2, #1
 80087d6:	601a      	str	r2, [r3, #0]
	}
}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	2000191c 	.word	0x2000191c
 80087e4:	200018fc 	.word	0x200018fc
 80087e8:	20001424 	.word	0x20001424
 80087ec:	20001420 	.word	0x20001420
 80087f0:	20001908 	.word	0x20001908

080087f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087fc:	4b06      	ldr	r3, [pc, #24]	@ (8008818 <vTaskInternalSetTimeOutState+0x24>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008804:	4b05      	ldr	r3, [pc, #20]	@ (800881c <vTaskInternalSetTimeOutState+0x28>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	605a      	str	r2, [r3, #4]
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000190c 	.word	0x2000190c
 800881c:	200018f8 	.word	0x200018f8

08008820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	60fb      	str	r3, [r7, #12]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008866:	f000 ffd7 	bl	8009818 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800886a:	4b1d      	ldr	r3, [pc, #116]	@ (80088e0 <xTaskCheckForTimeOut+0xc0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d102      	bne.n	800888a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e023      	b.n	80088d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b15      	ldr	r3, [pc, #84]	@ (80088e4 <xTaskCheckForTimeOut+0xc4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d007      	beq.n	80088a6 <xTaskCheckForTimeOut+0x86>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	429a      	cmp	r2, r3
 800889e:	d302      	bcc.n	80088a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088a0:	2301      	movs	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	e015      	b.n	80088d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d20b      	bcs.n	80088c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ff99 	bl	80087f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	e004      	b.n	80088d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088ce:	2301      	movs	r3, #1
 80088d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088d2:	f000 ffd3 	bl	800987c <vPortExitCritical>

	return xReturn;
 80088d6:	69fb      	ldr	r3, [r7, #28]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200018f8 	.word	0x200018f8
 80088e4:	2000190c 	.word	0x2000190c

080088e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088ec:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <vTaskMissedYield+0x14>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
}
 80088f2:	bf00      	nop
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	20001908 	.word	0x20001908

08008900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008908:	f000 f854 	bl	80089b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <prvIdleTask+0x2c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d907      	bls.n	8008924 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008914:	4b06      	ldr	r3, [pc, #24]	@ (8008930 <prvIdleTask+0x30>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008924:	f7f7 fde3 	bl	80004ee <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008928:	e7ee      	b.n	8008908 <prvIdleTask+0x8>
 800892a:	bf00      	nop
 800892c:	20001424 	.word	0x20001424
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800893a:	2300      	movs	r3, #0
 800893c:	607b      	str	r3, [r7, #4]
 800893e:	e00c      	b.n	800895a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4a12      	ldr	r2, [pc, #72]	@ (8008994 <prvInitialiseTaskLists+0x60>)
 800894c:	4413      	add	r3, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe f916 	bl	8006b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3301      	adds	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b37      	cmp	r3, #55	@ 0x37
 800895e:	d9ef      	bls.n	8008940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008960:	480d      	ldr	r0, [pc, #52]	@ (8008998 <prvInitialiseTaskLists+0x64>)
 8008962:	f7fe f90d 	bl	8006b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008966:	480d      	ldr	r0, [pc, #52]	@ (800899c <prvInitialiseTaskLists+0x68>)
 8008968:	f7fe f90a 	bl	8006b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800896c:	480c      	ldr	r0, [pc, #48]	@ (80089a0 <prvInitialiseTaskLists+0x6c>)
 800896e:	f7fe f907 	bl	8006b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008972:	480c      	ldr	r0, [pc, #48]	@ (80089a4 <prvInitialiseTaskLists+0x70>)
 8008974:	f7fe f904 	bl	8006b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008978:	480b      	ldr	r0, [pc, #44]	@ (80089a8 <prvInitialiseTaskLists+0x74>)
 800897a:	f7fe f901 	bl	8006b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800897e:	4b0b      	ldr	r3, [pc, #44]	@ (80089ac <prvInitialiseTaskLists+0x78>)
 8008980:	4a05      	ldr	r2, [pc, #20]	@ (8008998 <prvInitialiseTaskLists+0x64>)
 8008982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008984:	4b0a      	ldr	r3, [pc, #40]	@ (80089b0 <prvInitialiseTaskLists+0x7c>)
 8008986:	4a05      	ldr	r2, [pc, #20]	@ (800899c <prvInitialiseTaskLists+0x68>)
 8008988:	601a      	str	r2, [r3, #0]
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20001424 	.word	0x20001424
 8008998:	20001884 	.word	0x20001884
 800899c:	20001898 	.word	0x20001898
 80089a0:	200018b4 	.word	0x200018b4
 80089a4:	200018c8 	.word	0x200018c8
 80089a8:	200018e0 	.word	0x200018e0
 80089ac:	200018ac 	.word	0x200018ac
 80089b0:	200018b0 	.word	0x200018b0

080089b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ba:	e019      	b.n	80089f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089bc:	f000 ff2c 	bl	8009818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c0:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <prvCheckTasksWaitingTermination+0x50>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe f961 	bl	8006c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <prvCheckTasksWaitingTermination+0x54>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008a08 <prvCheckTasksWaitingTermination+0x54>)
 80089da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089dc:	4b0b      	ldr	r3, [pc, #44]	@ (8008a0c <prvCheckTasksWaitingTermination+0x58>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	4a0a      	ldr	r2, [pc, #40]	@ (8008a0c <prvCheckTasksWaitingTermination+0x58>)
 80089e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089e6:	f000 ff49 	bl	800987c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f810 	bl	8008a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f0:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <prvCheckTasksWaitingTermination+0x58>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e1      	bne.n	80089bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200018c8 	.word	0x200018c8
 8008a08:	200018f4 	.word	0x200018f4
 8008a0c:	200018dc 	.word	0x200018dc

08008a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d108      	bne.n	8008a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 f8e6 	bl	8009bf8 <vPortFree>
				vPortFree( pxTCB );
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f8e3 	bl	8009bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a32:	e019      	b.n	8008a68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d103      	bne.n	8008a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 f8da 	bl	8009bf8 <vPortFree>
	}
 8008a44:	e010      	b.n	8008a68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d00b      	beq.n	8008a68 <prvDeleteTCB+0x58>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <prvDeleteTCB+0x54>
	}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a76:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <prvResetNextTaskUnblockTime+0x38>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <prvResetNextTaskUnblockTime+0x3c>)
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295
 8008a86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a88:	e008      	b.n	8008a9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8a:	4b07      	ldr	r3, [pc, #28]	@ (8008aa8 <prvResetNextTaskUnblockTime+0x38>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	4a04      	ldr	r2, [pc, #16]	@ (8008aac <prvResetNextTaskUnblockTime+0x3c>)
 8008a9a:	6013      	str	r3, [r2, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	200018ac 	.word	0x200018ac
 8008aac:	20001914 	.word	0x20001914

08008ab0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008ab6:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <xTaskGetCurrentTaskHandle+0x1c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008abc:	687b      	ldr	r3, [r7, #4]
	}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20001420 	.word	0x20001420

08008ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <xTaskGetSchedulerState+0x34>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	607b      	str	r3, [r7, #4]
 8008ae2:	e008      	b.n	8008af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ae4:	4b08      	ldr	r3, [pc, #32]	@ (8008b08 <xTaskGetSchedulerState+0x38>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008aec:	2302      	movs	r3, #2
 8008aee:	607b      	str	r3, [r7, #4]
 8008af0:	e001      	b.n	8008af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008af6:	687b      	ldr	r3, [r7, #4]
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	20001900 	.word	0x20001900
 8008b08:	2000191c 	.word	0x2000191c

08008b0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d051      	beq.n	8008bc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b26:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd0 <xTaskPriorityInherit+0xc4>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d241      	bcs.n	8008bb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	db06      	blt.n	8008b46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b38:	4b25      	ldr	r3, [pc, #148]	@ (8008bd0 <xTaskPriorityInherit+0xc4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6959      	ldr	r1, [r3, #20]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4a1f      	ldr	r2, [pc, #124]	@ (8008bd4 <xTaskPriorityInherit+0xc8>)
 8008b58:	4413      	add	r3, r2
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d122      	bne.n	8008ba4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe f896 	bl	8006c94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b68:	4b19      	ldr	r3, [pc, #100]	@ (8008bd0 <xTaskPriorityInherit+0xc4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b76:	4b18      	ldr	r3, [pc, #96]	@ (8008bd8 <xTaskPriorityInherit+0xcc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d903      	bls.n	8008b86 <xTaskPriorityInherit+0x7a>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	4a15      	ldr	r2, [pc, #84]	@ (8008bd8 <xTaskPriorityInherit+0xcc>)
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4a10      	ldr	r2, [pc, #64]	@ (8008bd4 <xTaskPriorityInherit+0xc8>)
 8008b94:	441a      	add	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fe f81c 	bl	8006bda <vListInsertEnd>
 8008ba2:	e004      	b.n	8008bae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <xTaskPriorityInherit+0xc4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e008      	b.n	8008bc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bb8:	4b05      	ldr	r3, [pc, #20]	@ (8008bd0 <xTaskPriorityInherit+0xc4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d201      	bcs.n	8008bc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20001420 	.word	0x20001420
 8008bd4:	20001424 	.word	0x20001424
 8008bd8:	200018fc 	.word	0x200018fc

08008bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d058      	beq.n	8008ca4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb0 <xTaskPriorityDisinherit+0xd4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d00b      	beq.n	8008c14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	60fb      	str	r3, [r7, #12]
}
 8008c0e:	bf00      	nop
 8008c10:	bf00      	nop
 8008c12:	e7fd      	b.n	8008c10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10b      	bne.n	8008c34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60bb      	str	r3, [r7, #8]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c38:	1e5a      	subs	r2, r3, #1
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d02c      	beq.n	8008ca4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d128      	bne.n	8008ca4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe f81c 	bl	8006c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c74:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <xTaskPriorityDisinherit+0xd8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d903      	bls.n	8008c84 <xTaskPriorityDisinherit+0xa8>
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	4a0c      	ldr	r2, [pc, #48]	@ (8008cb4 <xTaskPriorityDisinherit+0xd8>)
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4a09      	ldr	r2, [pc, #36]	@ (8008cb8 <xTaskPriorityDisinherit+0xdc>)
 8008c92:	441a      	add	r2, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fd ff9d 	bl	8006bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ca4:	697b      	ldr	r3, [r7, #20]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20001420 	.word	0x20001420
 8008cb4:	200018fc 	.word	0x200018fc
 8008cb8:	20001424 	.word	0x20001424

08008cbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d06c      	beq.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60fb      	str	r3, [r7, #12]
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d902      	bls.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	e002      	b.n	8008d0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d04c      	beq.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d147      	bne.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d1e:	4b26      	ldr	r3, [pc, #152]	@ (8008db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d10b      	bne.n	8008d40 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60bb      	str	r3, [r7, #8]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	db04      	blt.n	8008d5e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	6959      	ldr	r1, [r3, #20]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a13      	ldr	r2, [pc, #76]	@ (8008dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d6e:	4413      	add	r3, r2
 8008d70:	4299      	cmp	r1, r3
 8008d72:	d11c      	bne.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd ff8b 	bl	8006c94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d82:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d903      	bls.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4a07      	ldr	r2, [pc, #28]	@ (8008dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008da0:	441a      	add	r2, r3
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7fd ff16 	bl	8006bda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dae:	bf00      	nop
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20001420 	.word	0x20001420
 8008dbc:	20001424 	.word	0x20001424
 8008dc0:	200018fc 	.word	0x200018fc

08008dc4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008dca:	4b09      	ldr	r3, [pc, #36]	@ (8008df0 <uxTaskResetEventItemValue+0x2c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <uxTaskResetEventItemValue+0x2c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd8:	4b05      	ldr	r3, [pc, #20]	@ (8008df0 <uxTaskResetEventItemValue+0x2c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8008de0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008de2:	687b      	ldr	r3, [r7, #4]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20001420 	.word	0x20001420

08008df4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008df8:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e00:	4b05      	ldr	r3, [pc, #20]	@ (8008e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e06:	3201      	adds	r2, #1
 8008e08:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8008e0a:	4b03      	ldr	r3, [pc, #12]	@ (8008e18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
	}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	20001420 	.word	0x20001420

08008e1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e26:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <prvAddCurrentTaskToDelayedList+0x90>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e2c:	4b20      	ldr	r3, [pc, #128]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd ff2e 	bl	8006c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d10a      	bne.n	8008e56 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e46:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4819      	ldr	r0, [pc, #100]	@ (8008eb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e50:	f7fd fec3 	bl	8006bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e54:	e026      	b.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e5e:	4b14      	ldr	r3, [pc, #80]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d209      	bcs.n	8008e82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e6e:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fd fed1 	bl	8006c22 <vListInsert>
}
 8008e80:	e010      	b.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e82:	4b0e      	ldr	r3, [pc, #56]	@ (8008ebc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fd fec7 	bl	8006c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d202      	bcs.n	8008ea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e9e:	4a08      	ldr	r2, [pc, #32]	@ (8008ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6013      	str	r3, [r2, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200018f8 	.word	0x200018f8
 8008eb0:	20001420 	.word	0x20001420
 8008eb4:	200018e0 	.word	0x200018e0
 8008eb8:	200018b0 	.word	0x200018b0
 8008ebc:	200018ac 	.word	0x200018ac
 8008ec0:	20001914 	.word	0x20001914

08008ec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	@ 0x28
 8008ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ece:	f000 fb13 	bl	80094f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f48 <xTimerCreateTimerTask+0x84>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d021      	beq.n	8008f1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ee2:	1d3a      	adds	r2, r7, #4
 8008ee4:	f107 0108 	add.w	r1, r7, #8
 8008ee8:	f107 030c 	add.w	r3, r7, #12
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fd fc37 	bl	8006760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	2302      	movs	r3, #2
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	460a      	mov	r2, r1
 8008f04:	4911      	ldr	r1, [pc, #68]	@ (8008f4c <xTimerCreateTimerTask+0x88>)
 8008f06:	4812      	ldr	r0, [pc, #72]	@ (8008f50 <xTimerCreateTimerTask+0x8c>)
 8008f08:	f7fe fe04 	bl	8007b14 <xTaskCreateStatic>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	4a11      	ldr	r2, [pc, #68]	@ (8008f54 <xTimerCreateTimerTask+0x90>)
 8008f10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f12:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <xTimerCreateTimerTask+0x90>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	613b      	str	r3, [r7, #16]
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f3c:	697b      	ldr	r3, [r7, #20]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20001958 	.word	0x20001958
 8008f4c:	0800a0a4 	.word	0x0800a0a4
 8008f50:	08009091 	.word	0x08009091
 8008f54:	2000195c 	.word	0x2000195c

08008f58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	@ 0x28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10b      	bne.n	8008f88 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	623b      	str	r3, [r7, #32]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f88:	4b19      	ldr	r3, [pc, #100]	@ (8008ff0 <xTimerGenericCommand+0x98>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d02a      	beq.n	8008fe6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	dc18      	bgt.n	8008fd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fa2:	f7ff fd95 	bl	8008ad0 <xTaskGetSchedulerState>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d109      	bne.n	8008fc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fac:	4b10      	ldr	r3, [pc, #64]	@ (8008ff0 <xTimerGenericCommand+0x98>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	f107 0110 	add.w	r1, r7, #16
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb8:	f7fe f894 	bl	80070e4 <xQueueGenericSend>
 8008fbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fbe:	e012      	b.n	8008fe6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <xTimerGenericCommand+0x98>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	f107 0110 	add.w	r1, r7, #16
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f7fe f88a 	bl	80070e4 <xQueueGenericSend>
 8008fd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fd2:	e008      	b.n	8008fe6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fd4:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <xTimerGenericCommand+0x98>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	f107 0110 	add.w	r1, r7, #16
 8008fdc:	2300      	movs	r3, #0
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	f7fe f982 	bl	80072e8 <xQueueGenericSendFromISR>
 8008fe4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3728      	adds	r7, #40	@ 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20001958 	.word	0x20001958

08008ff4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffe:	4b23      	ldr	r3, [pc, #140]	@ (800908c <prvProcessExpiredTimer+0x98>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd fe41 	bl	8006c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b00      	cmp	r3, #0
 800901e:	d023      	beq.n	8009068 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	18d1      	adds	r1, r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	f000 f8d5 	bl	80091dc <prvInsertTimerInActiveList>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d020      	beq.n	800907a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009038:	2300      	movs	r3, #0
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	2100      	movs	r1, #0
 8009042:	6978      	ldr	r0, [r7, #20]
 8009044:	f7ff ff88 	bl	8008f58 <xTimerGenericCommand>
 8009048:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d114      	bne.n	800907a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60fb      	str	r3, [r7, #12]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800906e:	f023 0301 	bic.w	r3, r3, #1
 8009072:	b2da      	uxtb	r2, r3
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	6978      	ldr	r0, [r7, #20]
 8009080:	4798      	blx	r3
}
 8009082:	bf00      	nop
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20001950 	.word	0x20001950

08009090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f859 	bl	8009154 <prvGetNextExpireTime>
 80090a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4619      	mov	r1, r3
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f805 	bl	80090b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090ae:	f000 f8d7 	bl	8009260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090b2:	bf00      	nop
 80090b4:	e7f0      	b.n	8009098 <prvTimerTask+0x8>
	...

080090b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090c2:	f7ff f84f 	bl	8008164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f866 	bl	800919c <prvSampleTimeNow>
 80090d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d130      	bne.n	800913a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <prvProcessTimerOrBlockTask+0x3c>
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d806      	bhi.n	80090f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090e6:	f7ff f84b 	bl	8008180 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff ff81 	bl	8008ff4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090f2:	e024      	b.n	800913e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d008      	beq.n	800910c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090fa:	4b13      	ldr	r3, [pc, #76]	@ (8009148 <prvProcessTimerOrBlockTask+0x90>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <prvProcessTimerOrBlockTask+0x50>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <prvProcessTimerOrBlockTask+0x52>
 8009108:	2300      	movs	r3, #0
 800910a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800910c:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <prvProcessTimerOrBlockTask+0x94>)
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	f7fe fcc7 	bl	8007aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800911e:	f7ff f82f 	bl	8008180 <xTaskResumeAll>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009128:	4b09      	ldr	r3, [pc, #36]	@ (8009150 <prvProcessTimerOrBlockTask+0x98>)
 800912a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	f3bf 8f6f 	isb	sy
}
 8009138:	e001      	b.n	800913e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800913a:	f7ff f821 	bl	8008180 <xTaskResumeAll>
}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20001954 	.word	0x20001954
 800914c:	20001958 	.word	0x20001958
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800915c:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <prvGetNextExpireTime+0x44>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <prvGetNextExpireTime+0x16>
 8009166:	2201      	movs	r2, #1
 8009168:	e000      	b.n	800916c <prvGetNextExpireTime+0x18>
 800916a:	2200      	movs	r2, #0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009178:	4b07      	ldr	r3, [pc, #28]	@ (8009198 <prvGetNextExpireTime+0x44>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e001      	b.n	8009188 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009188:	68fb      	ldr	r3, [r7, #12]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20001950 	.word	0x20001950

0800919c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091a4:	f7ff f88a 	bl	80082bc <xTaskGetTickCount>
 80091a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <prvSampleTimeNow+0x3c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d205      	bcs.n	80091c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091b4:	f000 f93a 	bl	800942c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e002      	b.n	80091c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091c6:	4a04      	ldr	r2, [pc, #16]	@ (80091d8 <prvSampleTimeNow+0x3c>)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091cc:	68fb      	ldr	r3, [r7, #12]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20001960 	.word	0x20001960

080091dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d812      	bhi.n	8009228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e01b      	b.n	800924e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009216:	4b10      	ldr	r3, [pc, #64]	@ (8009258 <prvInsertTimerInActiveList+0x7c>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3304      	adds	r3, #4
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7fd fcfe 	bl	8006c22 <vListInsert>
 8009226:	e012      	b.n	800924e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d206      	bcs.n	800923e <prvInsertTimerInActiveList+0x62>
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d302      	bcc.n	800923e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e007      	b.n	800924e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800923e:	4b07      	ldr	r3, [pc, #28]	@ (800925c <prvInsertTimerInActiveList+0x80>)
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f7fd fcea 	bl	8006c22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800924e:	697b      	ldr	r3, [r7, #20]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20001954 	.word	0x20001954
 800925c:	20001950 	.word	0x20001950

08009260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08e      	sub	sp, #56	@ 0x38
 8009264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009266:	e0ce      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	da19      	bge.n	80092a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800926e:	1d3b      	adds	r3, r7, #4
 8009270:	3304      	adds	r3, #4
 8009272:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	61fb      	str	r3, [r7, #28]
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009298:	6850      	ldr	r0, [r2, #4]
 800929a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800929c:	6892      	ldr	r2, [r2, #8]
 800929e:	4611      	mov	r1, r2
 80092a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f2c0 80ae 	blt.w	8009406 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b8:	3304      	adds	r3, #4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fd fcea 	bl	8006c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092c0:	463b      	mov	r3, r7
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff6a 	bl	800919c <prvSampleTimeNow>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	f200 8097 	bhi.w	8009400 <prvProcessReceivedCommands+0x1a0>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <prvProcessReceivedCommands+0x78>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009301 	.word	0x08009301
 80092e4:	08009377 	.word	0x08009377
 80092e8:	0800938b 	.word	0x0800938b
 80092ec:	080093d7 	.word	0x080093d7
 80092f0:	08009301 	.word	0x08009301
 80092f4:	08009301 	.word	0x08009301
 80092f8:	08009377 	.word	0x08009377
 80092fc:	0800938b 	.word	0x0800938b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	18d1      	adds	r1, r2, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009320:	f7ff ff5c 	bl	80091dc <prvInsertTimerInActiveList>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d06c      	beq.n	8009404 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d061      	beq.n	8009404 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	441a      	add	r2, r3
 8009348:	2300      	movs	r3, #0
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	2100      	movs	r1, #0
 8009350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009352:	f7ff fe01 	bl	8008f58 <xTimerGenericCommand>
 8009356:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d152      	bne.n	8009404 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	61bb      	str	r3, [r7, #24]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	b2da      	uxtb	r2, r3
 8009382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009388:	e03d      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800938a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009390:	f043 0301 	orr.w	r3, r3, #1
 8009394:	b2da      	uxtb	r2, r3
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	617b      	str	r3, [r7, #20]
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	e7fd      	b.n	80093be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	18d1      	adds	r1, r2, r3
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d0:	f7ff ff04 	bl	80091dc <prvInsertTimerInActiveList>
					break;
 80093d4:	e017      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093e6:	f000 fc07 	bl	8009bf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093ea:	e00c      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093fe:	e002      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <prvProcessReceivedCommands+0x1a6>
					break;
 8009404:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009406:	4b08      	ldr	r3, [pc, #32]	@ (8009428 <prvProcessReceivedCommands+0x1c8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1d39      	adds	r1, r7, #4
 800940c:	2200      	movs	r2, #0
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe f808 	bl	8007424 <xQueueReceive>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	f47f af26 	bne.w	8009268 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	3730      	adds	r7, #48	@ 0x30
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001958 	.word	0x20001958

0800942c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009432:	e049      	b.n	80094c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009434:	4b2e      	ldr	r3, [pc, #184]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943e:	4b2c      	ldr	r3, [pc, #176]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd fc21 	bl	8006c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d02f      	beq.n	80094c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	429a      	cmp	r2, r3
 8009478:	d90e      	bls.n	8009498 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009486:	4b1a      	ldr	r3, [pc, #104]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7fd fbc6 	bl	8006c22 <vListInsert>
 8009496:	e017      	b.n	80094c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009498:	2300      	movs	r3, #0
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	2300      	movs	r3, #0
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff fd58 	bl	8008f58 <xTimerGenericCommand>
 80094a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10b      	bne.n	80094c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	603b      	str	r3, [r7, #0]
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	e7fd      	b.n	80094c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094c8:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1b0      	bne.n	8009434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094d2:	4b07      	ldr	r3, [pc, #28]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094d8:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <prvSwitchTimerLists+0xc8>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a04      	ldr	r2, [pc, #16]	@ (80094f0 <prvSwitchTimerLists+0xc4>)
 80094de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094e0:	4a04      	ldr	r2, [pc, #16]	@ (80094f4 <prvSwitchTimerLists+0xc8>)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	6013      	str	r3, [r2, #0]
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20001950 	.word	0x20001950
 80094f4:	20001954 	.word	0x20001954

080094f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094fe:	f000 f98b 	bl	8009818 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009502:	4b15      	ldr	r3, [pc, #84]	@ (8009558 <prvCheckForValidListAndQueue+0x60>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d120      	bne.n	800954c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800950a:	4814      	ldr	r0, [pc, #80]	@ (800955c <prvCheckForValidListAndQueue+0x64>)
 800950c:	f7fd fb38 	bl	8006b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009510:	4813      	ldr	r0, [pc, #76]	@ (8009560 <prvCheckForValidListAndQueue+0x68>)
 8009512:	f7fd fb35 	bl	8006b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009516:	4b13      	ldr	r3, [pc, #76]	@ (8009564 <prvCheckForValidListAndQueue+0x6c>)
 8009518:	4a10      	ldr	r2, [pc, #64]	@ (800955c <prvCheckForValidListAndQueue+0x64>)
 800951a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800951c:	4b12      	ldr	r3, [pc, #72]	@ (8009568 <prvCheckForValidListAndQueue+0x70>)
 800951e:	4a10      	ldr	r2, [pc, #64]	@ (8009560 <prvCheckForValidListAndQueue+0x68>)
 8009520:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009522:	2300      	movs	r3, #0
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	4b11      	ldr	r3, [pc, #68]	@ (800956c <prvCheckForValidListAndQueue+0x74>)
 8009528:	4a11      	ldr	r2, [pc, #68]	@ (8009570 <prvCheckForValidListAndQueue+0x78>)
 800952a:	2110      	movs	r1, #16
 800952c:	200a      	movs	r0, #10
 800952e:	f7fd fc45 	bl	8006dbc <xQueueGenericCreateStatic>
 8009532:	4603      	mov	r3, r0
 8009534:	4a08      	ldr	r2, [pc, #32]	@ (8009558 <prvCheckForValidListAndQueue+0x60>)
 8009536:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009538:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <prvCheckForValidListAndQueue+0x60>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d005      	beq.n	800954c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <prvCheckForValidListAndQueue+0x60>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	490b      	ldr	r1, [pc, #44]	@ (8009574 <prvCheckForValidListAndQueue+0x7c>)
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fa86 	bl	8007a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800954c:	f000 f996 	bl	800987c <vPortExitCritical>
}
 8009550:	bf00      	nop
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20001958 	.word	0x20001958
 800955c:	20001928 	.word	0x20001928
 8009560:	2000193c 	.word	0x2000193c
 8009564:	20001950 	.word	0x20001950
 8009568:	20001954 	.word	0x20001954
 800956c:	20001a04 	.word	0x20001a04
 8009570:	20001964 	.word	0x20001964
 8009574:	0800a0ac 	.word	0x0800a0ac

08009578 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	@ 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009586:	f06f 0301 	mvn.w	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <xTimerPendFunctionCallFromISR+0x3c>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	f107 0114 	add.w	r1, r7, #20
 80095a0:	2300      	movs	r3, #0
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	f7fd fea0 	bl	80072e8 <xQueueGenericSendFromISR>
 80095a8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3728      	adds	r7, #40	@ 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001958 	.word	0x20001958

080095b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3b04      	subs	r3, #4
 80095c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3b04      	subs	r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f023 0201 	bic.w	r2, r3, #1
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b04      	subs	r3, #4
 80095e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095e8:	4a0c      	ldr	r2, [pc, #48]	@ (800961c <pxPortInitialiseStack+0x64>)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b14      	subs	r3, #20
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3b04      	subs	r3, #4
 80095fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f06f 0202 	mvn.w	r2, #2
 8009606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3b20      	subs	r3, #32
 800960c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800960e:	68fb      	ldr	r3, [r7, #12]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	08009621 	.word	0x08009621

08009620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800962a:	4b13      	ldr	r3, [pc, #76]	@ (8009678 <prvTaskExitError+0x58>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d00b      	beq.n	800964c <prvTaskExitError+0x2c>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	60fb      	str	r3, [r7, #12]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <prvTaskExitError+0x28>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	60bb      	str	r3, [r7, #8]
}
 800965e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009660:	bf00      	nop
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0fc      	beq.n	8009662 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000034 	.word	0x20000034
 800967c:	00000000 	.word	0x00000000

08009680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009680:	4b07      	ldr	r3, [pc, #28]	@ (80096a0 <pxCurrentTCBConst2>)
 8009682:	6819      	ldr	r1, [r3, #0]
 8009684:	6808      	ldr	r0, [r1, #0]
 8009686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968a:	f380 8809 	msr	PSP, r0
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f380 8811 	msr	BASEPRI, r0
 800969a:	4770      	bx	lr
 800969c:	f3af 8000 	nop.w

080096a0 <pxCurrentTCBConst2>:
 80096a0:	20001420 	.word	0x20001420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop

080096a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096a8:	4808      	ldr	r0, [pc, #32]	@ (80096cc <prvPortStartFirstTask+0x24>)
 80096aa:	6800      	ldr	r0, [r0, #0]
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	f380 8808 	msr	MSP, r0
 80096b2:	f04f 0000 	mov.w	r0, #0
 80096b6:	f380 8814 	msr	CONTROL, r0
 80096ba:	b662      	cpsie	i
 80096bc:	b661      	cpsie	f
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	df00      	svc	0
 80096c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ca:	bf00      	nop
 80096cc:	e000ed08 	.word	0xe000ed08

080096d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096d6:	4b47      	ldr	r3, [pc, #284]	@ (80097f4 <xPortStartScheduler+0x124>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a47      	ldr	r2, [pc, #284]	@ (80097f8 <xPortStartScheduler+0x128>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d10b      	bne.n	80096f8 <xPortStartScheduler+0x28>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	e7fd      	b.n	80096f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096f8:	4b3e      	ldr	r3, [pc, #248]	@ (80097f4 <xPortStartScheduler+0x124>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a3f      	ldr	r2, [pc, #252]	@ (80097fc <xPortStartScheduler+0x12c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d10b      	bne.n	800971a <xPortStartScheduler+0x4a>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60fb      	str	r3, [r7, #12]
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	e7fd      	b.n	8009716 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800971a:	4b39      	ldr	r3, [pc, #228]	@ (8009800 <xPortStartScheduler+0x130>)
 800971c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	22ff      	movs	r2, #255	@ 0xff
 800972a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4b31      	ldr	r3, [pc, #196]	@ (8009804 <xPortStartScheduler+0x134>)
 8009740:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009742:	4b31      	ldr	r3, [pc, #196]	@ (8009808 <xPortStartScheduler+0x138>)
 8009744:	2207      	movs	r2, #7
 8009746:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009748:	e009      	b.n	800975e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800974a:	4b2f      	ldr	r3, [pc, #188]	@ (8009808 <xPortStartScheduler+0x138>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3b01      	subs	r3, #1
 8009750:	4a2d      	ldr	r2, [pc, #180]	@ (8009808 <xPortStartScheduler+0x138>)
 8009752:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	b2db      	uxtb	r3, r3
 800975c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009766:	2b80      	cmp	r3, #128	@ 0x80
 8009768:	d0ef      	beq.n	800974a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800976a:	4b27      	ldr	r3, [pc, #156]	@ (8009808 <xPortStartScheduler+0x138>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1c3 0307 	rsb	r3, r3, #7
 8009772:	2b04      	cmp	r3, #4
 8009774:	d00b      	beq.n	800978e <xPortStartScheduler+0xbe>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	60bb      	str	r3, [r7, #8]
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	e7fd      	b.n	800978a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800978e:	4b1e      	ldr	r3, [pc, #120]	@ (8009808 <xPortStartScheduler+0x138>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	4a1c      	ldr	r2, [pc, #112]	@ (8009808 <xPortStartScheduler+0x138>)
 8009796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009798:	4b1b      	ldr	r3, [pc, #108]	@ (8009808 <xPortStartScheduler+0x138>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097a0:	4a19      	ldr	r2, [pc, #100]	@ (8009808 <xPortStartScheduler+0x138>)
 80097a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097ac:	4b17      	ldr	r3, [pc, #92]	@ (800980c <xPortStartScheduler+0x13c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a16      	ldr	r2, [pc, #88]	@ (800980c <xPortStartScheduler+0x13c>)
 80097b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097b8:	4b14      	ldr	r3, [pc, #80]	@ (800980c <xPortStartScheduler+0x13c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a13      	ldr	r2, [pc, #76]	@ (800980c <xPortStartScheduler+0x13c>)
 80097be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097c4:	f000 f8da 	bl	800997c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097c8:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <xPortStartScheduler+0x140>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097ce:	f000 f8f9 	bl	80099c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097d2:	4b10      	ldr	r3, [pc, #64]	@ (8009814 <xPortStartScheduler+0x144>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009814 <xPortStartScheduler+0x144>)
 80097d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097de:	f7ff ff63 	bl	80096a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097e2:	f7fe fe35 	bl	8008450 <vTaskSwitchContext>
	prvTaskExitError();
 80097e6:	f7ff ff1b 	bl	8009620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	e000ed00 	.word	0xe000ed00
 80097f8:	410fc271 	.word	0x410fc271
 80097fc:	410fc270 	.word	0x410fc270
 8009800:	e000e400 	.word	0xe000e400
 8009804:	20001a54 	.word	0x20001a54
 8009808:	20001a58 	.word	0x20001a58
 800980c:	e000ed20 	.word	0xe000ed20
 8009810:	20000034 	.word	0x20000034
 8009814:	e000ef34 	.word	0xe000ef34

08009818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009832:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <vPortEnterCritical+0x5c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3301      	adds	r3, #1
 8009838:	4a0e      	ldr	r2, [pc, #56]	@ (8009874 <vPortEnterCritical+0x5c>)
 800983a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800983c:	4b0d      	ldr	r3, [pc, #52]	@ (8009874 <vPortEnterCritical+0x5c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d110      	bne.n	8009866 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009844:	4b0c      	ldr	r3, [pc, #48]	@ (8009878 <vPortEnterCritical+0x60>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00b      	beq.n	8009866 <vPortEnterCritical+0x4e>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	603b      	str	r3, [r7, #0]
}
 8009860:	bf00      	nop
 8009862:	bf00      	nop
 8009864:	e7fd      	b.n	8009862 <vPortEnterCritical+0x4a>
	}
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000034 	.word	0x20000034
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009882:	4b12      	ldr	r3, [pc, #72]	@ (80098cc <vPortExitCritical+0x50>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <vPortExitCritical+0x26>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	607b      	str	r3, [r7, #4]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098a2:	4b0a      	ldr	r3, [pc, #40]	@ (80098cc <vPortExitCritical+0x50>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	4a08      	ldr	r2, [pc, #32]	@ (80098cc <vPortExitCritical+0x50>)
 80098aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098ac:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <vPortExitCritical+0x50>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <vPortExitCritical+0x44>
 80098b4:	2300      	movs	r3, #0
 80098b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f383 8811 	msr	BASEPRI, r3
}
 80098be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20000034 	.word	0x20000034

080098d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098f4:	f380 8811 	msr	BASEPRI, r0
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f7fe fda6 	bl	8008450 <vTaskSwitchContext>
 8009904:	f04f 0000 	mov.w	r0, #0
 8009908:	f380 8811 	msr	BASEPRI, r0
 800990c:	bc09      	pop	{r0, r3}
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	6808      	ldr	r0, [r1, #0]
 8009912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009916:	f01e 0f10 	tst.w	lr, #16
 800991a:	bf08      	it	eq
 800991c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009920:	f380 8809 	msr	PSP, r0
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst>:
 8009930:	20001420 	.word	0x20001420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009952:	f7fe fcc3 	bl	80082dc <xTaskIncrementTick>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800995c:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <xPortSysTickHandler+0x40>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f383 8811 	msr	BASEPRI, r3
}
 800996e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009980:	4b0b      	ldr	r3, [pc, #44]	@ (80099b0 <vPortSetupTimerInterrupt+0x34>)
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009986:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <vPortSetupTimerInterrupt+0x38>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800998c:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <vPortSetupTimerInterrupt+0x3c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <vPortSetupTimerInterrupt+0x40>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	099b      	lsrs	r3, r3, #6
 8009998:	4a09      	ldr	r2, [pc, #36]	@ (80099c0 <vPortSetupTimerInterrupt+0x44>)
 800999a:	3b01      	subs	r3, #1
 800999c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800999e:	4b04      	ldr	r3, [pc, #16]	@ (80099b0 <vPortSetupTimerInterrupt+0x34>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	e000e010 	.word	0xe000e010
 80099b4:	e000e018 	.word	0xe000e018
 80099b8:	20000028 	.word	0x20000028
 80099bc:	10624dd3 	.word	0x10624dd3
 80099c0:	e000e014 	.word	0xe000e014

080099c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099d4 <vPortEnableVFP+0x10>
 80099c8:	6801      	ldr	r1, [r0, #0]
 80099ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099ce:	6001      	str	r1, [r0, #0]
 80099d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099d2:	bf00      	nop
 80099d4:	e000ed88 	.word	0xe000ed88

080099d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099de:	f3ef 8305 	mrs	r3, IPSR
 80099e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d915      	bls.n	8009a16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ea:	4a18      	ldr	r2, [pc, #96]	@ (8009a4c <vPortValidateInterruptPriority+0x74>)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099f4:	4b16      	ldr	r3, [pc, #88]	@ (8009a50 <vPortValidateInterruptPriority+0x78>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	7afa      	ldrb	r2, [r7, #11]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d20b      	bcs.n	8009a16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a16:	4b0f      	ldr	r3, [pc, #60]	@ (8009a54 <vPortValidateInterruptPriority+0x7c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a58 <vPortValidateInterruptPriority+0x80>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d90b      	bls.n	8009a3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	603b      	str	r3, [r7, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	e7fd      	b.n	8009a3a <vPortValidateInterruptPriority+0x62>
	}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	e000e3f0 	.word	0xe000e3f0
 8009a50:	20001a54 	.word	0x20001a54
 8009a54:	e000ed0c 	.word	0xe000ed0c
 8009a58:	20001a58 	.word	0x20001a58

08009a5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	@ 0x28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a68:	f7fe fb7c 	bl	8008164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8009be0 <pvPortMalloc+0x184>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a74:	f000 f924 	bl	8009cc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a78:	4b5a      	ldr	r3, [pc, #360]	@ (8009be4 <pvPortMalloc+0x188>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8095 	bne.w	8009bb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01e      	beq.n	8009aca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4413      	add	r3, r2
 8009a92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d015      	beq.n	8009aca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f023 0307 	bic.w	r3, r3, #7
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <pvPortMalloc+0x6e>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	617b      	str	r3, [r7, #20]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d06f      	beq.n	8009bb0 <pvPortMalloc+0x154>
 8009ad0:	4b45      	ldr	r3, [pc, #276]	@ (8009be8 <pvPortMalloc+0x18c>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d86a      	bhi.n	8009bb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ada:	4b44      	ldr	r3, [pc, #272]	@ (8009bec <pvPortMalloc+0x190>)
 8009adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ade:	4b43      	ldr	r3, [pc, #268]	@ (8009bec <pvPortMalloc+0x190>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae4:	e004      	b.n	8009af0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d903      	bls.n	8009b02 <pvPortMalloc+0xa6>
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f1      	bne.n	8009ae6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b02:	4b37      	ldr	r3, [pc, #220]	@ (8009be0 <pvPortMalloc+0x184>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d051      	beq.n	8009bb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2208      	movs	r2, #8
 8009b12:	4413      	add	r3, r2
 8009b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	2308      	movs	r3, #8
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d920      	bls.n	8009b70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <pvPortMalloc+0xfc>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	613b      	str	r3, [r7, #16]
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b6a:	69b8      	ldr	r0, [r7, #24]
 8009b6c:	f000 f90a 	bl	8009d84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b70:	4b1d      	ldr	r3, [pc, #116]	@ (8009be8 <pvPortMalloc+0x18c>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009be8 <pvPortMalloc+0x18c>)
 8009b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <pvPortMalloc+0x18c>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf0 <pvPortMalloc+0x194>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d203      	bcs.n	8009b92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b8a:	4b17      	ldr	r3, [pc, #92]	@ (8009be8 <pvPortMalloc+0x18c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a18      	ldr	r2, [pc, #96]	@ (8009bf0 <pvPortMalloc+0x194>)
 8009b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	4b13      	ldr	r3, [pc, #76]	@ (8009be4 <pvPortMalloc+0x188>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ba6:	4b13      	ldr	r3, [pc, #76]	@ (8009bf4 <pvPortMalloc+0x198>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3301      	adds	r3, #1
 8009bac:	4a11      	ldr	r2, [pc, #68]	@ (8009bf4 <pvPortMalloc+0x198>)
 8009bae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bb0:	f7fe fae6 	bl	8008180 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00b      	beq.n	8009bd6 <pvPortMalloc+0x17a>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60fb      	str	r3, [r7, #12]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <pvPortMalloc+0x176>
	return pvReturn;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	@ 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20005664 	.word	0x20005664
 8009be4:	20005678 	.word	0x20005678
 8009be8:	20005668 	.word	0x20005668
 8009bec:	2000565c 	.word	0x2000565c
 8009bf0:	2000566c 	.word	0x2000566c
 8009bf4:	20005670 	.word	0x20005670

08009bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d04f      	beq.n	8009caa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c0a:	2308      	movs	r3, #8
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4413      	add	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b25      	ldr	r3, [pc, #148]	@ (8009cb4 <vPortFree+0xbc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4013      	ands	r3, r2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10b      	bne.n	8009c3e <vPortFree+0x46>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60fb      	str	r3, [r7, #12]
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00b      	beq.n	8009c5e <vPortFree+0x66>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60bb      	str	r3, [r7, #8]
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	e7fd      	b.n	8009c5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	4b14      	ldr	r3, [pc, #80]	@ (8009cb4 <vPortFree+0xbc>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01e      	beq.n	8009caa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11a      	bne.n	8009caa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb4 <vPortFree+0xbc>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	43db      	mvns	r3, r3
 8009c7e:	401a      	ands	r2, r3
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c84:	f7fe fa6e 	bl	8008164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <vPortFree+0xc0>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4413      	add	r3, r2
 8009c92:	4a09      	ldr	r2, [pc, #36]	@ (8009cb8 <vPortFree+0xc0>)
 8009c94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c96:	6938      	ldr	r0, [r7, #16]
 8009c98:	f000 f874 	bl	8009d84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c9c:	4b07      	ldr	r3, [pc, #28]	@ (8009cbc <vPortFree+0xc4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	4a06      	ldr	r2, [pc, #24]	@ (8009cbc <vPortFree+0xc4>)
 8009ca4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ca6:	f7fe fa6b 	bl	8008180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009caa:	bf00      	nop
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20005678 	.word	0x20005678
 8009cb8:	20005668 	.word	0x20005668
 8009cbc:	20005674 	.word	0x20005674

08009cc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009cca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ccc:	4b27      	ldr	r3, [pc, #156]	@ (8009d6c <prvHeapInit+0xac>)
 8009cce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00c      	beq.n	8009cf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3307      	adds	r3, #7
 8009cde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f023 0307 	bic.w	r3, r3, #7
 8009ce6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	4a1f      	ldr	r2, [pc, #124]	@ (8009d6c <prvHeapInit+0xac>)
 8009cf0:	4413      	add	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d70 <prvHeapInit+0xb0>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8009d70 <prvHeapInit+0xb0>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4413      	add	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d0c:	2208      	movs	r2, #8
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4a15      	ldr	r2, [pc, #84]	@ (8009d74 <prvHeapInit+0xb4>)
 8009d20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d22:	4b14      	ldr	r3, [pc, #80]	@ (8009d74 <prvHeapInit+0xb4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2200      	movs	r2, #0
 8009d28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d2a:	4b12      	ldr	r3, [pc, #72]	@ (8009d74 <prvHeapInit+0xb4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d40:	4b0c      	ldr	r3, [pc, #48]	@ (8009d74 <prvHeapInit+0xb4>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d78 <prvHeapInit+0xb8>)
 8009d4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4a09      	ldr	r2, [pc, #36]	@ (8009d7c <prvHeapInit+0xbc>)
 8009d56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d58:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <prvHeapInit+0xc0>)
 8009d5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d5e:	601a      	str	r2, [r3, #0]
}
 8009d60:	bf00      	nop
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	20001a5c 	.word	0x20001a5c
 8009d70:	2000565c 	.word	0x2000565c
 8009d74:	20005664 	.word	0x20005664
 8009d78:	2000566c 	.word	0x2000566c
 8009d7c:	20005668 	.word	0x20005668
 8009d80:	20005678 	.word	0x20005678

08009d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d8c:	4b28      	ldr	r3, [pc, #160]	@ (8009e30 <prvInsertBlockIntoFreeList+0xac>)
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	e002      	b.n	8009d98 <prvInsertBlockIntoFreeList+0x14>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d8f7      	bhi.n	8009d92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	4413      	add	r3, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d108      	bne.n	8009dc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	441a      	add	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	441a      	add	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d118      	bne.n	8009e0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4b15      	ldr	r3, [pc, #84]	@ (8009e34 <prvInsertBlockIntoFreeList+0xb0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d00d      	beq.n	8009e02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	e008      	b.n	8009e14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e02:	4b0c      	ldr	r3, [pc, #48]	@ (8009e34 <prvInsertBlockIntoFreeList+0xb0>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	e003      	b.n	8009e14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d002      	beq.n	8009e22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e22:	bf00      	nop
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	2000565c 	.word	0x2000565c
 8009e34:	20005664 	.word	0x20005664

08009e38 <atoi>:
 8009e38:	220a      	movs	r2, #10
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	f000 b87a 	b.w	8009f34 <strtol>

08009e40 <_strtol_l.constprop.0>:
 8009e40:	2b24      	cmp	r3, #36	@ 0x24
 8009e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e46:	4686      	mov	lr, r0
 8009e48:	4690      	mov	r8, r2
 8009e4a:	d801      	bhi.n	8009e50 <_strtol_l.constprop.0+0x10>
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d106      	bne.n	8009e5e <_strtol_l.constprop.0+0x1e>
 8009e50:	f000 f882 	bl	8009f58 <__errno>
 8009e54:	2316      	movs	r3, #22
 8009e56:	6003      	str	r3, [r0, #0]
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5e:	4834      	ldr	r0, [pc, #208]	@ (8009f30 <_strtol_l.constprop.0+0xf0>)
 8009e60:	460d      	mov	r5, r1
 8009e62:	462a      	mov	r2, r5
 8009e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e68:	5d06      	ldrb	r6, [r0, r4]
 8009e6a:	f016 0608 	ands.w	r6, r6, #8
 8009e6e:	d1f8      	bne.n	8009e62 <_strtol_l.constprop.0+0x22>
 8009e70:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e72:	d12d      	bne.n	8009ed0 <_strtol_l.constprop.0+0x90>
 8009e74:	782c      	ldrb	r4, [r5, #0]
 8009e76:	2601      	movs	r6, #1
 8009e78:	1c95      	adds	r5, r2, #2
 8009e7a:	f033 0210 	bics.w	r2, r3, #16
 8009e7e:	d109      	bne.n	8009e94 <_strtol_l.constprop.0+0x54>
 8009e80:	2c30      	cmp	r4, #48	@ 0x30
 8009e82:	d12a      	bne.n	8009eda <_strtol_l.constprop.0+0x9a>
 8009e84:	782a      	ldrb	r2, [r5, #0]
 8009e86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e8a:	2a58      	cmp	r2, #88	@ 0x58
 8009e8c:	d125      	bne.n	8009eda <_strtol_l.constprop.0+0x9a>
 8009e8e:	786c      	ldrb	r4, [r5, #1]
 8009e90:	2310      	movs	r3, #16
 8009e92:	3502      	adds	r5, #2
 8009e94:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	fbbc f9f3 	udiv	r9, ip, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ea8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009eac:	2f09      	cmp	r7, #9
 8009eae:	d81b      	bhi.n	8009ee8 <_strtol_l.constprop.0+0xa8>
 8009eb0:	463c      	mov	r4, r7
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	dd27      	ble.n	8009f06 <_strtol_l.constprop.0+0xc6>
 8009eb6:	1c57      	adds	r7, r2, #1
 8009eb8:	d007      	beq.n	8009eca <_strtol_l.constprop.0+0x8a>
 8009eba:	4581      	cmp	r9, r0
 8009ebc:	d320      	bcc.n	8009f00 <_strtol_l.constprop.0+0xc0>
 8009ebe:	d101      	bne.n	8009ec4 <_strtol_l.constprop.0+0x84>
 8009ec0:	45a2      	cmp	sl, r4
 8009ec2:	db1d      	blt.n	8009f00 <_strtol_l.constprop.0+0xc0>
 8009ec4:	fb00 4003 	mla	r0, r0, r3, r4
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ece:	e7eb      	b.n	8009ea8 <_strtol_l.constprop.0+0x68>
 8009ed0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ed2:	bf04      	itt	eq
 8009ed4:	782c      	ldrbeq	r4, [r5, #0]
 8009ed6:	1c95      	addeq	r5, r2, #2
 8009ed8:	e7cf      	b.n	8009e7a <_strtol_l.constprop.0+0x3a>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1da      	bne.n	8009e94 <_strtol_l.constprop.0+0x54>
 8009ede:	2c30      	cmp	r4, #48	@ 0x30
 8009ee0:	bf0c      	ite	eq
 8009ee2:	2308      	moveq	r3, #8
 8009ee4:	230a      	movne	r3, #10
 8009ee6:	e7d5      	b.n	8009e94 <_strtol_l.constprop.0+0x54>
 8009ee8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009eec:	2f19      	cmp	r7, #25
 8009eee:	d801      	bhi.n	8009ef4 <_strtol_l.constprop.0+0xb4>
 8009ef0:	3c37      	subs	r4, #55	@ 0x37
 8009ef2:	e7de      	b.n	8009eb2 <_strtol_l.constprop.0+0x72>
 8009ef4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ef8:	2f19      	cmp	r7, #25
 8009efa:	d804      	bhi.n	8009f06 <_strtol_l.constprop.0+0xc6>
 8009efc:	3c57      	subs	r4, #87	@ 0x57
 8009efe:	e7d8      	b.n	8009eb2 <_strtol_l.constprop.0+0x72>
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	e7e1      	b.n	8009eca <_strtol_l.constprop.0+0x8a>
 8009f06:	1c53      	adds	r3, r2, #1
 8009f08:	d108      	bne.n	8009f1c <_strtol_l.constprop.0+0xdc>
 8009f0a:	2322      	movs	r3, #34	@ 0x22
 8009f0c:	f8ce 3000 	str.w	r3, [lr]
 8009f10:	4660      	mov	r0, ip
 8009f12:	f1b8 0f00 	cmp.w	r8, #0
 8009f16:	d0a0      	beq.n	8009e5a <_strtol_l.constprop.0+0x1a>
 8009f18:	1e69      	subs	r1, r5, #1
 8009f1a:	e006      	b.n	8009f2a <_strtol_l.constprop.0+0xea>
 8009f1c:	b106      	cbz	r6, 8009f20 <_strtol_l.constprop.0+0xe0>
 8009f1e:	4240      	negs	r0, r0
 8009f20:	f1b8 0f00 	cmp.w	r8, #0
 8009f24:	d099      	beq.n	8009e5a <_strtol_l.constprop.0+0x1a>
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d1f6      	bne.n	8009f18 <_strtol_l.constprop.0+0xd8>
 8009f2a:	f8c8 1000 	str.w	r1, [r8]
 8009f2e:	e794      	b.n	8009e5a <_strtol_l.constprop.0+0x1a>
 8009f30:	0800a26d 	.word	0x0800a26d

08009f34 <strtol>:
 8009f34:	4613      	mov	r3, r2
 8009f36:	460a      	mov	r2, r1
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4802      	ldr	r0, [pc, #8]	@ (8009f44 <strtol+0x10>)
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f7ff bf7f 	b.w	8009e40 <_strtol_l.constprop.0>
 8009f42:	bf00      	nop
 8009f44:	20000038 	.word	0x20000038

08009f48 <memset>:
 8009f48:	4402      	add	r2, r0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <memset+0xa>
 8009f50:	4770      	bx	lr
 8009f52:	f803 1b01 	strb.w	r1, [r3], #1
 8009f56:	e7f9      	b.n	8009f4c <memset+0x4>

08009f58 <__errno>:
 8009f58:	4b01      	ldr	r3, [pc, #4]	@ (8009f60 <__errno+0x8>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000038 	.word	0x20000038

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4d0d      	ldr	r5, [pc, #52]	@ (8009f9c <__libc_init_array+0x38>)
 8009f68:	4c0d      	ldr	r4, [pc, #52]	@ (8009fa0 <__libc_init_array+0x3c>)
 8009f6a:	1b64      	subs	r4, r4, r5
 8009f6c:	10a4      	asrs	r4, r4, #2
 8009f6e:	2600      	movs	r6, #0
 8009f70:	42a6      	cmp	r6, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	4d0b      	ldr	r5, [pc, #44]	@ (8009fa4 <__libc_init_array+0x40>)
 8009f76:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa8 <__libc_init_array+0x44>)
 8009f78:	f000 f826 	bl	8009fc8 <_init>
 8009f7c:	1b64      	subs	r4, r4, r5
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	2600      	movs	r6, #0
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8c:	4798      	blx	r3
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f96:	4798      	blx	r3
 8009f98:	3601      	adds	r6, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800a378 	.word	0x0800a378
 8009fa0:	0800a378 	.word	0x0800a378
 8009fa4:	0800a378 	.word	0x0800a378
 8009fa8:	0800a37c 	.word	0x0800a37c

08009fac <memcpy>:
 8009fac:	440a      	add	r2, r1
 8009fae:	4291      	cmp	r1, r2
 8009fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fb4:	d100      	bne.n	8009fb8 <memcpy+0xc>
 8009fb6:	4770      	bx	lr
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	d1f9      	bne.n	8009fba <memcpy+0xe>
 8009fc6:	bd10      	pop	{r4, pc}

08009fc8 <_init>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	bf00      	nop
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_fini>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr
