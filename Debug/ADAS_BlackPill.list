
ADAS_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0001a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a0c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056e4  20000088  0800a14c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000576c  0800a14c  0002576c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd9f  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d36  00000000  00000000  0003be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  0003fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a6  00000000  00000000  00041520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192f2  00000000  00000000  000428c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c254  00000000  00000000  0005bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba0f  00000000  00000000  00077e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cb0  00000000  00000000  0011381c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d0c 	.word	0x08009d0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009d0c 	.word	0x08009d0c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050c:	f001 fe02 	bl	8002114 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000510:	f000 f8b0 	bl	8000674 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000514:	f000 f9e6 	bl	80008e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000518:	f000 f9c4 	bl	80008a4 <MX_DMA_Init>
	MX_SPI1_Init();
 800051c:	f000 f912 	bl	8000744 <MX_SPI1_Init>
	MX_TIM3_Init();
 8000520:	f000 f946 	bl	80007b0 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000524:	f000 f994 	bl	8000850 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000528:	f005 fcc6 	bl	8005eb8 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 800052c:	482f      	ldr	r0, [pc, #188]	; (80005ec <main+0xe4>)
 800052e:	f005 fed1 	bl	80062d4 <osMutexNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a2e      	ldr	r2, [pc, #184]	; (80005f0 <main+0xe8>)
 8000536:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <main+0xec>)
 800053a:	2100      	movs	r1, #0
 800053c:	482e      	ldr	r0, [pc, #184]	; (80005f8 <main+0xf0>)
 800053e:	f005 fd05 	bl	8005f4c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <main+0xf4>)
 8000546:	6013      	str	r3, [r2, #0]

	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 8000548:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <main+0xf8>)
 800054a:	2100      	movs	r1, #0
 800054c:	482d      	ldr	r0, [pc, #180]	; (8000604 <main+0xfc>)
 800054e:	f005 fcfd 	bl	8005f4c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a2c      	ldr	r2, [pc, #176]	; (8000608 <main+0x100>)
 8000556:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 8000558:	4a2c      	ldr	r2, [pc, #176]	; (800060c <main+0x104>)
 800055a:	2100      	movs	r1, #0
 800055c:	482c      	ldr	r0, [pc, #176]	; (8000610 <main+0x108>)
 800055e:	f005 fcf5 	bl	8005f4c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <main+0x10c>)
 8000566:	6013      	str	r3, [r2, #0]

	/* creation of Local_Task */
	Local_TaskHandle = osThreadNew(Localization, NULL, &Local_Task_attributes);
 8000568:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <main+0x110>)
 800056a:	2100      	movs	r1, #0
 800056c:	482b      	ldr	r0, [pc, #172]	; (800061c <main+0x114>)
 800056e:	f005 fced 	bl	8005f4c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a2a      	ldr	r2, [pc, #168]	; (8000620 <main+0x118>)
 8000576:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Check_Algorithm, NULL, &Check_Algo_attributes);
 8000578:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <main+0x11c>)
 800057a:	2100      	movs	r1, #0
 800057c:	482a      	ldr	r0, [pc, #168]	; (8000628 <main+0x120>)
 800057e:	f005 fce5 	bl	8005f4c <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a29      	ldr	r2, [pc, #164]	; (800062c <main+0x124>)
 8000586:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Algorithm, NULL, &BSW_Algo_attributes);
 8000588:	4a29      	ldr	r2, [pc, #164]	; (8000630 <main+0x128>)
 800058a:	2100      	movs	r1, #0
 800058c:	4829      	ldr	r0, [pc, #164]	; (8000634 <main+0x12c>)
 800058e:	f005 fcdd 	bl	8005f4c <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <main+0x130>)
 8000596:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Algorithm, NULL, &DPW_Algo_attributes);
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <main+0x134>)
 800059a:	2100      	movs	r1, #0
 800059c:	4828      	ldr	r0, [pc, #160]	; (8000640 <main+0x138>)
 800059e:	f005 fcd5 	bl	8005f4c <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <main+0x13c>)
 80005a6:	6013      	str	r3, [r2, #0]

	/* creation of Receiveing */
	ReceiveingHandle = osThreadNew(Wireless_Receiving, NULL, &Receiveing_attributes);
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <main+0x140>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4827      	ldr	r0, [pc, #156]	; (800064c <main+0x144>)
 80005ae:	f005 fccd 	bl	8005f4c <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <main+0x148>)
 80005b6:	6013      	str	r3, [r2, #0]

	/* creation of FCW_Algo */
	FCW_AlgoHandle = osThreadNew(FCW_Algorithm, NULL, &FCW_Algo_attributes);
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <main+0x14c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <main+0x150>)
 80005be:	f005 fcc5 	bl	8005f4c <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <main+0x154>)
 80005c6:	6013      	str	r3, [r2, #0]

	/* creation of EEBL_Algo */
	EEBL_AlgoHandle = osThreadNew(EEBL_Algorithm, NULL, &EEBL_Algo_attributes);
 80005c8:	4a25      	ldr	r2, [pc, #148]	; (8000660 <main+0x158>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4825      	ldr	r0, [pc, #148]	; (8000664 <main+0x15c>)
 80005ce:	f005 fcbd 	bl	8005f4c <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <main+0x160>)
 80005d6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80005d8:	4824      	ldr	r0, [pc, #144]	; (800066c <main+0x164>)
 80005da:	f005 fd91 	bl	8006100 <osEventFlagsNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <main+0x168>)
 80005e2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005e4:	f005 fc8c 	bl	8005f00 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0xe0>
 80005ea:	bf00      	nop
 80005ec:	08009f60 	.word	0x08009f60
 80005f0:	20000214 	.word	0x20000214
 80005f4:	08009df8 	.word	0x08009df8
 80005f8:	08000aa5 	.word	0x08000aa5
 80005fc:	200001ec 	.word	0x200001ec
 8000600:	08009e1c 	.word	0x08009e1c
 8000604:	08000ab5 	.word	0x08000ab5
 8000608:	200001f0 	.word	0x200001f0
 800060c:	08009e40 	.word	0x08009e40
 8000610:	08000b65 	.word	0x08000b65
 8000614:	200001f4 	.word	0x200001f4
 8000618:	08009e64 	.word	0x08009e64
 800061c:	08000bd9 	.word	0x08000bd9
 8000620:	200001f8 	.word	0x200001f8
 8000624:	08009e88 	.word	0x08009e88
 8000628:	08000c85 	.word	0x08000c85
 800062c:	200001fc 	.word	0x200001fc
 8000630:	08009eac 	.word	0x08009eac
 8000634:	08000cf5 	.word	0x08000cf5
 8000638:	20000200 	.word	0x20000200
 800063c:	08009ed0 	.word	0x08009ed0
 8000640:	08000db5 	.word	0x08000db5
 8000644:	20000204 	.word	0x20000204
 8000648:	08009ef4 	.word	0x08009ef4
 800064c:	08000e79 	.word	0x08000e79
 8000650:	20000208 	.word	0x20000208
 8000654:	08009f18 	.word	0x08009f18
 8000658:	08001085 	.word	0x08001085
 800065c:	2000020c 	.word	0x2000020c
 8000660:	08009f3c 	.word	0x08009f3c
 8000664:	080010a5 	.word	0x080010a5
 8000668:	20000210 	.word	0x20000210
 800066c:	08009f70 	.word	0x08009f70
 8000670:	20000218 	.word	0x20000218

08000674 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fb02 	bl	8009c8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <SystemClock_Config+0xc8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xcc>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <SystemClock_Config+0xcc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80006e4:	2319      	movs	r3, #25
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fc0b 	bl	8002f14 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000704:	f000 fcf0 	bl	80010e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fe6d 	bl	8003404 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000730:	f000 fcda 	bl	80010e8 <Error_Handler>
	}
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2220      	movs	r2, #32
 800077a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 f847 	bl	8003828 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007a0:	f000 fca2 	bl	80010e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM3_Init+0x98>)
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_TIM3_Init+0x9c>)
 80007d2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_TIM3_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM3_Init+0x98>)
 80007e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_TIM3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_TIM3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f4:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_TIM3_Init+0x98>)
 80007f6:	f003 fded 	bl	80043d4 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000800:	f000 fc72 	bl	80010e8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_TIM3_Init+0x98>)
 8000814:	f003 ff80 	bl	8004718 <HAL_TIM_SlaveConfigSynchro>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 800081e:	f000 fc63 	bl	80010e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM3_Init+0x98>)
 8000830:	f004 f978 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 800083a:	f000 fc55 	bl	80010e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000fc 	.word	0x200000fc
 800084c:	40000400 	.word	0x40000400

08000850 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f004 f9ce 	bl	8004c28 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000892:	f000 fc29 	bl	80010e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000144 	.word	0x20000144
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	203a      	movs	r0, #58	; 0x3a
 80008cc:	f001 fd40 	bl	8002350 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d0:	203a      	movs	r0, #58	; 0x3a
 80008d2:	f001 fd59 	bl	8002388 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0xa8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_GPIO_Init+0xa8>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xa8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_GPIO_Init+0xa8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_GPIO_Init+0xa8>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_GPIO_Init+0xa8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2118      	movs	r1, #24
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <MX_GPIO_Init+0xac>)
 8000938:	f002 faba 	bl	8002eb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800093c:	2304      	movs	r3, #4
 800093e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000944:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_GPIO_Init+0xac>)
 8000952:	f002 f929 	bl	8002ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000956:	2318      	movs	r3, #24
 8000958:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_GPIO_Init+0xac>)
 800096e:	f002 f91b 	bl	8002ba8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2008      	movs	r0, #8
 8000978:	f001 fcea 	bl	8002350 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800097c:	2008      	movs	r0, #8
 800097e:	f001 fd03 	bl	8002388 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxCpltCallback+0x1c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fbe0 	bl	8006180 <osEventFlagsSet>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000218 	.word	0x20000218

080009cc <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 80009d4:	2300      	movs	r3, #0
 80009d6:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	82bb      	strh	r3, [r7, #20]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	82fb      	strh	r3, [r7, #22]
 80009e0:	e04f      	b.n	8000a82 <_CalcAvgDistance+0xb6>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 80009e6:	8afb      	ldrh	r3, [r7, #22]
 80009e8:	461a      	mov	r2, r3
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	461a      	mov	r2, r3
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3b03      	subs	r3, #3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	461a      	mov	r2, r3
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	82bb      	strh	r3, [r7, #20]
 8000a14:	e020      	b.n	8000a58 <_CalcAvgDistance+0x8c>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000a16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <_CalcAvgDistance+0xcc>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	441a      	add	r2, r3
 8000a26:	1211      	asrs	r1, r2, #8
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	1a8a      	subs	r2, r1, r2
 8000a2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000a30:	fb01 f202 	mul.w	r2, r1, r2
 8000a34:	1a9a      	subs	r2, r3, r2
 8000a36:	4613      	mov	r3, r2
 8000a38:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000a3a:	897b      	ldrh	r3, [r7, #10]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4413      	add	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000a4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	82bb      	strh	r3, [r7, #20]
 8000a58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a5c:	89bb      	ldrh	r3, [r7, #12]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	ddd9      	ble.n	8000a16 <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <_CalcAvgDistance+0xd0>)
 8000a66:	fba3 1302 	umull	r1, r3, r3, r2
 8000a6a:	1ad2      	subs	r2, r2, r3
 8000a6c:	0852      	lsrs	r2, r2, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	089a      	lsrs	r2, r3, #2
 8000a72:	8afb      	ldrh	r3, [r7, #22]
 8000a74:	b291      	uxth	r1, r2
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <_CalcAvgDistance+0xd4>)
 8000a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	82fb      	strh	r3, [r7, #22]
 8000a82:	8afb      	ldrh	r3, [r7, #22]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d9ac      	bls.n	80009e2 <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_CalcAvgDistance+0xd4>)
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	b60b60b7 	.word	0xb60b60b7
 8000a9c:	24924925 	.word	0x24924925
 8000aa0:	20000c00 	.word	0x20000c00

08000aa4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f005 fb0c 	bl	80060ca <osDelay>
 8000ab2:	e7fb      	b.n	8000aac <StartDefaultTask+0x8>

08000ab4 <Init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b095      	sub	sp, #84	; 0x54
 8000ab8:	af12      	add	r7, sp, #72	; 0x48
 8000aba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Init_Task */
	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 8000abc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000ac0:	4921      	ldr	r1, [pc, #132]	; (8000b48 <Init_Task+0x94>)
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <Init_Task+0x98>)
 8000ac4:	f004 f900 	bl	8004cc8 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <Init_Task+0x9c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 fc85 	bl	80063e0 <osMutexAcquire>

	NRF24_begin(hspi1);
 8000ad6:	4c1f      	ldr	r4, [pc, #124]	; (8000b54 <Init_Task+0xa0>)
 8000ad8:	4668      	mov	r0, sp
 8000ada:	f104 0310 	add.w	r3, r4, #16
 8000ade:	2248      	movs	r2, #72	; 0x48
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f009 f905 	bl	8009cf0 <memcpy>
 8000ae6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aea:	f000 fe8d 	bl	8001808 <NRF24_begin>
	NRF24_setAutoAck(true);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f001 f952 	bl	8001d98 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f001 f8ab 	bl	8001c50 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000afa:	f001 f903 	bl	8001d04 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000afe:	f001 f8d3 	bl	8001ca8 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <Init_Task+0xa4>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f001 f823 	bl	8001b54 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <Init_Task+0xa4>)
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	4610      	mov	r0, r2
 8000b16:	4619      	mov	r1, r3
 8000b18:	f000 fff8 	bl	8001b0c <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	490f      	ldr	r1, [pc, #60]	; (8000b5c <Init_Task+0xa8>)
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 fa78 	bl	8002016 <NRF24_writeAckPayload>
	NRF24_startListening();
 8000b26:	f000 ff4b 	bl	80019c0 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <Init_Task+0x9c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fca1 	bl	8006476 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Init_Task+0xac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fa99 	bl	8006070 <osThreadTerminate>

	/* USER CODE END Init_Task */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000021c 	.word	0x2000021c
 8000b4c:	20000144 	.word	0x20000144
 8000b50:	20000214 	.word	0x20000214
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200001f0 	.word	0x200001f0

08000b64 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <Distance_Calc+0x64>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	f005 fb46 	bl	8006208 <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81fb      	strh	r3, [r7, #14]
 8000b80:	e011      	b.n	8000ba6 <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <Distance_Calc+0x68>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 ffec 	bl	8009b6c <atoi>
 8000b94:	4602      	mov	r2, r0
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	b291      	uxth	r1, r2
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <Distance_Calc+0x6c>)
 8000b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	81fb      	strh	r3, [r7, #14]
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000bac:	d3e9      	bcc.n	8000b82 <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <Distance_Calc+0x6c>)
 8000bb0:	f7ff ff0c 	bl	80009cc <_CalcAvgDistance>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <Distance_Calc+0x70>)
 8000bb8:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <Distance_Calc+0x64>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f005 fadd 	bl	8006180 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000bc6:	e7d1      	b.n	8000b6c <Distance_Calc+0x8>
 8000bc8:	20000218 	.word	0x20000218
 8000bcc:	2000021c 	.word	0x2000021c
 8000bd0:	20000924 	.word	0x20000924
 8000bd4:	20000bf8 	.word	0x20000bf8

08000bd8 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000be0:	2311      	movs	r3, #17
 8000be2:	733b      	strb	r3, [r7, #12]
 8000be4:	2301      	movs	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <Localization+0xa4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <Localization+0xa4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <Localization+0xa4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3304      	adds	r3, #4
 8000c04:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <Localization+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3306      	adds	r3, #6
 8000c10:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <Localization+0xa4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <Localization+0xa4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	330a      	adds	r3, #10
 8000c28:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <Localization+0xa4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	330c      	adds	r3, #12
 8000c34:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <Localization+0xa4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	330e      	adds	r3, #14
 8000c40:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <Localization+0xa8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f005 fbc6 	bl	80063e0 <osMutexAcquire>

		NRF24_stopListening();
 8000c54:	f000 feda 	bl	8001a0c <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	210a      	movs	r1, #10
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fee0 	bl	8001a24 <NRF24_write>
		NRF24_startListening();
 8000c64:	f000 feac 	bl	80019c0 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <Localization+0xa8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fc02 	bl	8006476 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(3000);
 8000c72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c76:	f005 fa28 	bl	80060ca <osDelay>
	{
 8000c7a:	e7b1      	b.n	8000be0 <Localization+0x8>
 8000c7c:	20000bf8 	.word	0x20000bf8
 8000c80:	20000214 	.word	0x20000214

08000c84 <Check_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Check_Algorithm */
void Check_Algorithm(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <Check_Algorithm+0x60>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	f005 fab6 	bl	8006208 <osEventFlagsWait>

		/* Checking on Front Threshold */
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <Check_Algorithm+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d8f2      	bhi.n	8000c8c <Check_Algorithm+0x8>
		{
			/* Frame to Sent to the Front Car to Ask For It's Direction */
			uint8_t ASK_Direction_Frame[3] ={CAR_ID,
 8000ca6:	2311      	movs	r3, #17
 8000ca8:	733b      	strb	r3, [r7, #12]
 8000caa:	2302      	movs	r3, #2
 8000cac:	737b      	strb	r3, [r7, #13]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <Check_Algorithm+0x68>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	73bb      	strb	r3, [r7, #14]
					ASK_DIRECTION_OPERATION_ID,Front_Car_ID};

			/* Protecting Shared Resource -> NRF Module
			 * */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <Check_Algorithm+0x6c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fb8f 	bl	80063e0 <osMutexAcquire>

			NRF24_stopListening();
 8000cc2:	f000 fea3 	bl	8001a0c <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2103      	movs	r1, #3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fea9 	bl	8001a24 <NRF24_write>
			NRF24_startListening();
 8000cd2:	f000 fe75 	bl	80019c0 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <Check_Algorithm+0x6c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f005 fbcb 	bl	8006476 <osMutexRelease>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000ce0:	e7d4      	b.n	8000c8c <Check_Algorithm+0x8>
 8000ce2:	bf00      	nop
 8000ce4:	20000218 	.word	0x20000218
 8000ce8:	20000bf8 	.word	0x20000bf8
 8000cec:	20000bfc 	.word	0x20000bfc
 8000cf0:	20000214 	.word	0x20000214

08000cf4 <BSW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Algorithm */
void BSW_Algorithm(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Algorithm */
	bool Local_BSWLeft = false ;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <BSW_Algorithm+0xb8>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	f005 fa76 	bl	8006208 <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000d24:	2387      	movs	r3, #135	; 0x87
 8000d26:	737b      	strb	r3, [r7, #13]
 8000d28:	e012      	b.n	8000d50 <BSW_Algorithm+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d009      	beq.n	8000d4a <BSW_Algorithm+0x56>
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d42:	d802      	bhi.n	8000d4a <BSW_Algorithm+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
				break;
 8000d48:	e005      	b.n	8000d56 <BSW_Algorithm+0x62>
				Angle_Iterator--)
 8000d4a:	7b7b      	ldrb	r3, [r7, #13]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8000d50:	7b7b      	ldrb	r3, [r7, #13]
 8000d52:	2b59      	cmp	r3, #89	; 0x59
 8000d54:	d8e9      	bhi.n	8000d2a <BSW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8000d56:	23e1      	movs	r3, #225	; 0xe1
 8000d58:	817b      	strh	r3, [r7, #10]
 8000d5a:	e012      	b.n	8000d82 <BSW_Algorithm+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8000d5c:	897b      	ldrh	r3, [r7, #10]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <BSW_Algorithm+0x88>
 8000d68:	897b      	ldrh	r3, [r7, #10]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <BSW_Algorithm+0xbc>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d74:	d802      	bhi.n	8000d7c <BSW_Algorithm+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73bb      	strb	r3, [r7, #14]
				break;
 8000d7a:	e006      	b.n	8000d8a <BSW_Algorithm+0x96>
				Angle_Iterator++)
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d88:	d9e8      	bls.n	8000d5c <BSW_Algorithm+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <BSW_Algorithm+0xa6>
 8000d90:	7a7b      	ldrb	r3, [r7, #9]
 8000d92:	f083 0301 	eor.w	r3, r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0b5      	beq.n	8000d0c <BSW_Algorithm+0x18>
 8000da0:	7a3b      	ldrb	r3, [r7, #8]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000daa:	e7af      	b.n	8000d0c <BSW_Algorithm+0x18>
 8000dac:	20000218 	.word	0x20000218
 8000db0:	20000924 	.word	0x20000924

08000db4 <DPW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Algorithm */
void DPW_Algorithm(void *argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Algorithm */
	bool Local_DPWLeft = false ;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
	bool Local_DPWRight= false ;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
	bool Local_DPWL_LastState = false ;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	727b      	strb	r3, [r7, #9]
	bool Local_DPWR_LastState = false ;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	723b      	strb	r3, [r7, #8]


	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	727b      	strb	r3, [r7, #9]
		Local_DPWR_LastState = Local_DPWRight;
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	723b      	strb	r3, [r7, #8]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <DPW_Algorithm+0xbc>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	f005 fa12 	bl	8006208 <osEventFlagsWait>

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 8000de4:	232d      	movs	r3, #45	; 0x2d
 8000de6:	737b      	strb	r3, [r7, #13]
 8000de8:	e012      	b.n	8000e10 <DPW_Algorithm+0x5c>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <DPW_Algorithm+0x56>
 8000df6:	7b7b      	ldrb	r3, [r7, #13]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e02:	d802      	bhi.n	8000e0a <DPW_Algorithm+0x56>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWLeft = true;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
				break;
 8000e08:	e005      	b.n	8000e16 <DPW_Algorithm+0x62>
				Angle_Iterator--)
 8000e0a:	7b7b      	ldrb	r3, [r7, #13]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	2b0e      	cmp	r3, #14
 8000e14:	d8e9      	bhi.n	8000dea <DPW_Algorithm+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8000e16:	f240 133b 	movw	r3, #315	; 0x13b
 8000e1a:	817b      	strh	r3, [r7, #10]
 8000e1c:	e012      	b.n	8000e44 <DPW_Algorithm+0x90>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8000e1e:	897b      	ldrh	r3, [r7, #10]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d009      	beq.n	8000e3e <DPW_Algorithm+0x8a>
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <DPW_Algorithm+0xc0>)
 8000e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e36:	d802      	bhi.n	8000e3e <DPW_Algorithm+0x8a>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWRight = true;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73bb      	strb	r3, [r7, #14]
				break;
 8000e3c:	e006      	b.n	8000e4c <DPW_Algorithm+0x98>
				Angle_Iterator++)
 8000e3e:	897b      	ldrh	r3, [r7, #10]
 8000e40:	3301      	adds	r3, #1
 8000e42:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8000e4a:	d3e8      	bcc.n	8000e1e <DPW_Algorithm+0x6a>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <DPW_Algorithm+0xa8>
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0b4      	beq.n	8000dcc <DPW_Algorithm+0x18>
 8000e62:	7a3b      	ldrb	r3, [r7, #8]
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
		Local_DPWL_LastState = Local_DPWLeft ;
 8000e6c:	e7ae      	b.n	8000dcc <DPW_Algorithm+0x18>
 8000e6e:	bf00      	nop
 8000e70:	20000218 	.word	0x20000218
 8000e74:	20000924 	.word	0x20000924

08000e78 <Wireless_Receiving>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Wireless_Receiving */
void Wireless_Receiving(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Wireless_Receiving */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 8000e80:	f000 fe1c 	bl	8001abc <NRF24_available>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80eb 	beq.w	8001062 <Wireless_Receiving+0x1ea>
			uint8_t Received_Data[32] = {0};
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000ea4:	4b71      	ldr	r3, [pc, #452]	; (800106c <Wireless_Receiving+0x1f4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fa97 	bl	80063e0 <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fe07 	bl	8001acc <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	; (800106c <Wireless_Receiving+0x1f4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 fad7 	bl	8006476 <osMutexRelease>

			switch(Received_Data[1])
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d002      	beq.n	8000ed4 <Wireless_Receiving+0x5c>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d06c      	beq.n	8000fac <Wireless_Receiving+0x134>
					/*
					 * Stop immediately
					 */
				}
			default:
				break;
 8000ed2:	e0c5      	b.n	8001060 <Wireless_Receiving+0x1e8>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000ed4:	7cbb      	ldrb	r3, [r7, #18]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b65      	ldr	r3, [pc, #404]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	db07      	blt.n	8000ef4 <Wireless_Receiving+0x7c>
 8000ee4:	7cbb      	ldrb	r3, [r7, #18]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b61      	ldr	r3, [pc, #388]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	3307      	adds	r3, #7
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dd11      	ble.n	8000f18 <Wireless_Receiving+0xa0>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000ef4:	7cfb      	ldrb	r3, [r7, #19]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000f02:	429a      	cmp	r2, r3
 8000f04:	db0a      	blt.n	8000f1c <Wireless_Receiving+0xa4>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000f06:	7c7b      	ldrb	r3, [r7, #17]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	330e      	adds	r3, #14
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	3307      	adds	r3, #7
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dc01      	bgt.n	8000f1c <Wireless_Receiving+0xa4>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <Wireless_Receiving+0xa6>
 8000f1c:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000f1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000f22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3308      	adds	r3, #8
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	db08      	blt.n	8000f52 <Wireless_Receiving+0xda>
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3308      	adds	r3, #8
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3307      	adds	r3, #7
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dd11      	ble.n	8000f76 <Wireless_Receiving+0xfe>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000f52:	7cfb      	ldrb	r3, [r7, #19]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000f60:	429a      	cmp	r2, r3
 8000f62:	db0a      	blt.n	8000f7a <Wireless_Receiving+0x102>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000f64:	7c7b      	ldrb	r3, [r7, #17]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <Wireless_Receiving+0x1f8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	330e      	adds	r3, #14
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	3307      	adds	r3, #7
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dc01      	bgt.n	8000f7a <Wireless_Receiving+0x102>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <Wireless_Receiving+0x104>
 8000f7a:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(Is_Front){
 8000f8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <Wireless_Receiving+0x124>
					Front_Car_ID = Received_Data[0];
 8000f94:	7b3a      	ldrb	r2, [r7, #12]
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <Wireless_Receiving+0x1fc>)
 8000f98:	701a      	strb	r2, [r3, #0]
				break;
 8000f9a:	e05f      	b.n	800105c <Wireless_Receiving+0x1e4>
				else if(Is_Back){
 8000f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d05b      	beq.n	800105c <Wireless_Receiving+0x1e4>
					Back_Car_ID = Received_Data[0];
 8000fa4:	7b3a      	ldrb	r2, [r7, #12]
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <Wireless_Receiving+0x200>)
 8000fa8:	701a      	strb	r2, [r3, #0]
				break;
 8000faa:	e057      	b.n	800105c <Wireless_Receiving+0x1e4>
				bool TX_Flag =0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				bool RX_Flag =0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				bool TX_Fail = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b11      	cmp	r3, #17
 8000fc2:	d12c      	bne.n	800101e <Wireless_Receiving+0x1a6>
 8000fc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d028      	beq.n	800101e <Wireless_Receiving+0x1a6>
					uint8_t ASK_Direction_Frame[4] ={0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[0] = CAR_ID ;
 8000fd0:	2311      	movs	r3, #17
 8000fd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ASK_Direction_Frame[2] = Front_Car_ID ;
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <Wireless_Receiving+0x1fc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					ASK_Direction_Frame[3] = My_Direction ;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <Wireless_Receiving+0x204>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <Wireless_Receiving+0x1f4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 f9f3 	bl	80063e0 <osMutexAcquire>
					NRF24_stopListening();
 8000ffa:	f000 fd07 	bl	8001a0c <NRF24_stopListening>
					NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	2204      	movs	r2, #4
 8001004:	4619      	mov	r1, r3
 8001006:	2001      	movs	r0, #1
 8001008:	f001 f805 	bl	8002016 <NRF24_writeAckPayload>
					NRF24_startListening();
 800100c:	f000 fcd8 	bl	80019c0 <NRF24_startListening>
					osMutexRelease(NRF_MutexHandle) ;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <Wireless_Receiving+0x1f4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fa2e 	bl	8006476 <osMutexRelease>
				{
 800101a:	bf00      	nop
				break;
 800101c:	e020      	b.n	8001060 <Wireless_Receiving+0x1e8>
				else if ((CAR_ID == Received_Data[2] && TX_Flag))
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	2b11      	cmp	r3, #17
 8001022:	d11d      	bne.n	8001060 <Wireless_Receiving+0x1e8>
 8001024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001028:	2b00      	cmp	r3, #0
 800102a:	d019      	beq.n	8001060 <Wireless_Receiving+0x1e8>
					if (	Received_Data[3]==	My_Direction)
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <Wireless_Receiving+0x204>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d106      	bne.n	8001044 <Wireless_Receiving+0x1cc>
						osEventFlagsSet(EventGroupHandle, EEBL_ASSERTED ) ;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <Wireless_Receiving+0x208>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2102      	movs	r1, #2
 800103c:	4618      	mov	r0, r3
 800103e:	f005 f89f 	bl	8006180 <osEventFlagsSet>
				break;
 8001042:	e00d      	b.n	8001060 <Wireless_Receiving+0x1e8>
					else if(Received_Data[3]	!=	My_Direction)
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <Wireless_Receiving+0x204>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d008      	beq.n	8001060 <Wireless_Receiving+0x1e8>
						osEventFlagsSet(EventGroupHandle, FCW_ASSERTED ) ;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <Wireless_Receiving+0x208>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2103      	movs	r1, #3
 8001054:	4618      	mov	r0, r3
 8001056:	f005 f893 	bl	8006180 <osEventFlagsSet>
				break;
 800105a:	e001      	b.n	8001060 <Wireless_Receiving+0x1e8>
				break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <Wireless_Receiving+0x1ea>
				break;
 8001060:	bf00      	nop
			}

		}
		osDelay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 f831 	bl	80060ca <osDelay>
		if(NRF24_available()){
 8001068:	e70a      	b.n	8000e80 <Wireless_Receiving+0x8>
 800106a:	bf00      	nop
 800106c:	20000214 	.word	0x20000214
 8001070:	20000bf8 	.word	0x20000bf8
 8001074:	20000bfc 	.word	0x20000bfc
 8001078:	20000bfd 	.word	0x20000bfd
 800107c:	20000bf4 	.word	0x20000bf4
 8001080:	20000218 	.word	0x20000218

08001084 <FCW_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Algorithm */
void FCW_Algorithm(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <FCW_Algorithm+0x1c>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2200      	movs	r2, #0
 8001096:	2103      	movs	r1, #3
 8001098:	f005 f8b6 	bl	8006208 <osEventFlagsWait>
 800109c:	e7f6      	b.n	800108c <FCW_Algorithm+0x8>
 800109e:	bf00      	nop
 80010a0:	20000218 	.word	0x20000218

080010a4 <EEBL_Algorithm>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Algorithm */
void EEBL_Algorithm(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Algorithm */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <EEBL_Algorithm+0x1c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	f005 f8a6 	bl	8006208 <osEventFlagsWait>
 80010bc:	e7f6      	b.n	80010ac <EEBL_Algorithm+0x8>
 80010be:	bf00      	nop
 80010c0:	20000218 	.word	0x20000218

080010c4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80010d6:	f001 f83f 	bl	8002158 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40000800 	.word	0x40000800

080010e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_MspInit+0x54>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_MspInit+0x54>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_MspInit+0x54>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_MspInit+0x54>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_MspInit+0x54>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_MspInit+0x54>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	f06f 0001 	mvn.w	r0, #1
 800113a:	f001 f909 	bl	8002350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12b      	bne.n	80011c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2305      	movs	r3, #5
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c2:	f001 fcf1 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_TIM_Base_MspInit+0x48>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d115      	bne.n	800121a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_TIM_Base_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_TIM_Base_MspInit+0x4c>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_Base_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	201d      	movs	r0, #29
 8001210:	f001 f89e 	bl	8002350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f001 f8b7 	bl	8002388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40000400 	.word	0x40000400
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a35      	ldr	r2, [pc, #212]	; (8001320 <HAL_UART_MspInit+0xf4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d163      	bne.n	8001316 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_UART_MspInit+0xf8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_UART_MspInit+0xf8>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_UART_MspInit+0xf8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_UART_MspInit+0xf8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a2c      	ldr	r2, [pc, #176]	; (8001324 <HAL_UART_MspInit+0xf8>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_UART_MspInit+0xf8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001286:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001298:	2307      	movs	r3, #7
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4821      	ldr	r0, [pc, #132]	; (8001328 <HAL_UART_MspInit+0xfc>)
 80012a4:	f001 fc80 	bl	8002ba8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012a8:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_UART_MspInit+0x100>)
 80012aa:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_UART_MspInit+0x104>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_UART_MspInit+0x100>)
 80012b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_UART_MspInit+0x100>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x100>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0x100>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x100>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_UART_MspInit+0x100>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UART_MspInit+0x100>)
 80012d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_UART_MspInit+0x100>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0x100>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_UART_MspInit+0x100>)
 80012ec:	f001 f85a 	bl	80023a4 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012f6:	f7ff fef7 	bl	80010e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_UART_MspInit+0x100>)
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_UART_MspInit+0x100>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	2025      	movs	r0, #37	; 0x25
 800130c:	f001 f820 	bl	8002350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001310:	2025      	movs	r0, #37	; 0x25
 8001312:	f001 f839 	bl	8002388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40011000 	.word	0x40011000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	2000018c 	.word	0x2000018c
 8001330:	40026440 	.word	0x40026440

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_InitTick+0xe4>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <HAL_InitTick+0xe4>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_InitTick+0xe4>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001360:	f107 0210 	add.w	r2, r7, #16
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fa2a 	bl	80037c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137a:	f002 f9fb 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 800137e:	6378      	str	r0, [r7, #52]	; 0x34
 8001380:	e004      	b.n	800138c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001382:	f002 f9f7 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8001386:	4603      	mov	r3, r0
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <HAL_InitTick+0xe8>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3b01      	subs	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_InitTick+0xec>)
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <HAL_InitTick+0xf0>)
 800139e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_InitTick+0xec>)
 80013a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_InitTick+0xec>)
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_InitTick+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_InitTick+0xec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_InitTick+0xec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80013c0:	4817      	ldr	r0, [pc, #92]	; (8001420 <HAL_InitTick+0xec>)
 80013c2:	f003 f807 	bl	80043d4 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11b      	bne.n	800140c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <HAL_InitTick+0xec>)
 80013d6:	f003 f84d 	bl	8004474 <HAL_TIM_Base_Start_IT>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013e8:	201e      	movs	r0, #30
 80013ea:	f000 ffcd 	bl	8002388 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d808      	bhi.n	8001406 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	201e      	movs	r0, #30
 80013fa:	f000 ffa9 	bl	8002350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0xf4>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e002      	b.n	800140c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800140c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001410:	4618      	mov	r0, r3
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	431bde83 	.word	0x431bde83
 8001420:	20000c10 	.word	0x20000c10
 8001424:	40000800 	.word	0x40000800
 8001428:	2000002c 	.word	0x2000002c

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800145c:	2004      	movs	r0, #4
 800145e:	f001 fd41 	bl	8002ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM3_IRQHandler+0x10>)
 800146e:	f003 f863 	bl	8004538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000fc 	.word	0x200000fc

0800147c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM4_IRQHandler+0x10>)
 8001482:	f003 f859 	bl	8004538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000c10 	.word	0x20000c10

08001490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <USART1_IRQHandler+0x10>)
 8001496:	f003 fc3d 	bl	8004d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000144 	.word	0x20000144

080014a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <DMA2_Stream2_IRQHandler+0x10>)
 80014aa:	f001 f913 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000018c 	.word	0x2000018c

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f008 fbcd 	bl	8009ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7fe fffb 	bl	8000508 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001520:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 8001524:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001528:	2000576c 	.word	0x2000576c

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <NRF24_DelayMicroSeconds+0x3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <NRF24_DelayMicroSeconds+0x40>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9a      	lsrs	r2, r3, #18
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001550:	bf00      	nop
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	60fa      	str	r2, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1fa      	bne.n	8001552 <NRF24_DelayMicroSeconds+0x22>
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000028 	.word	0x20000028
 8001570:	165e9f81 	.word	0x165e9f81

08001574 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <NRF24_csn+0x20>
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <NRF24_csn+0x38>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <NRF24_csn+0x3c>)
 8001588:	8811      	ldrh	r1, [r2, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fc8f 	bl	8002eb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001592:	e007      	b.n	80015a4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <NRF24_csn+0x38>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <NRF24_csn+0x3c>)
 800159a:	8811      	ldrh	r1, [r2, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fc86 	bl	8002eb0 <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000c68 	.word	0x20000c68
 80015b0:	20000c6c 	.word	0x20000c6c

080015b4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <NRF24_ce+0x20>
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <NRF24_ce+0x38>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <NRF24_ce+0x3c>)
 80015c8:	8811      	ldrh	r1, [r2, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fc6f 	bl	8002eb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80015d2:	e007      	b.n	80015e4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <NRF24_ce+0x38>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <NRF24_ce+0x3c>)
 80015da:	8811      	ldrh	r1, [r2, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fc66 	bl	8002eb0 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000c68 	.word	0x20000c68
 80015f0:	20000c6e 	.word	0x20000c6e

080015f4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ffb8 	bl	8001574 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	b2db      	uxtb	r3, r3
 800160c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800160e:	f107 010c 	add.w	r1, r7, #12
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	2201      	movs	r2, #1
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <NRF24_read_register+0x4c>)
 8001618:	f002 f98f 	bl	800393a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	1c59      	adds	r1, r3, #1
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	2201      	movs	r2, #1
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <NRF24_read_register+0x4c>)
 8001628:	f002 faca 	bl	8003bc0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800162c:	7b7b      	ldrb	r3, [r7, #13]
 800162e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ff9f 	bl	8001574 <NRF24_csn>
	return retData;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000c70 	.word	0x20000c70

08001644 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ff8d 	bl	8001574 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	b2db      	uxtb	r3, r3
 8001662:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001664:	f107 010c 	add.w	r1, r7, #12
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <NRF24_read_registerN+0x4c>)
 800166e:	f002 f964 	bl	800393a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	b29a      	uxth	r2, r3
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <NRF24_read_registerN+0x4c>)
 800167c:	f002 faa0 	bl	8003bc0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff77 	bl	8001574 <NRF24_csn>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000c70 	.word	0x20000c70

08001694 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff ff65 	bl	8001574 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80016b8:	f107 010c 	add.w	r1, r7, #12
 80016bc:	2364      	movs	r3, #100	; 0x64
 80016be:	2202      	movs	r2, #2
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <NRF24_write_register+0x40>)
 80016c2:	f002 f93a 	bl	800393a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff ff54 	bl	8001574 <NRF24_csn>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000c70 	.word	0x20000c70

080016d8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff43 	bl	8001574 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80016f8:	f107 010c 	add.w	r1, r7, #12
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	2201      	movs	r2, #1
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <NRF24_write_registerN+0x4c>)
 8001702:	f002 f91a 	bl	800393a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	b29a      	uxth	r2, r3
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <NRF24_write_registerN+0x4c>)
 8001710:	f002 f913 	bl	800393a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff ff2d 	bl	8001574 <NRF24_csn>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000c70 	.word	0x20000c70

08001728 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ff1d 	bl	8001574 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800173a:	23a0      	movs	r3, #160	; 0xa0
 800173c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800173e:	f107 010f 	add.w	r1, r7, #15
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	2201      	movs	r2, #1
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <NRF24_write_payload+0x40>)
 8001748:	f002 f8f7 	bl	800393a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <NRF24_write_payload+0x40>)
 8001756:	f002 f8f0 	bl	800393a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff ff0a 	bl	8001574 <NRF24_csn>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000c70 	.word	0x20000c70

0800176c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001778:	f000 fa82 	bl	8001c80 <NRF24_getPayloadSize>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	4293      	cmp	r3, r2
 8001784:	d303      	bcc.n	800178e <NRF24_read_payload+0x22>
 8001786:	f000 fa7b 	bl	8001c80 <NRF24_getPayloadSize>
 800178a:	4603      	mov	r3, r0
 800178c:	e000      	b.n	8001790 <NRF24_read_payload+0x24>
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff feee 	bl	8001574 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001798:	2361      	movs	r3, #97	; 0x61
 800179a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800179c:	f107 010e 	add.w	r1, r7, #14
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	2201      	movs	r2, #1
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <NRF24_read_payload+0x5c>)
 80017a6:	f002 f8c8 	bl	800393a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	2364      	movs	r3, #100	; 0x64
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <NRF24_read_payload+0x5c>)
 80017b4:	f002 fa04 	bl	8003bc0 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fedb 	bl	8001574 <NRF24_csn>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000c70 	.word	0x20000c70

080017cc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80017d0:	21ff      	movs	r1, #255	; 0xff
 80017d2:	20e1      	movs	r0, #225	; 0xe1
 80017d4:	f7ff ff5e 	bl	8001694 <NRF24_write_register>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80017e0:	21ff      	movs	r1, #255	; 0xff
 80017e2:	20e2      	movs	r0, #226	; 0xe2
 80017e4:	f7ff ff56 	bl	8001694 <NRF24_write_register>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80017f2:	2007      	movs	r0, #7
 80017f4:	f7ff fefe 	bl	80015f4 <NRF24_read_register>
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 8001808:	b084      	sub	sp, #16
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	f107 0c10 	add.w	ip, r7, #16
 8001814:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001818:	4b64      	ldr	r3, [pc, #400]	; (80019ac <NRF24_begin+0x1a4>)
 800181a:	4618      	mov	r0, r3
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2258      	movs	r2, #88	; 0x58
 8001822:	4619      	mov	r1, r3
 8001824:	f008 fa64 	bl	8009cf0 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 8001828:	4b61      	ldr	r3, [pc, #388]	; (80019b0 <NRF24_begin+0x1a8>)
 800182a:	4a62      	ldr	r2, [pc, #392]	; (80019b4 <NRF24_begin+0x1ac>)
 800182c:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <NRF24_begin+0x1b0>)
 8001830:	2208      	movs	r2, #8
 8001832:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <NRF24_begin+0x1b4>)
 8001836:	2210      	movs	r2, #16
 8001838:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff fe9a 	bl	8001574 <NRF24_csn>
	NRF24_ce(0);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff feb7 	bl	80015b4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001846:	2005      	movs	r0, #5
 8001848:	f000 fca6 	bl	8002198 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 800184c:	2108      	movs	r1, #8
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff ff20 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8001854:	213f      	movs	r1, #63	; 0x3f
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff ff1c 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 800185c:	2103      	movs	r1, #3
 800185e:	2002      	movs	r0, #2
 8001860:	f7ff ff18 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8001864:	2103      	movs	r1, #3
 8001866:	2003      	movs	r0, #3
 8001868:	f7ff ff14 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 800186c:	2103      	movs	r1, #3
 800186e:	2004      	movs	r0, #4
 8001870:	f7ff ff10 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8001874:	2102      	movs	r1, #2
 8001876:	2005      	movs	r0, #5
 8001878:	f7ff ff0c 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 800187c:	210f      	movs	r1, #15
 800187e:	2006      	movs	r0, #6
 8001880:	f7ff ff08 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8001884:	210e      	movs	r1, #14
 8001886:	2007      	movs	r0, #7
 8001888:	f7ff ff04 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 800188c:	2100      	movs	r1, #0
 800188e:	2008      	movs	r0, #8
 8001890:	f7ff ff00 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f7ff fefc 	bl	8001694 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800189c:	23e7      	movs	r3, #231	; 0xe7
 800189e:	713b      	strb	r3, [r7, #4]
 80018a0:	23e7      	movs	r3, #231	; 0xe7
 80018a2:	70fb      	strb	r3, [r7, #3]
 80018a4:	23e7      	movs	r3, #231	; 0xe7
 80018a6:	70bb      	strb	r3, [r7, #2]
 80018a8:	23e7      	movs	r3, #231	; 0xe7
 80018aa:	707b      	strb	r3, [r7, #1]
 80018ac:	23e7      	movs	r3, #231	; 0xe7
 80018ae:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 80018b0:	463b      	mov	r3, r7
 80018b2:	2205      	movs	r2, #5
 80018b4:	4619      	mov	r1, r3
 80018b6:	200a      	movs	r0, #10
 80018b8:	f7ff ff0e 	bl	80016d8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80018bc:	23c2      	movs	r3, #194	; 0xc2
 80018be:	713b      	strb	r3, [r7, #4]
 80018c0:	23c2      	movs	r3, #194	; 0xc2
 80018c2:	70fb      	strb	r3, [r7, #3]
 80018c4:	23c2      	movs	r3, #194	; 0xc2
 80018c6:	70bb      	strb	r3, [r7, #2]
 80018c8:	23c2      	movs	r3, #194	; 0xc2
 80018ca:	707b      	strb	r3, [r7, #1]
 80018cc:	23c2      	movs	r3, #194	; 0xc2
 80018ce:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 80018d0:	463b      	mov	r3, r7
 80018d2:	2205      	movs	r2, #5
 80018d4:	4619      	mov	r1, r3
 80018d6:	200b      	movs	r0, #11
 80018d8:	f7ff fefe 	bl	80016d8 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 80018dc:	21c3      	movs	r1, #195	; 0xc3
 80018de:	200c      	movs	r0, #12
 80018e0:	f7ff fed8 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 80018e4:	21c4      	movs	r1, #196	; 0xc4
 80018e6:	200d      	movs	r0, #13
 80018e8:	f7ff fed4 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 80018ec:	21c5      	movs	r1, #197	; 0xc5
 80018ee:	200e      	movs	r0, #14
 80018f0:	f7ff fed0 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 80018f4:	21c6      	movs	r1, #198	; 0xc6
 80018f6:	200f      	movs	r0, #15
 80018f8:	f7ff fecc 	bl	8001694 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80018fc:	23e7      	movs	r3, #231	; 0xe7
 80018fe:	713b      	strb	r3, [r7, #4]
 8001900:	23e7      	movs	r3, #231	; 0xe7
 8001902:	70fb      	strb	r3, [r7, #3]
 8001904:	23e7      	movs	r3, #231	; 0xe7
 8001906:	70bb      	strb	r3, [r7, #2]
 8001908:	23e7      	movs	r3, #231	; 0xe7
 800190a:	707b      	strb	r3, [r7, #1]
 800190c:	23e7      	movs	r3, #231	; 0xe7
 800190e:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8001910:	463b      	mov	r3, r7
 8001912:	2205      	movs	r2, #5
 8001914:	4619      	mov	r1, r3
 8001916:	2010      	movs	r0, #16
 8001918:	f7ff fede 	bl	80016d8 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	2011      	movs	r0, #17
 8001920:	f7ff feb8 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	2012      	movs	r0, #18
 8001928:	f7ff feb4 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2013      	movs	r0, #19
 8001930:	f7ff feb0 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 8001934:	2100      	movs	r1, #0
 8001936:	2014      	movs	r0, #20
 8001938:	f7ff feac 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 800193c:	2100      	movs	r1, #0
 800193e:	2015      	movs	r0, #21
 8001940:	f7ff fea8 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 8001944:	2100      	movs	r1, #0
 8001946:	2016      	movs	r0, #22
 8001948:	f7ff fea4 	bl	8001694 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800194c:	f000 fbc8 	bl	80020e0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f7ff fe9e 	bl	8001694 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 8001958:	2100      	movs	r1, #0
 800195a:	201d      	movs	r0, #29
 800195c:	f7ff fe9a 	bl	8001694 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001960:	210f      	movs	r1, #15
 8001962:	200f      	movs	r0, #15
 8001964:	f000 f944 	bl	8001bf0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 fa2a 	bl	8001dc2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 fa60 	bl	8001e34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001974:	2002      	movs	r0, #2
 8001976:	f000 faa3 	bl	8001ec0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800197a:	f000 f9f5 	bl	8001d68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800197e:	2020      	movs	r0, #32
 8001980:	f000 f966 	bl	8001c50 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 8001984:	f000 fac4 	bl	8001f10 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001988:	f000 fba2 	bl	80020d0 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800198c:	204c      	movs	r0, #76	; 0x4c
 800198e:	f000 f94a 	bl	8001c26 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001992:	f7ff ff1b 	bl	80017cc <NRF24_flush_tx>
	NRF24_flush_rx();
 8001996:	f7ff ff21 	bl	80017dc <NRF24_flush_rx>

	NRF24_powerDown();
 800199a:	f000 face 	bl	8001f3a <NRF24_powerDown>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a8:	b004      	add	sp, #16
 80019aa:	4770      	bx	lr
 80019ac:	20000c70 	.word	0x20000c70
 80019b0:	20000c68 	.word	0x20000c68
 80019b4:	40020000 	.word	0x40020000
 80019b8:	20000c6c 	.word	0x20000c6c
 80019bc:	20000c6e 	.word	0x20000c6e

080019c0 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fe15 	bl	80015f4 <NRF24_read_register>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f043 0303 	orr.w	r3, r3, #3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fe5d 	bl	8001694 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <NRF24_startListening+0x48>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	d004      	beq.n	80019ee <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80019e4:	2205      	movs	r2, #5
 80019e6:	4908      	ldr	r1, [pc, #32]	; (8001a08 <NRF24_startListening+0x48>)
 80019e8:	200a      	movs	r0, #10
 80019ea:	f7ff fe75 	bl	80016d8 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80019ee:	f7ff feed 	bl	80017cc <NRF24_flush_tx>
	NRF24_flush_rx();
 80019f2:	f7ff fef3 	bl	80017dc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fddc 	bl	80015b4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80019fc:	2096      	movs	r0, #150	; 0x96
 80019fe:	f7ff fd97 	bl	8001530 <NRF24_DelayMicroSeconds>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000c58 	.word	0x20000c58

08001a0c <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fdcf 	bl	80015b4 <NRF24_ce>
	NRF24_flush_tx();
 8001a16:	f7ff fed9 	bl	80017cc <NRF24_flush_tx>
	NRF24_flush_rx();
 8001a1a:	f7ff fedf 	bl	80017dc <NRF24_flush_rx>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001a30:	f000 fb4e 	bl	80020d0 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fabd 	bl	8001fb8 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001a3e:	f000 fb9f 	bl	8002180 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001a44:	230a      	movs	r3, #10
 8001a46:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001a48:	f107 030d 	add.w	r3, r7, #13
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2008      	movs	r0, #8
 8001a52:	f7ff fdf7 	bl	8001644 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001a56:	f7ff fec9 	bl	80017ec <NRF24_get_status>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <NRF24_write+0x54>
 8001a68:	f000 fb8a 	bl	8002180 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8e7      	bhi.n	8001a48 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001a78:	f107 010b 	add.w	r1, r7, #11
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <NRF24_write+0x90>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 faf1 	bl	800206a <NRF24_whatHappened>
	retStatus = tx_ok;
 8001a88:	7b3b      	ldrb	r3, [r7, #12]
 8001a8a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <NRF24_write+0x90>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001a94:	f000 f900 	bl	8001c98 <NRF24_getDynamicPayloadSize>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <NRF24_write+0x94>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001aa0:	f000 f80c 	bl	8001abc <NRF24_available>
	NRF24_flush_tx();
 8001aa4:	f7ff fe92 	bl	80017cc <NRF24_flush_tx>
	return retStatus;
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000c60 	.word	0x20000c60
 8001ab8:	20000c61 	.word	0x20000c61

08001abc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 fa49 	bl	8001f58 <NRF24_availablePipe>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fe45 	bl	800176c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001ae2:	2017      	movs	r0, #23
 8001ae4:	f7ff fd86 	bl	80015f4 <NRF24_read_register>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001af0:	f7ff fe74 	bl	80017dc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001af4:	f000 f8d0 	bl	8001c98 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001b16:	463b      	mov	r3, r7
 8001b18:	2205      	movs	r2, #5
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f7ff fddb 	bl	80016d8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001b22:	463b      	mov	r3, r7
 8001b24:	2205      	movs	r2, #5
 8001b26:	4619      	mov	r1, r3
 8001b28:	2010      	movs	r0, #16
 8001b2a:	f7ff fdd5 	bl	80016d8 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <NRF24_openWritingPipe+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf28      	it	cs
 8001b3c:	4613      	movcs	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	2011      	movs	r0, #17
 8001b44:	f7ff fda6 	bl	8001694 <NRF24_write_register>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000c62 	.word	0x20000c62

08001b54 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	e9c7 2300 	strd	r2, r3, [r7]
 8001b60:	460b      	mov	r3, r1
 8001b62:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b6e:	491c      	ldr	r1, [pc, #112]	; (8001be0 <NRF24_openReadingPipe+0x8c>)
 8001b70:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d82d      	bhi.n	8001bd6 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d808      	bhi.n	8001b92 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <NRF24_openReadingPipe+0x90>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	4639      	mov	r1, r7
 8001b88:	2205      	movs	r2, #5
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fda4 	bl	80016d8 <NRF24_write_registerN>
 8001b90:	e007      	b.n	8001ba2 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <NRF24_openReadingPipe+0x90>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	4639      	mov	r1, r7
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fd9b 	bl	80016d8 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <NRF24_openReadingPipe+0x94>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	4a10      	ldr	r2, [pc, #64]	; (8001bec <NRF24_openReadingPipe+0x98>)
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd70 	bl	8001694 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7ff fd1d 	bl	80015f4 <NRF24_read_register>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f7ff fd5f 	bl	8001694 <NRF24_write_register>
	}

}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000c58 	.word	0x20000c58
 8001be4:	08009f98 	.word	0x08009f98
 8001be8:	08009fa0 	.word	0x08009fa0
 8001bec:	20000c62 	.word	0x20000c62

08001bf0 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f7ff fd3b 	bl	8001694 <NRF24_write_register>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001c30:	237f      	movs	r3, #127	; 0x7f
 8001c32:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf28      	it	cs
 8001c3c:	4613      	movcs	r3, r2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	2005      	movs	r0, #5
 8001c44:	f7ff fd26 	bl	8001694 <NRF24_write_register>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	bf28      	it	cs
 8001c66:	4613      	movcs	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <NRF24_setPayloadSize+0x2c>)
 8001c6c:	701a      	strb	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000c62 	.word	0x20000c62

08001c80 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return payload_size;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <NRF24_getPayloadSize+0x14>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000c62 	.word	0x20000c62

08001c98 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001c9c:	2060      	movs	r0, #96	; 0x60
 8001c9e:	f7ff fca9 	bl	80015f4 <NRF24_read_register>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001cac:	201d      	movs	r0, #29
 8001cae:	f7ff fca1 	bl	80015f4 <NRF24_read_register>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f043 0306 	orr.w	r3, r3, #6
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	201d      	movs	r0, #29
 8001cbe:	f7ff fce9 	bl	8001694 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f7ff fc96 	bl	80015f4 <NRF24_read_register>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001cce:	f000 fa07 	bl	80020e0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001cd2:	201d      	movs	r0, #29
 8001cd4:	f7ff fc8e 	bl	80015f4 <NRF24_read_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f043 0306 	orr.w	r3, r3, #6
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	201d      	movs	r0, #29
 8001ce4:	f7ff fcd6 	bl	8001694 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001ce8:	201c      	movs	r0, #28
 8001cea:	f7ff fc83 	bl	80015f4 <NRF24_read_register>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f043 0303 	orr.w	r3, r3, #3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	201c      	movs	r0, #28
 8001cfa:	f7ff fccb 	bl	8001694 <NRF24_write_register>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001d08:	201d      	movs	r0, #29
 8001d0a:	f7ff fc73 	bl	80015f4 <NRF24_read_register>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	201d      	movs	r0, #29
 8001d1a:	f7ff fcbb 	bl	8001694 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001d1e:	201d      	movs	r0, #29
 8001d20:	f7ff fc68 	bl	80015f4 <NRF24_read_register>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001d2a:	f000 f9d9 	bl	80020e0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001d2e:	201d      	movs	r0, #29
 8001d30:	f7ff fc60 	bl	80015f4 <NRF24_read_register>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	201d      	movs	r0, #29
 8001d40:	f7ff fca8 	bl	8001694 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001d44:	201c      	movs	r0, #28
 8001d46:	f7ff fc55 	bl	80015f4 <NRF24_read_register>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4619      	mov	r1, r3
 8001d54:	201c      	movs	r0, #28
 8001d56:	f7ff fc9d 	bl	8001694 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001d5a:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <NRF24_enableDynamicPayloads+0x60>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000c63 	.word	0x20000c63

08001d68 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001d6c:	201d      	movs	r0, #29
 8001d6e:	f7ff fc41 	bl	80015f4 <NRF24_read_register>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	201d      	movs	r0, #29
 8001d7e:	f7ff fc89 	bl	8001694 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001d82:	2100      	movs	r1, #0
 8001d84:	201c      	movs	r0, #28
 8001d86:	f7ff fc85 	bl	8001694 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001d8a:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <NRF24_disableDynamicPayloads+0x2c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000c63 	.word	0x20000c63

08001d98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001da8:	213f      	movs	r1, #63	; 0x3f
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff fc72 	bl	8001694 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001db0:	e003      	b.n	8001dba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001db2:	2100      	movs	r1, #0
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fc6d 	bl	8001694 <NRF24_write_register>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001dcc:	2006      	movs	r0, #6
 8001dce:	f7ff fc11 	bl	80015f4 <NRF24_read_register>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f023 0306 	bic.w	r3, r3, #6
 8001ddc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d104      	bne.n	8001dee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	f043 0306 	orr.w	r3, r3, #6
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e019      	b.n	8001e22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d104      	bne.n	8001dfe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e011      	b.n	8001e22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d104      	bne.n	8001e0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e009      	b.n	8001e22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d103      	bne.n	8001e22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f043 0306 	orr.w	r3, r3, #6
 8001e20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2006      	movs	r0, #6
 8001e28:	f7ff fc34 	bl	8001694 <NRF24_write_register>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff fbd6 	bl	80015f4 <NRF24_read_register>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <NRF24_setDataRate+0x88>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001e58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d107      	bne.n	8001e70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <NRF24_setDataRate+0x88>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	73bb      	strb	r3, [r7, #14]
 8001e6e:	e00d      	b.n	8001e8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <NRF24_setDataRate+0x88>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	73bb      	strb	r3, [r7, #14]
 8001e84:	e002      	b.n	8001e8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <NRF24_setDataRate+0x88>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2006      	movs	r0, #6
 8001e92:	f7ff fbff 	bl	8001694 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001e96:	2006      	movs	r0, #6
 8001e98:	f7ff fbac 	bl	80015f4 <NRF24_read_register>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d102      	bne.n	8001eac <NRF24_setDataRate+0x78>
  {
    result = true;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e002      	b.n	8001eb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <NRF24_setDataRate+0x88>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000c64 	.word	0x20000c64

08001ec0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fb92 	bl	80015f4 <NRF24_read_register>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f023 030c 	bic.w	r3, r3, #12
 8001ed6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00f      	beq.n	8001efe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d104      	bne.n	8001eee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e007      	b.n	8001efe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fbc6 	bl	8001694 <NRF24_write_register>
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fb6c 	bl	80015f4 <NRF24_read_register>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f26:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff fbb1 	bl	8001694 <NRF24_write_register>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fb58 	bl	80015f4 <NRF24_read_register>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f023 0302 	bic.w	r3, r3, #2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fba0 	bl	8001694 <NRF24_write_register>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001f60:	f7ff fc44 	bl	80017ec <NRF24_get_status>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001f94:	2140      	movs	r1, #64	; 0x40
 8001f96:	2007      	movs	r0, #7
 8001f98:	f7ff fb7c 	bl	8001694 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	2007      	movs	r0, #7
 8001faa:	f7ff fb73 	bl	8001694 <NRF24_write_register>
    }
  }
  return result;
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff faf5 	bl	80015b4 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fb12 	bl	80015f4 <NRF24_read_register>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fb57 	bl	8001694 <NRF24_write_register>
  NRF24_ce(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff fae4 	bl	80015b4 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001fec:	2096      	movs	r0, #150	; 0x96
 8001fee:	f7ff fa9f 	bl	8001530 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fb96 	bl	8001728 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff fad9 	bl	80015b4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8002002:	200f      	movs	r0, #15
 8002004:	f7ff fa94 	bl	8001530 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fad3 	bl	80015b4 <NRF24_ce>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	6039      	str	r1, [r7, #0]
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	4613      	mov	r3, r2
 8002024:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800202a:	2320      	movs	r3, #32
 800202c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800202e:	7afa      	ldrb	r2, [r7, #11]
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	4293      	cmp	r3, r2
 8002034:	bf28      	it	cs
 8002036:	4613      	movcs	r3, r2
 8002038:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fa9a 	bl	8001574 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	b25b      	sxtb	r3, r3
 800204a:	f063 0357 	orn	r3, r3, #87	; 0x57
 800204e:	b25b      	sxtb	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	7aba      	ldrb	r2, [r7, #10]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fb3e 	bl	80016d8 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fa89 	bl	8001574 <NRF24_csn>
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002076:	f7ff fbb9 	bl	80017ec <NRF24_get_status>
 800207a:	4603      	mov	r3, r0
 800207c:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002084:	2170      	movs	r1, #112	; 0x70
 8002086:	2007      	movs	r0, #7
 8002088:	f7ff fb04 	bl	8001694 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	701a      	strb	r2, [r3, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80020d4:	2170      	movs	r1, #112	; 0x70
 80020d6:	2007      	movs	r0, #7
 80020d8:	f7ff fadc 	bl	8001694 <NRF24_write_register>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff fa44 	bl	8001574 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80020ec:	2350      	movs	r3, #80	; 0x50
 80020ee:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80020f0:	2373      	movs	r3, #115	; 0x73
 80020f2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80020f4:	1d39      	adds	r1, r7, #4
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	2202      	movs	r2, #2
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <NRF24_ACTIVATE_cmd+0x30>)
 80020fc:	f001 fc1d 	bl	800393a <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8002100:	2001      	movs	r0, #1
 8002102:	f7ff fa37 	bl	8001574 <NRF24_csn>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000c70 	.word	0x20000c70

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f8fc 	bl	800233a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f7ff f8f6 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7fe ffd4 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000030 	.word	0x20000030
 800217c:	20000cc8 	.word	0x20000cc8

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000cc8 	.word	0x20000cc8

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000030 	.word	0x20000030

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff4c 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002362:	f7ff ff61 	bl	8002228 <__NVIC_GetPriorityGrouping>
 8002366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7ff ffb1 	bl	80022d4 <NVIC_EncodePriority>
 8002372:	4602      	mov	r2, r0
 8002374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff80 	bl	8002280 <__NVIC_SetPriority>
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff54 	bl	8002244 <__NVIC_EnableIRQ>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fee6 	bl	8002180 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e099      	b.n	80024f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	e00f      	b.n	8002402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e2:	f7ff fecd 	bl	8002180 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d908      	bls.n	8002402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e078      	b.n	80024f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e8      	bne.n	80023e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <HAL_DMA_Init+0x158>)
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b04      	cmp	r3, #4
 800245a:	d107      	bne.n	800246c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4313      	orrs	r3, r2
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b04      	cmp	r3, #4
 8002494:	d117      	bne.n	80024c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb01 	bl	8002ab0 <DMA_CheckFifoParam>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c2:	2301      	movs	r3, #1
 80024c4:	e016      	b.n	80024f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fab8 	bl	8002a44 <DMA_CalcBaseAndBitshift>
 80024d4:	4603      	mov	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	f010803f 	.word	0xf010803f

08002500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Start_IT+0x26>
 8002522:	2302      	movs	r3, #2
 8002524:	e040      	b.n	80025a8 <HAL_DMA_Start_IT+0xa8>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12f      	bne.n	800259a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fa4a 	bl	80029e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0216 	orr.w	r2, r2, #22
 800256e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e005      	b.n	80025a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025be:	f7ff fddf 	bl	8002180 <HAL_GetTick>
 80025c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d008      	beq.n	80025e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e052      	b.n	8002688 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0216 	bic.w	r2, r2, #22
 80025f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_DMA_Abort+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002632:	e013      	b.n	800265c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002634:	f7ff fda4 	bl	8002180 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d90c      	bls.n	800265c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e015      	b.n	8002688 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e4      	bne.n	8002634 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	223f      	movs	r2, #63	; 0x3f
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00c      	b.n	80026c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e0:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_DMA_IRQHandler+0x248>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a8e      	ldr	r2, [pc, #568]	; (8002920 <HAL_DMA_IRQHandler+0x24c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808f 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8087 	beq.w	8002974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e079      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d031      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02c      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
 800291a:	bf00      	nop
 800291c:	20000028 	.word	0x20000028
 8002920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e01e      	b.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d032      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2205      	movs	r2, #5
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d307      	bcc.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f2      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x2cc>
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
 80029de:	e000      	b.n	80029e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029e0:	bf00      	nop
    }
  }
}
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d108      	bne.n	8002a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a26:	e007      	b.n	8002a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3b10      	subs	r3, #16
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <DMA_CalcBaseAndBitshift+0x68>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d909      	bls.n	8002a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	; 0x58
 8002a84:	e007      	b.n	8002a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	aaaaaaab 	.word	0xaaaaaaab
 8002aac:	08009fa8 	.word	0x08009fa8

08002ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11f      	bne.n	8002b0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d856      	bhi.n	8002b7e <DMA_CheckFifoParam+0xce>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x28>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002afb 	.word	0x08002afb
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b7f 	.word	0x08002b7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d046      	beq.n	8002b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e043      	b.n	8002b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b02:	d140      	bne.n	8002b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e03d      	b.n	8002b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	d121      	bne.n	8002b58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d837      	bhi.n	8002b8a <DMA_CheckFifoParam+0xda>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <DMA_CheckFifoParam+0x70>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b37 	.word	0x08002b37
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	08002b49 	.word	0x08002b49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e030      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d025      	beq.n	8002b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b46:	e022      	b.n	8002b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b50:	d11f      	bne.n	8002b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b56:	e01c      	b.n	8002b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d903      	bls.n	8002b66 <DMA_CheckFifoParam+0xb6>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d003      	beq.n	8002b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b64:	e018      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6a:	e015      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e00b      	b.n	8002b96 <DMA_CheckFifoParam+0xe6>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e00a      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e008      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e006      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e004      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
    }
  } 
  
  return status; 
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e159      	b.n	8002e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8148 	bne.w	8002e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a2 	beq.w	8002e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_GPIO_Init+0x2e8>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_GPIO_Init+0x2e8>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_GPIO_Init+0x2e8>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x2ec>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <HAL_GPIO_Init+0x2f0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x202>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a48      	ldr	r2, [pc, #288]	; (8002e9c <HAL_GPIO_Init+0x2f4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x1fe>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a47      	ldr	r2, [pc, #284]	; (8002ea0 <HAL_GPIO_Init+0x2f8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x1fa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_GPIO_Init+0x2fc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x1f6>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a45      	ldr	r2, [pc, #276]	; (8002ea8 <HAL_GPIO_Init+0x300>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x1f2>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x204>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x204>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x204>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x204>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x204>
 8002daa:	2300      	movs	r3, #0
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_GPIO_Init+0x2ec>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dee:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e18:	4a24      	ldr	r2, [pc, #144]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e42:	4a1a      	ldr	r2, [pc, #104]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_GPIO_Init+0x304>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f aea2 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40013c00 	.word	0x40013c00

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fd46 	bl	8000994 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e267      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d075      	beq.n	800301e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05b      	beq.n	800301c <HAL_RCC_OscConfig+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d157      	bne.n	800301c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e242      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x74>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6c      	ldr	r2, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002fac:	4b69      	ldr	r3, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a68      	ldr	r2, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff f8d8 	bl	8002180 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f8d4 	bl	8002180 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e207      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xc0>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f8c4 	bl	8002180 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff f8c0 	bl	8002180 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1f3      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0xe8>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1c7      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7ff f879 	bl	8002180 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7ff f875 	bl	8002180 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1a8      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_OscConfig+0x244>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff f858 	bl	8002180 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7ff f854 	bl	8002180 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e187      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7ff f838 	bl	8002180 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7ff f834 	bl	8002180 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e167      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x240>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x200>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x248>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7ff f821 	bl	8002180 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003142:	f7ff f81d 	bl	8002180 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e150      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a7c      	ldr	r2, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b77      	ldr	r3, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe ffdd 	bl	8002180 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe ffd9 	bl	8002180 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e10c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x474>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x2ea>
 80031f0:	4b64      	ldr	r3, [pc, #400]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a63      	ldr	r2, [pc, #396]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x30c>
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x324>
 8003220:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a57      	ldr	r2, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	4b55      	ldr	r3, [pc, #340]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe ff9e 	bl	8002180 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe ff9a 	bl	8002180 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0cb      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b49      	ldr	r3, [pc, #292]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x334>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7fe ff88 	bl	8002180 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe ff84 	bl	8002180 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0b5      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a1 	beq.w	80033f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d05c      	beq.n	8003378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d141      	bne.n	800334a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x478>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe ff58 	bl	8002180 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe ff54 	bl	8002180 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e087      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	491b      	ldr	r1, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe ff2d 	bl	8002180 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe ff29 	bl	8002180 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e05c      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x416>
 8003348:	e054      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x478>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe ff16 	bl	8002180 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe ff12 	bl	8002180 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x470>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e038      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x4ec>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d121      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cc      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d90c      	bls.n	8003440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d044      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e067      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4934      	ldr	r1, [pc, #208]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fe44 	bl	8002180 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe fe40 	bl	8002180 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e04f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d20c      	bcs.n	800354c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fec2 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08009f80 	.word	0x08009f80
 80035c8:	20000028 	.word	0x20000028
 80035cc:	2000002c 	.word	0x2000002c

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b090      	sub	sp, #64	; 0x40
 80035d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
 80035dc:	2300      	movs	r3, #0
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e0:	2300      	movs	r3, #0
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d00d      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	f200 80a1 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x16c>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x34>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x3a>
 8003602:	e09b      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_GetSysClockFreq+0x184>)
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003608:	e09b      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360a:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_GetSysClockFreq+0x188>)
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800360e:	e098      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361a:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d028      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	627a      	str	r2, [r7, #36]	; 0x24
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003638:	2100      	movs	r1, #0
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_GetSysClockFreq+0x188>)
 800363c:	fb03 f201 	mul.w	r2, r3, r1
 8003640:	2300      	movs	r3, #0
 8003642:	fb00 f303 	mul.w	r3, r0, r3
 8003646:	4413      	add	r3, r2
 8003648:	4a43      	ldr	r2, [pc, #268]	; (8003758 <HAL_RCC_GetSysClockFreq+0x188>)
 800364a:	fba0 1202 	umull	r1, r2, r0, r2
 800364e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003650:	460a      	mov	r2, r1
 8003652:	62ba      	str	r2, [r7, #40]	; 0x28
 8003654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003656:	4413      	add	r3, r2
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	2200      	movs	r2, #0
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	61fa      	str	r2, [r7, #28]
 8003662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800366a:	f7fc fdb9 	bl	80001e0 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4613      	mov	r3, r2
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003676:	e053      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003678:	4b35      	ldr	r3, [pc, #212]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	2200      	movs	r2, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	617a      	str	r2, [r7, #20]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800368a:	f04f 0b00 	mov.w	fp, #0
 800368e:	4652      	mov	r2, sl
 8003690:	465b      	mov	r3, fp
 8003692:	f04f 0000 	mov.w	r0, #0
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	0159      	lsls	r1, r3, #5
 800369c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a0:	0150      	lsls	r0, r2, #5
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	ebb2 080a 	subs.w	r8, r2, sl
 80036aa:	eb63 090b 	sbc.w	r9, r3, fp
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036c2:	ebb2 0408 	subs.w	r4, r2, r8
 80036c6:	eb63 0509 	sbc.w	r5, r3, r9
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	00eb      	lsls	r3, r5, #3
 80036d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d8:	00e2      	lsls	r2, r4, #3
 80036da:	4614      	mov	r4, r2
 80036dc:	461d      	mov	r5, r3
 80036de:	eb14 030a 	adds.w	r3, r4, sl
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	eb45 030b 	adc.w	r3, r5, fp
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f6:	4629      	mov	r1, r5
 80036f8:	028b      	lsls	r3, r1, #10
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003700:	4621      	mov	r1, r4
 8003702:	028a      	lsls	r2, r1, #10
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	2200      	movs	r2, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	60fa      	str	r2, [r7, #12]
 8003710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003714:	f7fc fd64 	bl	80001e0 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0x180>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x184>)
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003744:	4618      	mov	r0, r3
 8003746:	3740      	adds	r7, #64	; 0x40
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	017d7840 	.word	0x017d7840

0800375c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000028 	.word	0x20000028

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08009f90 	.word	0x08009f90

0800379c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037a0:	f7ff ffdc 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b2:	5ccb      	ldrb	r3, [r1, r3]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	08009f90 	.word	0x08009f90

080037c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	220f      	movs	r2, #15
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetClockConfig+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07b      	b.n	8003932 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384a:	d009      	beq.n	8003860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
 8003852:	e005      	b.n	8003860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fc66 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0104 	and.w	r1, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0210 	and.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_SPI_Transmit+0x22>
 8003958:	2302      	movs	r3, #2
 800395a:	e12d      	b.n	8003bb8 <HAL_SPI_Transmit+0x27e>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003964:	f7fe fc0c 	bl	8002180 <HAL_GetTick>
 8003968:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800397e:	e116      	b.n	8003bae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_SPI_Transmit+0x52>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003990:	e10d      	b.n	8003bae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	d10f      	bne.n	80039fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d007      	beq.n	8003a18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a20:	d14f      	bne.n	8003ac2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Transmit+0xf6>
 8003a2a:	8afb      	ldrh	r3, [r7, #22]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d142      	bne.n	8003ab6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a54:	e02f      	b.n	8003ab6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d112      	bne.n	8003a8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a88:	e015      	b.n	8003ab6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8a:	f7fe fb79 	bl	8002180 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d803      	bhi.n	8003aa2 <HAL_SPI_Transmit+0x168>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_Transmit+0x16e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ab4:	e07b      	b.n	8003bae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ca      	bne.n	8003a56 <HAL_SPI_Transmit+0x11c>
 8003ac0:	e050      	b.n	8003b64 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0x196>
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d144      	bne.n	8003b5a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003af6:	e030      	b.n	8003b5a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d113      	bne.n	8003b2e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b2c:	e015      	b.n	8003b5a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b2e:	f7fe fb27 	bl	8002180 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d803      	bhi.n	8003b46 <HAL_SPI_Transmit+0x20c>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d102      	bne.n	8003b4c <HAL_SPI_Transmit+0x212>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b58:	e029      	b.n	8003bae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1c9      	bne.n	8003af8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	6839      	ldr	r1, [r7, #0]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fbdf 	bl	800432c <SPI_EndRxTxTransaction>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e003      	b.n	8003bae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003be4:	e0fb      	b.n	8003dde <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d112      	bne.n	8003c16 <HAL_SPI_Receive+0x56>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f8ef 	bl	8003df0 <HAL_SPI_TransmitReceive>
 8003c12:	4603      	mov	r3, r0
 8003c14:	e0e8      	b.n	8003de8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_SPI_Receive+0x64>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0e1      	b.n	8003de8 <HAL_SPI_Receive+0x228>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2c:	f7fe faa8 	bl	8002180 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_Receive+0x7e>
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c42:	e0cc      	b.n	8003dde <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2204      	movs	r2, #4
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d10f      	bne.n	8003cac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d007      	beq.n	8003cca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d16a      	bne.n	8003da8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cd2:	e032      	b.n	8003d3a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d115      	bne.n	8003d0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f103 020c 	add.w	r2, r3, #12
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d0c:	e015      	b.n	8003d3a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d0e:	f7fe fa37 	bl	8002180 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d803      	bhi.n	8003d26 <HAL_SPI_Receive+0x166>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d102      	bne.n	8003d2c <HAL_SPI_Receive+0x16c>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d38:	e051      	b.n	8003dde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1c7      	bne.n	8003cd4 <HAL_SPI_Receive+0x114>
 8003d44:	e035      	b.n	8003db2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d113      	bne.n	8003d7c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d7a:	e015      	b.n	8003da8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7c:	f7fe fa00 	bl	8002180 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d803      	bhi.n	8003d94 <HAL_SPI_Receive+0x1d4>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Receive+0x1da>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003da6:	e01a      	b.n	8003dde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1c9      	bne.n	8003d46 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa52 	bl	8004260 <SPI_EndRxTransaction>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
 8003dd4:	e003      	b.n	8003dde <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	; 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x26>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e198      	b.n	8004148 <HAL_SPI_TransmitReceive+0x358>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1e:	f7fe f9af 	bl	8002180 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e34:	887b      	ldrh	r3, [r7, #2]
 8003e36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d00f      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x70>
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e46:	d107      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x68>
 8003e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d003      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e5e:	e16d      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x82>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x82>
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e78:	e160      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d007      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eea:	d17c      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x10a>
 8003ef4:	8b7b      	ldrh	r3, [r7, #26]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d16a      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1e:	e057      	b.n	8003fd0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d11b      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x176>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x176>
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d113      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d119      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x1b8>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fa8:	f7fe f8ea 	bl	8002180 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d80b      	bhi.n	8003fd0 <HAL_SPI_TransmitReceive+0x1e0>
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d007      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fce:	e0b5      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1a2      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x130>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d19d      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x130>
 8003fe4:	e080      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x204>
 8003fee:	8b7b      	ldrh	r3, [r7, #26]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d16f      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401a:	e05b      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d11c      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x274>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d017      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x274>
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d114      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d119      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x2b6>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040a6:	f7fe f86b 	bl	8002180 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d803      	bhi.n	80040be <HAL_SPI_TransmitReceive+0x2ce>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d102      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x2d4>
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80040d2:	e033      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d19e      	bne.n	800401c <HAL_SPI_TransmitReceive+0x22c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d199      	bne.n	800401c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f91d 	bl	800432c <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004104:	e01a      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004132:	e003      	b.n	800413c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	; 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004160:	f7fe f80e 	bl	8002180 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004170:	f7fe f806 	bl	8002180 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e054      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d050      	beq.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004190:	f7fd fff6 	bl	8002180 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e017      	b.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3b01      	subs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d19b      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000028 	.word	0x20000028

08004260 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004274:	d111      	bne.n	800429a <SPI_EndRxTransaction+0x3a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d004      	beq.n	800428a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d107      	bne.n	800429a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004298:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a2:	d12a      	bne.n	80042fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	d012      	beq.n	80042d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff49 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02d      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e026      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	2101      	movs	r1, #1
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff ff36 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01a      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e013      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff23 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e000      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2201      	movs	r2, #1
 8004340:	2102      	movs	r1, #2
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff ff04 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e032      	b.n	80043c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800435e:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <SPI_EndRxTxTransaction+0xa0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <SPI_EndRxTxTransaction+0xa4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	0d5b      	lsrs	r3, r3, #21
 800436a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437c:	d112      	bne.n	80043a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fee1 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d016      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e00f      	b.n	80043c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d0f2      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x78>
 80043be:	e000      	b.n	80043c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80043c0:	bf00      	nop
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000028 	.word	0x20000028
 80043d0:	165e9f81 	.word	0x165e9f81

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc feee 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 f9ea 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e044      	b.n	8004516 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_TIM_Base_Start_IT+0xb0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x6c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d013      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x6c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <HAL_TIM_Base_Start_IT+0xb4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x6c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIM_Base_Start_IT+0xb8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x6c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	; (8004530 <HAL_TIM_Base_Start_IT+0xbc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x6c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIM_Base_Start_IT+0xc0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d010      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	e007      	b.n	8004514 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000

08004538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0202 	mvn.w	r2, #2
 800456c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f914 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f906 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f917 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0204 	mvn.w	r2, #4
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8ee 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8e0 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8f1 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8c8 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8ba 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8cb 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2208      	movs	r2, #8
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8a2 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f894 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8a5 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0201 	mvn.w	r2, #1
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fd10 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 faa6 	bl	8004c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f876 	bl	80047d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0220 	mvn.w	r2, #32
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa78 	bl	8004c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIM_SlaveConfigSynchro+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e031      	b.n	8004794 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8de 	bl	8004904 <TIM_SlaveTimer_SetConfig>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e018      	b.n	8004794 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004780:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <TIM_Base_SetConfig+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a37      	ldr	r2, [pc, #220]	; (80048ec <TIM_Base_SetConfig+0x100>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a36      	ldr	r2, [pc, #216]	; (80048f0 <TIM_Base_SetConfig+0x104>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a35      	ldr	r2, [pc, #212]	; (80048f4 <TIM_Base_SetConfig+0x108>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <TIM_Base_SetConfig+0xfc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x104>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x10c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <TIM_Base_SetConfig+0x110>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	; (8004900 <TIM_Base_SetConfig+0x114>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <TIM_Base_SetConfig+0xfc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b70      	cmp	r3, #112	; 0x70
 800494c:	d01a      	beq.n	8004984 <TIM_SlaveTimer_SetConfig+0x80>
 800494e:	2b70      	cmp	r3, #112	; 0x70
 8004950:	d860      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 8004952:	2b60      	cmp	r3, #96	; 0x60
 8004954:	d054      	beq.n	8004a00 <TIM_SlaveTimer_SetConfig+0xfc>
 8004956:	2b60      	cmp	r3, #96	; 0x60
 8004958:	d85c      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 800495a:	2b50      	cmp	r3, #80	; 0x50
 800495c:	d046      	beq.n	80049ec <TIM_SlaveTimer_SetConfig+0xe8>
 800495e:	2b50      	cmp	r3, #80	; 0x50
 8004960:	d858      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d019      	beq.n	800499a <TIM_SlaveTimer_SetConfig+0x96>
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d854      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 800496a:	2b30      	cmp	r3, #48	; 0x30
 800496c:	d055      	beq.n	8004a1a <TIM_SlaveTimer_SetConfig+0x116>
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	d850      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 8004972:	2b20      	cmp	r3, #32
 8004974:	d051      	beq.n	8004a1a <TIM_SlaveTimer_SetConfig+0x116>
 8004976:	2b20      	cmp	r3, #32
 8004978:	d84c      	bhi.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d04d      	beq.n	8004a1a <TIM_SlaveTimer_SetConfig+0x116>
 800497e:	2b10      	cmp	r3, #16
 8004980:	d04b      	beq.n	8004a1a <TIM_SlaveTimer_SetConfig+0x116>
 8004982:	e047      	b.n	8004a14 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004994:	f000 f8a6 	bl	8004ae4 <TIM_ETR_SetConfig>
      break;
 8004998:	e040      	b.n	8004a1c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d101      	bne.n	80049a6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e03b      	b.n	8004a1e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
      break;
 80049ea:	e017      	b.n	8004a1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f8:	461a      	mov	r2, r3
 80049fa:	f000 f814 	bl	8004a26 <TIM_TI1_ConfigInputStage>
      break;
 80049fe:	e00d      	b.n	8004a1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f000 f839 	bl	8004a84 <TIM_TI2_ConfigInputStage>
      break;
 8004a12:	e003      	b.n	8004a1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	e000      	b.n	8004a1c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004a1a:	bf00      	nop
  }

  return status;
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0201 	bic.w	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 030a 	bic.w	r3, r3, #10
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0210 	bic.w	r2, r3, #16
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e050      	b.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10c      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40014000 	.word	0x40014000

08004c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e042      	b.n	8004cc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc faec 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fe6b 	bl	8005948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d112      	bne.n	8004d08 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_Receive_DMA+0x26>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00b      	b.n	8004d0a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fbc2 	bl	8005488 <UART_Start_Receive_DMA>
 8004d04:	4603      	mov	r3, r0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b0ba      	sub	sp, #232	; 0xe8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
 8004d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fd29 	bl	80057ca <UART_Receive_IT>
      return;
 8004d78:	e25b      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80de 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
 8004d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d1 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0202 	orr.w	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d011      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 81f2 	beq.w	8005228 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fcb4 	bl	80057ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <HAL_UART_IRQHandler+0x17a>
 8004e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d04f      	beq.n	8004f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fbbc 	bl	800560c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d141      	bne.n	8004f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1d9      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	4a7e      	ldr	r2, [pc, #504]	; (80050f4 <HAL_UART_IRQHandler+0x3e0>)
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fd fbc4 	bl	8002690 <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00e      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f99e 	bl	8005260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00a      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f99a 	bl	8005260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f996 	bl	8005260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f3a:	e175      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	bf00      	nop
    return;
 8004f3e:	e173      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f040 814f 	bne.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8148 	beq.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8141 	beq.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	f040 80b6 	bne.w	80050f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8145 	beq.w	800522c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004faa:	429a      	cmp	r2, r3
 8004fac:	f080 813e 	bcs.w	800522c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	f000 8088 	beq.w	80050d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d9      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800503a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800503e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e1      	bne.n	8005012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800505e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e3      	bne.n	800504e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e3      	bne.n	8005094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fd fa6d 	bl	80025b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8c1 	bl	8005274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f2:	e09b      	b.n	800522c <HAL_UART_IRQHandler+0x518>
 80050f4:	080056d3 	.word	0x080056d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005100:	b29b      	uxth	r3, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 808e 	beq.w	8005230 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8089 	beq.w	8005230 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005142:	647a      	str	r2, [r7, #68]	; 0x44
 8005144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e3      	bne.n	800511e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3314      	adds	r3, #20
 8005176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e3      	bne.n	8005156 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0310 	bic.w	r3, r3, #16
 80051b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051c0:	61fa      	str	r2, [r7, #28]
 80051c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	69b9      	ldr	r1, [r7, #24]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	617b      	str	r3, [r7, #20]
   return(result);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e3      	bne.n	800519c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f847 	bl	8005274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e6:	e023      	b.n	8005230 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <HAL_UART_IRQHandler+0x4f4>
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa7a 	bl	80056fa <UART_Transmit_IT>
    return;
 8005206:	e014      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <HAL_UART_IRQHandler+0x51e>
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 faba 	bl	800579a <UART_EndTransmit_IT>
    return;
 8005226:	e004      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
    return;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
      return;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
      return;
 8005230:	bf00      	nop
  }
}
 8005232:	37e8      	adds	r7, #232	; 0xe8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b09c      	sub	sp, #112	; 0x70
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d172      	bne.n	800538e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	2200      	movs	r2, #0
 80052ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80052d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005302:	647a      	str	r2, [r7, #68]	; 0x44
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	623b      	str	r3, [r7, #32]
   return(result);
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005336:	633a      	str	r2, [r7, #48]	; 0x30
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2b01      	cmp	r3, #1
 8005358:	d119      	bne.n	800538e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	60fb      	str	r3, [r7, #12]
   return(result);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 0310 	bic.w	r3, r3, #16
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537a:	61fa      	str	r2, [r7, #28]
 800537c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	69b9      	ldr	r1, [r7, #24]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	617b      	str	r3, [r7, #20]
   return(result);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800538e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005390:	2200      	movs	r2, #0
 8005392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d106      	bne.n	80053aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053a0:	4619      	mov	r1, r3
 80053a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053a4:	f7ff ff66 	bl	8005274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053a8:	e002      	b.n	80053b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053ac:	f7fb fafe 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80053b0:	bf00      	nop
 80053b2:	3770      	adds	r7, #112	; 0x70
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4619      	mov	r1, r3
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ff48 	bl	8005274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053e4:	e002      	b.n	80053ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ff30 	bl	800524c <HAL_UART_RxHalfCpltCallback>
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b21      	cmp	r3, #33	; 0x21
 8005426:	d108      	bne.n	800543a <UART_DMAError+0x46>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2200      	movs	r2, #0
 8005432:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f000 f8c1 	bl	80055bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b22      	cmp	r3, #34	; 0x22
 800545a:	d108      	bne.n	800546e <UART_DMAError+0x7a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005468:	68b8      	ldr	r0, [r7, #8]
 800546a:	f000 f8cf 	bl	800560c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f043 0210 	orr.w	r2, r3, #16
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800547a:	68b8      	ldr	r0, [r7, #8]
 800547c:	f7ff fef0 	bl	8005260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b098      	sub	sp, #96	; 0x60
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2222      	movs	r2, #34	; 0x22
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	4a3e      	ldr	r2, [pc, #248]	; (80055b0 <UART_Start_Receive_DMA+0x128>)
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <UART_Start_Receive_DMA+0x12c>)
 80054be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <UART_Start_Receive_DMA+0x130>)
 80054c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	2200      	movs	r2, #0
 80054ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	f7fd f80a 	bl	8002500 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800551a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	65bb      	str	r3, [r7, #88]	; 0x58
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800552a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800555e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	617b      	str	r3, [r7, #20]
   return(result);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005588:	653b      	str	r3, [r7, #80]	; 0x50
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005592:	627a      	str	r2, [r7, #36]	; 0x24
 8005594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6a39      	ldr	r1, [r7, #32]
 8005598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3760      	adds	r7, #96	; 0x60
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	0800528d 	.word	0x0800528d
 80055b4:	080053b9 	.word	0x080053b9
 80055b8:	080053f5 	.word	0x080053f5

080055bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	61ba      	str	r2, [r7, #24]
 80055e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005600:	bf00      	nop
 8005602:	3724      	adds	r7, #36	; 0x24
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b095      	sub	sp, #84	; 0x54
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005634:	643a      	str	r2, [r7, #64]	; 0x40
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	61fb      	str	r3, [r7, #28]
   return(result);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3314      	adds	r3, #20
 8005666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e5      	bne.n	8005648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d119      	bne.n	80056b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	60bb      	str	r3, [r7, #8]
   return(result);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a4:	61ba      	str	r2, [r7, #24]
 80056a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056c6:	bf00      	nop
 80056c8:	3754      	adds	r7, #84	; 0x54
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fdb7 	bl	8005260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b21      	cmp	r3, #33	; 0x21
 800570c:	d13e      	bne.n	800578c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d114      	bne.n	8005742 <UART_Transmit_IT+0x48>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d110      	bne.n	8005742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	1c9a      	adds	r2, r3, #2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]
 8005740:	e008      	b.n	8005754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	1c59      	adds	r1, r3, #1
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6211      	str	r1, [r2, #32]
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29b      	uxth	r3, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4619      	mov	r1, r3
 8005762:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fd3c 	bl	8005238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08c      	sub	sp, #48	; 0x30
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b22      	cmp	r3, #34	; 0x22
 80057dc:	f040 80ae 	bne.w	800593c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d117      	bne.n	800581a <UART_Receive_IT+0x50>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d113      	bne.n	800581a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005808:	b29a      	uxth	r2, r3
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
 8005818:	e026      	b.n	8005868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d007      	beq.n	800583e <UART_Receive_IT+0x74>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <UART_Receive_IT+0x82>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e008      	b.n	800585e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005858:	b2da      	uxtb	r2, r3
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005878:	2b00      	cmp	r3, #0
 800587a:	d15d      	bne.n	8005938 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0220 	bic.w	r2, r2, #32
 800588a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d135      	bne.n	800592e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	613b      	str	r3, [r7, #16]
   return(result);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	623a      	str	r2, [r7, #32]
 80058ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69f9      	ldr	r1, [r7, #28]
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b10      	cmp	r3, #16
 8005908:	d10a      	bne.n	8005920 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fca4 	bl	8005274 <HAL_UARTEx_RxEventCallback>
 800592c:	e002      	b.n	8005934 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb f83c 	bl	80009ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e002      	b.n	800593e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3730      	adds	r7, #48	; 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800594c:	b0c0      	sub	sp, #256	; 0x100
 800594e:	af00      	add	r7, sp, #0
 8005950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	ea40 0301 	orr.w	r3, r0, r1
 8005970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	431a      	orrs	r2, r3
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	431a      	orrs	r2, r3
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059a0:	f021 010c 	bic.w	r1, r1, #12
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ae:	430b      	orrs	r3, r1
 80059b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	6999      	ldr	r1, [r3, #24]
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	ea40 0301 	orr.w	r3, r0, r1
 80059ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b8f      	ldr	r3, [pc, #572]	; (8005c14 <UART_SetConfig+0x2cc>)
 80059d8:	429a      	cmp	r2, r3
 80059da:	d005      	beq.n	80059e8 <UART_SetConfig+0xa0>
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b8d      	ldr	r3, [pc, #564]	; (8005c18 <UART_SetConfig+0x2d0>)
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d104      	bne.n	80059f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fd fed8 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 80059ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059f0:	e003      	b.n	80059fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059f2:	f7fd febf 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80059f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a04:	f040 810c 	bne.w	8005c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	1891      	adds	r1, r2, r2
 8005a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a22:	415b      	adcs	r3, r3
 8005a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	eb12 0801 	adds.w	r8, r2, r1
 8005a30:	4629      	mov	r1, r5
 8005a32:	eb43 0901 	adc.w	r9, r3, r1
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4a:	4690      	mov	r8, r2
 8005a4c:	4699      	mov	r9, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	eb18 0303 	adds.w	r3, r8, r3
 8005a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a58:	462b      	mov	r3, r5
 8005a5a:	eb49 0303 	adc.w	r3, r9, r3
 8005a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a76:	460b      	mov	r3, r1
 8005a78:	18db      	adds	r3, r3, r3
 8005a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	eb42 0303 	adc.w	r3, r2, r3
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
 8005a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a8c:	f7fa fba8 	bl	80001e0 <__aeabi_uldivmod>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4b61      	ldr	r3, [pc, #388]	; (8005c1c <UART_SetConfig+0x2d4>)
 8005a96:	fba3 2302 	umull	r2, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	011c      	lsls	r4, r3, #4
 8005a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	1891      	adds	r1, r2, r2
 8005ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ab8:	415b      	adcs	r3, r3
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae0:	4692      	mov	sl, r2
 8005ae2:	469b      	mov	fp, r3
 8005ae4:	4643      	mov	r3, r8
 8005ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8005aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aee:	464b      	mov	r3, r9
 8005af0:	eb4b 0303 	adc.w	r3, fp, r3
 8005af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	18db      	adds	r3, r3, r3
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
 8005b12:	4613      	mov	r3, r2
 8005b14:	eb42 0303 	adc.w	r3, r2, r3
 8005b18:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b22:	f7fa fb5d 	bl	80001e0 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <UART_SetConfig+0x2d4>)
 8005b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2264      	movs	r2, #100	; 0x64
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	1acb      	subs	r3, r1, r3
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b42:	4b36      	ldr	r3, [pc, #216]	; (8005c1c <UART_SetConfig+0x2d4>)
 8005b44:	fba3 2302 	umull	r2, r3, r3, r2
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b50:	441c      	add	r4, r3
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b74:	4641      	mov	r1, r8
 8005b76:	1851      	adds	r1, r2, r1
 8005b78:	6339      	str	r1, [r7, #48]	; 0x30
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	414b      	adcs	r3, r1
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	00cb      	lsls	r3, r1, #3
 8005b90:	4651      	mov	r1, sl
 8005b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b96:	4651      	mov	r1, sl
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba8:	464b      	mov	r3, r9
 8005baa:	460a      	mov	r2, r1
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bc8:	460b      	mov	r3, r1
 8005bca:	18db      	adds	r3, r3, r3
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	4613      	mov	r3, r2
 8005bd0:	eb42 0303 	adc.w	r3, r2, r3
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bde:	f7fa faff 	bl	80001e0 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <UART_SetConfig+0x2d4>)
 8005be8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	2164      	movs	r1, #100	; 0x64
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	3332      	adds	r3, #50	; 0x32
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <UART_SetConfig+0x2d4>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f003 0207 	and.w	r2, r3, #7
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4422      	add	r2, r4
 8005c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c10:	e106      	b.n	8005e20 <UART_SetConfig+0x4d8>
 8005c12:	bf00      	nop
 8005c14:	40011000 	.word	0x40011000
 8005c18:	40011400 	.word	0x40011400
 8005c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c32:	4642      	mov	r2, r8
 8005c34:	464b      	mov	r3, r9
 8005c36:	1891      	adds	r1, r2, r2
 8005c38:	6239      	str	r1, [r7, #32]
 8005c3a:	415b      	adcs	r3, r3
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c42:	4641      	mov	r1, r8
 8005c44:	1854      	adds	r4, r2, r1
 8005c46:	4649      	mov	r1, r9
 8005c48:	eb43 0501 	adc.w	r5, r3, r1
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	00eb      	lsls	r3, r5, #3
 8005c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c5a:	00e2      	lsls	r2, r4, #3
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	461d      	mov	r5, r3
 8005c60:	4643      	mov	r3, r8
 8005c62:	18e3      	adds	r3, r4, r3
 8005c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c68:	464b      	mov	r3, r9
 8005c6a:	eb45 0303 	adc.w	r3, r5, r3
 8005c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c8e:	4629      	mov	r1, r5
 8005c90:	008b      	lsls	r3, r1, #2
 8005c92:	4621      	mov	r1, r4
 8005c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c98:	4621      	mov	r1, r4
 8005c9a:	008a      	lsls	r2, r1, #2
 8005c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ca0:	f7fa fa9e 	bl	80001e0 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4b60      	ldr	r3, [pc, #384]	; (8005e2c <UART_SetConfig+0x4e4>)
 8005caa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	011c      	lsls	r4, r3, #4
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	1891      	adds	r1, r2, r2
 8005cca:	61b9      	str	r1, [r7, #24]
 8005ccc:	415b      	adcs	r3, r3
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	1851      	adds	r1, r2, r1
 8005cd8:	6139      	str	r1, [r7, #16]
 8005cda:	4649      	mov	r1, r9
 8005cdc:	414b      	adcs	r3, r1
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cec:	4659      	mov	r1, fp
 8005cee:	00cb      	lsls	r3, r1, #3
 8005cf0:	4651      	mov	r1, sl
 8005cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	00ca      	lsls	r2, r1, #3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	4642      	mov	r2, r8
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d08:	464b      	mov	r3, r9
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	eb42 0303 	adc.w	r3, r2, r3
 8005d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	4641      	mov	r1, r8
 8005d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d36:	4641      	mov	r1, r8
 8005d38:	008a      	lsls	r2, r1, #2
 8005d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d3e:	f7fa fa4f 	bl	80001e0 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <UART_SetConfig+0x4e4>)
 8005d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	2264      	movs	r2, #100	; 0x64
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	1acb      	subs	r3, r1, r3
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	3332      	adds	r3, #50	; 0x32
 8005d5c:	4a33      	ldr	r2, [pc, #204]	; (8005e2c <UART_SetConfig+0x4e4>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d68:	441c      	add	r4, r3
 8005d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6e:	2200      	movs	r2, #0
 8005d70:	673b      	str	r3, [r7, #112]	; 0x70
 8005d72:	677a      	str	r2, [r7, #116]	; 0x74
 8005d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6039      	str	r1, [r7, #0]
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dba:	464b      	mov	r3, r9
 8005dbc:	460a      	mov	r2, r1
 8005dbe:	eb42 0303 	adc.w	r3, r2, r3
 8005dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dce:	667a      	str	r2, [r7, #100]	; 0x64
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ddc:	4649      	mov	r1, r9
 8005dde:	008b      	lsls	r3, r1, #2
 8005de0:	4641      	mov	r1, r8
 8005de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de6:	4641      	mov	r1, r8
 8005de8:	008a      	lsls	r2, r1, #2
 8005dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005dee:	f7fa f9f7 	bl	80001e0 <__aeabi_uldivmod>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <UART_SetConfig+0x4e4>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2164      	movs	r1, #100	; 0x64
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	3332      	adds	r3, #50	; 0x32
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <UART_SetConfig+0x4e4>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 020f 	and.w	r2, r3, #15
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4422      	add	r2, r4
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e26:	46bd      	mov	sp, r7
 8005e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2c:	51eb851f 	.word	0x51eb851f

08005e30 <__NVIC_SetPriority>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db0a      	blt.n	8005e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <__NVIC_SetPriority+0x4c>)
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	0112      	lsls	r2, r2, #4
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	440b      	add	r3, r1
 8005e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e58:	e00a      	b.n	8005e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4908      	ldr	r1, [pc, #32]	; (8005e80 <__NVIC_SetPriority+0x50>)
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	3b04      	subs	r3, #4
 8005e68:	0112      	lsls	r2, r2, #4
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	761a      	strb	r2, [r3, #24]
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	e000e100 	.word	0xe000e100
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <SysTick_Handler+0x1c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e8c:	f002 fcce 	bl	800882c <xTaskGetSchedulerState>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d001      	beq.n	8005e9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e96:	f003 fbef 	bl	8009678 <xPortSysTickHandler>
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	e000e010 	.word	0xe000e010

08005ea4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	f06f 0004 	mvn.w	r0, #4
 8005eae:	f7ff ffbf 	bl	8005e30 <__NVIC_SetPriority>
#endif
}
 8005eb2:	bf00      	nop
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ebe:	f3ef 8305 	mrs	r3, IPSR
 8005ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005eca:	f06f 0305 	mvn.w	r3, #5
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	e00c      	b.n	8005eec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <osKernelInitialize+0x44>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <osKernelInitialize+0x44>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	e002      	b.n	8005eec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005eec:	687b      	ldr	r3, [r7, #4]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000ccc 	.word	0x20000ccc

08005f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f06:	f3ef 8305 	mrs	r3, IPSR
 8005f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f12:	f06f 0305 	mvn.w	r3, #5
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e010      	b.n	8005f3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <osKernelStart+0x48>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d109      	bne.n	8005f36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f22:	f7ff ffbf 	bl	8005ea4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <osKernelStart+0x48>)
 8005f28:	2202      	movs	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f2c:	f001 ff6a 	bl	8007e04 <vTaskStartScheduler>
      stat = osOK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e002      	b.n	8005f3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f3c:	687b      	ldr	r3, [r7, #4]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000ccc 	.word	0x20000ccc

08005f4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af04      	add	r7, sp, #16
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5c:	f3ef 8305 	mrs	r3, IPSR
 8005f60:	617b      	str	r3, [r7, #20]
  return(result);
 8005f62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d17e      	bne.n	8006066 <osThreadNew+0x11a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d07b      	beq.n	8006066 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f72:	2318      	movs	r3, #24
 8005f74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d045      	beq.n	8006012 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <osThreadNew+0x48>
        name = attr->name;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <osThreadNew+0x6e>
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b38      	cmp	r3, #56	; 0x38
 8005fac:	d805      	bhi.n	8005fba <osThreadNew+0x6e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <osThreadNew+0x72>
        return (NULL);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e054      	b.n	8006068 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <osThreadNew+0xa8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b63      	cmp	r3, #99	; 0x63
 8005fdc:	d90a      	bls.n	8005ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <osThreadNew+0xa8>
        mem = 1;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e010      	b.n	8006016 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10c      	bne.n	8006016 <osThreadNew+0xca>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d108      	bne.n	8006016 <osThreadNew+0xca>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <osThreadNew+0xca>
          mem = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e001      	b.n	8006016 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d110      	bne.n	800603e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006024:	9202      	str	r2, [sp, #8]
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6a3a      	ldr	r2, [r7, #32]
 8006030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f001 fc32 	bl	800789c <xTaskCreateStatic>
 8006038:	4603      	mov	r3, r0
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	e013      	b.n	8006066 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d110      	bne.n	8006066 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	b29a      	uxth	r2, r3
 8006048:	f107 0310 	add.w	r3, r7, #16
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f001 fc7d 	bl	8007956 <xTaskCreate>
 800605c:	4603      	mov	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d001      	beq.n	8006066 <osThreadNew+0x11a>
            hTask = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006066:	693b      	ldr	r3, [r7, #16]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3728      	adds	r7, #40	; 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607c:	f3ef 8305 	mrs	r3, IPSR
 8006080:	60bb      	str	r3, [r7, #8]
  return(result);
 8006082:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8006088:	f06f 0305 	mvn.w	r3, #5
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e017      	b.n	80060c0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8006096:	f06f 0303 	mvn.w	r3, #3
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e010      	b.n	80060c0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800609e:	6938      	ldr	r0, [r7, #16]
 80060a0:	f001 fe4a 	bl	8007d38 <eTaskGetState>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d005      	beq.n	80060ba <osThreadTerminate+0x4a>
      stat = osOK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f001 fd9a 	bl	8007bec <vTaskDelete>
 80060b8:	e002      	b.n	80060c0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80060ba:	f06f 0302 	mvn.w	r3, #2
 80060be:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80060c0:	697b      	ldr	r3, [r7, #20]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d2:	f3ef 8305 	mrs	r3, IPSR
 80060d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <osDelay+0x1c>
    stat = osErrorISR;
 80060de:	f06f 0305 	mvn.w	r3, #5
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e007      	b.n	80060f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fded 	bl	8007cd0 <vTaskDelay>
    }
  }

  return (stat);
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610c:	f3ef 8305 	mrs	r3, IPSR
 8006110:	60fb      	str	r3, [r7, #12]
  return(result);
 8006112:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006114:	2b00      	cmp	r3, #0
 8006116:	d12d      	bne.n	8006174 <osEventFlagsNew+0x74>
    mem = -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <osEventFlagsNew+0x3a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b1f      	cmp	r3, #31
 8006132:	d902      	bls.n	800613a <osEventFlagsNew+0x3a>
        mem = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	e00c      	b.n	8006154 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d108      	bne.n	8006154 <osEventFlagsNew+0x54>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <osEventFlagsNew+0x54>
          mem = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e001      	b.n	8006154 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d106      	bne.n	8006168 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f9fa 	bl	8006558 <xEventGroupCreateStatic>
 8006164:	6178      	str	r0, [r7, #20]
 8006166:	e005      	b.n	8006174 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800616e:	f000 fa2a 	bl	80065c6 <xEventGroupCreate>
 8006172:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006174:	697b      	ldr	r3, [r7, #20]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <osEventFlagsSet+0x1e>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800619e:	f06f 0303 	mvn.w	r3, #3
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e028      	b.n	80061f8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a6:	f3ef 8305 	mrs	r3, IPSR
 80061aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01d      	beq.n	80061ee <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	461a      	mov	r2, r3
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6938      	ldr	r0, [r7, #16]
 80061c0:	f000 fba4 	bl	800690c <xEventGroupSetBitsFromISR>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80061ca:	f06f 0302 	mvn.w	r3, #2
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e012      	b.n	80061f8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <osEventFlagsSet+0x78>
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <osEventFlagsSet+0x84>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	e004      	b.n	80061f8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6938      	ldr	r0, [r7, #16]
 80061f2:	f000 fad1 	bl	8006798 <xEventGroupSetBits>
 80061f6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80061f8:	697b      	ldr	r3, [r7, #20]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	; 0x30
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <osEventFlagsWait+0x22>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800622a:	f06f 0303 	mvn.w	r3, #3
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e04b      	b.n	80062ca <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006232:	f3ef 8305 	mrs	r3, IPSR
 8006236:	617b      	str	r3, [r7, #20]
  return(result);
 8006238:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800623e:	f06f 0305 	mvn.w	r3, #5
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e041      	b.n	80062ca <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
 8006254:	e001      	b.n	800625a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006264:	2300      	movs	r3, #0
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	e001      	b.n	800626e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	69b8      	ldr	r0, [r7, #24]
 800627a:	f000 f9bf 	bl	80065fc <xEventGroupWaitBits>
 800627e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d010      	beq.n	80062ac <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d019      	beq.n	80062ca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800629c:	f06f 0301 	mvn.w	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e012      	b.n	80062ca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80062a4:	f06f 0302 	mvn.w	r3, #2
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	e00e      	b.n	80062ca <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80062bc:	f06f 0301 	mvn.w	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e002      	b.n	80062ca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80062c4:	f06f 0302 	mvn.w	r3, #2
 80062c8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80062ca:	69fb      	ldr	r3, [r7, #28]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3728      	adds	r7, #40	; 0x28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e0:	f3ef 8305 	mrs	r3, IPSR
 80062e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d174      	bne.n	80063d6 <osMutexNew+0x102>
    if (attr != NULL) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osMutexNew+0x26>
      type = attr->attr_bits;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e001      	b.n	80062fe <osMutexNew+0x2a>
    } else {
      type = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <osMutexNew+0x3a>
      rmtx = 1U;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e001      	b.n	8006312 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d15c      	bne.n	80063d6 <osMutexNew+0x102>
      mem = -1;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <osMutexNew+0x6a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b4f      	cmp	r3, #79	; 0x4f
 8006336:	d902      	bls.n	800633e <osMutexNew+0x6a>
          mem = 1;
 8006338:	2301      	movs	r3, #1
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	e00c      	b.n	8006358 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d108      	bne.n	8006358 <osMutexNew+0x84>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <osMutexNew+0x84>
            mem = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	e001      	b.n	8006358 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d112      	bne.n	8006384 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4619      	mov	r1, r3
 800636a:	2004      	movs	r0, #4
 800636c:	f000 fd05 	bl	8006d7a <xQueueCreateMutexStatic>
 8006370:	61f8      	str	r0, [r7, #28]
 8006372:	e016      	b.n	80063a2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4619      	mov	r1, r3
 800637a:	2001      	movs	r0, #1
 800637c:	f000 fcfd 	bl	8006d7a <xQueueCreateMutexStatic>
 8006380:	61f8      	str	r0, [r7, #28]
 8006382:	e00e      	b.n	80063a2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006390:	2004      	movs	r0, #4
 8006392:	f000 fcda 	bl	8006d4a <xQueueCreateMutex>
 8006396:	61f8      	str	r0, [r7, #28]
 8006398:	e003      	b.n	80063a2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800639a:	2001      	movs	r0, #1
 800639c:	f000 fcd5 	bl	8006d4a <xQueueCreateMutex>
 80063a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00c      	beq.n	80063c2 <osMutexNew+0xee>
        if (attr != NULL) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <osMutexNew+0xe2>
          name = attr->name;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e001      	b.n	80063ba <osMutexNew+0xe6>
        } else {
          name = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f001 fa0f 	bl	80077e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d006      	beq.n	80063d6 <osMutexNew+0x102>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	60bb      	str	r3, [r7, #8]
  return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800640a:	f06f 0305 	mvn.w	r3, #5
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e02c      	b.n	800646c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006418:	f06f 0303 	mvn.w	r3, #3
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e025      	b.n	800646c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d011      	beq.n	800644a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6938      	ldr	r0, [r7, #16]
 800642a:	f000 fcf5 	bl	8006e18 <xQueueTakeMutexRecursive>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d01b      	beq.n	800646c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800643a:	f06f 0301 	mvn.w	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e014      	b.n	800646c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006442:	f06f 0302 	mvn.w	r3, #2
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e010      	b.n	800646c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6938      	ldr	r0, [r7, #16]
 800644e:	f000 ff93 	bl	8007378 <xQueueSemaphoreTake>
 8006452:	4603      	mov	r3, r0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d009      	beq.n	800646c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800645e:	f06f 0301 	mvn.w	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e002      	b.n	800646c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006466:	f06f 0302 	mvn.w	r3, #2
 800646a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800646c:	697b      	ldr	r3, [r7, #20]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006492:	f3ef 8305 	mrs	r3, IPSR
 8006496:	60bb      	str	r3, [r7, #8]
  return(result);
 8006498:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800649e:	f06f 0305 	mvn.w	r3, #5
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e01f      	b.n	80064e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d103      	bne.n	80064b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80064ac:	f06f 0303 	mvn.w	r3, #3
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e018      	b.n	80064e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f000 fc78 	bl	8006db0 <xQueueGiveMutexRecursive>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d00f      	beq.n	80064e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80064c6:	f06f 0302 	mvn.w	r3, #2
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e00b      	b.n	80064e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	6938      	ldr	r0, [r7, #16]
 80064d6:	f000 fcd5 	bl	8006e84 <xQueueGenericSend>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d002      	beq.n	80064e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80064e0:	f06f 0302 	mvn.w	r3, #2
 80064e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a07      	ldr	r2, [pc, #28]	; (800651c <vApplicationGetIdleTaskMemory+0x2c>)
 8006500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a06      	ldr	r2, [pc, #24]	; (8006520 <vApplicationGetIdleTaskMemory+0x30>)
 8006506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2280      	movs	r2, #128	; 0x80
 800650c:	601a      	str	r2, [r3, #0]
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000cd0 	.word	0x20000cd0
 8006520:	20000d34 	.word	0x20000d34

08006524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a07      	ldr	r2, [pc, #28]	; (8006550 <vApplicationGetTimerTaskMemory+0x2c>)
 8006534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a06      	ldr	r2, [pc, #24]	; (8006554 <vApplicationGetTimerTaskMemory+0x30>)
 800653a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	20000f34 	.word	0x20000f34
 8006554:	20000f98 	.word	0x20000f98

08006558 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800657c:	2320      	movs	r3, #32
 800657e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b20      	cmp	r3, #32
 8006584:	d00a      	beq.n	800659c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60fb      	str	r3, [r7, #12]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f9bf 	bl	8006934 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2201      	movs	r2, #1
 80065ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80065bc:	697b      	ldr	r3, [r7, #20]
	}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80065cc:	2020      	movs	r0, #32
 80065ce:	f003 f8e3 	bl	8009798 <pvPortMalloc>
 80065d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f9a5 	bl	8006934 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80065f0:	687b      	ldr	r3, [r7, #4]
	}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b090      	sub	sp, #64	; 0x40
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xEventGroupWaitBits+0x36>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	623b      	str	r3, [r7, #32]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <xEventGroupWaitBits+0x56>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	61fb      	str	r3, [r7, #28]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xEventGroupWaitBits+0x72>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61bb      	str	r3, [r7, #24]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800666e:	f002 f8dd 	bl	800882c <xTaskGetSchedulerState>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <xEventGroupWaitBits+0x82>
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xEventGroupWaitBits+0x86>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xEventGroupWaitBits+0x88>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	617b      	str	r3, [r7, #20]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800669e:	f001 fc19 	bl	8007ed4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ae:	f000 f90b 	bl	80068c8 <prvTestWaitCondition>
 80066b2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d028      	beq.n	800671a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	43db      	mvns	r3, r3
 80066d0:	401a      	ands	r2, r3
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e020      	b.n	800671a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80066d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	633b      	str	r3, [r7, #48]	; 0x30
 80066e6:	e018      	b.n	800671a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	1d18      	adds	r0, r3, #4
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	4313      	orrs	r3, r2
 800670e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006710:	4619      	mov	r1, r3
 8006712:	f001 fdf1 	bl	80082f8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800671a:	f001 fbe9 	bl	8007ef0 <xTaskResumeAll>
 800671e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006722:	2b00      	cmp	r3, #0
 8006724:	d031      	beq.n	800678a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d107      	bne.n	800673c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <xEventGroupWaitBits+0x198>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800673c:	f002 f9ec 	bl	8008b18 <uxTaskResetEventItemValue>
 8006740:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11a      	bne.n	8006782 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800674c:	f002 ff02 	bl	8009554 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800675c:	f000 f8b4 	bl	80068c8 <prvTestWaitCondition>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	43db      	mvns	r3, r3
 8006774:	401a      	ands	r2, r3
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800677e:	f002 ff19 	bl	80095b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800678c:	4618      	mov	r0, r3
 800678e:	3740      	adds	r7, #64	; 0x40
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	; 0x38
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80067a2:	2300      	movs	r3, #0
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xEventGroupSetBits+0x32>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	613b      	str	r3, [r7, #16]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <xEventGroupSetBits+0x52>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	3304      	adds	r3, #4
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	3308      	adds	r3, #8
 80067f4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80067f6:	f001 fb6d 	bl	8007ed4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	431a      	orrs	r2, r3
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800680c:	e03c      	b.n	8006888 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006824:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800682c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d108      	bne.n	800684a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006848:	e008      	b.n	800685c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	4013      	ands	r3, r2
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	429a      	cmp	r2, r3
 8006856:	d101      	bne.n	800685c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d010      	beq.n	8006884 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800687c:	4619      	mov	r1, r3
 800687e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006880:	f001 fe06 	bl	8008490 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	429a      	cmp	r2, r3
 800688e:	d1be      	bne.n	800680e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	43db      	mvns	r3, r3
 8006898:	401a      	ands	r2, r3
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800689e:	f001 fb27 	bl	8007ef0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	681b      	ldr	r3, [r3, #0]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3738      	adds	r7, #56	; 0x38
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff6c 	bl	8006798 <xEventGroupSetBits>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e007      	b.n	80068fe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d101      	bne.n	80068fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	4804      	ldr	r0, [pc, #16]	; (8006930 <xEventGroupSetBitsFromISR+0x24>)
 8006920:	f002 fcc8 	bl	80092b4 <xTimerPendFunctionCallFromISR>
 8006924:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006926:	697b      	ldr	r3, [r7, #20]
	}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	080068af 	.word	0x080068af

08006934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f103 0208 	add.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f103 0208 	add.w	r2, r3, #8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
}
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d103      	bne.n	80069f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e00c      	b.n	8006a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3308      	adds	r3, #8
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e002      	b.n	8006a04 <vListInsert+0x2e>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d2f6      	bcs.n	80069fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6892      	ldr	r2, [r2, #8]
 8006a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6852      	ldr	r2, [r2, #4]
 8006a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d103      	bne.n	8006a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueGenericReset+0x2a>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60bb      	str	r3, [r7, #8]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ac6:	f002 fd45 	bl	8009554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	3b01      	subs	r3, #1
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	22ff      	movs	r2, #255	; 0xff
 8006b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	22ff      	movs	r2, #255	; 0xff
 8006b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d114      	bne.n	8006b46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01a      	beq.n	8006b5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3310      	adds	r3, #16
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 fc4d 	bl	80083c8 <xTaskRemoveFromEventList>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d012      	beq.n	8006b5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <xQueueGenericReset+0xcc>)
 8006b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	e009      	b.n	8006b5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3310      	adds	r3, #16
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fef2 	bl	8006934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3324      	adds	r3, #36	; 0x24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff feed 	bl	8006934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b5a:	f002 fd2b 	bl	80095b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b5e:	2301      	movs	r3, #1
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08e      	sub	sp, #56	; 0x38
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <xQueueGenericCreateStatic+0x52>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xQueueGenericCreateStatic+0x56>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericCreateStatic+0x58>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	623b      	str	r3, [r7, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <xQueueGenericCreateStatic+0x7e>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <xQueueGenericCreateStatic+0x82>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <xQueueGenericCreateStatic+0x84>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	61fb      	str	r3, [r7, #28]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c0a:	2350      	movs	r3, #80	; 0x50
 8006c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b50      	cmp	r3, #80	; 0x50
 8006c12:	d00a      	beq.n	8006c2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61bb      	str	r3, [r7, #24]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	4613      	mov	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f83f 	bl	8006cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3730      	adds	r7, #48	; 0x30
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	613b      	str	r3, [r7, #16]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3350      	adds	r3, #80	; 0x50
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 fd7f 	bl	8009798 <pvPortMalloc>
 8006c9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d011      	beq.n	8006cc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	3350      	adds	r3, #80	; 0x50
 8006caa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cb4:	79fa      	ldrb	r2, [r7, #7]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f805 	bl	8006cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e002      	b.n	8006cf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cfe:	2101      	movs	r1, #1
 8006d00:	69b8      	ldr	r0, [r7, #24]
 8006d02:	f7ff fecb 	bl	8006a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00e      	beq.n	8006d42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d36:	2300      	movs	r3, #0
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8a1 	bl	8006e84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	4603      	mov	r3, r0
 8006d52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d54:	2301      	movs	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6939      	ldr	r1, [r7, #16]
 8006d62:	6978      	ldr	r0, [r7, #20]
 8006d64:	f7ff ff7a 	bl	8006c5c <xQueueGenericCreate>
 8006d68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff ffd3 	bl	8006d16 <prvInitialiseMutex>

		return xNewQueue;
 8006d70:	68fb      	ldr	r3, [r7, #12]
	}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b088      	sub	sp, #32
 8006d7e:	af02      	add	r7, sp, #8
 8006d80:	4603      	mov	r3, r0
 8006d82:	6039      	str	r1, [r7, #0]
 8006d84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d86:	2301      	movs	r3, #1
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2200      	movs	r2, #0
 8006d96:	6939      	ldr	r1, [r7, #16]
 8006d98:	6978      	ldr	r0, [r7, #20]
 8006d9a:	f7ff fee7 	bl	8006b6c <xQueueGenericCreateStatic>
 8006d9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff ffb8 	bl	8006d16 <prvInitialiseMutex>

		return xNewQueue;
 8006da6:	68fb      	ldr	r3, [r7, #12]
	}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	689c      	ldr	r4, [r3, #8]
 8006ddc:	f001 fd16 	bl	800880c <xTaskGetCurrentTaskHandle>
 8006de0:	4603      	mov	r3, r0
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d111      	bne.n	8006e0a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f000 f840 	bl	8006e84 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e001      	b.n	8006e0e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006e0e:	697b      	ldr	r3, [r7, #20]
	}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60fb      	str	r3, [r7, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	689c      	ldr	r4, [r3, #8]
 8006e46:	f001 fce1 	bl	800880c <xTaskGetCurrentTaskHandle>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d107      	bne.n	8006e60 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e00c      	b.n	8006e7a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6938      	ldr	r0, [r7, #16]
 8006e64:	f000 fa88 	bl	8007378 <xQueueSemaphoreTake>
 8006e68:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006e7a:	697b      	ldr	r3, [r7, #20]
	}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSend+0x40>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <xQueueGenericSend+0x44>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <xQueueGenericSend+0x46>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d103      	bne.n	8006ef2 <xQueueGenericSend+0x6e>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <xQueueGenericSend+0x72>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueGenericSend+0x74>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	623b      	str	r3, [r7, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f12:	f001 fc8b 	bl	800882c <xTaskGetSchedulerState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <xQueueGenericSend+0x9e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <xQueueGenericSend+0xa2>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueGenericSend+0xa4>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61fb      	str	r3, [r7, #28]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f42:	f002 fb07 	bl	8009554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <xQueueGenericSend+0xd4>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d129      	bne.n	8006fac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5e:	f000 fb2f 	bl	80075c0 <prvCopyDataToQueue>
 8006f62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fa29 	bl	80083c8 <xTaskRemoveFromEventList>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	; (800707c <xQueueGenericSend+0x1f8>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	e00a      	b.n	8006fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f94:	4b39      	ldr	r3, [pc, #228]	; (800707c <xQueueGenericSend+0x1f8>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fa4:	f002 fb06 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e063      	b.n	8007074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fb2:	f002 faff 	bl	80095b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e05c      	b.n	8007074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc0:	f107 0314 	add.w	r3, r7, #20
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fac5 	bl	8008554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fce:	f002 faf1 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fd2:	f000 ff7f 	bl	8007ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fd6:	f002 fabd 	bl	8009554 <vPortEnterCritical>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe6:	d103      	bne.n	8006ff0 <xQueueGenericSend+0x16c>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <xQueueGenericSend+0x182>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007006:	f002 fad5 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800700a:	1d3a      	adds	r2, r7, #4
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fab4 	bl	8008580 <xTaskCheckForTimeOut>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d124      	bne.n	8007068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800701e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007020:	f000 fbc6 	bl	80077b0 <prvIsQueueFull>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d018      	beq.n	800705c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	3310      	adds	r3, #16
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f93c 	bl	80082b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800703a:	f000 fb51 	bl	80076e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800703e:	f000 ff57 	bl	8007ef0 <xTaskResumeAll>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	f47f af7c 	bne.w	8006f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <xQueueGenericSend+0x1f8>)
 800704c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	e772      	b.n	8006f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 fb3f 	bl	80076e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007062:	f000 ff45 	bl	8007ef0 <xTaskResumeAll>
 8007066:	e76c      	b.n	8006f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 fb39 	bl	80076e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800706e:	f000 ff3f 	bl	8007ef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007074:	4618      	mov	r0, r3
 8007076:	3738      	adds	r7, #56	; 0x38
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b090      	sub	sp, #64	; 0x40
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <xQueueGenericSendFromISR+0x3c>
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <xQueueGenericSendFromISR+0x40>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <xQueueGenericSendFromISR+0x42>
 80070c0:	2300      	movs	r3, #0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d103      	bne.n	80070ea <xQueueGenericSendFromISR+0x6a>
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <xQueueGenericSendFromISR+0x6e>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <xQueueGenericSendFromISR+0x70>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	623b      	str	r3, [r7, #32]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800710a:	f002 fb05 	bl	8009718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800710e:	f3ef 8211 	mrs	r2, BASEPRI
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	61fa      	str	r2, [r7, #28]
 8007124:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007126:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <xQueueGenericSendFromISR+0xbc>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d12f      	bne.n	800719c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007152:	f000 fa35 	bl	80075c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007156:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d112      	bne.n	8007186 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d016      	beq.n	8007196 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f92b 	bl	80083c8 <xTaskRemoveFromEventList>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e007      	b.n	8007196 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800718a:	3301      	adds	r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	b25a      	sxtb	r2, r3
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007196:	2301      	movs	r3, #1
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800719a:	e001      	b.n	80071a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3740      	adds	r7, #64	; 0x40
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071c4:	2300      	movs	r3, #0
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <xQueueReceive+0x30>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	623b      	str	r3, [r7, #32]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <xQueueReceive+0x3e>
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <xQueueReceive+0x42>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <xQueueReceive+0x44>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <xQueueReceive+0x5e>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	61fb      	str	r3, [r7, #28]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007216:	f001 fb09 	bl	800882c <xTaskGetSchedulerState>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <xQueueReceive+0x6e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueReceive+0x72>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueReceive+0x74>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <xQueueReceive+0x8e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61bb      	str	r3, [r7, #24]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007246:	f002 f985 	bl	8009554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01f      	beq.n	8007296 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800725a:	f000 fa1b 	bl	8007694 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	1e5a      	subs	r2, r3, #1
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	3310      	adds	r3, #16
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f8a8 	bl	80083c8 <xTaskRemoveFromEventList>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800727e:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <xQueueReceive+0x1bc>)
 8007280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800728e:	f002 f991 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8007292:	2301      	movs	r3, #1
 8007294:	e069      	b.n	800736a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800729c:	f002 f98a 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e062      	b.n	800736a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072aa:	f107 0310 	add.w	r3, r7, #16
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 f950 	bl	8008554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b8:	f002 f97c 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072bc:	f000 fe0a 	bl	8007ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072c0:	f002 f948 	bl	8009554 <vPortEnterCritical>
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d103      	bne.n	80072da <xQueueReceive+0x122>
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d103      	bne.n	80072f0 <xQueueReceive+0x138>
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f0:	f002 f960 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072f4:	1d3a      	adds	r2, r7, #4
 80072f6:	f107 0310 	add.w	r3, r7, #16
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f93f 	bl	8008580 <xTaskCheckForTimeOut>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d123      	bne.n	8007350 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800730a:	f000 fa3b 	bl	8007784 <prvIsQueueEmpty>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d017      	beq.n	8007344 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	3324      	adds	r3, #36	; 0x24
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f000 ffc7 	bl	80082b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007324:	f000 f9dc 	bl	80076e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007328:	f000 fde2 	bl	8007ef0 <xTaskResumeAll>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d189      	bne.n	8007246 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <xQueueReceive+0x1bc>)
 8007334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	e780      	b.n	8007246 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f000 f9cb 	bl	80076e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800734a:	f000 fdd1 	bl	8007ef0 <xTaskResumeAll>
 800734e:	e77a      	b.n	8007246 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007352:	f000 f9c5 	bl	80076e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007356:	f000 fdcb 	bl	8007ef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800735a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735c:	f000 fa12 	bl	8007784 <prvIsQueueEmpty>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f43f af6f 	beq.w	8007246 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800736a:	4618      	mov	r0, r3
 800736c:	3730      	adds	r7, #48	; 0x30
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08e      	sub	sp, #56	; 0x38
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	623b      	str	r3, [r7, #32]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	61fb      	str	r3, [r7, #28]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073c8:	f001 fa30 	bl	800882c <xTaskGetSchedulerState>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <xQueueSemaphoreTake+0x60>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <xQueueSemaphoreTake+0x64>
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <xQueueSemaphoreTake+0x66>
 80073dc:	2300      	movs	r3, #0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	61bb      	str	r3, [r7, #24]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073f8:	f002 f8ac 	bl	8009554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	d024      	beq.n	8007452 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	1e5a      	subs	r2, r3, #1
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d104      	bne.n	8007422 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007418:	f001 fb96 	bl	8008b48 <pvTaskIncrementMutexHeldCount>
 800741c:	4602      	mov	r2, r0
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00f      	beq.n	800744a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	3310      	adds	r3, #16
 800742e:	4618      	mov	r0, r3
 8007430:	f000 ffca 	bl	80083c8 <xTaskRemoveFromEventList>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800743a:	4b54      	ldr	r3, [pc, #336]	; (800758c <xQueueSemaphoreTake+0x214>)
 800743c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800744a:	f002 f8b3 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 800744e:	2301      	movs	r3, #1
 8007450:	e097      	b.n	8007582 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d111      	bne.n	800747c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007474:	f002 f89e 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007478:	2300      	movs	r3, #0
 800747a:	e082      	b.n	8007582 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4618      	mov	r0, r3
 8007488:	f001 f864 	bl	8008554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007490:	f002 f890 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007494:	f000 fd1e 	bl	8007ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007498:	f002 f85c 	bl	8009554 <vPortEnterCritical>
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d103      	bne.n	80074b2 <xQueueSemaphoreTake+0x13a>
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d103      	bne.n	80074c8 <xQueueSemaphoreTake+0x150>
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c8:	f002 f874 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074cc:	463a      	mov	r2, r7
 80074ce:	f107 030c 	add.w	r3, r7, #12
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 f853 	bl	8008580 <xTaskCheckForTimeOut>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d132      	bne.n	8007546 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e2:	f000 f94f 	bl	8007784 <prvIsQueueEmpty>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d026      	beq.n	800753a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80074f4:	f002 f82e 	bl	8009554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f9b3 	bl	8008868 <xTaskPriorityInherit>
 8007502:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007504:	f002 f856 	bl	80095b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	3324      	adds	r3, #36	; 0x24
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fecd 	bl	80082b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007518:	f000 f8e2 	bl	80076e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800751c:	f000 fce8 	bl	8007ef0 <xTaskResumeAll>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f47f af68 	bne.w	80073f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007528:	4b18      	ldr	r3, [pc, #96]	; (800758c <xQueueSemaphoreTake+0x214>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	e75e      	b.n	80073f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800753a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800753c:	f000 f8d0 	bl	80076e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007540:	f000 fcd6 	bl	8007ef0 <xTaskResumeAll>
 8007544:	e758      	b.n	80073f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007548:	f000 f8ca 	bl	80076e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800754c:	f000 fcd0 	bl	8007ef0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007552:	f000 f917 	bl	8007784 <prvIsQueueEmpty>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f43f af4d 	beq.w	80073f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007564:	f001 fff6 	bl	8009554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800756a:	f000 f811 	bl	8007590 <prvGetDisinheritPriorityAfterTimeout>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fa4c 	bl	8008a14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800757c:	f002 f81a 	bl	80095b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007582:	4618      	mov	r0, r3
 8007584:	3738      	adds	r7, #56	; 0x38
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e001      	b.n	80075b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075b2:	68fb      	ldr	r3, [r7, #12]
	}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10d      	bne.n	80075fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d14d      	bne.n	8007682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f9a4 	bl	8008938 <xTaskPriorityDisinherit>
 80075f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	e043      	b.n	8007682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d119      	bne.n	8007634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6858      	ldr	r0, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	f002 fb70 	bl	8009cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	429a      	cmp	r2, r3
 8007628:	d32b      	bcc.n	8007682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	e026      	b.n	8007682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68d8      	ldr	r0, [r3, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	461a      	mov	r2, r3
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	f002 fb56 	bl	8009cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	425b      	negs	r3, r3
 800764e:	441a      	add	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d207      	bcs.n	8007670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	425b      	negs	r3, r3
 800766a:	441a      	add	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d105      	bne.n	8007682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3b01      	subs	r3, #1
 8007680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800768a:	697b      	ldr	r3, [r7, #20]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d018      	beq.n	80076d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	441a      	add	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d303      	bcc.n	80076c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68d9      	ldr	r1, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	461a      	mov	r2, r3
 80076d2:	6838      	ldr	r0, [r7, #0]
 80076d4:	f002 fb0c 	bl	8009cf0 <memcpy>
	}
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e8:	f001 ff34 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f4:	e011      	b.n	800771a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d012      	beq.n	8007724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fe60 	bl	80083c8 <xTaskRemoveFromEventList>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800770e:	f000 ff99 	bl	8008644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	3b01      	subs	r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800771a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	dce9      	bgt.n	80076f6 <prvUnlockQueue+0x16>
 8007722:	e000      	b.n	8007726 <prvUnlockQueue+0x46>
					break;
 8007724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800772e:	f001 ff41 	bl	80095b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007732:	f001 ff0f 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800773c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800773e:	e011      	b.n	8007764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d012      	beq.n	800776e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3310      	adds	r3, #16
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fe3b 	bl	80083c8 <xTaskRemoveFromEventList>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007758:	f000 ff74 	bl	8008644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	3b01      	subs	r3, #1
 8007760:	b2db      	uxtb	r3, r3
 8007762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dce9      	bgt.n	8007740 <prvUnlockQueue+0x60>
 800776c:	e000      	b.n	8007770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800776e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	22ff      	movs	r2, #255	; 0xff
 8007774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007778:	f001 ff1c 	bl	80095b4 <vPortExitCritical>
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800778c:	f001 fee2 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e001      	b.n	80077a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077a2:	f001 ff07 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80077a6:	68fb      	ldr	r3, [r7, #12]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b8:	f001 fecc 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d102      	bne.n	80077ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e001      	b.n	80077d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077d2:	f001 feef 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80077d6:	68fb      	ldr	r3, [r7, #12]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e014      	b.n	800781a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077f0:	4a0f      	ldr	r2, [pc, #60]	; (8007830 <vQueueAddToRegistry+0x50>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077fc:	490c      	ldr	r1, [pc, #48]	; (8007830 <vQueueAddToRegistry+0x50>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007806:	4a0a      	ldr	r2, [pc, #40]	; (8007830 <vQueueAddToRegistry+0x50>)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4413      	add	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007812:	e006      	b.n	8007822 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b07      	cmp	r3, #7
 800781e:	d9e7      	bls.n	80077f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20001398 	.word	0x20001398

08007834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007844:	f001 fe86 	bl	8009554 <vPortEnterCritical>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800784e:	b25b      	sxtb	r3, r3
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d103      	bne.n	800785e <vQueueWaitForMessageRestricted+0x2a>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007864:	b25b      	sxtb	r3, r3
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d103      	bne.n	8007874 <vQueueWaitForMessageRestricted+0x40>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007874:	f001 fe9e 	bl	80095b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fd71 	bl	8008370 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800788e:	6978      	ldr	r0, [r7, #20]
 8007890:	f7ff ff26 	bl	80076e0 <prvUnlockQueue>
	}
 8007894:	bf00      	nop
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08e      	sub	sp, #56	; 0x38
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	623b      	str	r3, [r7, #32]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	61fb      	str	r3, [r7, #28]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078e2:	2364      	movs	r3, #100	; 0x64
 80078e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b64      	cmp	r3, #100	; 0x64
 80078ea:	d00a      	beq.n	8007902 <xTaskCreateStatic+0x66>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61bb      	str	r3, [r7, #24]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007902:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01e      	beq.n	8007948 <xTaskCreateStatic+0xac>
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01b      	beq.n	8007948 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007918:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007922:	2300      	movs	r3, #0
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	f107 0314 	add.w	r3, r7, #20
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f850 	bl	80079e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007942:	f000 f8e3 	bl	8007b0c <prvAddNewTaskToReadyList>
 8007946:	e001      	b.n	800794c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800794c:	697b      	ldr	r3, [r7, #20]
	}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007956:	b580      	push	{r7, lr}
 8007958:	b08c      	sub	sp, #48	; 0x30
 800795a:	af04      	add	r7, sp, #16
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4618      	mov	r0, r3
 800796c:	f001 ff14 	bl	8009798 <pvPortMalloc>
 8007970:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007978:	2064      	movs	r0, #100	; 0x64
 800797a:	f001 ff0d 	bl	8009798 <pvPortMalloc>
 800797e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
 800798c:	e005      	b.n	800799a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800798e:	6978      	ldr	r0, [r7, #20]
 8007990:	f001 ffce 	bl	8009930 <vPortFree>
 8007994:	e001      	b.n	800799a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d017      	beq.n	80079d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	2300      	movs	r3, #0
 80079ac:	9303      	str	r3, [sp, #12]
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f80e 	bl	80079e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079c4:	69f8      	ldr	r0, [r7, #28]
 80079c6:	f000 f8a1 	bl	8007b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	e002      	b.n	80079d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079d6:	69bb      	ldr	r3, [r7, #24]
	}
 80079d8:	4618      	mov	r0, r3
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	461a      	mov	r2, r3
 80079f8:	21a5      	movs	r1, #165	; 0xa5
 80079fa:	f002 f947 	bl	8009c8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f023 0307 	bic.w	r3, r3, #7
 8007a16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	617b      	str	r3, [r7, #20]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01f      	beq.n	8007a84 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a44:	2300      	movs	r3, #0
 8007a46:	61fb      	str	r3, [r7, #28]
 8007a48:	e012      	b.n	8007a70 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	7819      	ldrb	r1, [r3, #0]
 8007a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	3334      	adds	r3, #52	; 0x34
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	d9e9      	bls.n	8007a4a <prvInitialiseNewTask+0x6a>
 8007a76:	e000      	b.n	8007a7a <prvInitialiseNewTask+0x9a>
			{
				break;
 8007a78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a82:	e003      	b.n	8007a8c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	2b37      	cmp	r3, #55	; 0x37
 8007a90:	d901      	bls.n	8007a96 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a92:	2337      	movs	r3, #55	; 0x37
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe ff61 	bl	8006974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe ff5c 	bl	8006974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2200      	movs	r2, #0
 8007adc:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	68f9      	ldr	r1, [r7, #12]
 8007aea:	69b8      	ldr	r0, [r7, #24]
 8007aec:	f001 fc02 	bl	80092f4 <pxPortInitialiseStack>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b02:	bf00      	nop
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b14:	f001 fd1e 	bl	8009554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b18:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b22:	4b2c      	ldr	r3, [pc, #176]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b2a:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b30:	4b27      	ldr	r3, [pc, #156]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d110      	bne.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b38:	f000 fdaa 	bl	8008690 <prvInitialiseTaskLists>
 8007b3c:	e00d      	b.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b3e:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <prvAddNewTaskToReadyList+0xcc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d109      	bne.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d802      	bhi.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b64:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <prvAddNewTaskToReadyList+0xd4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d903      	bls.n	8007b80 <prvAddNewTaskToReadyList+0x74>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <prvAddNewTaskToReadyList+0xd4>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4a15      	ldr	r2, [pc, #84]	; (8007be4 <prvAddNewTaskToReadyList+0xd8>)
 8007b8e:	441a      	add	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fef9 	bl	800698e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b9c:	f001 fd0a 	bl	80095b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ba0:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <prvAddNewTaskToReadyList+0xcc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00e      	beq.n	8007bc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d207      	bcs.n	8007bc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <prvAddNewTaskToReadyList+0xdc>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200018ac 	.word	0x200018ac
 8007bd4:	200013d8 	.word	0x200013d8
 8007bd8:	200018b8 	.word	0x200018b8
 8007bdc:	200018c8 	.word	0x200018c8
 8007be0:	200018b4 	.word	0x200018b4
 8007be4:	200013dc 	.word	0x200013dc
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007bf4:	f001 fcae 	bl	8009554 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <vTaskDelete+0x18>
 8007bfe:	4b2c      	ldr	r3, [pc, #176]	; (8007cb0 <vTaskDelete+0xc4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	e000      	b.n	8007c06 <vTaskDelete+0x1a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe ff1b 	bl	8006a48 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe ff12 	bl	8006a48 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007c24:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <vTaskDelete+0xc8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a22      	ldr	r2, [pc, #136]	; (8007cb4 <vTaskDelete+0xc8>)
 8007c2c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007c2e:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <vTaskDelete+0xc4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d10b      	bne.n	8007c50 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	481e      	ldr	r0, [pc, #120]	; (8007cb8 <vTaskDelete+0xcc>)
 8007c40:	f7fe fea5 	bl	800698e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <vTaskDelete+0xd0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <vTaskDelete+0xd0>)
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	e009      	b.n	8007c64 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <vTaskDelete+0xd4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	4a1a      	ldr	r2, [pc, #104]	; (8007cc0 <vTaskDelete+0xd4>)
 8007c58:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fd86 	bl	800876c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007c60:	f000 fdb4 	bl	80087cc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007c64:	f001 fca6 	bl	80095b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007c68:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <vTaskDelete+0xd8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007c70:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <vTaskDelete+0xc4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d116      	bne.n	8007ca8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <vTaskDelete+0xdc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <vTaskDelete+0xac>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60bb      	str	r3, [r7, #8]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <vTaskDelete+0xe0>)
 8007c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	200013d8 	.word	0x200013d8
 8007cb4:	200018c8 	.word	0x200018c8
 8007cb8:	20001880 	.word	0x20001880
 8007cbc:	20001894 	.word	0x20001894
 8007cc0:	200018ac 	.word	0x200018ac
 8007cc4:	200018b8 	.word	0x200018b8
 8007cc8:	200018d4 	.word	0x200018d4
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d017      	beq.n	8007d12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ce2:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <vTaskDelay+0x60>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <vTaskDelay+0x30>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	60bb      	str	r3, [r7, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d00:	f000 f8e8 	bl	8007ed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d04:	2100      	movs	r1, #0
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 ff32 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d0c:	f000 f8f0 	bl	8007ef0 <xTaskResumeAll>
 8007d10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d107      	bne.n	8007d28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <vTaskDelay+0x64>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200018d4 	.word	0x200018d4
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <eTaskGetState+0x28>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60bb      	str	r3, [r7, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007d60:	4b23      	ldr	r3, [pc, #140]	; (8007df0 <eTaskGetState+0xb8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d102      	bne.n	8007d70 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	77fb      	strb	r3, [r7, #31]
 8007d6e:	e03a      	b.n	8007de6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8007d70:	f001 fbf0 	bl	8009554 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	; (8007df4 <eTaskGetState+0xbc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007d80:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <eTaskGetState+0xc0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007d86:	f001 fc15 	bl	80095b4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d003      	beq.n	8007d9a <eTaskGetState+0x62>
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d102      	bne.n	8007da0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e022      	b.n	8007de6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <eTaskGetState+0xc4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d112      	bne.n	8007dce <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d102      	bne.n	8007dc2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e011      	b.n	8007de6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e00e      	b.n	8007de6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e00b      	b.n	8007de6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	4a0b      	ldr	r2, [pc, #44]	; (8007e00 <eTaskGetState+0xc8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d002      	beq.n	8007ddc <eTaskGetState+0xa4>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007ddc:	2304      	movs	r3, #4
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e001      	b.n	8007de6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007de2:	2301      	movs	r3, #1
 8007de4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007de6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200013d8 	.word	0x200013d8
 8007df4:	20001864 	.word	0x20001864
 8007df8:	20001868 	.word	0x20001868
 8007dfc:	20001898 	.word	0x20001898
 8007e00:	20001880 	.word	0x20001880

08007e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e12:	463a      	mov	r2, r7
 8007e14:	1d39      	adds	r1, r7, #4
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fb68 	bl	80064f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	9202      	str	r2, [sp, #8]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	460a      	mov	r2, r1
 8007e32:	4922      	ldr	r1, [pc, #136]	; (8007ebc <vTaskStartScheduler+0xb8>)
 8007e34:	4822      	ldr	r0, [pc, #136]	; (8007ec0 <vTaskStartScheduler+0xbc>)
 8007e36:	f7ff fd31 	bl	800789c <xTaskCreateStatic>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <vTaskStartScheduler+0xc0>)
 8007e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e40:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <vTaskStartScheduler+0xc0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e001      	b.n	8007e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e58:	f000 fede 	bl	8008c18 <xTimerCreateTimerTask>
 8007e5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d118      	bne.n	8007e96 <vTaskStartScheduler+0x92>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	613b      	str	r3, [r7, #16]
}
 8007e76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <vTaskStartScheduler+0xc4>)
 8007e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e80:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <vTaskStartScheduler+0xc8>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e86:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <vTaskStartScheduler+0xcc>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007e8c:	f7f8 fb26 	bl	80004dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e90:	f001 fabe 	bl	8009410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e94:	e00e      	b.n	8007eb4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d10a      	bne.n	8007eb4 <vTaskStartScheduler+0xb0>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60fb      	str	r3, [r7, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vTaskStartScheduler+0xae>
}
 8007eb4:	bf00      	nop
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	08009db8 	.word	0x08009db8
 8007ec0:	0800865d 	.word	0x0800865d
 8007ec4:	200018d0 	.word	0x200018d0
 8007ec8:	200018cc 	.word	0x200018cc
 8007ecc:	200018b8 	.word	0x200018b8
 8007ed0:	200018b0 	.word	0x200018b0

08007ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <vTaskSuspendAll+0x18>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3301      	adds	r3, #1
 8007ede:	4a03      	ldr	r2, [pc, #12]	; (8007eec <vTaskSuspendAll+0x18>)
 8007ee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ee2:	bf00      	nop
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	200018d4 	.word	0x200018d4

08007ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007efe:	4b42      	ldr	r3, [pc, #264]	; (8008008 <xTaskResumeAll+0x118>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <xTaskResumeAll+0x2c>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f1c:	f001 fb1a 	bl	8009554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f20:	4b39      	ldr	r3, [pc, #228]	; (8008008 <xTaskResumeAll+0x118>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	4a38      	ldr	r2, [pc, #224]	; (8008008 <xTaskResumeAll+0x118>)
 8007f28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2a:	4b37      	ldr	r3, [pc, #220]	; (8008008 <xTaskResumeAll+0x118>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d162      	bne.n	8007ff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f32:	4b36      	ldr	r3, [pc, #216]	; (800800c <xTaskResumeAll+0x11c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d05e      	beq.n	8007ff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f3a:	e02f      	b.n	8007f9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3c:	4b34      	ldr	r3, [pc, #208]	; (8008010 <xTaskResumeAll+0x120>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3318      	adds	r3, #24
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fd7d 	bl	8006a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fd78 	bl	8006a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5c:	4b2d      	ldr	r3, [pc, #180]	; (8008014 <xTaskResumeAll+0x124>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d903      	bls.n	8007f6c <xTaskResumeAll+0x7c>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <xTaskResumeAll+0x124>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4a27      	ldr	r2, [pc, #156]	; (8008018 <xTaskResumeAll+0x128>)
 8007f7a:	441a      	add	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fe fd03 	bl	800698e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8c:	4b23      	ldr	r3, [pc, #140]	; (800801c <xTaskResumeAll+0x12c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f96:	4b22      	ldr	r3, [pc, #136]	; (8008020 <xTaskResumeAll+0x130>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <xTaskResumeAll+0x120>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1cb      	bne.n	8007f3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007faa:	f000 fc0f 	bl	80087cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fae:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <xTaskResumeAll+0x134>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d010      	beq.n	8007fdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fba:	f000 f847 	bl	800804c <xTaskIncrementTick>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fc4:	4b16      	ldr	r3, [pc, #88]	; (8008020 <xTaskResumeAll+0x130>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f1      	bne.n	8007fba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <xTaskResumeAll+0x134>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <xTaskResumeAll+0x130>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <xTaskResumeAll+0x138>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff8:	f001 fadc 	bl	80095b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200018d4 	.word	0x200018d4
 800800c:	200018ac 	.word	0x200018ac
 8008010:	2000186c 	.word	0x2000186c
 8008014:	200018b4 	.word	0x200018b4
 8008018:	200013dc 	.word	0x200013dc
 800801c:	200013d8 	.word	0x200013d8
 8008020:	200018c0 	.word	0x200018c0
 8008024:	200018bc 	.word	0x200018bc
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <xTaskGetTickCount+0x1c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008038:	687b      	ldr	r3, [r7, #4]
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	200018b0 	.word	0x200018b0

0800804c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008056:	4b4f      	ldr	r3, [pc, #316]	; (8008194 <xTaskIncrementTick+0x148>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 808f 	bne.w	800817e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008060:	4b4d      	ldr	r3, [pc, #308]	; (8008198 <xTaskIncrementTick+0x14c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008068:	4a4b      	ldr	r2, [pc, #300]	; (8008198 <xTaskIncrementTick+0x14c>)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d120      	bne.n	80080b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008074:	4b49      	ldr	r3, [pc, #292]	; (800819c <xTaskIncrementTick+0x150>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <xTaskIncrementTick+0x48>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	603b      	str	r3, [r7, #0]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xTaskIncrementTick+0x46>
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <xTaskIncrementTick+0x150>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <xTaskIncrementTick+0x154>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a3f      	ldr	r2, [pc, #252]	; (800819c <xTaskIncrementTick+0x150>)
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	4a3f      	ldr	r2, [pc, #252]	; (80081a0 <xTaskIncrementTick+0x154>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	4b3e      	ldr	r3, [pc, #248]	; (80081a4 <xTaskIncrementTick+0x158>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <xTaskIncrementTick+0x158>)
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	f000 fb8b 	bl	80087cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080b6:	4b3c      	ldr	r3, [pc, #240]	; (80081a8 <xTaskIncrementTick+0x15c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d349      	bcc.n	8008154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c0:	4b36      	ldr	r3, [pc, #216]	; (800819c <xTaskIncrementTick+0x150>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d104      	bne.n	80080d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ca:	4b37      	ldr	r3, [pc, #220]	; (80081a8 <xTaskIncrementTick+0x15c>)
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	601a      	str	r2, [r3, #0]
					break;
 80080d2:	e03f      	b.n	8008154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d4:	4b31      	ldr	r3, [pc, #196]	; (800819c <xTaskIncrementTick+0x150>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d203      	bcs.n	80080f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080ec:	4a2e      	ldr	r2, [pc, #184]	; (80081a8 <xTaskIncrementTick+0x15c>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080f2:	e02f      	b.n	8008154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fca5 	bl	8006a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	3318      	adds	r3, #24
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fc9c 	bl	8006a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4b25      	ldr	r3, [pc, #148]	; (80081ac <xTaskIncrementTick+0x160>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d903      	bls.n	8008124 <xTaskIncrementTick+0xd8>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a22      	ldr	r2, [pc, #136]	; (80081ac <xTaskIncrementTick+0x160>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <xTaskIncrementTick+0x164>)
 8008132:	441a      	add	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fe fc27 	bl	800698e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <xTaskIncrementTick+0x168>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d3b8      	bcc.n	80080c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008152:	e7b5      	b.n	80080c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <xTaskIncrementTick+0x168>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	4915      	ldr	r1, [pc, #84]	; (80081b0 <xTaskIncrementTick+0x164>)
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d901      	bls.n	8008170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008170:	4b11      	ldr	r3, [pc, #68]	; (80081b8 <xTaskIncrementTick+0x16c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d007      	beq.n	8008188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e004      	b.n	8008188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <xTaskIncrementTick+0x170>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a0d      	ldr	r2, [pc, #52]	; (80081bc <xTaskIncrementTick+0x170>)
 8008186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008188:	697b      	ldr	r3, [r7, #20]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200018d4 	.word	0x200018d4
 8008198:	200018b0 	.word	0x200018b0
 800819c:	20001864 	.word	0x20001864
 80081a0:	20001868 	.word	0x20001868
 80081a4:	200018c4 	.word	0x200018c4
 80081a8:	200018cc 	.word	0x200018cc
 80081ac:	200018b4 	.word	0x200018b4
 80081b0:	200013dc 	.word	0x200013dc
 80081b4:	200013d8 	.word	0x200013d8
 80081b8:	200018c0 	.word	0x200018c0
 80081bc:	200018bc 	.word	0x200018bc

080081c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081c6:	4b33      	ldr	r3, [pc, #204]	; (8008294 <vTaskSwitchContext+0xd4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081ce:	4b32      	ldr	r3, [pc, #200]	; (8008298 <vTaskSwitchContext+0xd8>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081d4:	e05a      	b.n	800828c <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80081d6:	4b30      	ldr	r3, [pc, #192]	; (8008298 <vTaskSwitchContext+0xd8>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80081dc:	f7f8 f985 	bl	80004ea <getRunTimeCounterValue>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4a2e      	ldr	r2, [pc, #184]	; (800829c <vTaskSwitchContext+0xdc>)
 80081e4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80081e6:	4b2d      	ldr	r3, [pc, #180]	; (800829c <vTaskSwitchContext+0xdc>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <vTaskSwitchContext+0xe0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d909      	bls.n	8008206 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80081f2:	4b2c      	ldr	r3, [pc, #176]	; (80082a4 <vTaskSwitchContext+0xe4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <vTaskSwitchContext+0xdc>)
 80081fa:	6810      	ldr	r0, [r2, #0]
 80081fc:	4a28      	ldr	r2, [pc, #160]	; (80082a0 <vTaskSwitchContext+0xe0>)
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	1a82      	subs	r2, r0, r2
 8008202:	440a      	add	r2, r1
 8008204:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008206:	4b25      	ldr	r3, [pc, #148]	; (800829c <vTaskSwitchContext+0xdc>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a25      	ldr	r2, [pc, #148]	; (80082a0 <vTaskSwitchContext+0xe0>)
 800820c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820e:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <vTaskSwitchContext+0xe8>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e010      	b.n	8008238 <vTaskSwitchContext+0x78>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <vTaskSwitchContext+0x72>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	607b      	str	r3, [r7, #4]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vTaskSwitchContext+0x70>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3b01      	subs	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	491c      	ldr	r1, [pc, #112]	; (80082ac <vTaskSwitchContext+0xec>)
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0e4      	beq.n	8008216 <vTaskSwitchContext+0x56>
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4a15      	ldr	r2, [pc, #84]	; (80082ac <vTaskSwitchContext+0xec>)
 8008258:	4413      	add	r3, r2
 800825a:	60bb      	str	r3, [r7, #8]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	3308      	adds	r3, #8
 800826e:	429a      	cmp	r2, r3
 8008270:	d104      	bne.n	800827c <vTaskSwitchContext+0xbc>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	605a      	str	r2, [r3, #4]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4a08      	ldr	r2, [pc, #32]	; (80082a4 <vTaskSwitchContext+0xe4>)
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <vTaskSwitchContext+0xe8>)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6013      	str	r3, [r2, #0]
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	200018d4 	.word	0x200018d4
 8008298:	200018c0 	.word	0x200018c0
 800829c:	200018dc 	.word	0x200018dc
 80082a0:	200018d8 	.word	0x200018d8
 80082a4:	200013d8 	.word	0x200013d8
 80082a8:	200018b4 	.word	0x200018b4
 80082ac:	200013dc 	.word	0x200013dc

080082b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	60fb      	str	r3, [r7, #12]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082d6:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <vTaskPlaceOnEventList+0x44>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3318      	adds	r3, #24
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fe fb79 	bl	80069d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082e4:	2101      	movs	r1, #1
 80082e6:	6838      	ldr	r0, [r7, #0]
 80082e8:	f000 fc42 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200013d8 	.word	0x200013d8

080082f8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	617b      	str	r3, [r7, #20]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <vTaskPlaceOnUnorderedEventList+0x74>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008348:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800834a:	4b08      	ldr	r3, [pc, #32]	; (800836c <vTaskPlaceOnUnorderedEventList+0x74>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3318      	adds	r3, #24
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fe fb1b 	bl	800698e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008358:	2101      	movs	r1, #1
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fc08 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
}
 8008360:	bf00      	nop
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200018d4 	.word	0x200018d4
 800836c:	200013d8 	.word	0x200013d8

08008370 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	617b      	str	r3, [r7, #20]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3318      	adds	r3, #24
 800839e:	4619      	mov	r1, r3
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7fe faf4 	bl	800698e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	68b8      	ldr	r0, [r7, #8]
 80083b6:	f000 fbdb 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
	}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	200013d8 	.word	0x200013d8

080083c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	60fb      	str	r3, [r7, #12]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	3318      	adds	r3, #24
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe fb25 	bl	8006a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fe:	4b1e      	ldr	r3, [pc, #120]	; (8008478 <xTaskRemoveFromEventList+0xb0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d11d      	bne.n	8008442 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fb1c 	bl	8006a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	4b19      	ldr	r3, [pc, #100]	; (800847c <xTaskRemoveFromEventList+0xb4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	429a      	cmp	r2, r3
 800841a:	d903      	bls.n	8008424 <xTaskRemoveFromEventList+0x5c>
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	4a16      	ldr	r2, [pc, #88]	; (800847c <xTaskRemoveFromEventList+0xb4>)
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <xTaskRemoveFromEventList+0xb8>)
 8008432:	441a      	add	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f7fe faa7 	bl	800698e <vListInsertEnd>
 8008440:	e005      	b.n	800844e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3318      	adds	r3, #24
 8008446:	4619      	mov	r1, r3
 8008448:	480e      	ldr	r0, [pc, #56]	; (8008484 <xTaskRemoveFromEventList+0xbc>)
 800844a:	f7fe faa0 	bl	800698e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <xTaskRemoveFromEventList+0xc0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d905      	bls.n	8008468 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <xTaskRemoveFromEventList+0xc4>)
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e001      	b.n	800846c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800846c:	697b      	ldr	r3, [r7, #20]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	200018d4 	.word	0x200018d4
 800847c:	200018b4 	.word	0x200018b4
 8008480:	200013dc 	.word	0x200013dc
 8008484:	2000186c 	.word	0x2000186c
 8008488:	200013d8 	.word	0x200013d8
 800848c:	200018c0 	.word	0x200018c0

08008490 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800849a:	4b29      	ldr	r3, [pc, #164]	; (8008540 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	613b      	str	r3, [r7, #16]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10a      	bne.n	80084e4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	60fb      	str	r3, [r7, #12]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe faaf 	bl	8006a48 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe faaa 	bl	8006a48 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f8:	4b12      	ldr	r3, [pc, #72]	; (8008544 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d903      	bls.n	8008508 <vTaskRemoveFromUnorderedEventList+0x78>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008516:	441a      	add	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fe fa35 	bl	800698e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008528:	4b08      	ldr	r3, [pc, #32]	; (800854c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	429a      	cmp	r2, r3
 8008530:	d902      	bls.n	8008538 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008532:	4b07      	ldr	r3, [pc, #28]	; (8008550 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
	}
}
 8008538:	bf00      	nop
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	200018d4 	.word	0x200018d4
 8008544:	200018b4 	.word	0x200018b4
 8008548:	200013dc 	.word	0x200013dc
 800854c:	200013d8 	.word	0x200013d8
 8008550:	200018c0 	.word	0x200018c0

08008554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <vTaskInternalSetTimeOutState+0x24>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <vTaskInternalSetTimeOutState+0x28>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	605a      	str	r2, [r3, #4]
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	200018c4 	.word	0x200018c4
 800857c:	200018b0 	.word	0x200018b0

08008580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	613b      	str	r3, [r7, #16]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60fb      	str	r3, [r7, #12]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085c2:	f000 ffc7 	bl	8009554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <xTaskCheckForTimeOut+0xbc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085de:	d102      	bne.n	80085e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e023      	b.n	800862e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b15      	ldr	r3, [pc, #84]	; (8008640 <xTaskCheckForTimeOut+0xc0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d007      	beq.n	8008602 <xTaskCheckForTimeOut+0x82>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e015      	b.n	800862e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	429a      	cmp	r2, r3
 800860a:	d20b      	bcs.n	8008624 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	1ad2      	subs	r2, r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff ff9b 	bl	8008554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	e004      	b.n	800862e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800862a:	2301      	movs	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800862e:	f000 ffc1 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8008632:	69fb      	ldr	r3, [r7, #28]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200018b0 	.word	0x200018b0
 8008640:	200018c4 	.word	0x200018c4

08008644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <vTaskMissedYield+0x14>)
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	200018c0 	.word	0x200018c0

0800865c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008664:	f000 f854 	bl	8008710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008668:	4b07      	ldr	r3, [pc, #28]	; (8008688 <prvIdleTask+0x2c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d907      	bls.n	8008680 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <prvIdleTask+0x30>)
 8008672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008680:	f7f7 ff3b 	bl	80004fa <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008684:	e7ee      	b.n	8008664 <prvIdleTask+0x8>
 8008686:	bf00      	nop
 8008688:	200013dc 	.word	0x200013dc
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008696:	2300      	movs	r3, #0
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	e00c      	b.n	80086b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <prvInitialiseTaskLists+0x60>)
 80086a8:	4413      	add	r3, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe f942 	bl	8006934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3301      	adds	r3, #1
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b37      	cmp	r3, #55	; 0x37
 80086ba:	d9ef      	bls.n	800869c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086bc:	480d      	ldr	r0, [pc, #52]	; (80086f4 <prvInitialiseTaskLists+0x64>)
 80086be:	f7fe f939 	bl	8006934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086c2:	480d      	ldr	r0, [pc, #52]	; (80086f8 <prvInitialiseTaskLists+0x68>)
 80086c4:	f7fe f936 	bl	8006934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086c8:	480c      	ldr	r0, [pc, #48]	; (80086fc <prvInitialiseTaskLists+0x6c>)
 80086ca:	f7fe f933 	bl	8006934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ce:	480c      	ldr	r0, [pc, #48]	; (8008700 <prvInitialiseTaskLists+0x70>)
 80086d0:	f7fe f930 	bl	8006934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086d4:	480b      	ldr	r0, [pc, #44]	; (8008704 <prvInitialiseTaskLists+0x74>)
 80086d6:	f7fe f92d 	bl	8006934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvInitialiseTaskLists+0x78>)
 80086dc:	4a05      	ldr	r2, [pc, #20]	; (80086f4 <prvInitialiseTaskLists+0x64>)
 80086de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <prvInitialiseTaskLists+0x7c>)
 80086e2:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <prvInitialiseTaskLists+0x68>)
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200013dc 	.word	0x200013dc
 80086f4:	2000183c 	.word	0x2000183c
 80086f8:	20001850 	.word	0x20001850
 80086fc:	2000186c 	.word	0x2000186c
 8008700:	20001880 	.word	0x20001880
 8008704:	20001898 	.word	0x20001898
 8008708:	20001864 	.word	0x20001864
 800870c:	20001868 	.word	0x20001868

08008710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008716:	e019      	b.n	800874c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008718:	f000 ff1c 	bl	8009554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871c:	4b10      	ldr	r3, [pc, #64]	; (8008760 <prvCheckTasksWaitingTermination+0x50>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe f98d 	bl	8006a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <prvCheckTasksWaitingTermination+0x54>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3b01      	subs	r3, #1
 8008734:	4a0b      	ldr	r2, [pc, #44]	; (8008764 <prvCheckTasksWaitingTermination+0x54>)
 8008736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3b01      	subs	r3, #1
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 8008740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008742:	f000 ff37 	bl	80095b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f810 	bl	800876c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <prvCheckTasksWaitingTermination+0x58>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e1      	bne.n	8008718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20001880 	.word	0x20001880
 8008764:	200018ac 	.word	0x200018ac
 8008768:	20001894 	.word	0x20001894

0800876c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	4618      	mov	r0, r3
 8008784:	f001 f8d4 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 f8d1 	bl	8009930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800878e:	e018      	b.n	80087c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008796:	2b01      	cmp	r3, #1
 8008798:	d103      	bne.n	80087a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 f8c8 	bl	8009930 <vPortFree>
	}
 80087a0:	e00f      	b.n	80087c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d00a      	beq.n	80087c2 <prvDeleteTCB+0x56>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	60fb      	str	r3, [r7, #12]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <prvDeleteTCB+0x54>
	}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087e4:	e008      	b.n	80087f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	20001864 	.word	0x20001864
 8008808:	200018cc 	.word	0x200018cc

0800880c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <xTaskGetCurrentTaskHandle+0x1c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008818:	687b      	ldr	r3, [r7, #4]
	}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	200013d8 	.word	0x200013d8

0800882c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <xTaskGetSchedulerState+0x34>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800883a:	2301      	movs	r3, #1
 800883c:	607b      	str	r3, [r7, #4]
 800883e:	e008      	b.n	8008852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008840:	4b08      	ldr	r3, [pc, #32]	; (8008864 <xTaskGetSchedulerState+0x38>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008848:	2302      	movs	r3, #2
 800884a:	607b      	str	r3, [r7, #4]
 800884c:	e001      	b.n	8008852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008852:	687b      	ldr	r3, [r7, #4]
	}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	200018b8 	.word	0x200018b8
 8008864:	200018d4 	.word	0x200018d4

08008868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d051      	beq.n	8008922 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008882:	4b2a      	ldr	r3, [pc, #168]	; (800892c <xTaskPriorityInherit+0xc4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	429a      	cmp	r2, r3
 800888a:	d241      	bcs.n	8008910 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	db06      	blt.n	80088a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008894:	4b25      	ldr	r3, [pc, #148]	; (800892c <xTaskPriorityInherit+0xc4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6959      	ldr	r1, [r3, #20]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4a1f      	ldr	r2, [pc, #124]	; (8008930 <xTaskPriorityInherit+0xc8>)
 80088b4:	4413      	add	r3, r2
 80088b6:	4299      	cmp	r1, r3
 80088b8:	d122      	bne.n	8008900 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	3304      	adds	r3, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe f8c2 	bl	8006a48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088c4:	4b19      	ldr	r3, [pc, #100]	; (800892c <xTaskPriorityInherit+0xc4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4b18      	ldr	r3, [pc, #96]	; (8008934 <xTaskPriorityInherit+0xcc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d903      	bls.n	80088e2 <xTaskPriorityInherit+0x7a>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	4a15      	ldr	r2, [pc, #84]	; (8008934 <xTaskPriorityInherit+0xcc>)
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4a10      	ldr	r2, [pc, #64]	; (8008930 <xTaskPriorityInherit+0xc8>)
 80088f0:	441a      	add	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f7fe f848 	bl	800698e <vListInsertEnd>
 80088fe:	e004      	b.n	800890a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <xTaskPriorityInherit+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	e008      	b.n	8008922 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <xTaskPriorityInherit+0xc4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	429a      	cmp	r2, r3
 800891c:	d201      	bcs.n	8008922 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800891e:	2301      	movs	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008922:	68fb      	ldr	r3, [r7, #12]
	}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200013d8 	.word	0x200013d8
 8008930:	200013dc 	.word	0x200013dc
 8008934:	200018b4 	.word	0x200018b4

08008938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d056      	beq.n	80089fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800894e:	4b2e      	ldr	r3, [pc, #184]	; (8008a08 <xTaskPriorityDisinherit+0xd0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d00a      	beq.n	800896e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	e7fe      	b.n	800896c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60bb      	str	r3, [r7, #8]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	1e5a      	subs	r2, r3, #1
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899e:	429a      	cmp	r2, r3
 80089a0:	d02c      	beq.n	80089fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d128      	bne.n	80089fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe f84a 	bl	8006a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <xTaskPriorityDisinherit+0xd4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <xTaskPriorityDisinherit+0xa4>
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a0c      	ldr	r2, [pc, #48]	; (8008a0c <xTaskPriorityDisinherit+0xd4>)
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <xTaskPriorityDisinherit+0xd8>)
 80089ea:	441a      	add	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7fd ffcb 	bl	800698e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089fc:	697b      	ldr	r3, [r7, #20]
	}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	200013d8 	.word	0x200013d8
 8008a0c:	200018b4 	.word	0x200018b4
 8008a10:	200013dc 	.word	0x200013dc

08008a14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d06a      	beq.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d902      	bls.n	8008a5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	61fb      	str	r3, [r7, #28]
 8008a58:	e002      	b.n	8008a60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d04b      	beq.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d146      	bne.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a74:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d10a      	bne.n	8008a94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60bb      	str	r3, [r7, #8]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	db04      	blt.n	8008ab2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	6959      	ldr	r1, [r3, #20]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d11c      	bne.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fd ffbb 	bl	8006a48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d903      	bls.n	8008ae6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	4a0c      	ldr	r2, [pc, #48]	; (8008b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4a07      	ldr	r2, [pc, #28]	; (8008b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008af4:	441a      	add	r2, r3
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f7fd ff46 	bl	800698e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b02:	bf00      	nop
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200013d8 	.word	0x200013d8
 8008b10:	200013dc 	.word	0x200013dc
 8008b14:	200018b4 	.word	0x200018b4

08008b18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <uxTaskResetEventItemValue+0x2c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b26:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <uxTaskResetEventItemValue+0x2c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <uxTaskResetEventItemValue+0x2c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008b34:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008b36:	687b      	ldr	r3, [r7, #4]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	200013d8 	.word	0x200013d8

08008b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b4c:	4b07      	ldr	r3, [pc, #28]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8008b5e:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b60:	681b      	ldr	r3, [r3, #0]
	}
 8008b62:	4618      	mov	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	200013d8 	.word	0x200013d8

08008b70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b7a:	4b21      	ldr	r3, [pc, #132]	; (8008c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b80:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd ff5e 	bl	8006a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d10a      	bne.n	8008baa <prvAddCurrentTaskToDelayedList+0x3a>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b9a:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4819      	ldr	r0, [pc, #100]	; (8008c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ba4:	f7fd fef3 	bl	800698e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ba8:	e026      	b.n	8008bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4413      	add	r3, r2
 8008bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bb2:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d209      	bcs.n	8008bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7fd ff01 	bl	80069d6 <vListInsert>
}
 8008bd4:	e010      	b.n	8008bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fd fef7 	bl	80069d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d202      	bcs.n	8008bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bf2:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6013      	str	r3, [r2, #0]
}
 8008bf8:	bf00      	nop
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	200018b0 	.word	0x200018b0
 8008c04:	200013d8 	.word	0x200013d8
 8008c08:	20001898 	.word	0x20001898
 8008c0c:	20001868 	.word	0x20001868
 8008c10:	20001864 	.word	0x20001864
 8008c14:	200018cc 	.word	0x200018cc

08008c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c22:	f000 fb07 	bl	8009234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c26:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <xTimerCreateTimerTask+0x80>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d021      	beq.n	8008c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c36:	1d3a      	adds	r2, r7, #4
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	f107 030c 	add.w	r3, r7, #12
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fd fc6f 	bl	8006524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	9202      	str	r2, [sp, #8]
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	2302      	movs	r3, #2
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	2300      	movs	r3, #0
 8008c56:	460a      	mov	r2, r1
 8008c58:	4910      	ldr	r1, [pc, #64]	; (8008c9c <xTimerCreateTimerTask+0x84>)
 8008c5a:	4811      	ldr	r0, [pc, #68]	; (8008ca0 <xTimerCreateTimerTask+0x88>)
 8008c5c:	f7fe fe1e 	bl	800789c <xTaskCreateStatic>
 8008c60:	4603      	mov	r3, r0
 8008c62:	4a10      	ldr	r2, [pc, #64]	; (8008ca4 <xTimerCreateTimerTask+0x8c>)
 8008c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c66:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <xTimerCreateTimerTask+0x8c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	613b      	str	r3, [r7, #16]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c8e:	697b      	ldr	r3, [r7, #20]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20001910 	.word	0x20001910
 8008c9c:	08009de8 	.word	0x08009de8
 8008ca0:	08008ddd 	.word	0x08008ddd
 8008ca4:	20001914 	.word	0x20001914

08008ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	623b      	str	r3, [r7, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <xTimerGenericCommand+0x98>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d02a      	beq.n	8008d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	dc18      	bgt.n	8008d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cf0:	f7ff fd9c 	bl	800882c <xTaskGetSchedulerState>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d109      	bne.n	8008d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <xTimerGenericCommand+0x98>)
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f107 0110 	add.w	r1, r7, #16
 8008d02:	2300      	movs	r3, #0
 8008d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d06:	f7fe f8bd 	bl	8006e84 <xQueueGenericSend>
 8008d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d0c:	e012      	b.n	8008d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <xTimerGenericCommand+0x98>)
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f107 0110 	add.w	r1, r7, #16
 8008d16:	2300      	movs	r3, #0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7fe f8b3 	bl	8006e84 <xQueueGenericSend>
 8008d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d20:	e008      	b.n	8008d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d22:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <xTimerGenericCommand+0x98>)
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f107 0110 	add.w	r1, r7, #16
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	f7fe f9a7 	bl	8007080 <xQueueGenericSendFromISR>
 8008d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	; 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20001910 	.word	0x20001910

08008d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <prvProcessExpiredTimer+0x94>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd fe73 	bl	8006a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d022      	beq.n	8008db6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	18d1      	adds	r1, r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	6978      	ldr	r0, [r7, #20]
 8008d7e:	f000 f8d1 	bl	8008f24 <prvInsertTimerInActiveList>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01f      	beq.n	8008dc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	2100      	movs	r1, #0
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff88 	bl	8008ca8 <xTimerGenericCommand>
 8008d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d113      	bne.n	8008dc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	6978      	ldr	r0, [r7, #20]
 8008dce:	4798      	blx	r3
}
 8008dd0:	bf00      	nop
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20001908 	.word	0x20001908

08008ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f857 	bl	8008e9c <prvGetNextExpireTime>
 8008dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4619      	mov	r1, r3
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 f803 	bl	8008e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dfa:	f000 f8d5 	bl	8008fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dfe:	e7f1      	b.n	8008de4 <prvTimerTask+0x8>

08008e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e0a:	f7ff f863 	bl	8007ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f866 	bl	8008ee4 <prvSampleTimeNow>
 8008e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d130      	bne.n	8008e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <prvProcessTimerOrBlockTask+0x3c>
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d806      	bhi.n	8008e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e2e:	f7ff f85f 	bl	8007ef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff85 	bl	8008d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e3a:	e024      	b.n	8008e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e42:	4b13      	ldr	r3, [pc, #76]	; (8008e90 <prvProcessTimerOrBlockTask+0x90>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <prvProcessTimerOrBlockTask+0x50>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <prvProcessTimerOrBlockTask+0x52>
 8008e50:	2300      	movs	r3, #0
 8008e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e54:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <prvProcessTimerOrBlockTask+0x94>)
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	4619      	mov	r1, r3
 8008e62:	f7fe fce7 	bl	8007834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e66:	f7ff f843 	bl	8007ef0 <xTaskResumeAll>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e70:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <prvProcessTimerOrBlockTask+0x98>)
 8008e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
}
 8008e80:	e001      	b.n	8008e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e82:	f7ff f835 	bl	8007ef0 <xTaskResumeAll>
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	2000190c 	.word	0x2000190c
 8008e94:	20001910 	.word	0x20001910
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <prvGetNextExpireTime+0x44>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <prvGetNextExpireTime+0x16>
 8008eae:	2201      	movs	r2, #1
 8008eb0:	e000      	b.n	8008eb4 <prvGetNextExpireTime+0x18>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <prvGetNextExpireTime+0x44>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e001      	b.n	8008ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20001908 	.word	0x20001908

08008ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eec:	f7ff f89e 	bl	800802c <xTaskGetTickCount>
 8008ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <prvSampleTimeNow+0x3c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d205      	bcs.n	8008f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008efc:	f000 f936 	bl	800916c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e002      	b.n	8008f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <prvSampleTimeNow+0x3c>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20001918 	.word	0x20001918

08008f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d812      	bhi.n	8008f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e01b      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f5e:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <prvInsertTimerInActiveList+0x7c>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd fd34 	bl	80069d6 <vListInsert>
 8008f6e:	e012      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d206      	bcs.n	8008f86 <prvInsertTimerInActiveList+0x62>
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d302      	bcc.n	8008f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e007      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <prvInsertTimerInActiveList+0x80>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fd fd20 	bl	80069d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f96:	697b      	ldr	r3, [r7, #20]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	2000190c 	.word	0x2000190c
 8008fa4:	20001908 	.word	0x20001908

08008fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	; 0x38
 8008fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fae:	e0ca      	b.n	8009146 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da18      	bge.n	8008fe8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fb6:	1d3b      	adds	r3, r7, #4
 8008fb8:	3304      	adds	r3, #4
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61fb      	str	r3, [r7, #28]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fde:	6850      	ldr	r0, [r2, #4]
 8008fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe2:	6892      	ldr	r2, [r2, #8]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f2c0 80ab 	blt.w	8009146 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	3304      	adds	r3, #4
 8009000:	4618      	mov	r0, r3
 8009002:	f7fd fd21 	bl	8006a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009006:	463b      	mov	r3, r7
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff ff6b 	bl	8008ee4 <prvSampleTimeNow>
 800900e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b09      	cmp	r3, #9
 8009014:	f200 8096 	bhi.w	8009144 <prvProcessReceivedCommands+0x19c>
 8009018:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <prvProcessReceivedCommands+0x78>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009049 	.word	0x08009049
 8009024:	08009049 	.word	0x08009049
 8009028:	08009049 	.word	0x08009049
 800902c:	080090bd 	.word	0x080090bd
 8009030:	080090d1 	.word	0x080090d1
 8009034:	0800911b 	.word	0x0800911b
 8009038:	08009049 	.word	0x08009049
 800903c:	08009049 	.word	0x08009049
 8009040:	080090bd 	.word	0x080090bd
 8009044:	080090d1 	.word	0x080090d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800904e:	f043 0301 	orr.w	r3, r3, #1
 8009052:	b2da      	uxtb	r2, r3
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	18d1      	adds	r1, r2, r3
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009068:	f7ff ff5c 	bl	8008f24 <prvInsertTimerInActiveList>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d069      	beq.n	8009146 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05e      	beq.n	8009146 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	441a      	add	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	2300      	movs	r3, #0
 8009096:	2100      	movs	r1, #0
 8009098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909a:	f7ff fe05 	bl	8008ca8 <xTimerGenericCommand>
 800909e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d14f      	bne.n	8009146 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	61bb      	str	r3, [r7, #24]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c2:	f023 0301 	bic.w	r3, r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090ce:	e03a      	b.n	8009146 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d6:	f043 0301 	orr.w	r3, r3, #1
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	617b      	str	r3, [r7, #20]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	18d1      	adds	r1, r2, r3
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009114:	f7ff ff06 	bl	8008f24 <prvInsertTimerInActiveList>
					break;
 8009118:	e015      	b.n	8009146 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912a:	f000 fc01 	bl	8009930 <vPortFree>
 800912e:	e00a      	b.n	8009146 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009136:	f023 0301 	bic.w	r3, r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009142:	e000      	b.n	8009146 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009146:	4b08      	ldr	r3, [pc, #32]	; (8009168 <prvProcessReceivedCommands+0x1c0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1d39      	adds	r1, r7, #4
 800914c:	2200      	movs	r2, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe f832 	bl	80071b8 <xQueueReceive>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f af2a 	bne.w	8008fb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	3730      	adds	r7, #48	; 0x30
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20001910 	.word	0x20001910

0800916c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009172:	e048      	b.n	8009206 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009174:	4b2d      	ldr	r3, [pc, #180]	; (800922c <prvSwitchTimerLists+0xc0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800917e:	4b2b      	ldr	r3, [pc, #172]	; (800922c <prvSwitchTimerLists+0xc0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3304      	adds	r3, #4
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fc5b 	bl	8006a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d02e      	beq.n	8009206 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d90e      	bls.n	80091d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091c6:	4b19      	ldr	r3, [pc, #100]	; (800922c <prvSwitchTimerLists+0xc0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4619      	mov	r1, r3
 80091d0:	4610      	mov	r0, r2
 80091d2:	f7fd fc00 	bl	80069d6 <vListInsert>
 80091d6:	e016      	b.n	8009206 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091d8:	2300      	movs	r3, #0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2300      	movs	r3, #0
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	2100      	movs	r1, #0
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff fd60 	bl	8008ca8 <xTimerGenericCommand>
 80091e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	603b      	str	r3, [r7, #0]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <prvSwitchTimerLists+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1b1      	bne.n	8009174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <prvSwitchTimerLists+0xc0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009216:	4b06      	ldr	r3, [pc, #24]	; (8009230 <prvSwitchTimerLists+0xc4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a04      	ldr	r2, [pc, #16]	; (800922c <prvSwitchTimerLists+0xc0>)
 800921c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800921e:	4a04      	ldr	r2, [pc, #16]	; (8009230 <prvSwitchTimerLists+0xc4>)
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	6013      	str	r3, [r2, #0]
}
 8009224:	bf00      	nop
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20001908 	.word	0x20001908
 8009230:	2000190c 	.word	0x2000190c

08009234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800923a:	f000 f98b 	bl	8009554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <prvCheckForValidListAndQueue+0x60>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d120      	bne.n	8009288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009246:	4814      	ldr	r0, [pc, #80]	; (8009298 <prvCheckForValidListAndQueue+0x64>)
 8009248:	f7fd fb74 	bl	8006934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800924c:	4813      	ldr	r0, [pc, #76]	; (800929c <prvCheckForValidListAndQueue+0x68>)
 800924e:	f7fd fb71 	bl	8006934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009252:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <prvCheckForValidListAndQueue+0x6c>)
 8009254:	4a10      	ldr	r2, [pc, #64]	; (8009298 <prvCheckForValidListAndQueue+0x64>)
 8009256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009258:	4b12      	ldr	r3, [pc, #72]	; (80092a4 <prvCheckForValidListAndQueue+0x70>)
 800925a:	4a10      	ldr	r2, [pc, #64]	; (800929c <prvCheckForValidListAndQueue+0x68>)
 800925c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800925e:	2300      	movs	r3, #0
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <prvCheckForValidListAndQueue+0x74>)
 8009264:	4a11      	ldr	r2, [pc, #68]	; (80092ac <prvCheckForValidListAndQueue+0x78>)
 8009266:	2110      	movs	r1, #16
 8009268:	200a      	movs	r0, #10
 800926a:	f7fd fc7f 	bl	8006b6c <xQueueGenericCreateStatic>
 800926e:	4603      	mov	r3, r0
 8009270:	4a08      	ldr	r2, [pc, #32]	; (8009294 <prvCheckForValidListAndQueue+0x60>)
 8009272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009274:	4b07      	ldr	r3, [pc, #28]	; (8009294 <prvCheckForValidListAndQueue+0x60>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <prvCheckForValidListAndQueue+0x60>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	490b      	ldr	r1, [pc, #44]	; (80092b0 <prvCheckForValidListAndQueue+0x7c>)
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe faac 	bl	80077e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009288:	f000 f994 	bl	80095b4 <vPortExitCritical>
}
 800928c:	bf00      	nop
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20001910 	.word	0x20001910
 8009298:	200018e0 	.word	0x200018e0
 800929c:	200018f4 	.word	0x200018f4
 80092a0:	20001908 	.word	0x20001908
 80092a4:	2000190c 	.word	0x2000190c
 80092a8:	200019bc 	.word	0x200019bc
 80092ac:	2000191c 	.word	0x2000191c
 80092b0:	08009df0 	.word	0x08009df0

080092b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	; 0x28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80092c2:	f06f 0301 	mvn.w	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	f107 0114 	add.w	r1, r7, #20
 80092dc:	2300      	movs	r3, #0
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	f7fd fece 	bl	8007080 <xQueueGenericSendFromISR>
 80092e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3728      	adds	r7, #40	; 0x28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20001910 	.word	0x20001910

080092f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3b04      	subs	r3, #4
 8009304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800930c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3b04      	subs	r3, #4
 8009312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f023 0201 	bic.w	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3b04      	subs	r3, #4
 8009322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009324:	4a0c      	ldr	r2, [pc, #48]	; (8009358 <pxPortInitialiseStack+0x64>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b14      	subs	r3, #20
 800932e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3b04      	subs	r3, #4
 800933a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f06f 0202 	mvn.w	r2, #2
 8009342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3b20      	subs	r3, #32
 8009348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800934a:	68fb      	ldr	r3, [r7, #12]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	0800935d 	.word	0x0800935d

0800935c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009366:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <prvTaskExitError+0x54>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d00a      	beq.n	8009386 <prvTaskExitError+0x2a>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60fb      	str	r3, [r7, #12]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <prvTaskExitError+0x28>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800939a:	bf00      	nop
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0fc      	beq.n	800939c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000034 	.word	0x20000034
	...

080093c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	4770      	bx	lr
 80093dc:	f3af 8000 	nop.w

080093e0 <pxCurrentTCBConst2>:
 80093e0:	200013d8 	.word	0x200013d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <prvPortStartFirstTask+0x24>)
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f380 8808 	msr	MSP, r0
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8814 	msr	CONTROL, r0
 80093fa:	b662      	cpsie	i
 80093fc:	b661      	cpsie	f
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	df00      	svc	0
 8009408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800940a:	bf00      	nop
 800940c:	e000ed08 	.word	0xe000ed08

08009410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009416:	4b46      	ldr	r3, [pc, #280]	; (8009530 <xPortStartScheduler+0x120>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a46      	ldr	r2, [pc, #280]	; (8009534 <xPortStartScheduler+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10a      	bne.n	8009436 <xPortStartScheduler+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009436:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <xPortStartScheduler+0x12c>)
 8009458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xPortStartScheduler+0x130>)
 800947c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <xPortStartScheduler+0x134>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009484:	e009      	b.n	800949a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <xPortStartScheduler+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a2d      	ldr	r2, [pc, #180]	; (8009544 <xPortStartScheduler+0x134>)
 800948e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d0ef      	beq.n	8009486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0307 	rsb	r3, r3, #7
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d00a      	beq.n	80094c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <xPortStartScheduler+0x134>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xPortStartScheduler+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <xPortStartScheduler+0x134>)
 80094dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <xPortStartScheduler+0x138>)
 80094ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <xPortStartScheduler+0x138>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <xPortStartScheduler+0x138>)
 80094f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094fe:	f000 f8dd 	bl	80096bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <xPortStartScheduler+0x13c>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009508:	f000 f8fc 	bl	8009704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xPortStartScheduler+0x140>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <xPortStartScheduler+0x140>)
 8009512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009518:	f7ff ff66 	bl	80093e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800951c:	f7fe fe50 	bl	80081c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009520:	f7ff ff1c 	bl	800935c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed00 	.word	0xe000ed00
 8009534:	410fc271 	.word	0x410fc271
 8009538:	410fc270 	.word	0x410fc270
 800953c:	e000e400 	.word	0xe000e400
 8009540:	20001a0c 	.word	0x20001a0c
 8009544:	20001a10 	.word	0x20001a10
 8009548:	e000ed20 	.word	0xe000ed20
 800954c:	20000034 	.word	0x20000034
 8009550:	e000ef34 	.word	0xe000ef34

08009554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <vPortEnterCritical+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <vPortEnterCritical+0x58>)
 8009576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009578:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <vPortEnterCritical+0x58>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <vPortEnterCritical+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vPortEnterCritical+0x4a>
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000034 	.word	0x20000034
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <vPortExitCritical+0x50>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vPortExitCritical+0x24>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortExitCritical+0x50>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <vPortExitCritical+0x50>)
 80095e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <vPortExitCritical+0x42>
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f383 8811 	msr	BASEPRI, r3
}
 80095f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000034 	.word	0x20000034
	...

08009610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009610:	f3ef 8009 	mrs	r0, PSP
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <pxCurrentTCBConst>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f01e 0f10 	tst.w	lr, #16
 8009620:	bf08      	it	eq
 8009622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962a:	6010      	str	r0, [r2, #0]
 800962c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009634:	f380 8811 	msr	BASEPRI, r0
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f7fe fdbe 	bl	80081c0 <vTaskSwitchContext>
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f380 8811 	msr	BASEPRI, r0
 800964c:	bc09      	pop	{r0, r3}
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	6808      	ldr	r0, [r1, #0]
 8009652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009656:	f01e 0f10 	tst.w	lr, #16
 800965a:	bf08      	it	eq
 800965c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009660:	f380 8809 	msr	PSP, r0
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst>:
 8009670:	200013d8 	.word	0x200013d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009692:	f7fe fcdb 	bl	800804c <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <xPortSysTickHandler+0x40>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	20000028 	.word	0x20000028
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009712:	bf00      	nop
 8009714:	e000ed88 	.word	0xe000ed88

08009718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800971e:	f3ef 8305 	mrs	r3, IPSR
 8009722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d914      	bls.n	8009754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <vPortValidateInterruptPriority+0x70>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <vPortValidateInterruptPriority+0x74>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	429a      	cmp	r2, r3
 800973c:	d20a      	bcs.n	8009754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	607b      	str	r3, [r7, #4]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortValidateInterruptPriority+0x78>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x7c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x60>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	e000e3f0 	.word	0xe000e3f0
 800978c:	20001a0c 	.word	0x20001a0c
 8009790:	e000ed0c 	.word	0xe000ed0c
 8009794:	20001a10 	.word	0x20001a10

08009798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a4:	f7fe fb96 	bl	8007ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <pvPortMalloc+0x180>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b0:	f000 f920 	bl	80099f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <pvPortMalloc+0x184>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8093 	bne.w	80098e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01d      	beq.n	8009804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <pvPortMalloc+0x6c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06e      	beq.n	80098e8 <pvPortMalloc+0x150>
 800980a:	4b45      	ldr	r3, [pc, #276]	; (8009920 <pvPortMalloc+0x188>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d869      	bhi.n	80098e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009814:	4b43      	ldr	r3, [pc, #268]	; (8009924 <pvPortMalloc+0x18c>)
 8009816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <pvPortMalloc+0x18c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981e:	e004      	b.n	800982a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <pvPortMalloc+0xa4>
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <pvPortMalloc+0x180>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	429a      	cmp	r2, r3
 8009844:	d050      	beq.n	80098e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2208      	movs	r2, #8
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2308      	movs	r3, #8
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	d91f      	bls.n	80098a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <pvPortMalloc+0xf8>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	613b      	str	r3, [r7, #16]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f000 f908 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <pvPortMalloc+0x188>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <pvPortMalloc+0x188>)
 80098b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <pvPortMalloc+0x188>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <pvPortMalloc+0x190>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d203      	bcs.n	80098ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <pvPortMalloc+0x188>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <pvPortMalloc+0x190>)
 80098c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x184>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x194>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <pvPortMalloc+0x194>)
 80098e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e8:	f7fe fb02 	bl	8007ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <pvPortMalloc+0x174>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <pvPortMalloc+0x172>
	return pvReturn;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	2000561c 	.word	0x2000561c
 800991c:	20005630 	.word	0x20005630
 8009920:	20005620 	.word	0x20005620
 8009924:	20005614 	.word	0x20005614
 8009928:	20005624 	.word	0x20005624
 800992c:	20005628 	.word	0x20005628

08009930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04d      	beq.n	80099de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009942:	2308      	movs	r3, #8
 8009944:	425b      	negs	r3, r3
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <vPortFree+0x44>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60fb      	str	r3, [r7, #12]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vPortFree+0x62>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01e      	beq.n	80099de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11a      	bne.n	80099de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe fa8c 	bl	8007ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f874 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099da:	f7fe fa89 	bl	8007ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099de:	bf00      	nop
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20005630 	.word	0x20005630
 80099ec:	20005620 	.word	0x20005620
 80099f0:	2000562c 	.word	0x2000562c

080099f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <prvHeapInit+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <prvHeapInit+0xac>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a40:	2208      	movs	r2, #8
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvHeapInit+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvHeapInit+0xbc>)
 8009a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a8c:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <prvHeapInit+0xc0>)
 8009a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	20001a14 	.word	0x20001a14
 8009aa4:	20005614 	.word	0x20005614
 8009aa8:	2000561c 	.word	0x2000561c
 8009aac:	20005624 	.word	0x20005624
 8009ab0:	20005620 	.word	0x20005620
 8009ab4:	20005630 	.word	0x20005630

08009ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <prvInsertBlockIntoFreeList+0xac>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <prvInsertBlockIntoFreeList+0x14>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d8f7      	bhi.n	8009ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d118      	bne.n	8009b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d00d      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e008      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e003      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d002      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20005614 	.word	0x20005614
 8009b68:	2000561c 	.word	0x2000561c

08009b6c <atoi>:
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f000 b882 	b.w	8009c78 <strtol>

08009b74 <_strtol_l.constprop.0>:
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7a:	d001      	beq.n	8009b80 <_strtol_l.constprop.0+0xc>
 8009b7c:	2b24      	cmp	r3, #36	; 0x24
 8009b7e:	d906      	bls.n	8009b8e <_strtol_l.constprop.0+0x1a>
 8009b80:	f000 f88c 	bl	8009c9c <__errno>
 8009b84:	2316      	movs	r3, #22
 8009b86:	6003      	str	r3, [r0, #0]
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c74 <_strtol_l.constprop.0+0x100>
 8009b92:	460d      	mov	r5, r1
 8009b94:	462e      	mov	r6, r5
 8009b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009b9e:	f017 0708 	ands.w	r7, r7, #8
 8009ba2:	d1f7      	bne.n	8009b94 <_strtol_l.constprop.0+0x20>
 8009ba4:	2c2d      	cmp	r4, #45	; 0x2d
 8009ba6:	d132      	bne.n	8009c0e <_strtol_l.constprop.0+0x9a>
 8009ba8:	782c      	ldrb	r4, [r5, #0]
 8009baa:	2701      	movs	r7, #1
 8009bac:	1cb5      	adds	r5, r6, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d05b      	beq.n	8009c6a <_strtol_l.constprop.0+0xf6>
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d109      	bne.n	8009bca <_strtol_l.constprop.0+0x56>
 8009bb6:	2c30      	cmp	r4, #48	; 0x30
 8009bb8:	d107      	bne.n	8009bca <_strtol_l.constprop.0+0x56>
 8009bba:	782c      	ldrb	r4, [r5, #0]
 8009bbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009bc0:	2c58      	cmp	r4, #88	; 0x58
 8009bc2:	d14d      	bne.n	8009c60 <_strtol_l.constprop.0+0xec>
 8009bc4:	786c      	ldrb	r4, [r5, #1]
 8009bc6:	2310      	movs	r3, #16
 8009bc8:	3502      	adds	r5, #2
 8009bca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bce:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bd2:	f04f 0e00 	mov.w	lr, #0
 8009bd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bda:	4676      	mov	r6, lr
 8009bdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8009be0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009be4:	f1bc 0f09 	cmp.w	ip, #9
 8009be8:	d816      	bhi.n	8009c18 <_strtol_l.constprop.0+0xa4>
 8009bea:	4664      	mov	r4, ip
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	dd24      	ble.n	8009c3a <_strtol_l.constprop.0+0xc6>
 8009bf0:	f1be 3fff 	cmp.w	lr, #4294967295
 8009bf4:	d008      	beq.n	8009c08 <_strtol_l.constprop.0+0x94>
 8009bf6:	45b1      	cmp	r9, r6
 8009bf8:	d31c      	bcc.n	8009c34 <_strtol_l.constprop.0+0xc0>
 8009bfa:	d101      	bne.n	8009c00 <_strtol_l.constprop.0+0x8c>
 8009bfc:	45a2      	cmp	sl, r4
 8009bfe:	db19      	blt.n	8009c34 <_strtol_l.constprop.0+0xc0>
 8009c00:	fb06 4603 	mla	r6, r6, r3, r4
 8009c04:	f04f 0e01 	mov.w	lr, #1
 8009c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0c:	e7e8      	b.n	8009be0 <_strtol_l.constprop.0+0x6c>
 8009c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c10:	bf04      	itt	eq
 8009c12:	782c      	ldrbeq	r4, [r5, #0]
 8009c14:	1cb5      	addeq	r5, r6, #2
 8009c16:	e7ca      	b.n	8009bae <_strtol_l.constprop.0+0x3a>
 8009c18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c1c:	f1bc 0f19 	cmp.w	ip, #25
 8009c20:	d801      	bhi.n	8009c26 <_strtol_l.constprop.0+0xb2>
 8009c22:	3c37      	subs	r4, #55	; 0x37
 8009c24:	e7e2      	b.n	8009bec <_strtol_l.constprop.0+0x78>
 8009c26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c2a:	f1bc 0f19 	cmp.w	ip, #25
 8009c2e:	d804      	bhi.n	8009c3a <_strtol_l.constprop.0+0xc6>
 8009c30:	3c57      	subs	r4, #87	; 0x57
 8009c32:	e7db      	b.n	8009bec <_strtol_l.constprop.0+0x78>
 8009c34:	f04f 3eff 	mov.w	lr, #4294967295
 8009c38:	e7e6      	b.n	8009c08 <_strtol_l.constprop.0+0x94>
 8009c3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009c3e:	d105      	bne.n	8009c4c <_strtol_l.constprop.0+0xd8>
 8009c40:	2322      	movs	r3, #34	; 0x22
 8009c42:	6003      	str	r3, [r0, #0]
 8009c44:	4646      	mov	r6, r8
 8009c46:	b942      	cbnz	r2, 8009c5a <_strtol_l.constprop.0+0xe6>
 8009c48:	4630      	mov	r0, r6
 8009c4a:	e79e      	b.n	8009b8a <_strtol_l.constprop.0+0x16>
 8009c4c:	b107      	cbz	r7, 8009c50 <_strtol_l.constprop.0+0xdc>
 8009c4e:	4276      	negs	r6, r6
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	d0f9      	beq.n	8009c48 <_strtol_l.constprop.0+0xd4>
 8009c54:	f1be 0f00 	cmp.w	lr, #0
 8009c58:	d000      	beq.n	8009c5c <_strtol_l.constprop.0+0xe8>
 8009c5a:	1e69      	subs	r1, r5, #1
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	e7f3      	b.n	8009c48 <_strtol_l.constprop.0+0xd4>
 8009c60:	2430      	movs	r4, #48	; 0x30
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1b1      	bne.n	8009bca <_strtol_l.constprop.0+0x56>
 8009c66:	2308      	movs	r3, #8
 8009c68:	e7af      	b.n	8009bca <_strtol_l.constprop.0+0x56>
 8009c6a:	2c30      	cmp	r4, #48	; 0x30
 8009c6c:	d0a5      	beq.n	8009bba <_strtol_l.constprop.0+0x46>
 8009c6e:	230a      	movs	r3, #10
 8009c70:	e7ab      	b.n	8009bca <_strtol_l.constprop.0+0x56>
 8009c72:	bf00      	nop
 8009c74:	08009fb1 	.word	0x08009fb1

08009c78 <strtol>:
 8009c78:	4613      	mov	r3, r2
 8009c7a:	460a      	mov	r2, r1
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4802      	ldr	r0, [pc, #8]	; (8009c88 <strtol+0x10>)
 8009c80:	6800      	ldr	r0, [r0, #0]
 8009c82:	f7ff bf77 	b.w	8009b74 <_strtol_l.constprop.0>
 8009c86:	bf00      	nop
 8009c88:	20000084 	.word	0x20000084

08009c8c <memset>:
 8009c8c:	4402      	add	r2, r0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d100      	bne.n	8009c96 <memset+0xa>
 8009c94:	4770      	bx	lr
 8009c96:	f803 1b01 	strb.w	r1, [r3], #1
 8009c9a:	e7f9      	b.n	8009c90 <memset+0x4>

08009c9c <__errno>:
 8009c9c:	4b01      	ldr	r3, [pc, #4]	; (8009ca4 <__errno+0x8>)
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000084 	.word	0x20000084

08009ca8 <__libc_init_array>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	4d0d      	ldr	r5, [pc, #52]	; (8009ce0 <__libc_init_array+0x38>)
 8009cac:	4c0d      	ldr	r4, [pc, #52]	; (8009ce4 <__libc_init_array+0x3c>)
 8009cae:	1b64      	subs	r4, r4, r5
 8009cb0:	10a4      	asrs	r4, r4, #2
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	42a6      	cmp	r6, r4
 8009cb6:	d109      	bne.n	8009ccc <__libc_init_array+0x24>
 8009cb8:	4d0b      	ldr	r5, [pc, #44]	; (8009ce8 <__libc_init_array+0x40>)
 8009cba:	4c0c      	ldr	r4, [pc, #48]	; (8009cec <__libc_init_array+0x44>)
 8009cbc:	f000 f826 	bl	8009d0c <_init>
 8009cc0:	1b64      	subs	r4, r4, r5
 8009cc2:	10a4      	asrs	r4, r4, #2
 8009cc4:	2600      	movs	r6, #0
 8009cc6:	42a6      	cmp	r6, r4
 8009cc8:	d105      	bne.n	8009cd6 <__libc_init_array+0x2e>
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd0:	4798      	blx	r3
 8009cd2:	3601      	adds	r6, #1
 8009cd4:	e7ee      	b.n	8009cb4 <__libc_init_array+0xc>
 8009cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cda:	4798      	blx	r3
 8009cdc:	3601      	adds	r6, #1
 8009cde:	e7f2      	b.n	8009cc6 <__libc_init_array+0x1e>
 8009ce0:	0800a0bc 	.word	0x0800a0bc
 8009ce4:	0800a0bc 	.word	0x0800a0bc
 8009ce8:	0800a0bc 	.word	0x0800a0bc
 8009cec:	0800a0c0 	.word	0x0800a0c0

08009cf0 <memcpy>:
 8009cf0:	440a      	add	r2, r1
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cf8:	d100      	bne.n	8009cfc <memcpy+0xc>
 8009cfa:	4770      	bx	lr
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d06:	4291      	cmp	r1, r2
 8009d08:	d1f9      	bne.n	8009cfe <memcpy+0xe>
 8009d0a:	bd10      	pop	{r4, pc}

08009d0c <_init>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr

08009d18 <_fini>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr
