
NRF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a40  08008a40  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008a40  08008a40  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a40  08008a40  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008a48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c4  20000088  08008ad0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000434c  08008ad0  0002434c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8a4  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cbe  00000000  00000000  0003a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ea  00000000  00000000  0003fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a218  00000000  00000000  00041192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b75d  00000000  00000000  0005b3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096f35  00000000  00000000  00076b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067e0  00000000  00000000  0010da3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080086d4 	.word	0x080086d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080086d4 	.word	0x080086d4

08000150 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <configureTimerForRunTimeStats+0x10>)
 8000156:	f003 fcad 	bl	8003ab4 <HAL_TIM_Base_Start_IT>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	200000fc 	.word	0x200000fc

08000164 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8000168:	4b02      	ldr	r3, [pc, #8]	; (8000174 <getRunTimeCounterValue+0x10>)
 800016a:	681b      	ldr	r3, [r3, #0]
}
 800016c:	4618      	mov	r0, r3
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	20000c38 	.word	0x20000c38

08000178 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000188:	f001 fda4 	bl	8001cd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018c:	f000 f8a2 	bl	80002d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000190:	f000 f9b4 	bl	80004fc <MX_GPIO_Init>
	MX_DMA_Init();
 8000194:	f000 f994 	bl	80004c0 <MX_DMA_Init>
	MX_SPI1_Init();
 8000198:	f000 f8e2 	bl	8000360 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800019c:	f000 f966 	bl	800046c <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80001a0:	f000 f914 	bl	80003cc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80001a4:	f004 fb68 	bl	8004878 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 80001a8:	482b      	ldr	r0, [pc, #172]	; (8000258 <main+0xd4>)
 80001aa:	f004 fe03 	bl	8004db4 <osMutexNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a2a      	ldr	r2, [pc, #168]	; (800025c <main+0xd8>)
 80001b2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 80001b4:	4a2a      	ldr	r2, [pc, #168]	; (8000260 <main+0xdc>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	482a      	ldr	r0, [pc, #168]	; (8000264 <main+0xe0>)
 80001ba:	f004 fbc3 	bl	8004944 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a29      	ldr	r2, [pc, #164]	; (8000268 <main+0xe4>)
 80001c2:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 80001c4:	4a29      	ldr	r2, [pc, #164]	; (800026c <main+0xe8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4829      	ldr	r0, [pc, #164]	; (8000270 <main+0xec>)
 80001ca:	f004 fbbb 	bl	8004944 <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a28      	ldr	r2, [pc, #160]	; (8000274 <main+0xf0>)
 80001d2:	6013      	str	r3, [r2, #0]

	/* creation of Local */
	LocalHandle = osThreadNew(Localization, NULL, &Local_attributes);
 80001d4:	4a28      	ldr	r2, [pc, #160]	; (8000278 <main+0xf4>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4828      	ldr	r0, [pc, #160]	; (800027c <main+0xf8>)
 80001da:	f004 fbb3 	bl	8004944 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a27      	ldr	r2, [pc, #156]	; (8000280 <main+0xfc>)
 80001e2:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Algo_Check, NULL, &Check_Algo_attributes);
 80001e4:	4a27      	ldr	r2, [pc, #156]	; (8000284 <main+0x100>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4827      	ldr	r0, [pc, #156]	; (8000288 <main+0x104>)
 80001ea:	f004 fbab 	bl	8004944 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a26      	ldr	r2, [pc, #152]	; (800028c <main+0x108>)
 80001f2:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Check, NULL, &BSW_Algo_attributes);
 80001f4:	4a26      	ldr	r2, [pc, #152]	; (8000290 <main+0x10c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4826      	ldr	r0, [pc, #152]	; (8000294 <main+0x110>)
 80001fa:	f004 fba3 	bl	8004944 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a25      	ldr	r2, [pc, #148]	; (8000298 <main+0x114>)
 8000202:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Check, NULL, &DPW_Algo_attributes);
 8000204:	4a25      	ldr	r2, [pc, #148]	; (800029c <main+0x118>)
 8000206:	2100      	movs	r1, #0
 8000208:	4825      	ldr	r0, [pc, #148]	; (80002a0 <main+0x11c>)
 800020a:	f004 fb9b 	bl	8004944 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <main+0x120>)
 8000212:	6013      	str	r3, [r2, #0]

	/* creation of Receive */
	ReceiveHandle = osThreadNew(WirelessReceive, NULL, &Receive_attributes);
 8000214:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <main+0x124>)
 8000216:	2100      	movs	r1, #0
 8000218:	4824      	ldr	r0, [pc, #144]	; (80002ac <main+0x128>)
 800021a:	f004 fb93 	bl	8004944 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <main+0x12c>)
 8000222:	6013      	str	r3, [r2, #0]

	/* creation of FCW */
	FCWHandle = osThreadNew(FCW_Task, NULL, &FCW_attributes);
 8000224:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <main+0x130>)
 8000226:	2100      	movs	r1, #0
 8000228:	4823      	ldr	r0, [pc, #140]	; (80002b8 <main+0x134>)
 800022a:	f004 fb8b 	bl	8004944 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a22      	ldr	r2, [pc, #136]	; (80002bc <main+0x138>)
 8000232:	6013      	str	r3, [r2, #0]

	/* creation of EEBL */
	EEBLHandle = osThreadNew(EEBL_Task, NULL, &EEBL_attributes);
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <main+0x13c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4822      	ldr	r0, [pc, #136]	; (80002c4 <main+0x140>)
 800023a:	f004 fb83 	bl	8004944 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <main+0x144>)
 8000242:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 8000244:	4821      	ldr	r0, [pc, #132]	; (80002cc <main+0x148>)
 8000246:	f004 fc95 	bl	8004b74 <osEventFlagsNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <main+0x14c>)
 800024e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000250:	f004 fb44 	bl	80048dc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000254:	e7fe      	b.n	8000254 <main+0xd0>
 8000256:	bf00      	nop
 8000258:	080088e4 	.word	0x080088e4
 800025c:	200001f4 	.word	0x200001f4
 8000260:	080087a0 	.word	0x080087a0
 8000264:	080006ad 	.word	0x080006ad
 8000268:	200001d0 	.word	0x200001d0
 800026c:	080087c4 	.word	0x080087c4
 8000270:	0800075d 	.word	0x0800075d
 8000274:	200001d4 	.word	0x200001d4
 8000278:	080087e8 	.word	0x080087e8
 800027c:	080007d1 	.word	0x080007d1
 8000280:	200001d8 	.word	0x200001d8
 8000284:	0800880c 	.word	0x0800880c
 8000288:	0800087d 	.word	0x0800087d
 800028c:	200001dc 	.word	0x200001dc
 8000290:	08008830 	.word	0x08008830
 8000294:	080008ed 	.word	0x080008ed
 8000298:	200001e0 	.word	0x200001e0
 800029c:	08008854 	.word	0x08008854
 80002a0:	080009ad 	.word	0x080009ad
 80002a4:	200001e4 	.word	0x200001e4
 80002a8:	08008878 	.word	0x08008878
 80002ac:	08000a71 	.word	0x08000a71
 80002b0:	200001e8 	.word	0x200001e8
 80002b4:	0800889c 	.word	0x0800889c
 80002b8:	08000c7d 	.word	0x08000c7d
 80002bc:	200001ec 	.word	0x200001ec
 80002c0:	080088c0 	.word	0x080088c0
 80002c4:	08000c9d 	.word	0x08000c9d
 80002c8:	200001f0 	.word	0x200001f0
 80002cc:	080088f4 	.word	0x080088f4
 80002d0:	200001f8 	.word	0x200001f8

080002d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f008 f9b6 	bl	8008654 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f002 f9b1 	bl	8002684 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000328:	f000 fcda 	bl	8000ce0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fc1e 	bl	8002b88 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000352:	f000 fcc5 	bl	8000ce0 <Error_Handler>
	}
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000366:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <MX_SPI1_Init+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_SPI1_Init+0x64>)
 800036c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000370:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_SPI1_Init+0x64>)
 800038c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000390:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000394:	2220      	movs	r2, #32
 8000396:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003b2:	f002 fda7 	bl	8002f04 <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80003bc:	f000 fc90 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	200000a4 	.word	0x200000a4
 80003c8:	40013000 	.word	0x40013000

080003cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_TIM3_Init+0x98>)
 80003ec:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <MX_TIM3_Init+0x9c>)
 80003ee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_TIM3_Init+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_TIM3_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <MX_TIM3_Init+0x98>)
 80003fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000402:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_TIM3_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_TIM3_Init+0x98>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000410:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_TIM3_Init+0x98>)
 8000412:	f003 faff 	bl	8003a14 <HAL_TIM_Base_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800041c:	f000 fc60 	bl	8000ce0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <MX_TIM3_Init+0x98>)
 8000430:	f003 fc9a 	bl	8003d68 <HAL_TIM_SlaveConfigSynchro>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 800043a:	f000 fc51 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <MX_TIM3_Init+0x98>)
 800044c:	f003 fe62 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 8000456:	f000 fc43 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000fc 	.word	0x200000fc
 8000468:	40000400 	.word	0x40000400

0800046c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_USART1_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800047c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 80004a4:	f003 fea6 	bl	80041f4 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80004ae:	f000 fc17 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000144 	.word	0x20000144
 80004bc:	40013800 	.word	0x40013800

080004c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_DMA_Init+0x38>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <MX_DMA_Init+0x38>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_DMA_Init+0x38>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2105      	movs	r1, #5
 80004e2:	200f      	movs	r0, #15
 80004e4:	f001 fd01 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e8:	200f      	movs	r0, #15
 80004ea:	f001 fd1a 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_GPIO_Init+0x9c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2118      	movs	r1, #24
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_GPIO_Init+0xa0>)
 8000546:	f002 f86d 	bl	8002624 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800054a:	2304      	movs	r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_GPIO_Init+0xa4>)
 8000550:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_GPIO_Init+0xa0>)
 800055e:	f001 fedd 	bl	800231c <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000562:	2318      	movs	r3, #24
 8000564:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2302      	movs	r3, #2
 8000570:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	4619      	mov	r1, r3
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <MX_GPIO_Init+0xa0>)
 800057a:	f001 fecf 	bl	800231c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2008      	movs	r0, #8
 8000584:	f001 fcb1 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000588:	2008      	movs	r0, #8
 800058a:	f001 fcca 	bl	8001f22 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800
 80005a0:	10210000 	.word	0x10210000

080005a4 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_UART_RxCpltCallback+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fb26 	bl	8004c18 <osEventFlagsSet>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001f8 	.word	0x200001f8

080005d8 <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint16_t * _CalcAvgDistance( uint16_t * Data_Arr )
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 80005e0:	2300      	movs	r3, #0
 80005e2:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82bb      	strh	r3, [r7, #20]
	static uint16_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	82fb      	strh	r3, [r7, #22]
 80005ec:	e04f      	b.n	800068e <_CalcAvgDistance+0xb6>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 80005f2:	8afb      	ldrh	r3, [r7, #22]
 80005f4:	461a      	mov	r2, r3
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	461a      	mov	r2, r3
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b29b      	uxth	r3, r3
 8000602:	3b03      	subs	r3, #3
 8000604:	b29b      	uxth	r3, r3
 8000606:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000608:	8afb      	ldrh	r3, [r7, #22]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	461a      	mov	r2, r3
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	3303      	adds	r3, #3
 800061a:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	82bb      	strh	r3, [r7, #20]
 8000620:	e020      	b.n	8000664 <_CalcAvgDistance+0x8c>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + TOTAL_ANGLES) % TOTAL_ANGLES;
 8000622:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800062a:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <_CalcAvgDistance+0xc8>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	441a      	add	r2, r3
 8000632:	1211      	asrs	r1, r2, #8
 8000634:	17da      	asrs	r2, r3, #31
 8000636:	1a8a      	subs	r2, r1, r2
 8000638:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800063c:	fb01 f202 	mul.w	r2, r1, r2
 8000640:	1a9a      	subs	r2, r3, r2
 8000642:	4613      	mov	r3, r2
 8000644:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	4413      	add	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000658:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800065c:	b29b      	uxth	r3, r3
 800065e:	3301      	adds	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	82bb      	strh	r3, [r7, #20]
 8000664:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000668:	89bb      	ldrh	r3, [r7, #12]
 800066a:	429a      	cmp	r2, r3
 800066c:	ddd9      	ble.n	8000622 <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_CalcAvgDistance+0xcc>)
 8000672:	fba3 1302 	umull	r1, r3, r3, r2
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	0852      	lsrs	r2, r2, #1
 800067a:	4413      	add	r3, r2
 800067c:	089a      	lsrs	r2, r3, #2
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	b291      	uxth	r1, r2
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <_CalcAvgDistance+0xd0>)
 8000684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	3301      	adds	r3, #1
 800068c:	82fb      	strh	r3, [r7, #22]
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d9ac      	bls.n	80005ee <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <_CalcAvgDistance+0xd0>)
}
 8000696:	4618      	mov	r0, r3
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	b60b60b7 	.word	0xb60b60b7
 80006a4:	24924925 	.word	0x24924925
 80006a8:	20000be0 	.word	0x20000be0

080006ac <Init_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b095      	sub	sp, #84	; 0x54
 80006b0:	af12      	add	r7, sp, #72	; 0x48
 80006b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer_str, (uint16_t)(TOTAL_ANGLES*5));
 80006b4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80006b8:	4921      	ldr	r1, [pc, #132]	; (8000740 <Init_Task+0x94>)
 80006ba:	4822      	ldr	r0, [pc, #136]	; (8000744 <Init_Task+0x98>)
 80006bc:	f003 fdea 	bl	8004294 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <Init_Task+0x9c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fc0d 	bl	8004ee8 <osMutexAcquire>

	NRF24_begin(hspi1);
 80006ce:	4c1f      	ldr	r4, [pc, #124]	; (800074c <Init_Task+0xa0>)
 80006d0:	4668      	mov	r0, sp
 80006d2:	f104 0310 	add.w	r3, r4, #16
 80006d6:	2248      	movs	r2, #72	; 0x48
 80006d8:	4619      	mov	r1, r3
 80006da:	f007 ffed 	bl	80086b8 <memcpy>
 80006de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006e2:	f000 fe75 	bl	80013d0 <NRF24_begin>
	NRF24_setAutoAck(true);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 f936 	bl	8001958 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 80006ec:	2020      	movs	r0, #32
 80006ee:	f001 f893 	bl	8001818 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 80006f2:	f001 f8e7 	bl	80018c4 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80006f6:	f001 f8b7 	bl	8001868 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <Init_Task+0xa4>)
 80006fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000700:	2001      	movs	r0, #1
 8000702:	f001 f80b 	bl	800171c <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <Init_Task+0xa4>)
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	4610      	mov	r0, r2
 800070e:	4619      	mov	r1, r3
 8000710:	f000 ffe0 	bl	80016d4 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000714:	2220      	movs	r2, #32
 8000716:	490f      	ldr	r1, [pc, #60]	; (8000754 <Init_Task+0xa8>)
 8000718:	2001      	movs	r0, #1
 800071a:	f001 fa5c 	bl	8001bd6 <NRF24_writeAckPayload>
	NRF24_startListening();
 800071e:	f000 ff33 	bl	8001588 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <Init_Task+0x9c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fc3c 	bl	8004fa4 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <Init_Task+0xac>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f004 f9b1 	bl	8004a98 <osThreadTerminate>

	/* USER CODE END 5 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	200001fc 	.word	0x200001fc
 8000744:	20000144 	.word	0x20000144
 8000748:	200001f4 	.word	0x200001f4
 800074c:	200000a4 	.word	0x200000a4
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	200001d0 	.word	0x200001d0

0800075c <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <Distance_Calc+0x64>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	f004 faaa 	bl	8004cc8 <osEventFlagsWait>

		/* Convert Strings to Integers */
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000774:	2300      	movs	r3, #0
 8000776:	81fb      	strh	r3, [r7, #14]
 8000778:	e011      	b.n	800079e <Distance_Calc+0x42>
		{
			Distances_Buffer[LocalItterator] = atoi(Distances_Buffer_str[LocalItterator]) ;
 800077a:	89fa      	ldrh	r2, [r7, #14]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <Distance_Calc+0x68>)
 8000784:	4413      	add	r3, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fed8 	bl	800853c <atoi>
 800078c:	4602      	mov	r2, r0
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	b291      	uxth	r1, r2
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <Distance_Calc+0x6c>)
 8000794:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( uint16_t LocalItterator = 0 ; LocalItterator < TOTAL_ANGLES ; LocalItterator++ )
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	3301      	adds	r3, #1
 800079c:	81fb      	strh	r3, [r7, #14]
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80007a4:	d3e9      	bcc.n	800077a <Distance_Calc+0x1e>
		}
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <Distance_Calc+0x6c>)
 80007a8:	f7ff ff16 	bl	80005d8 <_CalcAvgDistance>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <Distance_Calc+0x70>)
 80007b0:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <Distance_Calc+0x64>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2104      	movs	r1, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 fa2d 	bl	8004c18 <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80007be:	e7d1      	b.n	8000764 <Distance_Calc+0x8>
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001fc 	.word	0x200001fc
 80007c8:	20000904 	.word	0x20000904
 80007cc:	20000bd8 	.word	0x20000bd8

080007d0 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007d8:	2311      	movs	r3, #17
 80007da:	733b      	strb	r3, [r7, #12]
 80007dc:	2301      	movs	r3, #1
 80007de:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <Localization+0xa4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <Localization+0xa4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3302      	adds	r3, #2
 80007f0:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <Localization+0xa4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3304      	adds	r3, #4
 80007fc:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[LEFT],Obstcales_Detection[BACK_LEFT],
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <Localization+0xa4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3306      	adds	r3, #6
 8000808:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800080a:	b2db      	uxtb	r3, r3
 800080c:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <Localization+0xa4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3308      	adds	r3, #8
 8000814:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000816:	b2db      	uxtb	r3, r3
 8000818:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[BACK],Obstcales_Detection[BACK_RIGHT],
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <Localization+0xa4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	330a      	adds	r3, #10
 8000820:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000822:	b2db      	uxtb	r3, r3
 8000824:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <Localization+0xa4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	330c      	adds	r3, #12
 800082c:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800082e:	b2db      	uxtb	r3, r3
 8000830:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <Localization+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	330e      	adds	r3, #14
 8000838:	881b      	ldrh	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800083a:	b2db      	uxtb	r3, r3
 800083c:	757b      	strb	r3, [r7, #21]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <Localization+0xa8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f04f 31ff 	mov.w	r1, #4294967295
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fb4e 	bl	8004ee8 <osMutexAcquire>

		NRF24_stopListening();
 800084c:	f000 fec2 	bl	80015d4 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	210a      	movs	r1, #10
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fec8 	bl	80015ec <NRF24_write>
		NRF24_startListening();
 800085c:	f000 fe94 	bl	8001588 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <Localization+0xa8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fb9d 	bl	8004fa4 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(3000);
 800086a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800086e:	f004 f953 	bl	8004b18 <osDelay>
	{
 8000872:	e7b1      	b.n	80007d8 <Localization+0x8>
 8000874:	20000bd8 	.word	0x20000bd8
 8000878:	200001f4 	.word	0x200001f4

0800087c <Algo_Check>:
 * @retval None
 */

/* USER CODE END Header_Algo_Check */
void Algo_Check(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <Algo_Check+0x60>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2200      	movs	r2, #0
 800088e:	2104      	movs	r1, #4
 8000890:	f004 fa1a 	bl	8004cc8 <osEventFlagsWait>

		/* Checking on Front Threshold */
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <Algo_Check+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b64      	cmp	r3, #100	; 0x64
 800089c:	d8f2      	bhi.n	8000884 <Algo_Check+0x8>
		{
			/* Frame to Sent to the Front Car to Ask For It's Direction */
			uint8_t ASK_Direction_Frame[3] ={CAR_ID,
 800089e:	2311      	movs	r3, #17
 80008a0:	733b      	strb	r3, [r7, #12]
 80008a2:	2302      	movs	r3, #2
 80008a4:	737b      	strb	r3, [r7, #13]
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <Algo_Check+0x68>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	73bb      	strb	r3, [r7, #14]
					ASK_DIRECTION_OPERATION_ID,Front_Car_ID};

			/* Protecting Shared Resource -> NRF Module
			 * */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <Algo_Check+0x6c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fb17 	bl	8004ee8 <osMutexAcquire>

			NRF24_stopListening();
 80008ba:	f000 fe8b 	bl	80015d4 <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2103      	movs	r1, #3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fe91 	bl	80015ec <NRF24_write>
			NRF24_startListening();
 80008ca:	f000 fe5d 	bl	8001588 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <Algo_Check+0x6c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb66 	bl	8004fa4 <osMutexRelease>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 80008d8:	e7d4      	b.n	8000884 <Algo_Check+0x8>
 80008da:	bf00      	nop
 80008dc:	200001f8 	.word	0x200001f8
 80008e0:	20000bd8 	.word	0x20000bd8
 80008e4:	20000bdc 	.word	0x20000bdc
 80008e8:	200001f4 	.word	0x200001f4

080008ec <BSW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Check */
void BSW_Check(void *argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Check */
	bool Local_BSWLeft = false ;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 80008fc:	2300      	movs	r3, #0
 80008fe:	727b      	strb	r3, [r7, #9]
	bool Local_BSWR_LastState = false ;
 8000900:	2300      	movs	r3, #0
 8000902:	723b      	strb	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <BSW_Check+0xb8>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2200      	movs	r2, #0
 800090e:	2101      	movs	r1, #1
 8000910:	f004 f9da 	bl	8004cc8 <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	727b      	strb	r3, [r7, #9]
		Local_BSWR_LastState = Local_BSWRight ;
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	723b      	strb	r3, [r7, #8]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 800091c:	2387      	movs	r3, #135	; 0x87
 800091e:	737b      	strb	r3, [r7, #13]
 8000920:	e012      	b.n	8000948 <BSW_Check+0x5c>
				Angle_Iterator >= BSW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold ))
 8000922:	7b7b      	ldrb	r3, [r7, #13]
 8000924:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <BSW_Check+0xbc>)
 8000926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d009      	beq.n	8000942 <BSW_Check+0x56>
 800092e:	7b7b      	ldrb	r3, [r7, #13]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <BSW_Check+0xbc>)
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800093a:	d802      	bhi.n	8000942 <BSW_Check+0x56>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
				break;
 8000940:	e005      	b.n	800094e <BSW_Check+0x62>
				Angle_Iterator--)
 8000942:	7b7b      	ldrb	r3, [r7, #13]
 8000944:	3b01      	subs	r3, #1
 8000946:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
 800094a:	2b59      	cmp	r3, #89	; 0x59
 800094c:	d8e9      	bhi.n	8000922 <BSW_Check+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 800094e:	23e1      	movs	r3, #225	; 0xe1
 8000950:	817b      	strh	r3, [r7, #10]
 8000952:	e012      	b.n	800097a <BSW_Check+0x8e>
				Angle_Iterator <= BSW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= BSW_Threshold) )
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <BSW_Check+0xbc>)
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d009      	beq.n	8000974 <BSW_Check+0x88>
 8000960:	897b      	ldrh	r3, [r7, #10]
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <BSW_Check+0xbc>)
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800096c:	d802      	bhi.n	8000974 <BSW_Check+0x88>
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 800096e:	2301      	movs	r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]
				break;
 8000972:	e006      	b.n	8000982 <BSW_Check+0x96>
				Angle_Iterator++)
 8000974:	897b      	ldrh	r3, [r7, #10]
 8000976:	3301      	adds	r3, #1
 8000978:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 800097a:	897b      	ldrh	r3, [r7, #10]
 800097c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000980:	d9e8      	bls.n	8000954 <BSW_Check+0x68>
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <BSW_Check+0xa6>
 8000988:	7a7b      	ldrb	r3, [r7, #9]
 800098a:	f083 0301 	eor.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0b5      	beq.n	8000904 <BSW_Check+0x18>
 8000998:	7a3b      	ldrb	r3, [r7, #8]
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80009a2:	e7af      	b.n	8000904 <BSW_Check+0x18>
 80009a4:	200001f8 	.word	0x200001f8
 80009a8:	20000904 	.word	0x20000904

080009ac <DPW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Check */
void DPW_Check(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Check */
	bool Local_DPWLeft = false ;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
	bool Local_DPWRight= false ;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
	bool Local_DPWL_LastState = false ;
 80009bc:	2300      	movs	r3, #0
 80009be:	727b      	strb	r3, [r7, #9]
	bool Local_DPWR_LastState = false ;
 80009c0:	2300      	movs	r3, #0
 80009c2:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	727b      	strb	r3, [r7, #9]
		Local_DPWR_LastState = Local_DPWRight;
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	723b      	strb	r3, [r7, #8]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <DPW_Check+0xbc>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	f004 f976 	bl	8004cc8 <osEventFlagsWait>

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 80009dc:	232d      	movs	r3, #45	; 0x2d
 80009de:	737b      	strb	r3, [r7, #13]
 80009e0:	e012      	b.n	8000a08 <DPW_Check+0x5c>
				Angle_Iterator >= DPW_Minimum_Angle_L ;
				Angle_Iterator--)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold))
 80009e2:	7b7b      	ldrb	r3, [r7, #13]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <DPW_Check+0xc0>)
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d009      	beq.n	8000a02 <DPW_Check+0x56>
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <DPW_Check+0xc0>)
 80009f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009fa:	d802      	bhi.n	8000a02 <DPW_Check+0x56>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWLeft = true;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
				break;
 8000a00:	e005      	b.n	8000a0e <DPW_Check+0x62>
				Angle_Iterator--)
 8000a02:	7b7b      	ldrb	r3, [r7, #13]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	737b      	strb	r3, [r7, #13]
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 8000a08:	7b7b      	ldrb	r3, [r7, #13]
 8000a0a:	2b0e      	cmp	r3, #14
 8000a0c:	d8e9      	bhi.n	80009e2 <DPW_Check+0x36>
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8000a0e:	f240 133b 	movw	r3, #315	; 0x13b
 8000a12:	817b      	strh	r3, [r7, #10]
 8000a14:	e012      	b.n	8000a3c <DPW_Check+0x90>
				Angle_Iterator <= DPW_Maximium_Angle_R ;
				Angle_Iterator++)
		{
			if ( ( 0 != Distances_Buffer[Angle_Iterator] ) && (Distances_Buffer[Angle_Iterator] <= DPW_Threshold) )
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <DPW_Check+0xc0>)
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d009      	beq.n	8000a36 <DPW_Check+0x8a>
 8000a22:	897b      	ldrh	r3, [r7, #10]
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <DPW_Check+0xc0>)
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a2e:	d802      	bhi.n	8000a36 <DPW_Check+0x8a>
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWRight = true;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73bb      	strb	r3, [r7, #14]
				break;
 8000a34:	e006      	b.n	8000a44 <DPW_Check+0x98>
				Angle_Iterator++)
 8000a36:	897b      	ldrh	r3, [r7, #10]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	817b      	strh	r3, [r7, #10]
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 8000a3c:	897b      	ldrh	r3, [r7, #10]
 8000a3e:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8000a42:	d3e8      	bcc.n	8000a16 <DPW_Check+0x6a>
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <DPW_Check+0xa8>
 8000a4a:	7a7b      	ldrb	r3, [r7, #9]
 8000a4c:	f083 0301 	eor.w	r3, r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0b4      	beq.n	80009c4 <DPW_Check+0x18>
 8000a5a:	7a3b      	ldrb	r3, [r7, #8]
 8000a5c:	f083 0301 	eor.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
		Local_DPWL_LastState = Local_DPWLeft ;
 8000a64:	e7ae      	b.n	80009c4 <DPW_Check+0x18>
 8000a66:	bf00      	nop
 8000a68:	200001f8 	.word	0x200001f8
 8000a6c:	20000904 	.word	0x20000904

08000a70 <WirelessReceive>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_WirelessReceive */
void WirelessReceive(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN WirelessReceive */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 8000a78:	f000 fe04 	bl	8001684 <NRF24_available>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <WirelessReceive+0x1ea>
			uint8_t Received_Data[32] = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000a9c:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <WirelessReceive+0x1f4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fa1f 	bl	8004ee8 <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2120      	movs	r1, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fdef 	bl	8001694 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 8000ab6:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <WirelessReceive+0x1f4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fa72 	bl	8004fa4 <osMutexRelease>

			switch(Received_Data[1])
 8000ac0:	7b7b      	ldrb	r3, [r7, #13]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d002      	beq.n	8000acc <WirelessReceive+0x5c>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d06c      	beq.n	8000ba4 <WirelessReceive+0x134>
					/*
					 * Stop immediately
					 */
				}
			default:
				break;
 8000aca:	e0c5      	b.n	8000c58 <WirelessReceive+0x1e8>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000acc:	7cbb      	ldrb	r3, [r7, #18]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b65      	ldr	r3, [pc, #404]	; (8000c68 <WirelessReceive+0x1f8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	db07      	blt.n	8000aec <WirelessReceive+0x7c>
 8000adc:	7cbb      	ldrb	r3, [r7, #18]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <WirelessReceive+0x1f8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	3307      	adds	r3, #7
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dd11      	ble.n	8000b10 <WirelessReceive+0xa0>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000aec:	7cfb      	ldrb	r3, [r7, #19]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b5d      	ldr	r3, [pc, #372]	; (8000c68 <WirelessReceive+0x1f8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3302      	adds	r3, #2
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000afa:	429a      	cmp	r2, r3
 8000afc:	db0a      	blt.n	8000b14 <WirelessReceive+0xa4>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000afe:	7c7b      	ldrb	r3, [r7, #17]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b59      	ldr	r3, [pc, #356]	; (8000c68 <WirelessReceive+0x1f8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	330e      	adds	r3, #14
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	3307      	adds	r3, #7
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dc01      	bgt.n	8000b14 <WirelessReceive+0xa4>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <WirelessReceive+0xa6>
 8000b14:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000b16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000b1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b4f      	ldr	r3, [pc, #316]	; (8000c68 <WirelessReceive+0x1f8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3308      	adds	r3, #8
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000b34:	429a      	cmp	r2, r3
 8000b36:	db08      	blt.n	8000b4a <WirelessReceive+0xda>
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <WirelessReceive+0x1f8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3308      	adds	r3, #8
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	3307      	adds	r3, #7
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dd11      	ble.n	8000b6e <WirelessReceive+0xfe>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <WirelessReceive+0x1f8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3302      	adds	r3, #2
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	db0a      	blt.n	8000b72 <WirelessReceive+0x102>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000b5c:	7c7b      	ldrb	r3, [r7, #17]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <WirelessReceive+0x1f8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	330e      	adds	r3, #14
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	3307      	adds	r3, #7
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dc01      	bgt.n	8000b72 <WirelessReceive+0x102>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <WirelessReceive+0x104>
 8000b72:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(Is_Front){
 8000b84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <WirelessReceive+0x124>
					Front_Car_ID = Received_Data[0];
 8000b8c:	7b3a      	ldrb	r2, [r7, #12]
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <WirelessReceive+0x1fc>)
 8000b90:	701a      	strb	r2, [r3, #0]
				break;
 8000b92:	e05f      	b.n	8000c54 <WirelessReceive+0x1e4>
				else if(Is_Back){
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d05b      	beq.n	8000c54 <WirelessReceive+0x1e4>
					Back_Car_ID = Received_Data[0];
 8000b9c:	7b3a      	ldrb	r2, [r7, #12]
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <WirelessReceive+0x200>)
 8000ba0:	701a      	strb	r2, [r3, #0]
				break;
 8000ba2:	e057      	b.n	8000c54 <WirelessReceive+0x1e4>
				bool TX_Flag =0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				bool RX_Flag =0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				bool TX_Fail = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	d12c      	bne.n	8000c16 <WirelessReceive+0x1a6>
 8000bbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d028      	beq.n	8000c16 <WirelessReceive+0x1a6>
					uint8_t ASK_Direction_Frame[4] ={0};
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[0] = CAR_ID ;
 8000bc8:	2311      	movs	r3, #17
 8000bca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ASK_Direction_Frame[2] = Front_Car_ID ;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <WirelessReceive+0x1fc>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					ASK_Direction_Frame[3] = My_Direction ;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <WirelessReceive+0x204>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <WirelessReceive+0x1f4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 f97b 	bl	8004ee8 <osMutexAcquire>
					NRF24_stopListening();
 8000bf2:	f000 fcef 	bl	80015d4 <NRF24_stopListening>
					NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 ffe9 	bl	8001bd6 <NRF24_writeAckPayload>
					NRF24_startListening();
 8000c04:	f000 fcc0 	bl	8001588 <NRF24_startListening>
					osMutexRelease(NRF_MutexHandle) ;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <WirelessReceive+0x1f4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 f9c9 	bl	8004fa4 <osMutexRelease>
				{
 8000c12:	bf00      	nop
				break;
 8000c14:	e020      	b.n	8000c58 <WirelessReceive+0x1e8>
				else if ((CAR_ID == Received_Data[2] && TX_Flag))
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	2b11      	cmp	r3, #17
 8000c1a:	d11d      	bne.n	8000c58 <WirelessReceive+0x1e8>
 8000c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d019      	beq.n	8000c58 <WirelessReceive+0x1e8>
					if (	Received_Data[3]==	My_Direction)
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <WirelessReceive+0x204>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d106      	bne.n	8000c3c <WirelessReceive+0x1cc>
						osEventFlagsSet(EventGroupHandle, EEBL_ASSERTED ) ;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <WirelessReceive+0x208>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2102      	movs	r1, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 ffef 	bl	8004c18 <osEventFlagsSet>
				break;
 8000c3a:	e00d      	b.n	8000c58 <WirelessReceive+0x1e8>
					else if(Received_Data[3]	!=	My_Direction)
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <WirelessReceive+0x204>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d008      	beq.n	8000c58 <WirelessReceive+0x1e8>
						osEventFlagsSet(EventGroupHandle, FCW_ASSERTED ) ;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <WirelessReceive+0x208>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 ffe3 	bl	8004c18 <osEventFlagsSet>
				break;
 8000c52:	e001      	b.n	8000c58 <WirelessReceive+0x1e8>
				break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <WirelessReceive+0x1ea>
				break;
 8000c58:	bf00      	nop
			}

		}
		osDelay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f003 ff5c 	bl	8004b18 <osDelay>
		if(NRF24_available()){
 8000c60:	e70a      	b.n	8000a78 <WirelessReceive+0x8>
 8000c62:	bf00      	nop
 8000c64:	200001f4 	.word	0x200001f4
 8000c68:	20000bd8 	.word	0x20000bd8
 8000c6c:	20000bdc 	.word	0x20000bdc
 8000c70:	20000bdd 	.word	0x20000bdd
 8000c74:	20000bd4 	.word	0x20000bd4
 8000c78:	200001f8 	.word	0x200001f8

08000c7c <FCW_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Task */
void FCW_Task(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Task */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <FCW_Task+0x1c>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2103      	movs	r1, #3
 8000c90:	f004 f81a 	bl	8004cc8 <osEventFlagsWait>
 8000c94:	e7f6      	b.n	8000c84 <FCW_Task+0x8>
 8000c96:	bf00      	nop
 8000c98:	200001f8 	.word	0x200001f8

08000c9c <EEBL_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Task */
void EEBL_Task(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Task */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <EEBL_Task+0x1c>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	f004 f80a 	bl	8004cc8 <osEventFlagsWait>
 8000cb4:	e7f6      	b.n	8000ca4 <EEBL_Task+0x8>
 8000cb6:	bf00      	nop
 8000cb8:	200001f8 	.word	0x200001f8

08000cbc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cce:	f001 f817 	bl	8001d00 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_MspInit+0x68>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_MspInit+0x68>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_MspInit+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_MspInit+0x68>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_MspInit+0x68>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x68>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	210f      	movs	r1, #15
 8000d26:	f06f 0001 	mvn.w	r0, #1
 8000d2a:	f001 f8de 	bl	8001eea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_MspInit+0x6c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_MspInit+0x6c>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000

08000d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_SPI_MspInit+0x88>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d12f      	bne.n	8000ddc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0x8c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dac:	23a0      	movs	r3, #160	; 0xa0
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <HAL_SPI_MspInit+0x90>)
 8000dc0:	f001 faac 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_SPI_MspInit+0x90>)
 8000dd8:	f001 faa0 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_TIM_Base_MspInit+0x44>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f001 f863 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e24:	201d      	movs	r0, #29
 8000e26:	f001 f87c 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40000400 	.word	0x40000400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <HAL_UART_MspInit+0xd8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d157      	bne.n	8000f0c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_UART_MspInit+0xdc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481e      	ldr	r0, [pc, #120]	; (8000f1c <HAL_UART_MspInit+0xe0>)
 8000ea2:	f001 fa3b 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0xe0>)
 8000ebc:	f001 fa2e 	bl	800231c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0xe8>)
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000ef2:	f001 f825 	bl	8001f40 <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000efc:	f7ff fef0 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_UART_MspInit+0xe4>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	2000018c 	.word	0x2000018c
 8000f24:	40020058 	.word	0x40020058

08000f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_InitTick+0xe8>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a33      	ldr	r2, [pc, #204]	; (8001010 <HAL_InitTick+0xe8>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <HAL_InitTick+0xe8>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f56:	f107 0210 	add.w	r2, r7, #16
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 ff81 	bl	8002e68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f70:	f001 ff52 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8000f74:	6378      	str	r0, [r7, #52]	; 0x34
 8000f76:	e004      	b.n	8000f82 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f78:	f001 ff4e 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_InitTick+0xec>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_InitTick+0xf0>)
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_InitTick+0xf4>)
 8000f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_InitTick+0xf0>)
 8000f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <HAL_InitTick+0xf0>)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_InitTick+0xf0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_InitTick+0xf0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_InitTick+0xf0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <HAL_InitTick+0xf0>)
 8000fb8:	f002 fd2c 	bl	8003a14 <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11b      	bne.n	8001002 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <HAL_InitTick+0xf0>)
 8000fcc:	f002 fd72 	bl	8003ab4 <HAL_TIM_Base_Start_IT>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d111      	bne.n	8001002 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fde:	201e      	movs	r0, #30
 8000fe0:	f000 ff9f 	bl	8001f22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	d808      	bhi.n	8000ffc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000fea:	2200      	movs	r2, #0
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	201e      	movs	r0, #30
 8000ff0:	f000 ff7b 	bl	8001eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_InitTick+0xf8>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e002      	b.n	8001002 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001006:	4618      	mov	r0, r3
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	431bde83 	.word	0x431bde83
 8001018:	20000bf0 	.word	0x20000bf0
 800101c:	40000800 	.word	0x40000800
 8001020:	2000002c 	.word	0x2000002c

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001052:	2004      	movs	r0, #4
 8001054:	f001 fafe 	bl	8002654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA1_Channel5_IRQHandler+0x10>)
 8001062:	f001 f827 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000018c 	.word	0x2000018c

08001070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <TIM3_IRQHandler+0x18>)
 8001076:	f002 fd6f 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <TIM3_IRQHandler+0x1c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a02      	ldr	r2, [pc, #8]	; (800108c <TIM3_IRQHandler+0x1c>)
 8001082:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000fc 	.word	0x200000fc
 800108c:	20000c38 	.word	0x20000c38

08001090 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM4_IRQHandler+0x10>)
 8001096:	f002 fd5f 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000bf0 	.word	0x20000bf0

080010a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff fff8 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010b6:	490c      	ldr	r1, [pc, #48]	; (80010e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010cc:	4c09      	ldr	r4, [pc, #36]	; (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f007 fac9 	bl	8008670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff f851 	bl	8000184 <main>
  bx lr
 80010e2:	4770      	bx	lr
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010ec:	08008a48 	.word	0x08008a48
  ldr r2, =_sbss
 80010f0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010f4:	2000434c 	.word	0x2000434c

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>
	...

080010fc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <NRF24_DelayMicroSeconds+0x38>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <NRF24_DelayMicroSeconds+0x3c>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800111c:	bf00      	nop
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	60fa      	str	r2, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1fa      	bne.n	800111e <NRF24_DelayMicroSeconds+0x22>
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20000028 	.word	0x20000028
 8001138:	165e9f81 	.word	0x165e9f81

0800113c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <NRF24_csn+0x20>
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <NRF24_csn+0x38>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <NRF24_csn+0x3c>)
 8001150:	8811      	ldrh	r1, [r2, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fa65 	bl	8002624 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800115a:	e007      	b.n	800116c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <NRF24_csn+0x38>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <NRF24_csn+0x3c>)
 8001162:	8811      	ldrh	r1, [r2, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fa5c 	bl	8002624 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000c50 	.word	0x20000c50
 8001178:	20000c54 	.word	0x20000c54

0800117c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <NRF24_ce+0x20>
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <NRF24_ce+0x38>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <NRF24_ce+0x3c>)
 8001190:	8811      	ldrh	r1, [r2, #0]
 8001192:	2201      	movs	r2, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fa45 	bl	8002624 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800119a:	e007      	b.n	80011ac <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <NRF24_ce+0x38>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <NRF24_ce+0x3c>)
 80011a2:	8811      	ldrh	r1, [r2, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fa3c 	bl	8002624 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000c50 	.word	0x20000c50
 80011b8:	20000c56 	.word	0x20000c56

080011bc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff ffb8 	bl	800113c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	2201      	movs	r2, #1
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <NRF24_read_register+0x4c>)
 80011e0:	f001 ff14 	bl	800300c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	1c59      	adds	r1, r3, #1
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	2201      	movs	r2, #1
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <NRF24_read_register+0x4c>)
 80011f0:	f002 f84f 	bl	8003292 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ff9f 	bl	800113c <NRF24_csn>
	return retData;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000c58 	.word	0x20000c58

0800120c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ff8d 	bl	800113c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	b2db      	uxtb	r3, r3
 800122a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	2201      	movs	r2, #1
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <NRF24_read_registerN+0x4c>)
 8001236:	f001 fee9 	bl	800300c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	b29a      	uxth	r2, r3
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <NRF24_read_registerN+0x4c>)
 8001244:	f002 f825 	bl	8003292 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff ff77 	bl	800113c <NRF24_csn>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000c58 	.word	0x20000c58

0800125c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff65 	bl	800113c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	b2db      	uxtb	r3, r3
 800127a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001280:	f107 010c 	add.w	r1, r7, #12
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	2202      	movs	r2, #2
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <NRF24_write_register+0x40>)
 800128a:	f001 febf 	bl	800300c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ff54 	bl	800113c <NRF24_csn>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000c58 	.word	0x20000c58

080012a0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff ff43 	bl	800113c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80012c0:	f107 010c 	add.w	r1, r7, #12
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	2201      	movs	r2, #1
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <NRF24_write_registerN+0x4c>)
 80012ca:	f001 fe9f 	bl	800300c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <NRF24_write_registerN+0x4c>)
 80012d8:	f001 fe98 	bl	800300c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff2d 	bl	800113c <NRF24_csn>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000c58 	.word	0x20000c58

080012f0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff1d 	bl	800113c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001302:	23a0      	movs	r3, #160	; 0xa0
 8001304:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001306:	f107 010f 	add.w	r1, r7, #15
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	2201      	movs	r2, #1
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <NRF24_write_payload+0x40>)
 8001310:	f001 fe7c 	bl	800300c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	b29a      	uxth	r2, r3
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <NRF24_write_payload+0x40>)
 800131e:	f001 fe75 	bl	800300c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff0a 	bl	800113c <NRF24_csn>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000c58 	.word	0x20000c58

08001334 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001340:	f000 fa80 	bl	8001844 <NRF24_getPayloadSize>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	4293      	cmp	r3, r2
 800134c:	d303      	bcc.n	8001356 <NRF24_read_payload+0x22>
 800134e:	f000 fa79 	bl	8001844 <NRF24_getPayloadSize>
 8001352:	4603      	mov	r3, r0
 8001354:	e000      	b.n	8001358 <NRF24_read_payload+0x24>
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff feee 	bl	800113c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001360:	2361      	movs	r3, #97	; 0x61
 8001362:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001364:	f107 010e 	add.w	r1, r7, #14
 8001368:	2364      	movs	r3, #100	; 0x64
 800136a:	2201      	movs	r2, #1
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <NRF24_read_payload+0x5c>)
 800136e:	f001 fe4d 	bl	800300c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b29a      	uxth	r2, r3
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <NRF24_read_payload+0x5c>)
 800137c:	f001 ff89 	bl	8003292 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fedb 	bl	800113c <NRF24_csn>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000c58 	.word	0x20000c58

08001394 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001398:	21ff      	movs	r1, #255	; 0xff
 800139a:	20e1      	movs	r0, #225	; 0xe1
 800139c:	f7ff ff5e 	bl	800125c <NRF24_write_register>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80013a8:	21ff      	movs	r1, #255	; 0xff
 80013aa:	20e2      	movs	r0, #226	; 0xe2
 80013ac:	f7ff ff56 	bl	800125c <NRF24_write_register>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f7ff fefe 	bl	80011bc <NRF24_read_register>
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 80013d0:	b084      	sub	sp, #16
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	f107 0c10 	add.w	ip, r7, #16
 80013dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <NRF24_begin+0x1a4>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2258      	movs	r2, #88	; 0x58
 80013ea:	4619      	mov	r1, r3
 80013ec:	f007 f964 	bl	80086b8 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <NRF24_begin+0x1a8>)
 80013f2:	4a62      	ldr	r2, [pc, #392]	; (800157c <NRF24_begin+0x1ac>)
 80013f4:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <NRF24_begin+0x1b0>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 80013fc:	4b61      	ldr	r3, [pc, #388]	; (8001584 <NRF24_begin+0x1b4>)
 80013fe:	2210      	movs	r2, #16
 8001400:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fe9a 	bl	800113c <NRF24_csn>
	NRF24_ce(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff feb7 	bl	800117c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800140e:	2005      	movs	r0, #5
 8001410:	f000 fc92 	bl	8001d38 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8001414:	2108      	movs	r1, #8
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff20 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 800141c:	213f      	movs	r1, #63	; 0x3f
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff ff1c 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8001424:	2103      	movs	r1, #3
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff ff18 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 800142c:	2103      	movs	r1, #3
 800142e:	2003      	movs	r0, #3
 8001430:	f7ff ff14 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8001434:	2103      	movs	r1, #3
 8001436:	2004      	movs	r0, #4
 8001438:	f7ff ff10 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 800143c:	2102      	movs	r1, #2
 800143e:	2005      	movs	r0, #5
 8001440:	f7ff ff0c 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8001444:	210f      	movs	r1, #15
 8001446:	2006      	movs	r0, #6
 8001448:	f7ff ff08 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 800144c:	210e      	movs	r1, #14
 800144e:	2007      	movs	r0, #7
 8001450:	f7ff ff04 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8001454:	2100      	movs	r1, #0
 8001456:	2008      	movs	r0, #8
 8001458:	f7ff ff00 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 800145c:	2100      	movs	r1, #0
 800145e:	2009      	movs	r0, #9
 8001460:	f7ff fefc 	bl	800125c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001464:	23e7      	movs	r3, #231	; 0xe7
 8001466:	713b      	strb	r3, [r7, #4]
 8001468:	23e7      	movs	r3, #231	; 0xe7
 800146a:	70fb      	strb	r3, [r7, #3]
 800146c:	23e7      	movs	r3, #231	; 0xe7
 800146e:	70bb      	strb	r3, [r7, #2]
 8001470:	23e7      	movs	r3, #231	; 0xe7
 8001472:	707b      	strb	r3, [r7, #1]
 8001474:	23e7      	movs	r3, #231	; 0xe7
 8001476:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8001478:	463b      	mov	r3, r7
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200a      	movs	r0, #10
 8001480:	f7ff ff0e 	bl	80012a0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001484:	23c2      	movs	r3, #194	; 0xc2
 8001486:	713b      	strb	r3, [r7, #4]
 8001488:	23c2      	movs	r3, #194	; 0xc2
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	23c2      	movs	r3, #194	; 0xc2
 800148e:	70bb      	strb	r3, [r7, #2]
 8001490:	23c2      	movs	r3, #194	; 0xc2
 8001492:	707b      	strb	r3, [r7, #1]
 8001494:	23c2      	movs	r3, #194	; 0xc2
 8001496:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8001498:	463b      	mov	r3, r7
 800149a:	2205      	movs	r2, #5
 800149c:	4619      	mov	r1, r3
 800149e:	200b      	movs	r0, #11
 80014a0:	f7ff fefe 	bl	80012a0 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 80014a4:	21c3      	movs	r1, #195	; 0xc3
 80014a6:	200c      	movs	r0, #12
 80014a8:	f7ff fed8 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 80014ac:	21c4      	movs	r1, #196	; 0xc4
 80014ae:	200d      	movs	r0, #13
 80014b0:	f7ff fed4 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 80014b4:	21c5      	movs	r1, #197	; 0xc5
 80014b6:	200e      	movs	r0, #14
 80014b8:	f7ff fed0 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 80014bc:	21c6      	movs	r1, #198	; 0xc6
 80014be:	200f      	movs	r0, #15
 80014c0:	f7ff fecc 	bl	800125c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80014c4:	23e7      	movs	r3, #231	; 0xe7
 80014c6:	713b      	strb	r3, [r7, #4]
 80014c8:	23e7      	movs	r3, #231	; 0xe7
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	23e7      	movs	r3, #231	; 0xe7
 80014ce:	70bb      	strb	r3, [r7, #2]
 80014d0:	23e7      	movs	r3, #231	; 0xe7
 80014d2:	707b      	strb	r3, [r7, #1]
 80014d4:	23e7      	movs	r3, #231	; 0xe7
 80014d6:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80014d8:	463b      	mov	r3, r7
 80014da:	2205      	movs	r2, #5
 80014dc:	4619      	mov	r1, r3
 80014de:	2010      	movs	r0, #16
 80014e0:	f7ff fede 	bl	80012a0 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2011      	movs	r0, #17
 80014e8:	f7ff feb8 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2012      	movs	r0, #18
 80014f0:	f7ff feb4 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80014f4:	2100      	movs	r1, #0
 80014f6:	2013      	movs	r0, #19
 80014f8:	f7ff feb0 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2014      	movs	r0, #20
 8001500:	f7ff feac 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	2015      	movs	r0, #21
 8001508:	f7ff fea8 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 800150c:	2100      	movs	r1, #0
 800150e:	2016      	movs	r0, #22
 8001510:	f7ff fea4 	bl	800125c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001514:	f000 fbc4 	bl	8001ca0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	201c      	movs	r0, #28
 800151c:	f7ff fe9e 	bl	800125c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 8001520:	2100      	movs	r1, #0
 8001522:	201d      	movs	r0, #29
 8001524:	f7ff fe9a 	bl	800125c <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001528:	210f      	movs	r1, #15
 800152a:	200f      	movs	r0, #15
 800152c:	f000 f944 	bl	80017b8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 fa26 	bl	8001982 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 fa5c 	bl	80019f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800153c:	2002      	movs	r0, #2
 800153e:	f000 fa9f 	bl	8001a80 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001542:	f000 f9f1 	bl	8001928 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001546:	2020      	movs	r0, #32
 8001548:	f000 f966 	bl	8001818 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 800154c:	f000 fac0 	bl	8001ad0 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001550:	f000 fb9e 	bl	8001c90 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001554:	204c      	movs	r0, #76	; 0x4c
 8001556:	f000 f94a 	bl	80017ee <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800155a:	f7ff ff1b 	bl	8001394 <NRF24_flush_tx>
	NRF24_flush_rx();
 800155e:	f7ff ff21 	bl	80013a4 <NRF24_flush_rx>

	NRF24_powerDown();
 8001562:	f000 faca 	bl	8001afa <NRF24_powerDown>

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001570:	b004      	add	sp, #16
 8001572:	4770      	bx	lr
 8001574:	20000c58 	.word	0x20000c58
 8001578:	20000c50 	.word	0x20000c50
 800157c:	40010800 	.word	0x40010800
 8001580:	20000c54 	.word	0x20000c54
 8001584:	20000c56 	.word	0x20000c56

08001588 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fe15 	bl	80011bc <NRF24_read_register>
 8001592:	4603      	mov	r3, r0
 8001594:	f043 0303 	orr.w	r3, r3, #3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fe5d 	bl	800125c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <NRF24_startListening+0x48>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	d004      	beq.n	80015b6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80015ac:	2205      	movs	r2, #5
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <NRF24_startListening+0x48>)
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff fe75 	bl	80012a0 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80015b6:	f7ff feed 	bl	8001394 <NRF24_flush_tx>
	NRF24_flush_rx();
 80015ba:	f7ff fef3 	bl	80013a4 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fddc 	bl	800117c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80015c4:	2096      	movs	r0, #150	; 0x96
 80015c6:	f7ff fd99 	bl	80010fc <NRF24_DelayMicroSeconds>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000c40 	.word	0x20000c40

080015d4 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fdcf 	bl	800117c <NRF24_ce>
	NRF24_flush_tx();
 80015de:	f7ff fed9 	bl	8001394 <NRF24_flush_tx>
	NRF24_flush_rx();
 80015e2:	f7ff fedf 	bl	80013a4 <NRF24_flush_rx>
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80015f8:	f000 fb4a 	bl	8001c90 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fab9 	bl	8001b78 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001606:	f000 fb8d 	bl	8001d24 <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800160c:	230a      	movs	r3, #10
 800160e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001610:	f107 030d 	add.w	r3, r7, #13
 8001614:	2201      	movs	r2, #1
 8001616:	4619      	mov	r1, r3
 8001618:	2008      	movs	r0, #8
 800161a:	f7ff fdf7 	bl	800120c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800161e:	f7ff fec9 	bl	80013b4 <NRF24_get_status>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <NRF24_write+0x54>
 8001630:	f000 fb78 	bl	8001d24 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8e7      	bhi.n	8001610 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001640:	f107 010b 	add.w	r1, r7, #11
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <NRF24_write+0x90>)
 800164a:	4618      	mov	r0, r3
 800164c:	f000 faed 	bl	8001c2a <NRF24_whatHappened>
	retStatus = tx_ok;
 8001650:	7b3b      	ldrb	r3, [r7, #12]
 8001652:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <NRF24_write+0x90>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800165c:	f000 f8fc 	bl	8001858 <NRF24_getDynamicPayloadSize>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <NRF24_write+0x94>)
 8001666:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001668:	f000 f80c 	bl	8001684 <NRF24_available>
	NRF24_flush_tx();
 800166c:	f7ff fe92 	bl	8001394 <NRF24_flush_tx>
	return retStatus;
 8001670:	7bbb      	ldrb	r3, [r7, #14]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000c48 	.word	0x20000c48
 8001680:	20000c49 	.word	0x20000c49

08001684 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fa45 	bl	8001b18 <NRF24_availablePipe>
 800168e:	4603      	mov	r3, r0
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}

08001694 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fe45 	bl	8001334 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80016aa:	2017      	movs	r0, #23
 80016ac:	f7ff fd86 	bl	80011bc <NRF24_read_register>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80016b8:	f7ff fe74 	bl	80013a4 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80016bc:	f000 f8cc 	bl	8001858 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80016de:	463b      	mov	r3, r7
 80016e0:	2205      	movs	r2, #5
 80016e2:	4619      	mov	r1, r3
 80016e4:	200a      	movs	r0, #10
 80016e6:	f7ff fddb 	bl	80012a0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80016ea:	463b      	mov	r3, r7
 80016ec:	2205      	movs	r2, #5
 80016ee:	4619      	mov	r1, r3
 80016f0:	2010      	movs	r0, #16
 80016f2:	f7ff fdd5 	bl	80012a0 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80016f6:	2320      	movs	r3, #32
 80016f8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <NRF24_openWritingPipe+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	4293      	cmp	r3, r2
 8001702:	bf28      	it	cs
 8001704:	4613      	movcs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	2011      	movs	r0, #17
 800170c:	f7ff fda6 	bl	800125c <NRF24_write_register>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000c4a 	.word	0x20000c4a

0800171c <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4601      	mov	r1, r0
 8001724:	e9c7 2300 	strd	r2, r3, [r7]
 8001728:	460b      	mov	r3, r1
 800172a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001736:	491c      	ldr	r1, [pc, #112]	; (80017a8 <NRF24_openReadingPipe+0x8c>)
 8001738:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d82d      	bhi.n	800179e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d808      	bhi.n	800175a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <NRF24_openReadingPipe+0x90>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	4639      	mov	r1, r7
 8001750:	2205      	movs	r2, #5
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fda4 	bl	80012a0 <NRF24_write_registerN>
 8001758:	e007      	b.n	800176a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <NRF24_openReadingPipe+0x90>)
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	4639      	mov	r1, r7
 8001762:	2201      	movs	r2, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fd9b 	bl	80012a0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <NRF24_openReadingPipe+0x94>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <NRF24_openReadingPipe+0x98>)
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fd70 	bl	800125c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff fd1d 	bl	80011bc <NRF24_read_register>
 8001782:	4603      	mov	r3, r0
 8001784:	b25a      	sxtb	r2, r3
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4619      	mov	r1, r3
 8001798:	2002      	movs	r0, #2
 800179a:	f7ff fd5f 	bl	800125c <NRF24_write_register>
	}

}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000c40 	.word	0x20000c40
 80017ac:	0800891c 	.word	0x0800891c
 80017b0:	08008924 	.word	0x08008924
 80017b4:	20000c4a 	.word	0x20000c4a

080017b8 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	2004      	movs	r0, #4
 80017e2:	f7ff fd3b 	bl	800125c <NRF24_write_register>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80017f8:	237f      	movs	r3, #127	; 0x7f
 80017fa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4293      	cmp	r3, r2
 8001802:	bf28      	it	cs
 8001804:	4613      	movcs	r3, r2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	2005      	movs	r0, #5
 800180c:	f7ff fd26 	bl	800125c <NRF24_write_register>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001822:	2320      	movs	r3, #32
 8001824:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4293      	cmp	r3, r2
 800182c:	bf28      	it	cs
 800182e:	4613      	movcs	r3, r2
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b03      	ldr	r3, [pc, #12]	; (8001840 <NRF24_setPayloadSize+0x28>)
 8001834:	701a      	strb	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000c4a 	.word	0x20000c4a

08001844 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	return payload_size;
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <NRF24_getPayloadSize+0x10>)
 800184a:	781b      	ldrb	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000c4a 	.word	0x20000c4a

08001858 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800185c:	2060      	movs	r0, #96	; 0x60
 800185e:	f7ff fcad 	bl	80011bc <NRF24_read_register>
 8001862:	4603      	mov	r3, r0
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}

08001868 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800186c:	201d      	movs	r0, #29
 800186e:	f7ff fca5 	bl	80011bc <NRF24_read_register>
 8001872:	4603      	mov	r3, r0
 8001874:	f043 0306 	orr.w	r3, r3, #6
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	201d      	movs	r0, #29
 800187e:	f7ff fced 	bl	800125c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001882:	201d      	movs	r0, #29
 8001884:	f7ff fc9a 	bl	80011bc <NRF24_read_register>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800188e:	f000 fa07 	bl	8001ca0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001892:	201d      	movs	r0, #29
 8001894:	f7ff fc92 	bl	80011bc <NRF24_read_register>
 8001898:	4603      	mov	r3, r0
 800189a:	f043 0306 	orr.w	r3, r3, #6
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	201d      	movs	r0, #29
 80018a4:	f7ff fcda 	bl	800125c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80018a8:	201c      	movs	r0, #28
 80018aa:	f7ff fc87 	bl	80011bc <NRF24_read_register>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f043 0303 	orr.w	r3, r3, #3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	201c      	movs	r0, #28
 80018ba:	f7ff fccf 	bl	800125c <NRF24_write_register>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80018c8:	201d      	movs	r0, #29
 80018ca:	f7ff fc77 	bl	80011bc <NRF24_read_register>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	201d      	movs	r0, #29
 80018da:	f7ff fcbf 	bl	800125c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80018de:	201d      	movs	r0, #29
 80018e0:	f7ff fc6c 	bl	80011bc <NRF24_read_register>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80018ea:	f000 f9d9 	bl	8001ca0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80018ee:	201d      	movs	r0, #29
 80018f0:	f7ff fc64 	bl	80011bc <NRF24_read_register>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	201d      	movs	r0, #29
 8001900:	f7ff fcac 	bl	800125c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001904:	201c      	movs	r0, #28
 8001906:	f7ff fc59 	bl	80011bc <NRF24_read_register>
 800190a:	4603      	mov	r3, r0
 800190c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	201c      	movs	r0, #28
 8001916:	f7ff fca1 	bl	800125c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800191a:	4b02      	ldr	r3, [pc, #8]	; (8001924 <NRF24_enableDynamicPayloads+0x60>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000c4b 	.word	0x20000c4b

08001928 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800192c:	201d      	movs	r0, #29
 800192e:	f7ff fc45 	bl	80011bc <NRF24_read_register>
 8001932:	4603      	mov	r3, r0
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4619      	mov	r1, r3
 800193c:	201d      	movs	r0, #29
 800193e:	f7ff fc8d 	bl	800125c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001942:	2100      	movs	r1, #0
 8001944:	201c      	movs	r0, #28
 8001946:	f7ff fc89 	bl	800125c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800194a:	4b02      	ldr	r3, [pc, #8]	; (8001954 <NRF24_disableDynamicPayloads+0x2c>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000c4b 	.word	0x20000c4b

08001958 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001968:	213f      	movs	r1, #63	; 0x3f
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fc76 	bl	800125c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001970:	e003      	b.n	800197a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001972:	2100      	movs	r1, #0
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fc71 	bl	800125c <NRF24_write_register>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff fc15 	bl	80011bc <NRF24_read_register>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	f023 0306 	bic.w	r3, r3, #6
 800199c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d104      	bne.n	80019ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	f043 0306 	orr.w	r3, r3, #6
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e019      	b.n	80019e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d104      	bne.n	80019be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e011      	b.n	80019e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d104      	bne.n	80019ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e009      	b.n	80019e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d103      	bne.n	80019e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f043 0306 	orr.w	r3, r3, #6
 80019e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4619      	mov	r1, r3
 80019e6:	2006      	movs	r0, #6
 80019e8:	f7ff fc38 	bl	800125c <NRF24_write_register>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001a02:	2006      	movs	r0, #6
 8001a04:	f7ff fbda 	bl	80011bc <NRF24_read_register>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <NRF24_setDataRate+0x88>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001a18:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <NRF24_setDataRate+0x88>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	73bb      	strb	r3, [r7, #14]
 8001a2e:	e00d      	b.n	8001a4c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <NRF24_setDataRate+0x88>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	73bb      	strb	r3, [r7, #14]
 8001a44:	e002      	b.n	8001a4c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <NRF24_setDataRate+0x88>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2006      	movs	r0, #6
 8001a52:	f7ff fc03 	bl	800125c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001a56:	2006      	movs	r0, #6
 8001a58:	f7ff fbb0 	bl	80011bc <NRF24_read_register>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d102      	bne.n	8001a6c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e002      	b.n	8001a72 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <NRF24_setDataRate+0x88>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000c4c 	.word	0x20000c4c

08001a80 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb96 	bl	80011bc <NRF24_read_register>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f023 030c 	bic.w	r3, r3, #12
 8001a96:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00f      	beq.n	8001abe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d104      	bne.n	8001aae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e007      	b.n	8001abe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fbca 	bl	800125c <NRF24_write_register>
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fb70 	bl	80011bc <NRF24_read_register>
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae6:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4619      	mov	r1, r3
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fbb5 	bl	800125c <NRF24_write_register>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fb5c 	bl	80011bc <NRF24_read_register>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f023 0302 	bic.w	r3, r3, #2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fba4 	bl	800125c <NRF24_write_register>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001b20:	f7ff fc48 	bl	80013b4 <NRF24_get_status>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d017      	beq.n	8001b6e <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	2007      	movs	r0, #7
 8001b58:	f7ff fb80 	bl	800125c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001b66:	2120      	movs	r1, #32
 8001b68:	2007      	movs	r0, #7
 8001b6a:	f7ff fb77 	bl	800125c <NRF24_write_register>
    }
  }
  return result;
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff faf9 	bl	800117c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fb16 	bl	80011bc <NRF24_read_register>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fb5b 	bl	800125c <NRF24_write_register>
  NRF24_ce(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff fae8 	bl	800117c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001bac:	2096      	movs	r0, #150	; 0x96
 8001bae:	f7ff faa5 	bl	80010fc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fb9a 	bl	80012f0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff fadd 	bl	800117c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f7ff fa9a 	bl	80010fc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fad7 	bl	800117c <NRF24_ce>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	6039      	str	r1, [r7, #0]
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	4613      	mov	r3, r2
 8001be4:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8001bea:	2320      	movs	r3, #32
 8001bec:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001bee:	7afa      	ldrb	r2, [r7, #11]
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	bf28      	it	cs
 8001bf6:	4613      	movcs	r3, r2
 8001bf8:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fa9e 	bl	800113c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	7aba      	ldrb	r2, [r7, #10]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fb42 	bl	80012a0 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fa8d 	bl	800113c <NRF24_csn>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001c36:	f7ff fbbd 	bl	80013b4 <NRF24_get_status>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001c44:	2170      	movs	r1, #112	; 0x70
 8001c46:	2007      	movs	r0, #7
 8001c48:	f7ff fb08 	bl	800125c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	701a      	strb	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001c94:	2170      	movs	r1, #112	; 0x70
 8001c96:	2007      	movs	r0, #7
 8001c98:	f7ff fae0 	bl	800125c <NRF24_write_register>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fa48 	bl	800113c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001cac:	2350      	movs	r3, #80	; 0x50
 8001cae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001cb0:	2373      	movs	r3, #115	; 0x73
 8001cb2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001cb4:	1d39      	adds	r1, r7, #4
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <NRF24_ACTIVATE_cmd+0x30>)
 8001cbc:	f001 f9a6 	bl	800300c <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fa3b 	bl	800113c <NRF24_csn>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000c58 	.word	0x20000c58

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_Init+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_Init+0x28>)
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 f8f5 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	200f      	movs	r0, #15
 8001cec:	f7ff f91c 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7fe fffc 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40022000 	.word	0x40022000

08001d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x20>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000030 	.word	0x20000030
 8001d20:	20000cb0 	.word	0x20000cb0

08001d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_GetTick+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000cb0 	.word	0x20000cb0

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffe0 	bl	8001d24 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000030 	.word	0x20000030

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <__NVIC_EnableIRQ+0x34>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff4f 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff64 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ffb2 	bl	8001e70 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff81 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff57 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e043      	b.n	8001fde <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_DMA_Init+0xa8>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_DMA_Init+0xac>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_DMA_Init+0xb0>)
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	bffdfff8 	.word	0xbffdfff8
 8001fec:	cccccccd 	.word	0xcccccccd
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Start_IT+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e04b      	b.n	80020ac <HAL_DMA_Start_IT+0xb8>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d13a      	bne.n	800209e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f937 	bl	80022c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 020e 	orr.w	r2, r2, #14
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00f      	b.n	800208c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 020a 	orr.w	r2, r2, #10
 800208a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e005      	b.n	80020aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2204      	movs	r2, #4
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d04f      	beq.n	800217c <HAL_DMA_IRQHandler+0xc8>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04a      	beq.n	800217c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_DMA_IRQHandler+0x1f0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d029      	beq.n	8002162 <HAL_DMA_IRQHandler+0xae>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a65      	ldr	r2, [pc, #404]	; (80022a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_IRQHandler+0xaa>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a63      	ldr	r2, [pc, #396]	; (80022ac <HAL_DMA_IRQHandler+0x1f8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01a      	beq.n	8002158 <HAL_DMA_IRQHandler+0xa4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a62      	ldr	r2, [pc, #392]	; (80022b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d012      	beq.n	8002152 <HAL_DMA_IRQHandler+0x9e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a60      	ldr	r2, [pc, #384]	; (80022b4 <HAL_DMA_IRQHandler+0x200>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00a      	beq.n	800214c <HAL_DMA_IRQHandler+0x98>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5f      	ldr	r2, [pc, #380]	; (80022b8 <HAL_DMA_IRQHandler+0x204>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d102      	bne.n	8002146 <HAL_DMA_IRQHandler+0x92>
 8002140:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002144:	e00e      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 8002146:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800214a:	e00b      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 800214c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002150:	e008      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 8002152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002156:	e005      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 8002158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215c:	e002      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 800215e:	2340      	movs	r3, #64	; 0x40
 8002160:	e000      	b.n	8002164 <HAL_DMA_IRQHandler+0xb0>
 8002162:	2304      	movs	r3, #4
 8002164:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_DMA_IRQHandler+0x208>)
 8002166:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8094 	beq.w	800229a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800217a:	e08e      	b.n	800229a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2202      	movs	r2, #2
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d056      	beq.n	800223a <HAL_DMA_IRQHandler+0x186>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d051      	beq.n	800223a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 020a 	bic.w	r2, r2, #10
 80021b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <HAL_DMA_IRQHandler+0x1f0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d029      	beq.n	800221a <HAL_DMA_IRQHandler+0x166>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <HAL_DMA_IRQHandler+0x1f4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_IRQHandler+0x162>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_DMA_IRQHandler+0x1f8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x15c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <HAL_DMA_IRQHandler+0x1fc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d012      	beq.n	800220a <HAL_DMA_IRQHandler+0x156>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <HAL_DMA_IRQHandler+0x200>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x150>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_DMA_IRQHandler+0x204>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d102      	bne.n	80021fe <HAL_DMA_IRQHandler+0x14a>
 80021f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021fc:	e00e      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 80021fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002202:	e00b      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 8002204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002208:	e008      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 800220a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220e:	e005      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 8002210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002214:	e002      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 8002216:	2320      	movs	r3, #32
 8002218:	e000      	b.n	800221c <HAL_DMA_IRQHandler+0x168>
 800221a:	2302      	movs	r3, #2
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_IRQHandler+0x208>)
 800221e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d034      	beq.n	800229a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002238:	e02f      	b.n	800229a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2208      	movs	r2, #8
 8002240:	409a      	lsls	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d028      	beq.n	800229c <HAL_DMA_IRQHandler+0x1e8>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d023      	beq.n	800229c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 020e 	bic.w	r2, r2, #14
 8002262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
    }
  }
  return;
 800229a:	bf00      	nop
 800229c:	bf00      	nop
}
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40020008 	.word	0x40020008
 80022a8:	4002001c 	.word	0x4002001c
 80022ac:	40020030 	.word	0x40020030
 80022b0:	40020044 	.word	0x40020044
 80022b4:	40020058 	.word	0x40020058
 80022b8:	4002006c 	.word	0x4002006c
 80022bc:	40020000 	.word	0x40020000

080022c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b08b      	sub	sp, #44	; 0x2c
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232e:	e169      	b.n	8002604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002330:	2201      	movs	r2, #1
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8158 	bne.w	80025fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a9a      	ldr	r2, [pc, #616]	; (80025bc <HAL_GPIO_Init+0x2a0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d05e      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002358:	4a98      	ldr	r2, [pc, #608]	; (80025bc <HAL_GPIO_Init+0x2a0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d875      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800235e:	4a98      	ldr	r2, [pc, #608]	; (80025c0 <HAL_GPIO_Init+0x2a4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d058      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002364:	4a96      	ldr	r2, [pc, #600]	; (80025c0 <HAL_GPIO_Init+0x2a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d86f      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800236a:	4a96      	ldr	r2, [pc, #600]	; (80025c4 <HAL_GPIO_Init+0x2a8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d052      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002370:	4a94      	ldr	r2, [pc, #592]	; (80025c4 <HAL_GPIO_Init+0x2a8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d869      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002376:	4a94      	ldr	r2, [pc, #592]	; (80025c8 <HAL_GPIO_Init+0x2ac>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04c      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 800237c:	4a92      	ldr	r2, [pc, #584]	; (80025c8 <HAL_GPIO_Init+0x2ac>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d863      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002382:	4a92      	ldr	r2, [pc, #584]	; (80025cc <HAL_GPIO_Init+0x2b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d046      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
 8002388:	4a90      	ldr	r2, [pc, #576]	; (80025cc <HAL_GPIO_Init+0x2b0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d85d      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 800238e:	2b12      	cmp	r3, #18
 8002390:	d82a      	bhi.n	80023e8 <HAL_GPIO_Init+0xcc>
 8002392:	2b12      	cmp	r3, #18
 8002394:	d859      	bhi.n	800244a <HAL_GPIO_Init+0x12e>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <HAL_GPIO_Init+0x80>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	08002417 	.word	0x08002417
 80023a0:	080023f1 	.word	0x080023f1
 80023a4:	08002403 	.word	0x08002403
 80023a8:	08002445 	.word	0x08002445
 80023ac:	0800244b 	.word	0x0800244b
 80023b0:	0800244b 	.word	0x0800244b
 80023b4:	0800244b 	.word	0x0800244b
 80023b8:	0800244b 	.word	0x0800244b
 80023bc:	0800244b 	.word	0x0800244b
 80023c0:	0800244b 	.word	0x0800244b
 80023c4:	0800244b 	.word	0x0800244b
 80023c8:	0800244b 	.word	0x0800244b
 80023cc:	0800244b 	.word	0x0800244b
 80023d0:	0800244b 	.word	0x0800244b
 80023d4:	0800244b 	.word	0x0800244b
 80023d8:	0800244b 	.word	0x0800244b
 80023dc:	0800244b 	.word	0x0800244b
 80023e0:	080023f9 	.word	0x080023f9
 80023e4:	0800240d 	.word	0x0800240d
 80023e8:	4a79      	ldr	r2, [pc, #484]	; (80025d0 <HAL_GPIO_Init+0x2b4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ee:	e02c      	b.n	800244a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e029      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	3304      	adds	r3, #4
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e024      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	3308      	adds	r3, #8
 8002408:	623b      	str	r3, [r7, #32]
          break;
 800240a:	e01f      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	330c      	adds	r3, #12
 8002412:	623b      	str	r3, [r7, #32]
          break;
 8002414:	e01a      	b.n	800244c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800241e:	2304      	movs	r3, #4
 8002420:	623b      	str	r3, [r7, #32]
          break;
 8002422:	e013      	b.n	800244c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	611a      	str	r2, [r3, #16]
          break;
 8002436:	e009      	b.n	800244c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002438:	2308      	movs	r3, #8
 800243a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	615a      	str	r2, [r3, #20]
          break;
 8002442:	e003      	b.n	800244c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x130>
          break;
 800244a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2bff      	cmp	r3, #255	; 0xff
 8002450:	d801      	bhi.n	8002456 <HAL_GPIO_Init+0x13a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	e001      	b.n	800245a <HAL_GPIO_Init+0x13e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3304      	adds	r3, #4
 800245a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d802      	bhi.n	8002468 <HAL_GPIO_Init+0x14c>
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x152>
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3b08      	subs	r3, #8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	210f      	movs	r1, #15
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80b1 	beq.w	80025fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_GPIO_Init+0x2b8>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024b4:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a40      	ldr	r2, [pc, #256]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_GPIO_Init+0x1ec>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <HAL_GPIO_Init+0x2c4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_GPIO_Init+0x1e8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3e      	ldr	r2, [pc, #248]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <HAL_GPIO_Init+0x1e4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <HAL_GPIO_Init+0x2cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_GPIO_Init+0x1e0>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e004      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002500:	2302      	movs	r3, #2
 8002502:	e002      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002508:	2300      	movs	r3, #0
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800251a:	492f      	ldr	r1, [pc, #188]	; (80025d8 <HAL_GPIO_Init+0x2bc>)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	492c      	ldr	r1, [pc, #176]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	4928      	ldr	r1, [pc, #160]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800254c:	4013      	ands	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	60cb      	str	r3, [r1, #12]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	491e      	ldr	r1, [pc, #120]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4918      	ldr	r1, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4914      	ldr	r1, [pc, #80]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d021      	beq.n	80025f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	490e      	ldr	r1, [pc, #56]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e021      	b.n	80025fe <HAL_GPIO_Init+0x2e2>
 80025ba:	bf00      	nop
 80025bc:	10320000 	.word	0x10320000
 80025c0:	10310000 	.word	0x10310000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	10210000 	.word	0x10210000
 80025cc:	10120000 	.word	0x10120000
 80025d0:	10110000 	.word	0x10110000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40010c00 	.word	0x40010c00
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4909      	ldr	r1, [pc, #36]	; (8002620 <HAL_GPIO_Init+0x304>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	3301      	adds	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f ae8e 	bne.w	8002330 <HAL_GPIO_Init+0x14>
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	372c      	adds	r7, #44	; 0x2c
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002640:	e003      	b.n	800264a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	611a      	str	r2, [r3, #16]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff96 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e272      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8087 	beq.w	80027b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a4:	4b92      	ldr	r3, [pc, #584]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d00c      	beq.n	80026ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b0:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d112      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5e>
 80026bc:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d10b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ca:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d06c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x12c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d168      	bne.n	80027b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e24c      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x76>
 80026ec:	4b80      	ldr	r3, [pc, #512]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e02e      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7a      	ldr	r2, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0xbc>
 8002726:	4b72      	ldr	r3, [pc, #456]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a71      	ldr	r2, [pc, #452]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6e      	ldr	r2, [pc, #440]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xd4>
 8002740:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6a      	ldr	r2, [pc, #424]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a67      	ldr	r2, [pc, #412]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fae0 	bl	8001d24 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fadc 	bl	8001d24 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e200      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xe4>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff facc 	bl	8001d24 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fac8 	bl	8001d24 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1ec      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x10c>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027be:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11c      	bne.n	8002810 <HAL_RCC_OscConfig+0x18c>
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_RCC_OscConfig+0x176>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c0      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4939      	ldr	r1, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e03a      	b.n	8002886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <HAL_RCC_OscConfig+0x270>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7ff fa81 	bl	8001d24 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff fa7d 	bl	8001d24 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1a1      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4927      	ldr	r1, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x270>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fa60 	bl	8001d24 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff fa5c 	bl	8001d24 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e180      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03a      	beq.n	8002908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <HAL_RCC_OscConfig+0x274>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a0:	f7ff fa40 	bl	8001d24 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff fa3c 	bl	8001d24 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e160      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f000 fafe 	bl	8002ec8 <RCC_Delay>
 80028cc:	e01c      	b.n	8002908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_RCC_OscConfig+0x274>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7ff fa26 	bl	8001d24 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028da:	e00f      	b.n	80028fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7ff fa22 	bl	8001d24 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d908      	bls.n	80028fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e146      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	42420000 	.word	0x42420000
 80028f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e9      	bne.n	80028dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a6 	beq.w	8002a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <HAL_RCC_OscConfig+0x4c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0x4c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7e      	ldr	r2, [pc, #504]	; (8002b4c <HAL_RCC_OscConfig+0x4c8>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff f9e3 	bl	8001d24 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7ff f9df 	bl	8001d24 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e103      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b75      	ldr	r3, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x4c8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x312>
 8002988:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e02d      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x334>
 800299e:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a69      	ldr	r2, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a66      	ldr	r2, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	e01c      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x356>
 80029c0:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6213      	str	r3, [r2, #32]
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a5d      	ldr	r2, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0x36e>
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a5a      	ldr	r2, [pc, #360]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7ff f993 	bl	8001d24 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7ff f98f 	bl	8001d24 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0b1      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ee      	beq.n	8002a02 <HAL_RCC_OscConfig+0x37e>
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7ff f97d 	bl	8001d24 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7ff f979 	bl	8001d24 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e09b      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8087 	beq.w	8002b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d061      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d146      	bne.n	8002b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCC_OscConfig+0x4cc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff f94d 	bl	8001d24 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff f949 	bl	8001d24 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e06d      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4921      	ldr	r1, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a19      	ldr	r1, [r3, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	491b      	ldr	r1, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x4cc>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7ff f91d 	bl	8001d24 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7ff f919 	bl	8001d24 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e03d      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x46a>
 8002b0c:	e035      	b.n	8002b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f906 	bl	8001d24 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7ff f902 	bl	8001d24 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e026      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x498>
 8002b3a:	e01e      	b.n	8002b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e019      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x500>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0d0      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d910      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0207 	bic.w	r2, r3, #7
 8002bb2:	4965      	ldr	r1, [pc, #404]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d040      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d115      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e073      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4936      	ldr	r1, [pc, #216]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c78:	f7ff f854 	bl	8001d24 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7ff f850 	bl	8001d24 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e053      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d210      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	4922      	ldr	r1, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1cc>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f8f6 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08008904 	.word	0x08008904
 8002d54:	20000028 	.word	0x20000028
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d002      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x30>
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x36>
 8002d8a:	e027      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d8e:	613b      	str	r3, [r7, #16]
      break;
 8002d90:	e027      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0c9b      	lsrs	r3, r3, #18
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0c5b      	lsrs	r3, r3, #17
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dbe:	fb03 f202 	mul.w	r2, r3, r2
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e004      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	613b      	str	r3, [r7, #16]
      break;
 8002dda:	e002      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dde:	613b      	str	r3, [r7, #16]
      break;
 8002de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de2:	693b      	ldr	r3, [r7, #16]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	007a1200 	.word	0x007a1200
 8002df8:	0800892c 	.word	0x0800892c
 8002dfc:	0800893c 	.word	0x0800893c
 8002e00:	003d0900 	.word	0x003d0900

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000028 	.word	0x20000028

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff2 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08008914 	.word	0x08008914

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08008914 	.word	0x08008914

08002e68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	220f      	movs	r2, #15
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_GetClockConfig+0x58>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_GetClockConfig+0x58>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_GetClockConfig+0x58>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_GetClockConfig+0x58>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0207 	and.w	r2, r3, #7
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <RCC_Delay+0x34>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <RCC_Delay+0x38>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee4:	bf00      	nop
  }
  while (Delay --);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	60fa      	str	r2, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <RCC_Delay+0x1c>
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	20000028 	.word	0x20000028
 8002f00:	10624dd3 	.word	0x10624dd3

08002f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e076      	b.n	8003004 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f26:	d009      	beq.n	8002f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61da      	str	r2, [r3, #28]
 8002f2e:	e005      	b.n	8002f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd ff00 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	0c1a      	lsrs	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f002 0204 	and.w	r2, r2, #4
 8002fe2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_SPI_Transmit+0x22>
 800302a:	2302      	movs	r3, #2
 800302c:	e12d      	b.n	800328a <HAL_SPI_Transmit+0x27e>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003036:	f7fe fe75 	bl	8001d24 <HAL_GetTick>
 800303a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d002      	beq.n	8003052 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003050:	e116      	b.n	8003280 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_SPI_Transmit+0x52>
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003062:	e10d      	b.n	8003280 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2203      	movs	r2, #3
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030aa:	d10f      	bne.n	80030cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d007      	beq.n	80030ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f2:	d14f      	bne.n	8003194 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_SPI_Transmit+0xf6>
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d142      	bne.n	8003188 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003126:	e02f      	b.n	8003188 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d112      	bne.n	800315c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	86da      	strh	r2, [r3, #54]	; 0x36
 800315a:	e015      	b.n	8003188 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800315c:	f7fe fde2 	bl	8001d24 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d803      	bhi.n	8003174 <HAL_SPI_Transmit+0x168>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d102      	bne.n	800317a <HAL_SPI_Transmit+0x16e>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003186:	e07b      	b.n	8003280 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ca      	bne.n	8003128 <HAL_SPI_Transmit+0x11c>
 8003192:	e050      	b.n	8003236 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Transmit+0x196>
 800319c:	8afb      	ldrh	r3, [r7, #22]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d144      	bne.n	800322c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031c8:	e030      	b.n	800322c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d113      	bne.n	8003200 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80031fe:	e015      	b.n	800322c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003200:	f7fe fd90 	bl	8001d24 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d803      	bhi.n	8003218 <HAL_SPI_Transmit+0x20c>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d102      	bne.n	800321e <HAL_SPI_Transmit+0x212>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800322a:	e029      	b.n	8003280 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1c9      	bne.n	80031ca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fbcc 	bl	80039d8 <SPI_EndRxTxTransaction>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e003      	b.n	8003280 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003288:	7ffb      	ldrb	r3, [r7, #31]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b088      	sub	sp, #32
 8003296:	af02      	add	r7, sp, #8
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
 80032b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032b6:	e0fb      	b.n	80034b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c0:	d112      	bne.n	80032e8 <HAL_SPI_Receive+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2204      	movs	r2, #4
 80032ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8ef 	bl	80034c2 <HAL_SPI_TransmitReceive>
 80032e4:	4603      	mov	r3, r0
 80032e6:	e0e8      	b.n	80034ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Receive+0x64>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0e1      	b.n	80034ba <HAL_SPI_Receive+0x228>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fe:	f7fe fd11 	bl	8001d24 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Receive+0x7e>
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003314:	e0cc      	b.n	80034b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2204      	movs	r2, #4
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335c:	d10f      	bne.n	800337e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d007      	beq.n	800339c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d16a      	bne.n	800347a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033a4:	e032      	b.n	800340c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d115      	bne.n	80033e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f103 020c 	add.w	r2, r3, #12
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033de:	e015      	b.n	800340c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e0:	f7fe fca0 	bl	8001d24 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d803      	bhi.n	80033f8 <HAL_SPI_Receive+0x166>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d102      	bne.n	80033fe <HAL_SPI_Receive+0x16c>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800340a:	e051      	b.n	80034b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1c7      	bne.n	80033a6 <HAL_SPI_Receive+0x114>
 8003416:	e035      	b.n	8003484 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d113      	bne.n	800344e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	b292      	uxth	r2, r2
 8003432:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800344c:	e015      	b.n	800347a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800344e:	f7fe fc69 	bl	8001d24 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d803      	bhi.n	8003466 <HAL_SPI_Receive+0x1d4>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d102      	bne.n	800346c <HAL_SPI_Receive+0x1da>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003478:	e01a      	b.n	80034b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1c9      	bne.n	8003418 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fa53 	bl	8003934 <SPI_EndRxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
 80034a6:	e003      	b.n	80034b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b08c      	sub	sp, #48	; 0x30
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x26>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e198      	b.n	800381a <HAL_SPI_TransmitReceive+0x358>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f0:	f7fe fc18 	bl	8001d24 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800350a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350e:	2b01      	cmp	r3, #1
 8003510:	d00f      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x70>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003518:	d107      	bne.n	800352a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <HAL_SPI_TransmitReceive+0x68>
 8003522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003530:	e16d      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x82>
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800354a:	e160      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b04      	cmp	r3, #4
 8003556:	d003      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2205      	movs	r2, #5
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	887a      	ldrh	r2, [r7, #2]
 8003576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d007      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035bc:	d17c      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_TransmitReceive+0x10a>
 80035c6:	8b7b      	ldrh	r3, [r7, #26]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d16a      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f0:	e057      	b.n	80036a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11b      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x176>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x176>
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d113      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d119      	bne.n	800367a <HAL_SPI_TransmitReceive+0x1b8>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d014      	beq.n	800367a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	b292      	uxth	r2, r2
 800365c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800367a:	f7fe fb53 	bl	8001d24 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003686:	429a      	cmp	r2, r3
 8003688:	d80b      	bhi.n	80036a2 <HAL_SPI_TransmitReceive+0x1e0>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d007      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036a0:	e0b5      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1a2      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x130>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d19d      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x130>
 80036b6:	e080      	b.n	80037ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_TransmitReceive+0x204>
 80036c0:	8b7b      	ldrh	r3, [r7, #26]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d16f      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ec:	e05b      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d11c      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x274>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d017      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x274>
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d114      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d119      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x2b6>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003774:	2301      	movs	r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003778:	f7fe fad4 	bl	8001d24 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003784:	429a      	cmp	r2, r3
 8003786:	d803      	bhi.n	8003790 <HAL_SPI_TransmitReceive+0x2ce>
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d102      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x2d4>
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80037a4:	e033      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d19e      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x22c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d199      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f90a 	bl	80039d8 <SPI_EndRxTxTransaction>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037d6:	e01a      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003804:	e003      	b.n	800380e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800381a:	4618      	mov	r0, r3
 800381c:	3730      	adds	r7, #48	; 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003834:	f7fe fa76 	bl	8001d24 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	4413      	add	r3, r2
 8003842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003844:	f7fe fa6e 	bl	8001d24 <HAL_GetTick>
 8003848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	0d1b      	lsrs	r3, r3, #20
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800385a:	e054      	b.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d050      	beq.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003864:	f7fe fa5e 	bl	8001d24 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	429a      	cmp	r2, r3
 8003872:	d902      	bls.n	800387a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d13d      	bne.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d111      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389c:	d004      	beq.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a6:	d107      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c0:	d10f      	bne.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e017      	b.n	8003926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3b01      	subs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d19b      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000028 	.word	0x20000028

08003934 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003948:	d111      	bne.n	800396e <SPI_EndRxTransaction+0x3a>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d004      	beq.n	800395e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d107      	bne.n	800396e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003976:	d117      	bne.n	80039a8 <SPI_EndRxTransaction+0x74>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d112      	bne.n	80039a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2200      	movs	r2, #0
 800398a:	2101      	movs	r1, #1
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff ff49 	bl	8003824 <SPI_WaitFlagStateUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01a      	beq.n	80039ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e013      	b.n	80039d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ff36 	bl	8003824 <SPI_WaitFlagStateUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e000      	b.n	80039d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff18 	bl	8003824 <SPI_WaitFlagStateUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e000      	b.n	8003a0c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e041      	b.n	8003aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd f9d8 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f000 f9ee 	bl	8003e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e03a      	b.n	8003b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_TIM_Base_Start_IT+0x98>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d010      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	e007      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800

08003b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0202 	mvn.w	r2, #2
 8003b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f92f 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f922 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f931 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0204 	mvn.w	r2, #4
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f905 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8f8 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f907 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0208 	mvn.w	r2, #8
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8db 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8ce 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8dd 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0210 	mvn.w	r2, #16
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2208      	movs	r2, #8
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8b1 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8a4 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8b3 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0201 	mvn.w	r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fc fff0 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa6d 	bl	80041e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f877 	bl	8003e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0220 	mvn.w	r2, #32
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa38 	bl	80041d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e031      	b.n	8003de4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8b0 	bl	8003ef8 <TIM_SlaveTimer_SetConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e018      	b.n	8003de4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <TIM_Base_SetConfig+0xb8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00b      	beq.n	8003e64 <TIM_Base_SetConfig+0x30>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	d007      	beq.n	8003e64 <TIM_Base_SetConfig+0x30>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <TIM_Base_SetConfig+0xbc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0x30>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <TIM_Base_SetConfig+0xc0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <TIM_Base_SetConfig+0xb8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <TIM_Base_SetConfig+0xbc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0x62>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <TIM_Base_SetConfig+0xc0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a07      	ldr	r2, [pc, #28]	; (8003eec <TIM_Base_SetConfig+0xb8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d103      	bne.n	8003edc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800

08003ef8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f023 0307 	bic.w	r3, r3, #7
 8003f26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b70      	cmp	r3, #112	; 0x70
 8003f40:	d01a      	beq.n	8003f78 <TIM_SlaveTimer_SetConfig+0x80>
 8003f42:	2b70      	cmp	r3, #112	; 0x70
 8003f44:	d860      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f46:	2b60      	cmp	r3, #96	; 0x60
 8003f48:	d054      	beq.n	8003ff4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f4a:	2b60      	cmp	r3, #96	; 0x60
 8003f4c:	d85c      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f4e:	2b50      	cmp	r3, #80	; 0x50
 8003f50:	d046      	beq.n	8003fe0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f52:	2b50      	cmp	r3, #80	; 0x50
 8003f54:	d858      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d019      	beq.n	8003f8e <TIM_SlaveTimer_SetConfig+0x96>
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d854      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d055      	beq.n	800400e <TIM_SlaveTimer_SetConfig+0x116>
 8003f62:	2b30      	cmp	r3, #48	; 0x30
 8003f64:	d850      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d051      	beq.n	800400e <TIM_SlaveTimer_SetConfig+0x116>
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d84c      	bhi.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04d      	beq.n	800400e <TIM_SlaveTimer_SetConfig+0x116>
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d04b      	beq.n	800400e <TIM_SlaveTimer_SetConfig+0x116>
 8003f76:	e047      	b.n	8004008 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	f000 f8a4 	bl	80040d4 <TIM_ETR_SetConfig>
      break;
 8003f8c:	e040      	b.n	8004010 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d101      	bne.n	8003f9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e03b      	b.n	8004012 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
      break;
 8003fde:	e017      	b.n	8004010 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fec:	461a      	mov	r2, r3
 8003fee:	f000 f814 	bl	800401a <TIM_TI1_ConfigInputStage>
      break;
 8003ff2:	e00d      	b.n	8004010 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004000:	461a      	mov	r2, r3
 8004002:	f000 f838 	bl	8004076 <TIM_TI2_ConfigInputStage>
      break;
 8004006:	e003      	b.n	8004010 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e000      	b.n	8004010 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800400e:	bf00      	nop
  }

  return status;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 0201 	bic.w	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 030a 	bic.w	r3, r3, #10
 8004056:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 0210 	bic.w	r2, r3, #16
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e046      	b.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d009      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a10      	ldr	r2, [pc, #64]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10c      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e042      	b.n	800428c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fc fe0e 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fa8f 	bl	800475c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d112      	bne.n	80042d4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_UART_Receive_DMA+0x26>
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00b      	b.n	80042d6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f922 	bl	8004514 <UART_Start_Receive_DMA>
 80042d0:	4603      	mov	r3, r0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b09c      	sub	sp, #112	; 0x70
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d172      	bne.n	800441a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	2200      	movs	r2, #0
 8004338:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004350:	66bb      	str	r3, [r7, #104]	; 0x68
 8004352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800435a:	65ba      	str	r2, [r7, #88]	; 0x58
 800435c:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	667b      	str	r3, [r7, #100]	; 0x64
 8004386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800438e:	647a      	str	r2, [r7, #68]	; 0x44
 8004390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	623b      	str	r3, [r7, #32]
   return(result);
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043c2:	633a      	str	r2, [r7, #48]	; 0x30
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d119      	bne.n	800441a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004406:	61fa      	str	r2, [r7, #28]
 8004408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	617b      	str	r3, [r7, #20]
   return(result);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800442c:	4619      	mov	r1, r3
 800442e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004430:	f7ff ff67 	bl	8004302 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004434:	e002      	b.n	800443c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004436:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004438:	f7fc f8be 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 800443c:	bf00      	nop
 800443e:	3770      	adds	r7, #112	; 0x70
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	d108      	bne.n	8004472 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	4619      	mov	r1, r3
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff49 	bl	8004302 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004470:	e002      	b.n	8004478 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff ff33 	bl	80042de <HAL_UART_RxHalfCpltCallback>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b21      	cmp	r3, #33	; 0x21
 80044b2:	d108      	bne.n	80044c6 <UART_DMAError+0x46>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f000 f8c1 	bl	8004648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b22      	cmp	r3, #34	; 0x22
 80044e6:	d108      	bne.n	80044fa <UART_DMAError+0x7a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044f4:	68b8      	ldr	r0, [r7, #8]
 80044f6:	f000 f8ce 	bl	8004696 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f043 0210 	orr.w	r2, r3, #16
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7ff fef2 	bl	80042f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b098      	sub	sp, #96	; 0x60
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	4a3e      	ldr	r2, [pc, #248]	; (800463c <UART_Start_Receive_DMA+0x128>)
 8004542:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	4a3d      	ldr	r2, [pc, #244]	; (8004640 <UART_Start_Receive_DMA+0x12c>)
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <UART_Start_Receive_DMA+0x130>)
 8004552:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	2200      	movs	r2, #0
 800455a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800455c:	f107 0308 	add.w	r3, r7, #8
 8004560:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	f7fd fd3e 	bl	8001ff4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d019      	beq.n	80045ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80045bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	657b      	str	r3, [r7, #84]	; 0x54
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3314      	adds	r3, #20
 80045e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	617b      	str	r3, [r7, #20]
   return(result);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004614:	653b      	str	r3, [r7, #80]	; 0x50
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800461e:	627a      	str	r2, [r7, #36]	; 0x24
 8004620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6a39      	ldr	r1, [r7, #32]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	61fb      	str	r3, [r7, #28]
   return(result);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e5      	bne.n	80045fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3760      	adds	r7, #96	; 0x60
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08004319 	.word	0x08004319
 8004640:	08004445 	.word	0x08004445
 8004644:	08004481 	.word	0x08004481

08004648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	; 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	61ba      	str	r2, [r7, #24]
 8004672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800468c:	bf00      	nop
 800468e:	3724      	adds	r7, #36	; 0x24
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b095      	sub	sp, #84	; 0x54
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046be:	643a      	str	r2, [r7, #64]	; 0x40
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3314      	adds	r3, #20
 80046d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3314      	adds	r3, #20
 80046f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	2b01      	cmp	r3, #1
 800470c:	d119      	bne.n	8004742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	60bb      	str	r3, [r7, #8]
   return(result);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472e:	61ba      	str	r2, [r7, #24]
 8004730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	613b      	str	r3, [r7, #16]
   return(result);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004750:	bf00      	nop
 8004752:	3754      	adds	r7, #84	; 0x54
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
	...

0800475c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004796:	f023 030c 	bic.w	r3, r3, #12
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <UART_SetConfig+0x114>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047c4:	f7fe fb3c 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	e002      	b.n	80047d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fb24 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80047d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <UART_SetConfig+0x118>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	0119      	lsls	r1, r3, #4
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009a      	lsls	r2, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fbb2 f2f3 	udiv	r2, r2, r3
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <UART_SetConfig+0x118>)
 800480a:	fba3 0302 	umull	r0, r3, r3, r2
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2064      	movs	r0, #100	; 0x64
 8004812:	fb00 f303 	mul.w	r3, r0, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	3332      	adds	r3, #50	; 0x32
 800481c:	4a15      	ldr	r2, [pc, #84]	; (8004874 <UART_SetConfig+0x118>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004828:	4419      	add	r1, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <UART_SetConfig+0x118>)
 8004842:	fba3 0302 	umull	r0, r3, r3, r2
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2064      	movs	r0, #100	; 0x64
 800484a:	fb00 f303 	mul.w	r3, r0, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	3332      	adds	r3, #50	; 0x32
 8004854:	4a07      	ldr	r2, [pc, #28]	; (8004874 <UART_SetConfig+0x118>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	440a      	add	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40013800 	.word	0x40013800
 8004874:	51eb851f 	.word	0x51eb851f

08004878 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800487e:	f3ef 8305 	mrs	r3, IPSR
 8004882:	60bb      	str	r3, [r7, #8]
  return(result);
 8004884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	607b      	str	r3, [r7, #4]
  return(result);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <osKernelInitialize+0x32>
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <osKernelInitialize+0x60>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d109      	bne.n	80048b2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800489e:	f3ef 8311 	mrs	r3, BASEPRI
 80048a2:	603b      	str	r3, [r7, #0]
  return(result);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048aa:	f06f 0305 	mvn.w	r3, #5
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e00c      	b.n	80048cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <osKernelInitialize+0x60>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d105      	bne.n	80048c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <osKernelInitialize+0x60>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e002      	b.n	80048cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	20000cb4 	.word	0x20000cb4

080048dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e2:	f3ef 8305 	mrs	r3, IPSR
 80048e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ee:	f3ef 8310 	mrs	r3, PRIMASK
 80048f2:	607b      	str	r3, [r7, #4]
  return(result);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <osKernelStart+0x32>
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <osKernelStart+0x64>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d109      	bne.n	8004916 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004902:	f3ef 8311 	mrs	r3, BASEPRI
 8004906:	603b      	str	r3, [r7, #0]
  return(result);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osKernelStart+0x3a>
    stat = osErrorISR;
 800490e:	f06f 0305 	mvn.w	r3, #5
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e00e      	b.n	8004934 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <osKernelStart+0x64>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <osKernelStart+0x64>)
 8004920:	2202      	movs	r2, #2
 8004922:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004924:	f001 fffa 	bl	800691c <vTaskStartScheduler>
      stat = osOK;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e002      	b.n	8004934 <osKernelStart+0x58>
    } else {
      stat = osError;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000cb4 	.word	0x20000cb4

08004944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b092      	sub	sp, #72	; 0x48
 8004948:	af04      	add	r7, sp, #16
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004954:	f3ef 8305 	mrs	r3, IPSR
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 8094 	bne.w	8004a8a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	623b      	str	r3, [r7, #32]
  return(result);
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 808d 	bne.w	8004a8a <osThreadNew+0x146>
 8004970:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <osThreadNew+0x150>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d106      	bne.n	8004986 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004978:	f3ef 8311 	mrs	r3, BASEPRI
 800497c:	61fb      	str	r3, [r7, #28]
  return(result);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 8082 	bne.w	8004a8a <osThreadNew+0x146>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d07e      	beq.n	8004a8a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004990:	2318      	movs	r3, #24
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004994:	2300      	movs	r3, #0
 8004996:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004998:	f107 031b 	add.w	r3, r7, #27
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d045      	beq.n	8004a36 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <osThreadNew+0x74>
        name = attr->name;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <osThreadNew+0x9a>
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b38      	cmp	r3, #56	; 0x38
 80049d0:	d805      	bhi.n	80049de <osThreadNew+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <osThreadNew+0x9e>
        return (NULL);
 80049de:	2300      	movs	r3, #0
 80049e0:	e054      	b.n	8004a8c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <osThreadNew+0xd4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b63      	cmp	r3, #99	; 0x63
 8004a00:	d90a      	bls.n	8004a18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <osThreadNew+0xd4>
        mem = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a16:	e010      	b.n	8004a3a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10c      	bne.n	8004a3a <osThreadNew+0xf6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <osThreadNew+0xf6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <osThreadNew+0xf6>
          mem = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a34:	e001      	b.n	8004a3a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d110      	bne.n	8004a62 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a48:	9202      	str	r2, [sp, #8]
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f001 fcc2 	bl	80063e0 <xTaskCreateStatic>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e013      	b.n	8004a8a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f001 fd0c 	bl	8006498 <xTaskCreate>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <osThreadNew+0x146>
          hTask = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a8a:	697b      	ldr	r3, [r7, #20]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3738      	adds	r7, #56	; 0x38
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000cb4 	.word	0x20000cb4

08004a98 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa4:	f3ef 8305 	mrs	r3, IPSR
 8004aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8004aaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10f      	bne.n	8004ad0 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <osThreadTerminate+0x38>
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <osThreadTerminate+0x7c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d109      	bne.n	8004ad8 <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8004ad0:	f06f 0305 	mvn.w	r3, #5
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e017      	b.n	8004b08 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8004ade:	f06f 0303 	mvn.w	r3, #3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e010      	b.n	8004b08 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004ae6:	69b8      	ldr	r0, [r7, #24]
 8004ae8:	f001 febe 	bl	8006868 <eTaskGetState>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d005      	beq.n	8004b02 <osThreadTerminate+0x6a>
      stat = osOK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f001 fe0e 	bl	800671c <vTaskDelete>
 8004b00:	e002      	b.n	8004b08 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8004b02:	f06f 0302 	mvn.w	r3, #2
 8004b06:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004b08:	69fb      	ldr	r3, [r7, #28]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000cb4 	.word	0x20000cb4

08004b18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b20:	f3ef 8305 	mrs	r3, IPSR
 8004b24:	613b      	str	r3, [r7, #16]
  return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10f      	bne.n	8004b4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <osDelay+0x34>
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <osDelay+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d109      	bne.n	8004b54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b40:	f3ef 8311 	mrs	r3, BASEPRI
 8004b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <osDelay+0x3c>
    stat = osErrorISR;
 8004b4c:	f06f 0305 	mvn.w	r3, #5
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e007      	b.n	8004b64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f001 fe4e 	bl	8006800 <vTaskDelay>
    }
  }

  return (stat);
 8004b64:	697b      	ldr	r3, [r7, #20]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000cb4 	.word	0x20000cb4

08004b74 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b80:	f3ef 8305 	mrs	r3, IPSR
 8004b84:	617b      	str	r3, [r7, #20]
  return(result);
 8004b86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d13d      	bne.n	8004c08 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b90:	613b      	str	r3, [r7, #16]
  return(result);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d137      	bne.n	8004c08 <osEventFlagsNew+0x94>
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <osEventFlagsNew+0xa0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d105      	bne.n	8004bac <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d12d      	bne.n	8004c08 <osEventFlagsNew+0x94>
    mem = -1;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <osEventFlagsNew+0x5a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b1f      	cmp	r3, #31
 8004bc6:	d902      	bls.n	8004bce <osEventFlagsNew+0x5a>
        mem = 1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e00c      	b.n	8004be8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <osEventFlagsNew+0x74>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <osEventFlagsNew+0x74>
          mem = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e001      	b.n	8004be8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d106      	bne.n	8004bfc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa58 	bl	80050a8 <xEventGroupCreateStatic>
 8004bf8:	61f8      	str	r0, [r7, #28]
 8004bfa:	e005      	b.n	8004c08 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004c02:	f000 fa88 	bl	8005116 <xEventGroupCreate>
 8004c06:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000cb4 	.word	0x20000cb4

08004c18 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <osEventFlagsSet+0x1e>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004c36:	f06f 0303 	mvn.w	r3, #3
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e03a      	b.n	8004cb4 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3e:	f3ef 8305 	mrs	r3, IPSR
 8004c42:	617b      	str	r3, [r7, #20]
  return(result);
 8004c44:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	613b      	str	r3, [r7, #16]
  return(result);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <osEventFlagsSet+0x52>
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <osEventFlagsSet+0xa8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d123      	bne.n	8004ca6 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c62:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	461a      	mov	r2, r3
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f000 fbf0 	bl	800545c <xEventGroupSetBitsFromISR>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8004c82:	f06f 0302 	mvn.w	r3, #2
 8004c86:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004c88:	e013      	b.n	8004cb2 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <osEventFlagsSet+0x9a>
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <osEventFlagsSet+0xac>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004ca4:	e005      	b.n	8004cb2 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	69b8      	ldr	r0, [r7, #24]
 8004caa:	f000 fb1d 	bl	80052e8 <xEventGroupSetBits>
 8004cae:	61f8      	str	r0, [r7, #28]
 8004cb0:	e000      	b.n	8004cb4 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004cb2:	bf00      	nop
  }

  return (rflags);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000cb4 	.word	0x20000cb4
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <osEventFlagsWait+0x22>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004cea:	f06f 0303 	mvn.w	r3, #3
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e059      	b.n	8004da6 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf2:	f3ef 8305 	mrs	r3, IPSR
 8004cf6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10f      	bne.n	8004d1e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004d02:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <osEventFlagsWait+0x56>
 8004d0a:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <osEventFlagsWait+0xe8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d109      	bne.n	8004d26 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d12:	f3ef 8311 	mrs	r3, BASEPRI
 8004d16:	617b      	str	r3, [r7, #20]
  return(result);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8004d1e:	f06f 0305 	mvn.w	r3, #5
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
 8004d24:	e03f      	b.n	8004da6 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d34:	e001      	b.n	8004d3a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d48:	e001      	b.n	8004d4e <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	6a38      	ldr	r0, [r7, #32]
 8004d5a:	f000 f9f7 	bl	800514c <xEventGroupWaitBits>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00e      	beq.n	8004d88 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d019      	beq.n	8004da6 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8004d78:	f06f 0301 	mvn.w	r3, #1
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e012      	b.n	8004da6 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004d80:	f06f 0302 	mvn.w	r3, #2
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	e00e      	b.n	8004da6 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8004d98:	f06f 0301 	mvn.w	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	e002      	b.n	8004da6 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004da0:	f06f 0302 	mvn.w	r3, #2
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3730      	adds	r7, #48	; 0x30
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000cb4 	.word	0x20000cb4

08004db4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8085 	bne.w	8004ed8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dce:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d17e      	bne.n	8004ed8 <osMutexNew+0x124>
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <osMutexNew+0x130>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d105      	bne.n	8004dee <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004de2:	f3ef 8311 	mrs	r3, BASEPRI
 8004de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d174      	bne.n	8004ed8 <osMutexNew+0x124>
    if (attr != NULL) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <osMutexNew+0x48>
      type = attr->attr_bits;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	e001      	b.n	8004e00 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <osMutexNew+0x5c>
      rmtx = 1U;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e001      	b.n	8004e14 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d15c      	bne.n	8004ed8 <osMutexNew+0x124>
      mem = -1;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <osMutexNew+0x8c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b4f      	cmp	r3, #79	; 0x4f
 8004e38:	d902      	bls.n	8004e40 <osMutexNew+0x8c>
          mem = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e00c      	b.n	8004e5a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <osMutexNew+0xa6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <osMutexNew+0xa6>
            mem = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e001      	b.n	8004e5a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d112      	bne.n	8004e86 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	2004      	movs	r0, #4
 8004e6e:	f000 fd2b 	bl	80058c8 <xQueueCreateMutexStatic>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24
 8004e74:	e016      	b.n	8004ea4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f000 fd23 	bl	80058c8 <xQueueCreateMutexStatic>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24
 8004e84:	e00e      	b.n	8004ea4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e92:	2004      	movs	r0, #4
 8004e94:	f000 fd00 	bl	8005898 <xQueueCreateMutex>
 8004e98:	6278      	str	r0, [r7, #36]	; 0x24
 8004e9a:	e003      	b.n	8004ea4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f000 fcfb 	bl	8005898 <xQueueCreateMutex>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <osMutexNew+0x110>
        if (attr != NULL) {
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <osMutexNew+0x104>
          name = attr->name;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e001      	b.n	8004ebc <osMutexNew+0x108>
        } else {
          name = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec0:	f001 fa32 	bl	8006328 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <osMutexNew+0x124>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3728      	adds	r7, #40	; 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000cb4 	.word	0x20000cb4

08004ee8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f06:	f3ef 8305 	mrs	r3, IPSR
 8004f0a:	613b      	str	r3, [r7, #16]
  return(result);
 8004f0c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f12:	f3ef 8310 	mrs	r3, PRIMASK
 8004f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <osMutexAcquire+0x4a>
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <osMutexAcquire+0xb8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d109      	bne.n	8004f3a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f26:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004f32:	f06f 0305 	mvn.w	r3, #5
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	e02c      	b.n	8004f94 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004f40:	f06f 0303 	mvn.w	r3, #3
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	e025      	b.n	8004f94 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	69b8      	ldr	r0, [r7, #24]
 8004f52:	f000 fd08 	bl	8005966 <xQueueTakeMutexRecursive>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d01b      	beq.n	8004f94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004f62:	f06f 0301 	mvn.w	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e014      	b.n	8004f94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f6a:	f06f 0302 	mvn.w	r3, #2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e010      	b.n	8004f94 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	69b8      	ldr	r0, [r7, #24]
 8004f76:	f000 ffa3 	bl	8005ec0 <xQueueSemaphoreTake>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d009      	beq.n	8004f94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004f86:	f06f 0301 	mvn.w	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e002      	b.n	8004f94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f8e:	f06f 0302 	mvn.w	r3, #2
 8004f92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f94:	69fb      	ldr	r3, [r7, #28]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000cb4 	.word	0x20000cb4

08004fa4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc0:	f3ef 8305 	mrs	r3, IPSR
 8004fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8004fc6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10f      	bne.n	8004fec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <osMutexRelease+0x48>
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <osMutexRelease+0x9c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d109      	bne.n	8004ff4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004fec:	f06f 0305 	mvn.w	r3, #5
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e01f      	b.n	8005034 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004ffa:	f06f 0303 	mvn.w	r3, #3
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	e018      	b.n	8005034 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005008:	69b8      	ldr	r0, [r7, #24]
 800500a:	f000 fc78 	bl	80058fe <xQueueGiveMutexRecursive>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d00f      	beq.n	8005034 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005014:	f06f 0302 	mvn.w	r3, #2
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e00b      	b.n	8005034 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800501c:	2300      	movs	r3, #0
 800501e:	2200      	movs	r2, #0
 8005020:	2100      	movs	r1, #0
 8005022:	69b8      	ldr	r0, [r7, #24]
 8005024:	f000 fcd6 	bl	80059d4 <xQueueGenericSend>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d002      	beq.n	8005034 <osMutexRelease+0x90>
        stat = osErrorResource;
 800502e:	f06f 0302 	mvn.w	r3, #2
 8005032:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005034:	69fb      	ldr	r3, [r7, #28]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000cb4 	.word	0x20000cb4

08005044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a06      	ldr	r2, [pc, #24]	; (800506c <vApplicationGetIdleTaskMemory+0x28>)
 8005054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a05      	ldr	r2, [pc, #20]	; (8005070 <vApplicationGetIdleTaskMemory+0x2c>)
 800505a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	20000cb8 	.word	0x20000cb8
 8005070:	20000d1c 	.word	0x20000d1c

08005074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a07      	ldr	r2, [pc, #28]	; (80050a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a06      	ldr	r2, [pc, #24]	; (80050a4 <vApplicationGetTimerTaskMemory+0x30>)
 800508a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000f1c 	.word	0x20000f1c
 80050a4:	20000f80 	.word	0x20000f80

080050a8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80050cc:	2320      	movs	r3, #32
 80050ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d00a      	beq.n	80050ec <xEventGroupCreateStatic+0x44>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f9bf 	bl	8005484 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2201      	movs	r2, #1
 800510a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800510c:	697b      	ldr	r3, [r7, #20]
	}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800511c:	2020      	movs	r0, #32
 800511e:	f003 f835 	bl	800818c <pvPortMalloc>
 8005122:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f9a5 	bl	8005484 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005140:	687b      	ldr	r3, [r7, #4]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b090      	sub	sp, #64	; 0x40
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xEventGroupWaitBits+0x36>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	623b      	str	r3, [r7, #32]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	61fb      	str	r3, [r7, #28]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xEventGroupWaitBits+0x72>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	61bb      	str	r3, [r7, #24]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051be:	f002 f8c5 	bl	800734c <xTaskGetSchedulerState>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <xEventGroupWaitBits+0x82>
 80051c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <xEventGroupWaitBits+0x86>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xEventGroupWaitBits+0x88>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xEventGroupWaitBits+0xa2>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	617b      	str	r3, [r7, #20]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80051ee:	f001 fbfd 	bl	80069ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051fe:	f000 f90b 	bl	8005418 <prvTestWaitCondition>
 8005202:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800520e:	2300      	movs	r3, #0
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d028      	beq.n	800526a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	43db      	mvns	r3, r3
 8005220:	401a      	ands	r2, r3
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e020      	b.n	800526a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
 8005236:	e018      	b.n	800526a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	4313      	orrs	r3, r2
 800525e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005260:	4619      	mov	r1, r3
 8005262:	f001 fdd7 	bl	8006e14 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800526a:	f001 fbcd 	bl	8006a08 <xTaskResumeAll>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005272:	2b00      	cmp	r3, #0
 8005274:	d031      	beq.n	80052da <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <xEventGroupWaitBits+0x198>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800528c:	f002 f9de 	bl	800764c <uxTaskResetEventItemValue>
 8005290:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11a      	bne.n	80052d2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800529c:	f002 fe76 	bl	8007f8c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052ac:	f000 f8b4 	bl	8005418 <prvTestWaitCondition>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	43db      	mvns	r3, r3
 80052c4:	401a      	ands	r2, r3
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80052ce:	f002 fe8d 	bl	8007fec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80052d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80052da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3740      	adds	r7, #64	; 0x40
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80052f2:	2300      	movs	r3, #0
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xEventGroupSetBits+0x32>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	613b      	str	r3, [r7, #16]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <xEventGroupSetBits+0x52>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	3304      	adds	r3, #4
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	3308      	adds	r3, #8
 8005344:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005346:	f001 fb51 	bl	80069ec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	431a      	orrs	r2, r3
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800535c:	e03c      	b.n	80053d8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005374:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800537c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	e008      	b.n	80053ac <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d101      	bne.n	80053ac <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053cc:	4619      	mov	r1, r3
 80053ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053d0:	f001 fdec 	bl	8006fac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80053d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1be      	bne.n	800535e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	43db      	mvns	r3, r3
 80053e8:	401a      	ands	r2, r3
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80053ee:	f001 fb0b 	bl	8006a08 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	681b      	ldr	r3, [r3, #0]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3738      	adds	r7, #56	; 0x38
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff6c 	bl	80052e8 <xEventGroupSetBits>
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e007      	b.n	800544e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d101      	bne.n	800544e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
	...

0800545c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	4804      	ldr	r0, [pc, #16]	; (8005480 <xEventGroupSetBitsFromISR+0x24>)
 8005470:	f002 fc7e 	bl	8007d70 <xTimerPendFunctionCallFromISR>
 8005474:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005476:	697b      	ldr	r3, [r7, #20]
	}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	080053ff 	.word	0x080053ff

08005484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f103 0208 	add.w	r2, r3, #8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d103      	bne.n	8005540 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e00c      	b.n	800555a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3308      	adds	r3, #8
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e002      	b.n	800554e <vListInsert+0x2e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	429a      	cmp	r2, r3
 8005558:	d2f6      	bcs.n	8005548 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6852      	ldr	r2, [r2, #4]
 80055b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d103      	bne.n	80055c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
	...

080055e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xQueueGenericReset+0x2a>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60bb      	str	r3, [r7, #8]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800560e:	f002 fcbd 	bl	8007f8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	3b01      	subs	r3, #1
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d114      	bne.n	800568e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01a      	beq.n	80056a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3310      	adds	r3, #16
 8005670:	4618      	mov	r0, r3
 8005672:	f001 fc37 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <xQueueGenericReset+0xcc>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	e009      	b.n	80056a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3310      	adds	r3, #16
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fef6 	bl	8005484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3324      	adds	r3, #36	; 0x24
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fef1 	bl	8005484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056a2:	f002 fca3 	bl	8007fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056a6:	2301      	movs	r3, #1
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <xQueueGenericCreateStatic+0x52>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <xQueueGenericCreateStatic+0x56>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <xQueueGenericCreateStatic+0x58>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	623b      	str	r3, [r7, #32]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <xQueueGenericCreateStatic+0x7e>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xQueueGenericCreateStatic+0x82>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericCreateStatic+0x84>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	61fb      	str	r3, [r7, #28]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005752:	2350      	movs	r3, #80	; 0x50
 8005754:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b50      	cmp	r3, #80	; 0x50
 800575a:	d00a      	beq.n	8005772 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61bb      	str	r3, [r7, #24]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005784:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f843 	bl	800581e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800579a:	4618      	mov	r0, r3
 800579c:	3730      	adds	r7, #48	; 0x30
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xQueueGenericCreate+0x2a>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	613b      	str	r3, [r7, #16]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e004      	b.n	80057e2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3350      	adds	r3, #80	; 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 fcd0 	bl	800818c <pvPortMalloc>
 80057ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00f      	beq.n	8005814 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3350      	adds	r3, #80	; 0x50
 80057f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005802:	79fa      	ldrb	r2, [r7, #7]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f805 	bl	800581e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005814:	69bb      	ldr	r3, [r7, #24]
	}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e002      	b.n	8005840 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800584c:	2101      	movs	r1, #1
 800584e:	69b8      	ldr	r0, [r7, #24]
 8005850:	f7ff fec8 	bl	80055e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005884:	2300      	movs	r3, #0
 8005886:	2200      	movs	r2, #0
 8005888:	2100      	movs	r1, #0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f8a2 	bl	80059d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058a2:	2301      	movs	r3, #1
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	6978      	ldr	r0, [r7, #20]
 80058b2:	f7ff ff76 	bl	80057a2 <xQueueGenericCreate>
 80058b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff ffd3 	bl	8005864 <prvInitialiseMutex>

		return pxNewQueue;
 80058be:	68fb      	ldr	r3, [r7, #12]
	}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	4603      	mov	r3, r0
 80058d0:	6039      	str	r1, [r7, #0]
 80058d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	6939      	ldr	r1, [r7, #16]
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff fee4 	bl	80056b4 <xQueueGenericCreateStatic>
 80058ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ffb8 	bl	8005864 <prvInitialiseMutex>

		return pxNewQueue;
 80058f4:	68fb      	ldr	r3, [r7, #12]
	}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80058fe:	b590      	push	{r4, r7, lr}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	685c      	ldr	r4, [r3, #4]
 800592a:	f001 fd01 	bl	8007330 <xTaskGetCurrentTaskHandle>
 800592e:	4603      	mov	r3, r0
 8005930:	429c      	cmp	r4, r3
 8005932:	d111      	bne.n	8005958 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005946:	2300      	movs	r3, #0
 8005948:	2200      	movs	r2, #0
 800594a:	2100      	movs	r1, #0
 800594c:	6938      	ldr	r0, [r7, #16]
 800594e:	f000 f841 	bl	80059d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005952:	2301      	movs	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e001      	b.n	800595c <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800595c:	697b      	ldr	r3, [r7, #20]
	}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005966:	b590      	push	{r4, r7, lr}
 8005968:	b087      	sub	sp, #28
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60fb      	str	r3, [r7, #12]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685c      	ldr	r4, [r3, #4]
 8005994:	f001 fccc 	bl	8007330 <xTaskGetCurrentTaskHandle>
 8005998:	4603      	mov	r3, r0
 800599a:	429c      	cmp	r4, r3
 800599c:	d107      	bne.n	80059ae <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e00c      	b.n	80059c8 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6938      	ldr	r0, [r7, #16]
 80059b2:	f000 fa85 	bl	8005ec0 <xQueueSemaphoreTake>
 80059b6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80059c8:	697b      	ldr	r3, [r7, #20]
	}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
	...

080059d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059e2:	2300      	movs	r3, #0
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericSend+0x32>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <xQueueGenericSend+0x40>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueGenericSend+0x44>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueGenericSend+0x46>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <xQueueGenericSend+0x60>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x6e>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <xQueueGenericSend+0x72>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueGenericSend+0x74>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	623b      	str	r3, [r7, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a62:	f001 fc73 	bl	800734c <xTaskGetSchedulerState>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <xQueueGenericSend+0x9e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <xQueueGenericSend+0xa2>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <xQueueGenericSend+0xa4>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSend+0xbe>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	61fb      	str	r3, [r7, #28]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a92:	f002 fa7b 	bl	8007f8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <xQueueGenericSend+0xd4>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d129      	bne.n	8005afc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aae:	f000 fb2a 	bl	8006106 <prvCopyDataToQueue>
 8005ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d010      	beq.n	8005ade <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	3324      	adds	r3, #36	; 0x24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fa0f 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d013      	beq.n	8005af4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005acc:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <xQueueGenericSend+0x1f8>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	e00a      	b.n	8005af4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <xQueueGenericSend+0x1f8>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005af4:	f002 fa7a 	bl	8007fec <vPortExitCritical>
				return pdPASS;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e063      	b.n	8005bc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b02:	f002 fa73 	bl	8007fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e05c      	b.n	8005bc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 faab 	bl	8007070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b1e:	f002 fa65 	bl	8007fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b22:	f000 ff63 	bl	80069ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b26:	f002 fa31 	bl	8007f8c <vPortEnterCritical>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d103      	bne.n	8005b40 <xQueueGenericSend+0x16c>
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b46:	b25b      	sxtb	r3, r3
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSend+0x182>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b56:	f002 fa49 	bl	8007fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5a:	1d3a      	adds	r2, r7, #4
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fa9a 	bl	800709c <xTaskCheckForTimeOut>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d124      	bne.n	8005bb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b70:	f000 fbc1 	bl	80062f6 <prvIsQueueFull>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	3310      	adds	r3, #16
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f922 	bl	8006dcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8a:	f000 fb4c 	bl	8006226 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b8e:	f000 ff3b 	bl	8006a08 <xTaskResumeAll>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f af7c 	bne.w	8005a92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <xQueueGenericSend+0x1f8>)
 8005b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	e772      	b.n	8005a92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bae:	f000 fb3a 	bl	8006226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bb2:	f000 ff29 	bl	8006a08 <xTaskResumeAll>
 8005bb6:	e76c      	b.n	8005a92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bba:	f000 fb34 	bl	8006226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bbe:	f000 ff23 	bl	8006a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bc2:	2300      	movs	r3, #0
		}
	}
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3738      	adds	r7, #56	; 0x38
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d103      	bne.n	8005c0c <xQueueGenericSendFromISR+0x3c>
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <xQueueGenericSendFromISR+0x40>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <xQueueGenericSendFromISR+0x42>
 8005c10:	2300      	movs	r3, #0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	623b      	str	r3, [r7, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d103      	bne.n	8005c3a <xQueueGenericSendFromISR+0x6a>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <xQueueGenericSendFromISR+0x6e>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <xQueueGenericSendFromISR+0x70>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61fb      	str	r3, [r7, #28]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c5a:	f002 fa59 	bl	8008110 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	61ba      	str	r2, [r7, #24]
 8005c74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <xQueueGenericSendFromISR+0xbc>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d12c      	bne.n	8005ce6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c9c:	f000 fa33 	bl	8006106 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ca0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d112      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f914 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e007      	b.n	8005ce0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	b25a      	sxtb	r2, r3
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ce4:	e001      	b.n	8005cea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3738      	adds	r7, #56	; 0x38
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	; 0x30
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <xQueueReceive+0x30>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	623b      	str	r3, [r7, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0x3e>
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueReceive+0x42>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueReceive+0x44>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xQueueReceive+0x5e>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61fb      	str	r3, [r7, #28]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d5e:	f001 faf5 	bl	800734c <xTaskGetSchedulerState>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <xQueueReceive+0x6e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <xQueueReceive+0x72>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <xQueueReceive+0x74>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueReceive+0x8e>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	61bb      	str	r3, [r7, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d8e:	f002 f8fd 	bl	8007f8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01f      	beq.n	8005dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da2:	f000 fa1a 	bl	80061da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	1e5a      	subs	r2, r3, #1
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	3310      	adds	r3, #16
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 f892 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dc6:	4b3d      	ldr	r3, [pc, #244]	; (8005ebc <xQueueReceive+0x1bc>)
 8005dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dd6:	f002 f909 	bl	8007fec <vPortExitCritical>
				return pdPASS;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e069      	b.n	8005eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005de4:	f002 f902 	bl	8007fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e062      	b.n	8005eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005df2:	f107 0310 	add.w	r3, r7, #16
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f93a 	bl	8007070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e00:	f002 f8f4 	bl	8007fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e04:	f000 fdf2 	bl	80069ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e08:	f002 f8c0 	bl	8007f8c <vPortEnterCritical>
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d103      	bne.n	8005e22 <xQueueReceive+0x122>
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e28:	b25b      	sxtb	r3, r3
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d103      	bne.n	8005e38 <xQueueReceive+0x138>
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e38:	f002 f8d8 	bl	8007fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e3c:	1d3a      	adds	r2, r7, #4
 8005e3e:	f107 0310 	add.w	r3, r7, #16
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f929 	bl	800709c <xTaskCheckForTimeOut>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d123      	bne.n	8005e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e52:	f000 fa3a 	bl	80062ca <prvIsQueueEmpty>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d017      	beq.n	8005e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 ffb1 	bl	8006dcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6c:	f000 f9db 	bl	8006226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e70:	f000 fdca 	bl	8006a08 <xTaskResumeAll>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d189      	bne.n	8005d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <xQueueReceive+0x1bc>)
 8005e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	e780      	b.n	8005d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8e:	f000 f9ca 	bl	8006226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e92:	f000 fdb9 	bl	8006a08 <xTaskResumeAll>
 8005e96:	e77a      	b.n	8005d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9a:	f000 f9c4 	bl	8006226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e9e:	f000 fdb3 	bl	8006a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea4:	f000 fa11 	bl	80062ca <prvIsQueueEmpty>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f43f af6f 	beq.w	8005d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08e      	sub	sp, #56	; 0x38
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61fb      	str	r3, [r7, #28]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f10:	f001 fa1c 	bl	800734c <xTaskGetSchedulerState>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <xQueueSemaphoreTake+0x60>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <xQueueSemaphoreTake+0x64>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <xQueueSemaphoreTake+0x66>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61bb      	str	r3, [r7, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f40:	f002 f824 	bl	8007f8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d024      	beq.n	8005f9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005f60:	f001 fb8c 	bl	800767c <pvTaskIncrementMutexHeldCount>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00f      	beq.n	8005f92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	3310      	adds	r3, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 ffb4 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f82:	4b54      	ldr	r3, [pc, #336]	; (80060d4 <xQueueSemaphoreTake+0x214>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f92:	f002 f82b 	bl	8007fec <vPortExitCritical>
				return pdPASS;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e097      	b.n	80060ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	617b      	str	r3, [r7, #20]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005fbc:	f002 f816 	bl	8007fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e082      	b.n	80060ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f84e 	bl	8007070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fd8:	f002 f808 	bl	8007fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fdc:	f000 fd06 	bl	80069ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fe0:	f001 ffd4 	bl	8007f8c <vPortEnterCritical>
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <xQueueSemaphoreTake+0x13a>
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006000:	b25b      	sxtb	r3, r3
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d103      	bne.n	8006010 <xQueueSemaphoreTake+0x150>
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006010:	f001 ffec 	bl	8007fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006014:	463a      	mov	r2, r7
 8006016:	f107 030c 	add.w	r3, r7, #12
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f83d 	bl	800709c <xTaskCheckForTimeOut>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d132      	bne.n	800608e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800602a:	f000 f94e 	bl	80062ca <prvIsQueueEmpty>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d026      	beq.n	8006082 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800603c:	f001 ffa6 	bl	8007f8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f99f 	bl	8007388 <xTaskPriorityInherit>
 800604a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800604c:	f001 ffce 	bl	8007fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	3324      	adds	r3, #36	; 0x24
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f000 feb7 	bl	8006dcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800605e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006060:	f000 f8e1 	bl	8006226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006064:	f000 fcd0 	bl	8006a08 <xTaskResumeAll>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f47f af68 	bne.w	8005f40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006070:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <xQueueSemaphoreTake+0x214>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	e75e      	b.n	8005f40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006084:	f000 f8cf 	bl	8006226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006088:	f000 fcbe 	bl	8006a08 <xTaskResumeAll>
 800608c:	e758      	b.n	8005f40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800608e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006090:	f000 f8c9 	bl	8006226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006094:	f000 fcb8 	bl	8006a08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800609a:	f000 f916 	bl	80062ca <prvIsQueueEmpty>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f43f af4d 	beq.w	8005f40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80060ac:	f001 ff6e 	bl	8007f8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060b2:	f000 f811 	bl	80060d8 <prvGetDisinheritPriorityAfterTimeout>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 fa3e 	bl	8007540 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80060c4:	f001 ff92 	bl	8007fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3738      	adds	r7, #56	; 0x38
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e001      	b.n	80060fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80060fa:	68fb      	ldr	r3, [r7, #12]
	}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b086      	sub	sp, #24
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10d      	bne.n	8006140 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d14d      	bne.n	80061c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f997 	bl	8007464 <xTaskPriorityDisinherit>
 8006136:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	e043      	b.n	80061c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d119      	bne.n	800617a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6898      	ldr	r0, [r3, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	461a      	mov	r2, r3
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	f002 fab1 	bl	80086b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	441a      	add	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d32b      	bcc.n	80061c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	e026      	b.n	80061c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68d8      	ldr	r0, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	461a      	mov	r2, r3
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	f002 fa97 	bl	80086b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	425b      	negs	r3, r3
 8006194:	441a      	add	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d207      	bcs.n	80061b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	425b      	negs	r3, r3
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d105      	bne.n	80061c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d018      	beq.n	800621e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d303      	bcc.n	800620e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	461a      	mov	r2, r3
 8006218:	6838      	ldr	r0, [r7, #0]
 800621a:	f002 fa4d 	bl	80086b8 <memcpy>
	}
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800622e:	f001 fead 	bl	8007f8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006238:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623a:	e011      	b.n	8006260 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d012      	beq.n	800626a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fe4b 	bl	8006ee4 <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006254:	f000 ff84 	bl	8007160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	3b01      	subs	r3, #1
 800625c:	b2db      	uxtb	r3, r3
 800625e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dce9      	bgt.n	800623c <prvUnlockQueue+0x16>
 8006268:	e000      	b.n	800626c <prvUnlockQueue+0x46>
					break;
 800626a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	22ff      	movs	r2, #255	; 0xff
 8006270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006274:	f001 feba 	bl	8007fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006278:	f001 fe88 	bl	8007f8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006282:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006284:	e011      	b.n	80062aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3310      	adds	r3, #16
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fe26 	bl	8006ee4 <xTaskRemoveFromEventList>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800629e:	f000 ff5f 	bl	8007160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dce9      	bgt.n	8006286 <prvUnlockQueue+0x60>
 80062b2:	e000      	b.n	80062b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	22ff      	movs	r2, #255	; 0xff
 80062ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062be:	f001 fe95 	bl	8007fec <vPortExitCritical>
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d2:	f001 fe5b 	bl	8007f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e001      	b.n	80062e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f001 fe80 	bl	8007fec <vPortExitCritical>

	return xReturn;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062fe:	f001 fe45 	bl	8007f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	429a      	cmp	r2, r3
 800630c:	d102      	bne.n	8006314 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800630e:	2301      	movs	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e001      	b.n	8006318 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006318:	f001 fe68 	bl	8007fec <vPortExitCritical>

	return xReturn;
 800631c:	68fb      	ldr	r3, [r7, #12]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e014      	b.n	8006362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006338:	4a0e      	ldr	r2, [pc, #56]	; (8006374 <vQueueAddToRegistry+0x4c>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006344:	490b      	ldr	r1, [pc, #44]	; (8006374 <vQueueAddToRegistry+0x4c>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <vQueueAddToRegistry+0x4c>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800635a:	e006      	b.n	800636a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b07      	cmp	r3, #7
 8006366:	d9e7      	bls.n	8006338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr
 8006374:	20001380 	.word	0x20001380

08006378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006388:	f001 fe00 	bl	8007f8c <vPortEnterCritical>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006392:	b25b      	sxtb	r3, r3
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d103      	bne.n	80063a2 <vQueueWaitForMessageRestricted+0x2a>
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d103      	bne.n	80063b8 <vQueueWaitForMessageRestricted+0x40>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b8:	f001 fe18 	bl	8007fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fd5d 	bl	8006e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063d2:	6978      	ldr	r0, [r7, #20]
 80063d4:	f7ff ff27 	bl	8006226 <prvUnlockQueue>
	}
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af04      	add	r7, sp, #16
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xTaskCreateStatic+0x2a>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xTaskCreateStatic+0x46>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	61fb      	str	r3, [r7, #28]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006426:	2364      	movs	r3, #100	; 0x64
 8006428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b64      	cmp	r3, #100	; 0x64
 800642e:	d00a      	beq.n	8006446 <xTaskCreateStatic+0x66>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	61bb      	str	r3, [r7, #24]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01e      	beq.n	800648a <xTaskCreateStatic+0xaa>
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	2202      	movs	r2, #2
 8006460:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006464:	2300      	movs	r3, #0
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	9302      	str	r3, [sp, #8]
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f850 	bl	8006522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006484:	f000 f8da 	bl	800663c <prvAddNewTaskToReadyList>
 8006488:	e001      	b.n	800648e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800648e:	697b      	ldr	r3, [r7, #20]
	}
 8006490:	4618      	mov	r0, r3
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af04      	add	r7, sp, #16
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fe6d 	bl	800818c <pvPortMalloc>
 80064b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064ba:	2064      	movs	r0, #100	; 0x64
 80064bc:	f001 fe66 	bl	800818c <pvPortMalloc>
 80064c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
 80064ce:	e005      	b.n	80064dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064d0:	6978      	ldr	r0, [r7, #20]
 80064d2:	f001 ff1f 	bl	8008314 <vPortFree>
 80064d6:	e001      	b.n	80064dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	2300      	movs	r3, #0
 80064ee:	9303      	str	r3, [sp, #12]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	9302      	str	r3, [sp, #8]
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f80e 	bl	8006522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006506:	69f8      	ldr	r0, [r7, #28]
 8006508:	f000 f898 	bl	800663c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800650c:	2301      	movs	r3, #1
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e002      	b.n	8006518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006518:	69bb      	ldr	r3, [r7, #24]
	}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b088      	sub	sp, #32
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	461a      	mov	r2, r3
 800653a:	21a5      	movs	r1, #165	; 0xa5
 800653c:	f002 f88a 	bl	8008654 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800654a:	3b01      	subs	r3, #1
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <prvInitialiseNewTask+0x58>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	617b      	str	r3, [r7, #20]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e012      	b.n	80065ac <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	7819      	ldrb	r1, [r3, #0]
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	3334      	adds	r3, #52	; 0x34
 8006596:	460a      	mov	r2, r1
 8006598:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d006      	beq.n	80065b4 <prvInitialiseNewTask+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3301      	adds	r3, #1
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d9e9      	bls.n	8006586 <prvInitialiseNewTask+0x64>
 80065b2:	e000      	b.n	80065b6 <prvInitialiseNewTask+0x94>
		{
			break;
 80065b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2b37      	cmp	r3, #55	; 0x37
 80065c2:	d901      	bls.n	80065c8 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065c4:	2337      	movs	r3, #55	; 0x37
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2200      	movs	r2, #0
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe ff6f 	bl	80054c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	3318      	adds	r3, #24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe ff6a 	bl	80054c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	2200      	movs	r2, #0
 8006608:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	2200      	movs	r2, #0
 800660e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	69b8      	ldr	r0, [r7, #24]
 800661e:	f001 fbc7 	bl	8007db0 <pxPortInitialiseStack>
 8006622:	4602      	mov	r2, r0
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <prvInitialiseNewTask+0x112>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006634:	bf00      	nop
 8006636:	3720      	adds	r7, #32
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006644:	f001 fca2 	bl	8007f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006648:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <prvAddNewTaskToReadyList+0xc4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <prvAddNewTaskToReadyList+0xc4>)
 8006650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800665a:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006660:	4b27      	ldr	r3, [pc, #156]	; (8006700 <prvAddNewTaskToReadyList+0xc4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d110      	bne.n	800668a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006668:	f000 fda0 	bl	80071ac <prvInitialiseTaskLists>
 800666c:	e00d      	b.n	800668a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800666e:	4b26      	ldr	r3, [pc, #152]	; (8006708 <prvAddNewTaskToReadyList+0xcc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	429a      	cmp	r2, r3
 8006682:	d802      	bhi.n	800668a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <prvAddNewTaskToReadyList+0xd0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <prvAddNewTaskToReadyList+0xd0>)
 8006692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006694:	4b1d      	ldr	r3, [pc, #116]	; (800670c <prvAddNewTaskToReadyList+0xd0>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <prvAddNewTaskToReadyList+0xd4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d903      	bls.n	80066b0 <prvAddNewTaskToReadyList+0x74>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <prvAddNewTaskToReadyList+0xd4>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <prvAddNewTaskToReadyList+0xd8>)
 80066be:	441a      	add	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fe ff07 	bl	80054da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066cc:	f001 fc8e 	bl	8007fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <prvAddNewTaskToReadyList+0xcc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00e      	beq.n	80066f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d207      	bcs.n	80066f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvAddNewTaskToReadyList+0xdc>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20001894 	.word	0x20001894
 8006704:	200013c0 	.word	0x200013c0
 8006708:	200018a0 	.word	0x200018a0
 800670c:	200018b0 	.word	0x200018b0
 8006710:	2000189c 	.word	0x2000189c
 8006714:	200013c4 	.word	0x200013c4
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006724:	f001 fc32 	bl	8007f8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <vTaskDelete+0x18>
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <vTaskDelete+0xc4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	e000      	b.n	8006736 <vTaskDelete+0x1a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe ff27 	bl	8005590 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3318      	adds	r3, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe ff1e 	bl	8005590 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <vTaskDelete+0xc8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	4a22      	ldr	r2, [pc, #136]	; (80067e4 <vTaskDelete+0xc8>)
 800675c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <vTaskDelete+0xc4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	429a      	cmp	r2, r3
 8006766:	d10b      	bne.n	8006780 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	481e      	ldr	r0, [pc, #120]	; (80067e8 <vTaskDelete+0xcc>)
 8006770:	f7fe feb3 	bl	80054da <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <vTaskDelete+0xd0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <vTaskDelete+0xd0>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e009      	b.n	8006794 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <vTaskDelete+0xd4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3b01      	subs	r3, #1
 8006786:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <vTaskDelete+0xd4>)
 8006788:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fd7c 	bl	8007288 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006790:	f000 fdaa 	bl	80072e8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006794:	f001 fc2a 	bl	8007fec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006798:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <vTaskDelete+0xd8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01b      	beq.n	80067d8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <vTaskDelete+0xc4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d116      	bne.n	80067d8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <vTaskDelete+0xdc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <vTaskDelete+0xac>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <vTaskDelete+0xe0>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	200013c0 	.word	0x200013c0
 80067e4:	200018b0 	.word	0x200018b0
 80067e8:	20001868 	.word	0x20001868
 80067ec:	2000187c 	.word	0x2000187c
 80067f0:	20001894 	.word	0x20001894
 80067f4:	200018a0 	.word	0x200018a0
 80067f8:	200018bc 	.word	0x200018bc
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <vTaskDelay+0x60>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <vTaskDelay+0x30>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60bb      	str	r3, [r7, #8]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006830:	f000 f8dc 	bl	80069ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006834:	2100      	movs	r1, #0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 ff34 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800683c:	f000 f8e4 	bl	8006a08 <xTaskResumeAll>
 8006840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <vTaskDelay+0x64>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200018bc 	.word	0x200018bc
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <eTaskGetState+0x28>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	60bb      	str	r3, [r7, #8]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <eTaskGetState+0xa0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	429a      	cmp	r2, r3
 8006898:	d102      	bne.n	80068a0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
 800689e:	e02d      	b.n	80068fc <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 80068a0:	f001 fb74 	bl	8007f8c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80068aa:	f001 fb9f 	bl	8007fec <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <eTaskGetState+0xa4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d004      	beq.n	80068c2 <eTaskGetState+0x5a>
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <eTaskGetState+0xa8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d102      	bne.n	80068c8 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80068c2:	2302      	movs	r3, #2
 80068c4:	75fb      	strb	r3, [r7, #23]
 80068c6:	e019      	b.n	80068fc <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4a12      	ldr	r2, [pc, #72]	; (8006914 <eTaskGetState+0xac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d109      	bne.n	80068e4 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 80068d8:	2303      	movs	r3, #3
 80068da:	75fb      	strb	r3, [r7, #23]
 80068dc:	e00e      	b.n	80068fc <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 80068de:	2302      	movs	r3, #2
 80068e0:	75fb      	strb	r3, [r7, #23]
 80068e2:	e00b      	b.n	80068fc <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <eTaskGetState+0xb0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d002      	beq.n	80068f2 <eTaskGetState+0x8a>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80068f2:	2304      	movs	r3, #4
 80068f4:	75fb      	strb	r3, [r7, #23]
 80068f6:	e001      	b.n	80068fc <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200013c0 	.word	0x200013c0
 800690c:	2000184c 	.word	0x2000184c
 8006910:	20001850 	.word	0x20001850
 8006914:	20001880 	.word	0x20001880
 8006918:	20001868 	.word	0x20001868

0800691c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	; 0x28
 8006920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800692a:	463a      	mov	r2, r7
 800692c:	1d39      	adds	r1, r7, #4
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fb86 	bl	8005044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	2300      	movs	r3, #0
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	460a      	mov	r2, r1
 800694a:	4922      	ldr	r1, [pc, #136]	; (80069d4 <vTaskStartScheduler+0xb8>)
 800694c:	4822      	ldr	r0, [pc, #136]	; (80069d8 <vTaskStartScheduler+0xbc>)
 800694e:	f7ff fd47 	bl	80063e0 <xTaskCreateStatic>
 8006952:	4603      	mov	r3, r0
 8006954:	4a21      	ldr	r2, [pc, #132]	; (80069dc <vTaskStartScheduler+0xc0>)
 8006956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006958:	4b20      	ldr	r3, [pc, #128]	; (80069dc <vTaskStartScheduler+0xc0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e001      	b.n	800696a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d102      	bne.n	8006976 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006970:	f000 feec 	bl	800774c <xTimerCreateTimerTask>
 8006974:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d118      	bne.n	80069ae <vTaskStartScheduler+0x92>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <vTaskStartScheduler+0xc4>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <vTaskStartScheduler+0xc8>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <vTaskStartScheduler+0xcc>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80069a4:	f7f9 fbd4 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069a8:	f001 fa7e 	bl	8007ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ac:	e00e      	b.n	80069cc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d10a      	bne.n	80069cc <vTaskStartScheduler+0xb0>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	60fb      	str	r3, [r7, #12]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <vTaskStartScheduler+0xae>
}
 80069cc:	bf00      	nop
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	08008760 	.word	0x08008760
 80069d8:	08007179 	.word	0x08007179
 80069dc:	200018b8 	.word	0x200018b8
 80069e0:	200018b4 	.word	0x200018b4
 80069e4:	200018a0 	.word	0x200018a0
 80069e8:	20001898 	.word	0x20001898

080069ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <vTaskSuspendAll+0x18>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a03      	ldr	r2, [pc, #12]	; (8006a04 <vTaskSuspendAll+0x18>)
 80069f8:	6013      	str	r3, [r2, #0]
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	200018bc 	.word	0x200018bc

08006a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a16:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <xTaskResumeAll+0x118>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	603b      	str	r3, [r7, #0]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a34:	f001 faaa 	bl	8007f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a38:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <xTaskResumeAll+0x118>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	4a38      	ldr	r2, [pc, #224]	; (8006b20 <xTaskResumeAll+0x118>)
 8006a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <xTaskResumeAll+0x118>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d162      	bne.n	8006b10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <xTaskResumeAll+0x11c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d05e      	beq.n	8006b10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a52:	e02f      	b.n	8006ab4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a54:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <xTaskResumeAll+0x120>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fd95 	bl	8005590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fd90 	bl	8005590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <xTaskResumeAll+0x124>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d903      	bls.n	8006a84 <xTaskResumeAll+0x7c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <xTaskResumeAll+0x124>)
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <xTaskResumeAll+0x128>)
 8006a92:	441a      	add	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fe fd1d 	bl	80054da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	4b23      	ldr	r3, [pc, #140]	; (8006b34 <xTaskResumeAll+0x12c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006aae:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <xTaskResumeAll+0x130>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <xTaskResumeAll+0x120>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1cb      	bne.n	8006a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ac2:	f000 fc11 	bl	80072e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ac6:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <xTaskResumeAll+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f000 f845 	bl	8006b60 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006adc:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <xTaskResumeAll+0x130>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f1      	bne.n	8006ad2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <xTaskResumeAll+0x134>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006af4:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <xTaskResumeAll+0x130>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b00:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <xTaskResumeAll+0x138>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b10:	f001 fa6c 	bl	8007fec <vPortExitCritical>

	return xAlreadyYielded;
 8006b14:	68bb      	ldr	r3, [r7, #8]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200018bc 	.word	0x200018bc
 8006b24:	20001894 	.word	0x20001894
 8006b28:	20001854 	.word	0x20001854
 8006b2c:	2000189c 	.word	0x2000189c
 8006b30:	200013c4 	.word	0x200013c4
 8006b34:	200013c0 	.word	0x200013c0
 8006b38:	200018a8 	.word	0x200018a8
 8006b3c:	200018a4 	.word	0x200018a4
 8006b40:	e000ed04 	.word	0xe000ed04

08006b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <xTaskGetTickCount+0x18>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b50:	687b      	ldr	r3, [r7, #4]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	20001898 	.word	0x20001898

08006b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <xTaskIncrementTick+0x150>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 808e 	bne.w	8006c90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <xTaskIncrementTick+0x154>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b7c:	4a4d      	ldr	r2, [pc, #308]	; (8006cb4 <xTaskIncrementTick+0x154>)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d120      	bne.n	8006bca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b88:	4b4b      	ldr	r3, [pc, #300]	; (8006cb8 <xTaskIncrementTick+0x158>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	603b      	str	r3, [r7, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xTaskIncrementTick+0x46>
 8006ba8:	4b43      	ldr	r3, [pc, #268]	; (8006cb8 <xTaskIncrementTick+0x158>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <xTaskIncrementTick+0x15c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a41      	ldr	r2, [pc, #260]	; (8006cb8 <xTaskIncrementTick+0x158>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	4a41      	ldr	r2, [pc, #260]	; (8006cbc <xTaskIncrementTick+0x15c>)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b40      	ldr	r3, [pc, #256]	; (8006cc0 <xTaskIncrementTick+0x160>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	4a3f      	ldr	r2, [pc, #252]	; (8006cc0 <xTaskIncrementTick+0x160>)
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	f000 fb8f 	bl	80072e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bca:	4b3e      	ldr	r3, [pc, #248]	; (8006cc4 <xTaskIncrementTick+0x164>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d34e      	bcc.n	8006c72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd4:	4b38      	ldr	r3, [pc, #224]	; (8006cb8 <xTaskIncrementTick+0x158>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <xTaskIncrementTick+0x82>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xTaskIncrementTick+0x84>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be8:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <xTaskIncrementTick+0x164>)
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295
 8006bee:	601a      	str	r2, [r3, #0]
					break;
 8006bf0:	e03f      	b.n	8006c72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bf2:	4b31      	ldr	r3, [pc, #196]	; (8006cb8 <xTaskIncrementTick+0x158>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d203      	bcs.n	8006c12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c0a:	4a2e      	ldr	r2, [pc, #184]	; (8006cc4 <xTaskIncrementTick+0x164>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6013      	str	r3, [r2, #0]
						break;
 8006c10:	e02f      	b.n	8006c72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fcba 	bl	8005590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	3318      	adds	r3, #24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fcb1 	bl	8005590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <xTaskIncrementTick+0x168>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <xTaskIncrementTick+0xe2>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	4a22      	ldr	r2, [pc, #136]	; (8006cc8 <xTaskIncrementTick+0x168>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <xTaskIncrementTick+0x16c>)
 8006c50:	441a      	add	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe fc3e 	bl	80054da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <xTaskIncrementTick+0x170>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3b3      	bcc.n	8006bd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c70:	e7b0      	b.n	8006bd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <xTaskIncrementTick+0x170>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4914      	ldr	r1, [pc, #80]	; (8006ccc <xTaskIncrementTick+0x16c>)
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d907      	bls.n	8006c9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e004      	b.n	8006c9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <xTaskIncrementTick+0x174>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <xTaskIncrementTick+0x174>)
 8006c98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <xTaskIncrementTick+0x178>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ca6:	697b      	ldr	r3, [r7, #20]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	200018bc 	.word	0x200018bc
 8006cb4:	20001898 	.word	0x20001898
 8006cb8:	2000184c 	.word	0x2000184c
 8006cbc:	20001850 	.word	0x20001850
 8006cc0:	200018ac 	.word	0x200018ac
 8006cc4:	200018b4 	.word	0x200018b4
 8006cc8:	2000189c 	.word	0x2000189c
 8006ccc:	200013c4 	.word	0x200013c4
 8006cd0:	200013c0 	.word	0x200013c0
 8006cd4:	200018a4 	.word	0x200018a4
 8006cd8:	200018a8 	.word	0x200018a8

08006cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ce2:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <vTaskSwitchContext+0xd4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cea:	4b32      	ldr	r3, [pc, #200]	; (8006db4 <vTaskSwitchContext+0xd8>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cf0:	e05a      	b.n	8006da8 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8006cf2:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <vTaskSwitchContext+0xd8>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006cf8:	f7f9 fa34 	bl	8000164 <getRunTimeCounterValue>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <vTaskSwitchContext+0xdc>)
 8006d00:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006d02:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <vTaskSwitchContext+0xdc>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <vTaskSwitchContext+0xe0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d909      	bls.n	8006d22 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <vTaskSwitchContext+0xe4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006d14:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <vTaskSwitchContext+0xdc>)
 8006d16:	6810      	ldr	r0, [r2, #0]
 8006d18:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <vTaskSwitchContext+0xe0>)
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	1a82      	subs	r2, r0, r2
 8006d1e:	440a      	add	r2, r1
 8006d20:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8006d22:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <vTaskSwitchContext+0xdc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <vTaskSwitchContext+0xe0>)
 8006d28:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <vTaskSwitchContext+0xe8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e010      	b.n	8006d54 <vTaskSwitchContext+0x78>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <vTaskSwitchContext+0x72>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	607b      	str	r3, [r7, #4]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <vTaskSwitchContext+0x70>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	491c      	ldr	r1, [pc, #112]	; (8006dc8 <vTaskSwitchContext+0xec>)
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0e4      	beq.n	8006d32 <vTaskSwitchContext+0x56>
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <vTaskSwitchContext+0xec>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	605a      	str	r2, [r3, #4]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d104      	bne.n	8006d98 <vTaskSwitchContext+0xbc>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	605a      	str	r2, [r3, #4]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <vTaskSwitchContext+0xe4>)
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4a08      	ldr	r2, [pc, #32]	; (8006dc4 <vTaskSwitchContext+0xe8>)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200018bc 	.word	0x200018bc
 8006db4:	200018a8 	.word	0x200018a8
 8006db8:	200018c4 	.word	0x200018c4
 8006dbc:	200018c0 	.word	0x200018c0
 8006dc0:	200013c0 	.word	0x200013c0
 8006dc4:	2000189c 	.word	0x2000189c
 8006dc8:	200013c4 	.word	0x200013c4

08006dcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vTaskPlaceOnEventList+0x44>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3318      	adds	r3, #24
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fe fb90 	bl	8005520 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e00:	2101      	movs	r1, #1
 8006e02:	6838      	ldr	r0, [r7, #0]
 8006e04:	f000 fc4e 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200013c0 	.word	0x200013c0

08006e14 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	617b      	str	r3, [r7, #20]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	613b      	str	r3, [r7, #16]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006e64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3318      	adds	r3, #24
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7fe fb33 	bl	80054da <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e74:	2101      	movs	r1, #1
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc14 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
}
 8006e7c:	bf00      	nop
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200018bc 	.word	0x200018bc
 8006e88:	200013c0 	.word	0x200013c0

08006e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	617b      	str	r3, [r7, #20]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3318      	adds	r3, #24
 8006eba:	4619      	mov	r1, r3
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7fe fb0c 	bl	80054da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	68b8      	ldr	r0, [r7, #8]
 8006ed2:	f000 fbe7 	bl	80076a4 <prvAddCurrentTaskToDelayedList>
	}
 8006ed6:	bf00      	nop
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200013c0 	.word	0x200013c0

08006ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60fb      	str	r3, [r7, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	3318      	adds	r3, #24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fb3b 	bl	8005590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <xTaskRemoveFromEventList+0xb0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11d      	bne.n	8006f5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fb32 	bl	8005590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <xTaskRemoveFromEventList+0xb4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d903      	bls.n	8006f40 <xTaskRemoveFromEventList+0x5c>
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <xTaskRemoveFromEventList+0xb4>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <xTaskRemoveFromEventList+0xb8>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe fabf 	bl	80054da <vListInsertEnd>
 8006f5c:	e005      	b.n	8006f6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3318      	adds	r3, #24
 8006f62:	4619      	mov	r1, r3
 8006f64:	480e      	ldr	r0, [pc, #56]	; (8006fa0 <xTaskRemoveFromEventList+0xbc>)
 8006f66:	f7fe fab8 	bl	80054da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <xTaskRemoveFromEventList+0xc0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d905      	bls.n	8006f84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <xTaskRemoveFromEventList+0xc4>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e001      	b.n	8006f88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f88:	697b      	ldr	r3, [r7, #20]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200018bc 	.word	0x200018bc
 8006f98:	2000189c 	.word	0x2000189c
 8006f9c:	200013c4 	.word	0x200013c4
 8006fa0:	20001854 	.word	0x20001854
 8006fa4:	200013c0 	.word	0x200013c0
 8006fa8:	200018a8 	.word	0x200018a8

08006fac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	613b      	str	r3, [r7, #16]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fe fac5 	bl	8005590 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fac0 	bl	8005590 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d903      	bls.n	8007024 <vTaskRemoveFromUnorderedEventList+0x78>
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007032:	441a      	add	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fe fa4d 	bl	80054da <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	429a      	cmp	r2, r3
 800704c:	d902      	bls.n	8007054 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
	}
}
 8007054:	bf00      	nop
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200018bc 	.word	0x200018bc
 8007060:	2000189c 	.word	0x2000189c
 8007064:	200013c4 	.word	0x200013c4
 8007068:	200013c0 	.word	0x200013c0
 800706c:	200018a8 	.word	0x200018a8

08007070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <vTaskInternalSetTimeOutState+0x24>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <vTaskInternalSetTimeOutState+0x28>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	200018ac 	.word	0x200018ac
 8007098:	20001898 	.word	0x20001898

0800709c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	613b      	str	r3, [r7, #16]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60fb      	str	r3, [r7, #12]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070de:	f000 ff55 	bl	8007f8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <xTaskCheckForTimeOut+0xbc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d102      	bne.n	8007102 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e023      	b.n	800714a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <xTaskCheckForTimeOut+0xc0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d007      	beq.n	800711e <xTaskCheckForTimeOut+0x82>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e015      	b.n	800714a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	429a      	cmp	r2, r3
 8007126:	d20b      	bcs.n	8007140 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff9b 	bl	8007070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e004      	b.n	800714a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f000 ff4f 	bl	8007fec <vPortExitCritical>

	return xReturn;
 800714e:	69fb      	ldr	r3, [r7, #28]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20001898 	.word	0x20001898
 800715c:	200018ac 	.word	0x200018ac

08007160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <vTaskMissedYield+0x14>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	200018a8 	.word	0x200018a8

08007178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007180:	f000 f854 	bl	800722c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007184:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <prvIdleTask+0x2c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d907      	bls.n	800719c <prvIdleTask+0x24>
			{
				taskYIELD();
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <prvIdleTask+0x30>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800719c:	f7f8 ffec 	bl	8000178 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80071a0:	e7ee      	b.n	8007180 <prvIdleTask+0x8>
 80071a2:	bf00      	nop
 80071a4:	200013c4 	.word	0x200013c4
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b2:	2300      	movs	r3, #0
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	e00c      	b.n	80071d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a12      	ldr	r2, [pc, #72]	; (800720c <prvInitialiseTaskLists+0x60>)
 80071c4:	4413      	add	r3, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe f95c 	bl	8005484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3301      	adds	r3, #1
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b37      	cmp	r3, #55	; 0x37
 80071d6:	d9ef      	bls.n	80071b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071d8:	480d      	ldr	r0, [pc, #52]	; (8007210 <prvInitialiseTaskLists+0x64>)
 80071da:	f7fe f953 	bl	8005484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071de:	480d      	ldr	r0, [pc, #52]	; (8007214 <prvInitialiseTaskLists+0x68>)
 80071e0:	f7fe f950 	bl	8005484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071e4:	480c      	ldr	r0, [pc, #48]	; (8007218 <prvInitialiseTaskLists+0x6c>)
 80071e6:	f7fe f94d 	bl	8005484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071ea:	480c      	ldr	r0, [pc, #48]	; (800721c <prvInitialiseTaskLists+0x70>)
 80071ec:	f7fe f94a 	bl	8005484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f0:	480b      	ldr	r0, [pc, #44]	; (8007220 <prvInitialiseTaskLists+0x74>)
 80071f2:	f7fe f947 	bl	8005484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <prvInitialiseTaskLists+0x78>)
 80071f8:	4a05      	ldr	r2, [pc, #20]	; (8007210 <prvInitialiseTaskLists+0x64>)
 80071fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <prvInitialiseTaskLists+0x7c>)
 80071fe:	4a05      	ldr	r2, [pc, #20]	; (8007214 <prvInitialiseTaskLists+0x68>)
 8007200:	601a      	str	r2, [r3, #0]
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200013c4 	.word	0x200013c4
 8007210:	20001824 	.word	0x20001824
 8007214:	20001838 	.word	0x20001838
 8007218:	20001854 	.word	0x20001854
 800721c:	20001868 	.word	0x20001868
 8007220:	20001880 	.word	0x20001880
 8007224:	2000184c 	.word	0x2000184c
 8007228:	20001850 	.word	0x20001850

0800722c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007232:	e019      	b.n	8007268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007234:	f000 feaa 	bl	8007f8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <prvCheckTasksWaitingTermination+0x50>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f9a3 	bl	8005590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <prvCheckTasksWaitingTermination+0x54>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3b01      	subs	r3, #1
 8007250:	4a0b      	ldr	r2, [pc, #44]	; (8007280 <prvCheckTasksWaitingTermination+0x54>)
 8007252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	4a0a      	ldr	r2, [pc, #40]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800725c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800725e:	f000 fec5 	bl	8007fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f810 	bl	8007288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e1      	bne.n	8007234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20001868 	.word	0x20001868
 8007280:	20001894 	.word	0x20001894
 8007284:	2000187c 	.word	0x2000187c

08007288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 f838 	bl	8008314 <vPortFree>
				vPortFree( pxTCB );
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f835 	bl	8008314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072aa:	e018      	b.n	80072de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d103      	bne.n	80072be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f82c 	bl	8008314 <vPortFree>
	}
 80072bc:	e00f      	b.n	80072de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d00a      	beq.n	80072de <prvDeleteTCB+0x56>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	60fb      	str	r3, [r7, #12]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <prvDeleteTCB+0x54>
	}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <prvResetNextTaskUnblockTime+0x40>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <prvResetNextTaskUnblockTime+0x14>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <prvResetNextTaskUnblockTime+0x16>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <prvResetNextTaskUnblockTime+0x44>)
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800730a:	e008      	b.n	800731e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <prvResetNextTaskUnblockTime+0x40>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	4a04      	ldr	r2, [pc, #16]	; (800732c <prvResetNextTaskUnblockTime+0x44>)
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	2000184c 	.word	0x2000184c
 800732c:	200018b4 	.word	0x200018b4

08007330 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <xTaskGetCurrentTaskHandle+0x18>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800733c:	687b      	ldr	r3, [r7, #4]
	}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	200013c0 	.word	0x200013c0

0800734c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <xTaskGetSchedulerState+0x34>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800735a:	2301      	movs	r3, #1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	e008      	b.n	8007372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <xTaskGetSchedulerState+0x38>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007368:	2302      	movs	r3, #2
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	e001      	b.n	8007372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007372:	687b      	ldr	r3, [r7, #4]
	}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	200018a0 	.word	0x200018a0
 8007384:	200018bc 	.word	0x200018bc

08007388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d056      	beq.n	800744c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4b2d      	ldr	r3, [pc, #180]	; (8007458 <xTaskPriorityInherit+0xd0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d246      	bcs.n	800743a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	db06      	blt.n	80073c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b4:	4b28      	ldr	r3, [pc, #160]	; (8007458 <xTaskPriorityInherit+0xd0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6959      	ldr	r1, [r3, #20]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4a22      	ldr	r2, [pc, #136]	; (800745c <xTaskPriorityInherit+0xd4>)
 80073d4:	4413      	add	r3, r2
 80073d6:	4299      	cmp	r1, r3
 80073d8:	d101      	bne.n	80073de <xTaskPriorityInherit+0x56>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xTaskPriorityInherit+0x58>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d022      	beq.n	800742a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f8d1 	bl	8005590 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <xTaskPriorityInherit+0xd0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	4b18      	ldr	r3, [pc, #96]	; (8007460 <xTaskPriorityInherit+0xd8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d903      	bls.n	800740c <xTaskPriorityInherit+0x84>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	4a15      	ldr	r2, [pc, #84]	; (8007460 <xTaskPriorityInherit+0xd8>)
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4a10      	ldr	r2, [pc, #64]	; (800745c <xTaskPriorityInherit+0xd4>)
 800741a:	441a      	add	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fe f859 	bl	80054da <vListInsertEnd>
 8007428:	e004      	b.n	8007434 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <xTaskPriorityInherit+0xd0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e008      	b.n	800744c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800743e:	4b06      	ldr	r3, [pc, #24]	; (8007458 <xTaskPriorityInherit+0xd0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d201      	bcs.n	800744c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800744c:	68fb      	ldr	r3, [r7, #12]
	}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200013c0 	.word	0x200013c0
 800745c:	200013c4 	.word	0x200013c4
 8007460:	2000189c 	.word	0x2000189c

08007464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d056      	beq.n	8007528 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800747a:	4b2e      	ldr	r3, [pc, #184]	; (8007534 <xTaskPriorityDisinherit+0xd0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d00a      	beq.n	800749a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	1e5a      	subs	r2, r3, #1
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d02c      	beq.n	8007528 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d128      	bne.n	8007528 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	3304      	adds	r3, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f858 	bl	8005590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <xTaskPriorityDisinherit+0xd4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d903      	bls.n	8007508 <xTaskPriorityDisinherit+0xa4>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	4a0c      	ldr	r2, [pc, #48]	; (8007538 <xTaskPriorityDisinherit+0xd4>)
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4a09      	ldr	r2, [pc, #36]	; (800753c <xTaskPriorityDisinherit+0xd8>)
 8007516:	441a      	add	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3304      	adds	r3, #4
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f7fd ffdb 	bl	80054da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007528:	697b      	ldr	r3, [r7, #20]
	}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200013c0 	.word	0x200013c0
 8007538:	2000189c 	.word	0x2000189c
 800753c:	200013c4 	.word	0x200013c4

08007540 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800754e:	2301      	movs	r3, #1
 8007550:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d06f      	beq.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d902      	bls.n	8007586 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e002      	b.n	800758c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	429a      	cmp	r2, r3
 8007594:	d050      	beq.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	d14b      	bne.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d10a      	bne.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	60bb      	str	r3, [r7, #8]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db04      	blt.n	80075de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	6959      	ldr	r1, [r3, #20]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a15      	ldr	r2, [pc, #84]	; (8007644 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075ee:	4413      	add	r3, r2
 80075f0:	4299      	cmp	r1, r3
 80075f2:	d101      	bne.n	80075f8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01c      	beq.n	8007638 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	3304      	adds	r3, #4
 8007602:	4618      	mov	r0, r3
 8007604:	f7fd ffc4 	bl	8005590 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d903      	bls.n	800761c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	4a0b      	ldr	r2, [pc, #44]	; (8007648 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4a06      	ldr	r2, [pc, #24]	; (8007644 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800762a:	441a      	add	r2, r3
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fd ff51 	bl	80054da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007638:	bf00      	nop
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200013c0 	.word	0x200013c0
 8007644:	200013c4 	.word	0x200013c4
 8007648:	2000189c 	.word	0x2000189c

0800764c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <uxTaskResetEventItemValue+0x2c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <uxTaskResetEventItemValue+0x2c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <uxTaskResetEventItemValue+0x2c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007668:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800766a:	687b      	ldr	r3, [r7, #4]
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	200013c0 	.word	0x200013c0

0800767c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800768e:	3201      	adds	r2, #1
 8007690:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007694:	681b      	ldr	r3, [r3, #0]
	}
 8007696:	4618      	mov	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	200013c0 	.word	0x200013c0

080076a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ae:	4b21      	ldr	r3, [pc, #132]	; (8007734 <prvAddCurrentTaskToDelayedList+0x90>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fd ff68 	bl	8005590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d10a      	bne.n	80076de <prvAddCurrentTaskToDelayedList+0x3a>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ce:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4819      	ldr	r0, [pc, #100]	; (800773c <prvAddCurrentTaskToDelayedList+0x98>)
 80076d8:	f7fd feff 	bl	80054da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076dc:	e026      	b.n	800772c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d209      	bcs.n	800770a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <prvAddCurrentTaskToDelayedList+0x94>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fd ff0c 	bl	8005520 <vListInsert>
}
 8007708:	e010      	b.n	800772c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <prvAddCurrentTaskToDelayedList+0x94>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3304      	adds	r3, #4
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7fd ff02 	bl	8005520 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d202      	bcs.n	800772c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007726:	4a08      	ldr	r2, [pc, #32]	; (8007748 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6013      	str	r3, [r2, #0]
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20001898 	.word	0x20001898
 8007738:	200013c0 	.word	0x200013c0
 800773c:	20001880 	.word	0x20001880
 8007740:	20001850 	.word	0x20001850
 8007744:	2000184c 	.word	0x2000184c
 8007748:	200018b4 	.word	0x200018b4

0800774c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007756:	f000 facb 	bl	8007cf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <xTimerCreateTimerTask+0x80>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d021      	beq.n	80077a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800776a:	1d3a      	adds	r2, r7, #4
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4618      	mov	r0, r3
 8007776:	f7fd fc7d 	bl	8005074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	9202      	str	r2, [sp, #8]
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	2302      	movs	r3, #2
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	2300      	movs	r3, #0
 800778a:	460a      	mov	r2, r1
 800778c:	4910      	ldr	r1, [pc, #64]	; (80077d0 <xTimerCreateTimerTask+0x84>)
 800778e:	4811      	ldr	r0, [pc, #68]	; (80077d4 <xTimerCreateTimerTask+0x88>)
 8007790:	f7fe fe26 	bl	80063e0 <xTaskCreateStatic>
 8007794:	4603      	mov	r3, r0
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <xTimerCreateTimerTask+0x8c>)
 8007798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <xTimerCreateTimerTask+0x8c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077a2:	2301      	movs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	613b      	str	r3, [r7, #16]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077c2:	697b      	ldr	r3, [r7, #20]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200018f8 	.word	0x200018f8
 80077d0:	08008790 	.word	0x08008790
 80077d4:	080078f9 	.word	0x080078f9
 80077d8:	200018fc 	.word	0x200018fc

080077dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <xTimerGenericCommand+0x2e>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <xTimerGenericCommand+0x98>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d02a      	beq.n	8007868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b05      	cmp	r3, #5
 8007822:	dc18      	bgt.n	8007856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007824:	f7ff fd92 	bl	800734c <xTaskGetSchedulerState>
 8007828:	4603      	mov	r3, r0
 800782a:	2b02      	cmp	r3, #2
 800782c:	d109      	bne.n	8007842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <xTimerGenericCommand+0x98>)
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	f107 0110 	add.w	r1, r7, #16
 8007836:	2300      	movs	r3, #0
 8007838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783a:	f7fe f8cb 	bl	80059d4 <xQueueGenericSend>
 800783e:	6278      	str	r0, [r7, #36]	; 0x24
 8007840:	e012      	b.n	8007868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <xTimerGenericCommand+0x98>)
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f107 0110 	add.w	r1, r7, #16
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	f7fe f8c1 	bl	80059d4 <xQueueGenericSend>
 8007852:	6278      	str	r0, [r7, #36]	; 0x24
 8007854:	e008      	b.n	8007868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <xTimerGenericCommand+0x98>)
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f107 0110 	add.w	r1, r7, #16
 800785e:	2300      	movs	r3, #0
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	f7fe f9b5 	bl	8005bd0 <xQueueGenericSendFromISR>
 8007866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800786a:	4618      	mov	r0, r3
 800786c:	3728      	adds	r7, #40	; 0x28
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200018f8 	.word	0x200018f8

08007878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <prvProcessExpiredTimer+0x7c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd fe7d 	bl	8005590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d122      	bne.n	80078e4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	18d1      	adds	r1, r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	6978      	ldr	r0, [r7, #20]
 80078ac:	f000 f8c8 	bl	8007a40 <prvInsertTimerInActiveList>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d016      	beq.n	80078e4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078b6:	2300      	movs	r3, #0
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	2100      	movs	r1, #0
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f7ff ff8b 	bl	80077dc <xTimerGenericCommand>
 80078c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10a      	bne.n	80078e4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60fb      	str	r3, [r7, #12]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	4798      	blx	r3
}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200018f0 	.word	0x200018f0

080078f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f857 	bl	80079b8 <prvGetNextExpireTime>
 800790a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f803 	bl	800791c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007916:	f000 f8d5 	bl	8007ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791a:	e7f1      	b.n	8007900 <prvTimerTask+0x8>

0800791c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007926:	f7ff f861 	bl	80069ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f866 	bl	8007a00 <prvSampleTimeNow>
 8007934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d130      	bne.n	800799e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	429a      	cmp	r2, r3
 8007948:	d806      	bhi.n	8007958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800794a:	f7ff f85d 	bl	8006a08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ff91 	bl	8007878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007956:	e024      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <prvProcessTimerOrBlockTask+0x90>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf0c      	ite	eq
 8007968:	2301      	moveq	r3, #1
 800796a:	2300      	movne	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <prvProcessTimerOrBlockTask+0x94>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	f7fe fcfb 	bl	8006378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007982:	f7ff f841 	bl	8006a08 <xTaskResumeAll>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <prvProcessTimerOrBlockTask+0x98>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
}
 800799c:	e001      	b.n	80079a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800799e:	f7ff f833 	bl	8006a08 <xTaskResumeAll>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200018f4 	.word	0x200018f4
 80079b0:	200018f8 	.word	0x200018f8
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf0c      	ite	eq
 80079ca:	2301      	moveq	r3, #1
 80079cc:	2300      	movne	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d105      	bne.n	80079ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvGetNextExpireTime+0x44>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e001      	b.n	80079ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079ee:	68fb      	ldr	r3, [r7, #12]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	200018f0 	.word	0x200018f0

08007a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a08:	f7ff f89c 	bl	8006b44 <xTaskGetTickCount>
 8007a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d205      	bcs.n	8007a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a18:	f000 f908 	bl	8007c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a2a:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <prvSampleTimeNow+0x3c>)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a30:	68fb      	ldr	r3, [r7, #12]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20001900 	.word	0x20001900

08007a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d812      	bhi.n	8007a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e01b      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <prvInsertTimerInActiveList+0x7c>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fd fd4b 	bl	8005520 <vListInsert>
 8007a8a:	e012      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d206      	bcs.n	8007aa2 <prvInsertTimerInActiveList+0x62>
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e007      	b.n	8007ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <prvInsertTimerInActiveList+0x80>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fd fd37 	bl	8005520 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	200018f4 	.word	0x200018f4
 8007ac0:	200018f0 	.word	0x200018f0

08007ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	; 0x38
 8007ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aca:	e09d      	b.n	8007c08 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da18      	bge.n	8007b04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	61fb      	str	r3, [r7, #28]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afa:	6850      	ldr	r0, [r2, #4]
 8007afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afe:	6892      	ldr	r2, [r2, #8]
 8007b00:	4611      	mov	r1, r2
 8007b02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	db7e      	blt.n	8007c08 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd fd38 	bl	8005590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b20:	463b      	mov	r3, r7
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff ff6c 	bl	8007a00 <prvSampleTimeNow>
 8007b28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b09      	cmp	r3, #9
 8007b2e:	d86a      	bhi.n	8007c06 <prvProcessReceivedCommands+0x142>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <prvProcessReceivedCommands+0x74>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b61 	.word	0x08007b61
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b61 	.word	0x08007b61
 8007b44:	08007c09 	.word	0x08007c09
 8007b48:	08007bbd 	.word	0x08007bbd
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b61 	.word	0x08007b61
 8007b58:	08007c09 	.word	0x08007c09
 8007b5c:	08007bbd 	.word	0x08007bbd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	18d1      	adds	r1, r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	f7ff ff67 	bl	8007a40 <prvInsertTimerInActiveList>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d047      	beq.n	8007c08 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d13f      	bne.n	8007c08 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	441a      	add	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f7ff fe1f 	bl	80077dc <xTimerGenericCommand>
 8007b9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d130      	bne.n	8007c08 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61bb      	str	r3, [r7, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	617b      	str	r3, [r7, #20]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	18d1      	adds	r1, r2, r3
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f7ff ff27 	bl	8007a40 <prvInsertTimerInActiveList>
					break;
 8007bf2:	e009      	b.n	8007c08 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c00:	f000 fb88 	bl	8008314 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c04:	e000      	b.n	8007c08 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007c06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <prvProcessReceivedCommands+0x164>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1d39      	adds	r1, r7, #4
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe f875 	bl	8005d00 <xQueueReceive>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f47f af57 	bne.w	8007acc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	3730      	adds	r7, #48	; 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	200018f8 	.word	0x200018f8

08007c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c32:	e045      	b.n	8007cc0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c34:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fc9f 	bl	8005590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d12e      	bne.n	8007cc0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4413      	add	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d90e      	bls.n	8007c92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fd fc48 	bl	8005520 <vListInsert>
 8007c90:	e016      	b.n	8007cc0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c92:	2300      	movs	r3, #0
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2300      	movs	r3, #0
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff fd9d 	bl	80077dc <xTimerGenericCommand>
 8007ca2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	603b      	str	r3, [r7, #0]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cc0:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1b4      	bne.n	8007c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <prvSwitchTimerLists+0xc0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007cd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cd8:	4a04      	ldr	r2, [pc, #16]	; (8007cec <prvSwitchTimerLists+0xc0>)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6013      	str	r3, [r2, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200018f0 	.word	0x200018f0
 8007cec:	200018f4 	.word	0x200018f4

08007cf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cf6:	f000 f949 	bl	8007f8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cfa:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <prvCheckForValidListAndQueue+0x60>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d120      	bne.n	8007d44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d02:	4814      	ldr	r0, [pc, #80]	; (8007d54 <prvCheckForValidListAndQueue+0x64>)
 8007d04:	f7fd fbbe 	bl	8005484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d08:	4813      	ldr	r0, [pc, #76]	; (8007d58 <prvCheckForValidListAndQueue+0x68>)
 8007d0a:	f7fd fbbb 	bl	8005484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <prvCheckForValidListAndQueue+0x6c>)
 8007d10:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <prvCheckForValidListAndQueue+0x64>)
 8007d12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d14:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <prvCheckForValidListAndQueue+0x70>)
 8007d16:	4a10      	ldr	r2, [pc, #64]	; (8007d58 <prvCheckForValidListAndQueue+0x68>)
 8007d18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <prvCheckForValidListAndQueue+0x74>)
 8007d20:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <prvCheckForValidListAndQueue+0x78>)
 8007d22:	2110      	movs	r1, #16
 8007d24:	200a      	movs	r0, #10
 8007d26:	f7fd fcc5 	bl	80056b4 <xQueueGenericCreateStatic>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <prvCheckForValidListAndQueue+0x60>)
 8007d2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <prvCheckForValidListAndQueue+0x60>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <prvCheckForValidListAndQueue+0x60>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	490b      	ldr	r1, [pc, #44]	; (8007d6c <prvCheckForValidListAndQueue+0x7c>)
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe faf2 	bl	8006328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d44:	f000 f952 	bl	8007fec <vPortExitCritical>
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200018f8 	.word	0x200018f8
 8007d54:	200018c8 	.word	0x200018c8
 8007d58:	200018dc 	.word	0x200018dc
 8007d5c:	200018f0 	.word	0x200018f0
 8007d60:	200018f4 	.word	0x200018f4
 8007d64:	200019a4 	.word	0x200019a4
 8007d68:	20001904 	.word	0x20001904
 8007d6c:	08008798 	.word	0x08008798

08007d70 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007d7e:	f06f 0301 	mvn.w	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <xTimerPendFunctionCallFromISR+0x3c>)
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	f107 0114 	add.w	r1, r7, #20
 8007d98:	2300      	movs	r3, #0
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	f7fd ff18 	bl	8005bd0 <xQueueGenericSendFromISR>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3728      	adds	r7, #40	; 0x28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	200018f8 	.word	0x200018f8

08007db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3b04      	subs	r3, #4
 8007dc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f023 0201 	bic.w	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <pxPortInitialiseStack+0x54>)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b14      	subs	r3, #20
 8007dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b20      	subs	r3, #32
 8007df6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	08007e09 	.word	0x08007e09

08007e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e12:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <prvTaskExitError+0x54>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d00a      	beq.n	8007e32 <prvTaskExitError+0x2a>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <prvTaskExitError+0x28>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60bb      	str	r3, [r7, #8]
}
 8007e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e46:	bf00      	nop
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0fc      	beq.n	8007e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000034 	.word	0x20000034

08007e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <pxCurrentTCBConst2>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e6a:	f380 8809 	msr	PSP, r0
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e7e:	4770      	bx	lr

08007e80 <pxCurrentTCBConst2>:
 8007e80:	200013c0 	.word	0x200013c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e88:	4806      	ldr	r0, [pc, #24]	; (8007ea4 <prvPortStartFirstTask+0x1c>)
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f380 8808 	msr	MSP, r0
 8007e92:	b662      	cpsie	i
 8007e94:	b661      	cpsie	f
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	df00      	svc	0
 8007ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ea2:	bf00      	nop
 8007ea4:	e000ed08 	.word	0xe000ed08

08007ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eae:	4b32      	ldr	r3, [pc, #200]	; (8007f78 <xPortStartScheduler+0xd0>)
 8007eb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	22ff      	movs	r2, #255	; 0xff
 8007ebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <xPortStartScheduler+0xd4>)
 8007ed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ed6:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007ed8:	2207      	movs	r2, #7
 8007eda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007edc:	e009      	b.n	8007ef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ede:	4b28      	ldr	r3, [pc, #160]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4a26      	ldr	r2, [pc, #152]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007ee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b80      	cmp	r3, #128	; 0x80
 8007efc:	d0ef      	beq.n	8007ede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007efe:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1c3 0307 	rsb	r3, r3, #7
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d00a      	beq.n	8007f20 <xPortStartScheduler+0x78>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60bb      	str	r3, [r7, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f20:	4b17      	ldr	r3, [pc, #92]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007f28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f2a:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f32:	4a13      	ldr	r2, [pc, #76]	; (8007f80 <xPortStartScheduler+0xd8>)
 8007f34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <xPortStartScheduler+0xdc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <xPortStartScheduler+0xdc>)
 8007f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	; (8007f84 <xPortStartScheduler+0xdc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <xPortStartScheduler+0xdc>)
 8007f50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f56:	f000 f8b9 	bl	80080cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <xPortStartScheduler+0xe0>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f60:	f7ff ff92 	bl	8007e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f64:	f7fe feba 	bl	8006cdc <vTaskSwitchContext>
	prvTaskExitError();
 8007f68:	f7ff ff4e 	bl	8007e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000e400 	.word	0xe000e400
 8007f7c:	200019f4 	.word	0x200019f4
 8007f80:	200019f8 	.word	0x200019f8
 8007f84:	e000ed20 	.word	0xe000ed20
 8007f88:	20000034 	.word	0x20000034

08007f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <vPortEnterCritical+0x58>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	4a0d      	ldr	r2, [pc, #52]	; (8007fe4 <vPortEnterCritical+0x58>)
 8007fae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <vPortEnterCritical+0x58>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10f      	bne.n	8007fd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <vPortEnterCritical+0x5c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	603b      	str	r3, [r7, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vPortEnterCritical+0x4a>
	}
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000034 	.word	0x20000034
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ff2:	4b11      	ldr	r3, [pc, #68]	; (8008038 <vPortExitCritical+0x4c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <vPortExitCritical+0x24>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	607b      	str	r3, [r7, #4]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <vPortExitCritical+0x4c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3b01      	subs	r3, #1
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <vPortExitCritical+0x4c>)
 8008018:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <vPortExitCritical+0x4c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <vPortExitCritical+0x42>
 8008022:	2300      	movs	r3, #0
 8008024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	f383 8811 	msr	BASEPRI, r3
}
 800802c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr
 8008038:	20000034 	.word	0x20000034
 800803c:	00000000 	.word	0x00000000

08008040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008040:	f3ef 8009 	mrs	r0, PSP
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <pxCurrentTCBConst>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008050:	6010      	str	r0, [r2, #0]
 8008052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800805a:	f380 8811 	msr	BASEPRI, r0
 800805e:	f7fe fe3d 	bl	8006cdc <vTaskSwitchContext>
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8811 	msr	BASEPRI, r0
 800806a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6808      	ldr	r0, [r1, #0]
 8008072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008076:	f380 8809 	msr	PSP, r0
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	4770      	bx	lr

08008080 <pxCurrentTCBConst>:
 8008080:	200013c0 	.word	0x200013c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	607b      	str	r3, [r7, #4]
}
 80080a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a2:	f7fe fd5d 	bl	8006b60 <xTaskIncrementTick>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <SysTick_Handler+0x40>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <vPortSetupTimerInterrupt+0x30>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <vPortSetupTimerInterrupt+0x34>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <vPortSetupTimerInterrupt+0x38>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a09      	ldr	r2, [pc, #36]	; (8008108 <vPortSetupTimerInterrupt+0x3c>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <vPortSetupTimerInterrupt+0x40>)
 80080ea:	3b01      	subs	r3, #1
 80080ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ee:	4b03      	ldr	r3, [pc, #12]	; (80080fc <vPortSetupTimerInterrupt+0x30>)
 80080f0:	2207      	movs	r2, #7
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	e000e010 	.word	0xe000e010
 8008100:	e000e018 	.word	0xe000e018
 8008104:	20000028 	.word	0x20000028
 8008108:	10624dd3 	.word	0x10624dd3
 800810c:	e000e014 	.word	0xe000e014

08008110 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008116:	f3ef 8305 	mrs	r3, IPSR
 800811a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b0f      	cmp	r3, #15
 8008120:	d914      	bls.n	800814c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008122:	4a16      	ldr	r2, [pc, #88]	; (800817c <vPortValidateInterruptPriority+0x6c>)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800812c:	4b14      	ldr	r3, [pc, #80]	; (8008180 <vPortValidateInterruptPriority+0x70>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	7afa      	ldrb	r2, [r7, #11]
 8008132:	429a      	cmp	r2, r3
 8008134:	d20a      	bcs.n	800814c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <vPortValidateInterruptPriority+0x74>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <vPortValidateInterruptPriority+0x78>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d90a      	bls.n	8008172 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	603b      	str	r3, [r7, #0]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <vPortValidateInterruptPriority+0x60>
	}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr
 800817c:	e000e3f0 	.word	0xe000e3f0
 8008180:	200019f4 	.word	0x200019f4
 8008184:	e000ed0c 	.word	0xe000ed0c
 8008188:	200019f8 	.word	0x200019f8

0800818c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	; 0x28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008194:	2300      	movs	r3, #0
 8008196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008198:	f7fe fc28 	bl	80069ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800819c:	4b58      	ldr	r3, [pc, #352]	; (8008300 <pvPortMalloc+0x174>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081a4:	f000 f910 	bl	80083c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081a8:	4b56      	ldr	r3, [pc, #344]	; (8008304 <pvPortMalloc+0x178>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4013      	ands	r3, r2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f040 808e 	bne.w	80082d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01d      	beq.n	80081f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081bc:	2208      	movs	r2, #8
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d014      	beq.n	80081f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	3308      	adds	r3, #8
 80081d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <pvPortMalloc+0x6c>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	617b      	str	r3, [r7, #20]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d069      	beq.n	80082d2 <pvPortMalloc+0x146>
 80081fe:	4b42      	ldr	r3, [pc, #264]	; (8008308 <pvPortMalloc+0x17c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d864      	bhi.n	80082d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008208:	4b40      	ldr	r3, [pc, #256]	; (800830c <pvPortMalloc+0x180>)
 800820a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800820c:	4b3f      	ldr	r3, [pc, #252]	; (800830c <pvPortMalloc+0x180>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008212:	e004      	b.n	800821e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d903      	bls.n	8008230 <pvPortMalloc+0xa4>
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f1      	bne.n	8008214 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008230:	4b33      	ldr	r3, [pc, #204]	; (8008300 <pvPortMalloc+0x174>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008236:	429a      	cmp	r2, r3
 8008238:	d04b      	beq.n	80082d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2208      	movs	r2, #8
 8008240:	4413      	add	r3, r2
 8008242:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	1ad2      	subs	r2, r2, r3
 8008254:	2308      	movs	r3, #8
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	429a      	cmp	r2, r3
 800825a:	d91f      	bls.n	800829c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800825c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <pvPortMalloc+0xf8>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	613b      	str	r3, [r7, #16]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008296:	69b8      	ldr	r0, [r7, #24]
 8008298:	f000 f8f8 	bl	800848c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <pvPortMalloc+0x17c>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <pvPortMalloc+0x17c>)
 80082a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082aa:	4b17      	ldr	r3, [pc, #92]	; (8008308 <pvPortMalloc+0x17c>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b18      	ldr	r3, [pc, #96]	; (8008310 <pvPortMalloc+0x184>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d203      	bcs.n	80082be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <pvPortMalloc+0x17c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a15      	ldr	r2, [pc, #84]	; (8008310 <pvPortMalloc+0x184>)
 80082bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	4b10      	ldr	r3, [pc, #64]	; (8008304 <pvPortMalloc+0x178>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082d2:	f7fe fb99 	bl	8006a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <pvPortMalloc+0x16a>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <pvPortMalloc+0x168>
	return pvReturn;
 80082f6:	69fb      	ldr	r3, [r7, #28]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3728      	adds	r7, #40	; 0x28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20004204 	.word	0x20004204
 8008304:	20004210 	.word	0x20004210
 8008308:	20004208 	.word	0x20004208
 800830c:	200041fc 	.word	0x200041fc
 8008310:	2000420c 	.word	0x2000420c

08008314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d048      	beq.n	80083b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008326:	2308      	movs	r3, #8
 8008328:	425b      	negs	r3, r3
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <vPortFree+0xac>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <vPortFree+0x44>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	60fb      	str	r3, [r7, #12]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <vPortFree+0x62>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	60bb      	str	r3, [r7, #8]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <vPortFree+0xac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4013      	ands	r3, r2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d115      	bne.n	80083b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortFree+0xac>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800839c:	f7fe fb26 	bl	80069ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <vPortFree+0xb0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	4a06      	ldr	r2, [pc, #24]	; (80083c4 <vPortFree+0xb0>)
 80083ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ae:	6938      	ldr	r0, [r7, #16]
 80083b0:	f000 f86c 	bl	800848c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083b4:	f7fe fb28 	bl	8006a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083b8:	bf00      	nop
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20004210 	.word	0x20004210
 80083c4:	20004208 	.word	0x20004208

080083c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80083d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083d4:	4b27      	ldr	r3, [pc, #156]	; (8008474 <prvHeapInit+0xac>)
 80083d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00c      	beq.n	80083fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3307      	adds	r3, #7
 80083e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0307 	bic.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	4a1f      	ldr	r2, [pc, #124]	; (8008474 <prvHeapInit+0xac>)
 80083f8:	4413      	add	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008400:	4a1d      	ldr	r2, [pc, #116]	; (8008478 <prvHeapInit+0xb0>)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008406:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <prvHeapInit+0xb0>)
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008414:	2208      	movs	r2, #8
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0307 	bic.w	r3, r3, #7
 8008422:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <prvHeapInit+0xb4>)
 8008428:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <prvHeapInit+0xb4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008432:	4b12      	ldr	r3, [pc, #72]	; (800847c <prvHeapInit+0xb4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <prvHeapInit+0xb4>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <prvHeapInit+0xb8>)
 8008456:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	4a09      	ldr	r2, [pc, #36]	; (8008484 <prvHeapInit+0xbc>)
 800845e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008460:	4b09      	ldr	r3, [pc, #36]	; (8008488 <prvHeapInit+0xc0>)
 8008462:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008466:	601a      	str	r2, [r3, #0]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	200019fc 	.word	0x200019fc
 8008478:	200041fc 	.word	0x200041fc
 800847c:	20004204 	.word	0x20004204
 8008480:	2000420c 	.word	0x2000420c
 8008484:	20004208 	.word	0x20004208
 8008488:	20004210 	.word	0x20004210

0800848c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008494:	4b27      	ldr	r3, [pc, #156]	; (8008534 <prvInsertBlockIntoFreeList+0xa8>)
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e002      	b.n	80084a0 <prvInsertBlockIntoFreeList+0x14>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d8f7      	bhi.n	800849a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	4413      	add	r3, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d108      	bne.n	80084ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	441a      	add	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	441a      	add	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d118      	bne.n	8008514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <prvInsertBlockIntoFreeList+0xac>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d00d      	beq.n	800850a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	441a      	add	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	e008      	b.n	800851c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <prvInsertBlockIntoFreeList+0xac>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e003      	b.n	800851c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d002      	beq.n	800852a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800852a:	bf00      	nop
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	200041fc 	.word	0x200041fc
 8008538:	20004204 	.word	0x20004204

0800853c <atoi>:
 800853c:	220a      	movs	r2, #10
 800853e:	2100      	movs	r1, #0
 8008540:	f000 b87e 	b.w	8008640 <strtol>

08008544 <_strtol_l.constprop.0>:
 8008544:	2b01      	cmp	r3, #1
 8008546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854a:	4686      	mov	lr, r0
 800854c:	4690      	mov	r8, r2
 800854e:	d001      	beq.n	8008554 <_strtol_l.constprop.0+0x10>
 8008550:	2b24      	cmp	r3, #36	; 0x24
 8008552:	d906      	bls.n	8008562 <_strtol_l.constprop.0+0x1e>
 8008554:	f000 f886 	bl	8008664 <__errno>
 8008558:	2316      	movs	r3, #22
 800855a:	6003      	str	r3, [r0, #0]
 800855c:	2000      	movs	r0, #0
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	460d      	mov	r5, r1
 8008564:	4835      	ldr	r0, [pc, #212]	; (800863c <_strtol_l.constprop.0+0xf8>)
 8008566:	462a      	mov	r2, r5
 8008568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800856c:	5d06      	ldrb	r6, [r0, r4]
 800856e:	f016 0608 	ands.w	r6, r6, #8
 8008572:	d1f8      	bne.n	8008566 <_strtol_l.constprop.0+0x22>
 8008574:	2c2d      	cmp	r4, #45	; 0x2d
 8008576:	d12e      	bne.n	80085d6 <_strtol_l.constprop.0+0x92>
 8008578:	2601      	movs	r6, #1
 800857a:	782c      	ldrb	r4, [r5, #0]
 800857c:	1c95      	adds	r5, r2, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d057      	beq.n	8008632 <_strtol_l.constprop.0+0xee>
 8008582:	2b10      	cmp	r3, #16
 8008584:	d109      	bne.n	800859a <_strtol_l.constprop.0+0x56>
 8008586:	2c30      	cmp	r4, #48	; 0x30
 8008588:	d107      	bne.n	800859a <_strtol_l.constprop.0+0x56>
 800858a:	782a      	ldrb	r2, [r5, #0]
 800858c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008590:	2a58      	cmp	r2, #88	; 0x58
 8008592:	d149      	bne.n	8008628 <_strtol_l.constprop.0+0xe4>
 8008594:	2310      	movs	r3, #16
 8008596:	786c      	ldrb	r4, [r5, #1]
 8008598:	3502      	adds	r5, #2
 800859a:	2200      	movs	r2, #0
 800859c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80085a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085a4:	fbbc f9f3 	udiv	r9, ip, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80085ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80085b2:	2f09      	cmp	r7, #9
 80085b4:	d814      	bhi.n	80085e0 <_strtol_l.constprop.0+0x9c>
 80085b6:	463c      	mov	r4, r7
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	dd20      	ble.n	80085fe <_strtol_l.constprop.0+0xba>
 80085bc:	1c57      	adds	r7, r2, #1
 80085be:	d007      	beq.n	80085d0 <_strtol_l.constprop.0+0x8c>
 80085c0:	4581      	cmp	r9, r0
 80085c2:	d319      	bcc.n	80085f8 <_strtol_l.constprop.0+0xb4>
 80085c4:	d101      	bne.n	80085ca <_strtol_l.constprop.0+0x86>
 80085c6:	45a2      	cmp	sl, r4
 80085c8:	db16      	blt.n	80085f8 <_strtol_l.constprop.0+0xb4>
 80085ca:	2201      	movs	r2, #1
 80085cc:	fb00 4003 	mla	r0, r0, r3, r4
 80085d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085d4:	e7eb      	b.n	80085ae <_strtol_l.constprop.0+0x6a>
 80085d6:	2c2b      	cmp	r4, #43	; 0x2b
 80085d8:	bf04      	itt	eq
 80085da:	782c      	ldrbeq	r4, [r5, #0]
 80085dc:	1c95      	addeq	r5, r2, #2
 80085de:	e7ce      	b.n	800857e <_strtol_l.constprop.0+0x3a>
 80085e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80085e4:	2f19      	cmp	r7, #25
 80085e6:	d801      	bhi.n	80085ec <_strtol_l.constprop.0+0xa8>
 80085e8:	3c37      	subs	r4, #55	; 0x37
 80085ea:	e7e5      	b.n	80085b8 <_strtol_l.constprop.0+0x74>
 80085ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80085f0:	2f19      	cmp	r7, #25
 80085f2:	d804      	bhi.n	80085fe <_strtol_l.constprop.0+0xba>
 80085f4:	3c57      	subs	r4, #87	; 0x57
 80085f6:	e7df      	b.n	80085b8 <_strtol_l.constprop.0+0x74>
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	e7e8      	b.n	80085d0 <_strtol_l.constprop.0+0x8c>
 80085fe:	1c53      	adds	r3, r2, #1
 8008600:	d108      	bne.n	8008614 <_strtol_l.constprop.0+0xd0>
 8008602:	2322      	movs	r3, #34	; 0x22
 8008604:	4660      	mov	r0, ip
 8008606:	f8ce 3000 	str.w	r3, [lr]
 800860a:	f1b8 0f00 	cmp.w	r8, #0
 800860e:	d0a6      	beq.n	800855e <_strtol_l.constprop.0+0x1a>
 8008610:	1e69      	subs	r1, r5, #1
 8008612:	e006      	b.n	8008622 <_strtol_l.constprop.0+0xde>
 8008614:	b106      	cbz	r6, 8008618 <_strtol_l.constprop.0+0xd4>
 8008616:	4240      	negs	r0, r0
 8008618:	f1b8 0f00 	cmp.w	r8, #0
 800861c:	d09f      	beq.n	800855e <_strtol_l.constprop.0+0x1a>
 800861e:	2a00      	cmp	r2, #0
 8008620:	d1f6      	bne.n	8008610 <_strtol_l.constprop.0+0xcc>
 8008622:	f8c8 1000 	str.w	r1, [r8]
 8008626:	e79a      	b.n	800855e <_strtol_l.constprop.0+0x1a>
 8008628:	2430      	movs	r4, #48	; 0x30
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1b5      	bne.n	800859a <_strtol_l.constprop.0+0x56>
 800862e:	2308      	movs	r3, #8
 8008630:	e7b3      	b.n	800859a <_strtol_l.constprop.0+0x56>
 8008632:	2c30      	cmp	r4, #48	; 0x30
 8008634:	d0a9      	beq.n	800858a <_strtol_l.constprop.0+0x46>
 8008636:	230a      	movs	r3, #10
 8008638:	e7af      	b.n	800859a <_strtol_l.constprop.0+0x56>
 800863a:	bf00      	nop
 800863c:	0800893f 	.word	0x0800893f

08008640 <strtol>:
 8008640:	4613      	mov	r3, r2
 8008642:	460a      	mov	r2, r1
 8008644:	4601      	mov	r1, r0
 8008646:	4802      	ldr	r0, [pc, #8]	; (8008650 <strtol+0x10>)
 8008648:	6800      	ldr	r0, [r0, #0]
 800864a:	f7ff bf7b 	b.w	8008544 <_strtol_l.constprop.0>
 800864e:	bf00      	nop
 8008650:	20000084 	.word	0x20000084

08008654 <memset>:
 8008654:	4603      	mov	r3, r0
 8008656:	4402      	add	r2, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <__errno>:
 8008664:	4b01      	ldr	r3, [pc, #4]	; (800866c <__errno+0x8>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000084 	.word	0x20000084

08008670 <__libc_init_array>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	2600      	movs	r6, #0
 8008674:	4d0c      	ldr	r5, [pc, #48]	; (80086a8 <__libc_init_array+0x38>)
 8008676:	4c0d      	ldr	r4, [pc, #52]	; (80086ac <__libc_init_array+0x3c>)
 8008678:	1b64      	subs	r4, r4, r5
 800867a:	10a4      	asrs	r4, r4, #2
 800867c:	42a6      	cmp	r6, r4
 800867e:	d109      	bne.n	8008694 <__libc_init_array+0x24>
 8008680:	f000 f828 	bl	80086d4 <_init>
 8008684:	2600      	movs	r6, #0
 8008686:	4d0a      	ldr	r5, [pc, #40]	; (80086b0 <__libc_init_array+0x40>)
 8008688:	4c0a      	ldr	r4, [pc, #40]	; (80086b4 <__libc_init_array+0x44>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	42a6      	cmp	r6, r4
 8008690:	d105      	bne.n	800869e <__libc_init_array+0x2e>
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	f855 3b04 	ldr.w	r3, [r5], #4
 8008698:	4798      	blx	r3
 800869a:	3601      	adds	r6, #1
 800869c:	e7ee      	b.n	800867c <__libc_init_array+0xc>
 800869e:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a2:	4798      	blx	r3
 80086a4:	3601      	adds	r6, #1
 80086a6:	e7f2      	b.n	800868e <__libc_init_array+0x1e>
 80086a8:	08008a40 	.word	0x08008a40
 80086ac:	08008a40 	.word	0x08008a40
 80086b0:	08008a40 	.word	0x08008a40
 80086b4:	08008a44 	.word	0x08008a44

080086b8 <memcpy>:
 80086b8:	440a      	add	r2, r1
 80086ba:	4291      	cmp	r1, r2
 80086bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c0:	d100      	bne.n	80086c4 <memcpy+0xc>
 80086c2:	4770      	bx	lr
 80086c4:	b510      	push	{r4, lr}
 80086c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d0:	d1f9      	bne.n	80086c6 <memcpy+0xe>
 80086d2:	bd10      	pop	{r4, pc}

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
