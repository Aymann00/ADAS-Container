
NRF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08007f38  08007f38  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f38  08007f38  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08007f40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  20000038  08007f78  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  08007f78  00021a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019832  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a84  00000000  00000000  000398d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  0003d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001278  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c23  00000000  00000000  0003fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a96a  00000000  00000000  000439b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096481  00000000  00000000  0005e31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063c4  00000000  00000000  000f47a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dd0 	.word	0x08007dd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	08007dd0 	.word	0x08007dd0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f001 fb96 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f85a 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f91c 	bl	8000398 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f8fc 	bl	800035c <MX_DMA_Init>
  MX_SPI1_Init();
 8000164:	f000 f89a 	bl	800029c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f8ce 	bl	8000308 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f003 ffb6 	bl	80040dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of NRF_Mutex */
  NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 8000170:	4817      	ldr	r0, [pc, #92]	; (80001d0 <main+0x80>)
 8000172:	f004 fa51 	bl	8004618 <osMutexNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <main+0x84>)
 800017a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Startup_Task */
  Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 800017c:	4a16      	ldr	r2, [pc, #88]	; (80001d8 <main+0x88>)
 800017e:	2100      	movs	r1, #0
 8000180:	4816      	ldr	r0, [pc, #88]	; (80001dc <main+0x8c>)
 8000182:	f004 f811 	bl	80041a8 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a15      	ldr	r2, [pc, #84]	; (80001e0 <main+0x90>)
 800018a:	6013      	str	r3, [r2, #0]

  /* creation of Calc_Dis */
  Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 800018c:	4a15      	ldr	r2, [pc, #84]	; (80001e4 <main+0x94>)
 800018e:	2100      	movs	r1, #0
 8000190:	4815      	ldr	r0, [pc, #84]	; (80001e8 <main+0x98>)
 8000192:	f004 f809 	bl	80041a8 <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a14      	ldr	r2, [pc, #80]	; (80001ec <main+0x9c>)
 800019a:	6013      	str	r3, [r2, #0]

  /* creation of Local */
  LocalHandle = osThreadNew(Localization, NULL, &Local_attributes);
 800019c:	4a14      	ldr	r2, [pc, #80]	; (80001f0 <main+0xa0>)
 800019e:	2100      	movs	r1, #0
 80001a0:	4814      	ldr	r0, [pc, #80]	; (80001f4 <main+0xa4>)
 80001a2:	f004 f801 	bl	80041a8 <osThreadNew>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <main+0xa8>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* creation of Check_Algo */
  Check_AlgoHandle = osThreadNew(Algo_Check, NULL, &Check_Algo_attributes);
 80001ac:	4a13      	ldr	r2, [pc, #76]	; (80001fc <main+0xac>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <main+0xb0>)
 80001b2:	f003 fff9 	bl	80041a8 <osThreadNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a12      	ldr	r2, [pc, #72]	; (8000204 <main+0xb4>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of EventGroup */
  EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 80001bc:	4812      	ldr	r0, [pc, #72]	; (8000208 <main+0xb8>)
 80001be:	f004 f90b 	bl	80043d8 <osEventFlagsNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a11      	ldr	r2, [pc, #68]	; (800020c <main+0xbc>)
 80001c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c8:	f003 ffba 	bl	8004140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80001cc:	e7fe      	b.n	80001cc <main+0x7c>
 80001ce:	bf00      	nop
 80001d0:	08007edc 	.word	0x08007edc
 80001d4:	20000148 	.word	0x20000148
 80001d8:	08007e4c 	.word	0x08007e4c
 80001dc:	080006f5 	.word	0x080006f5
 80001e0:	20000138 	.word	0x20000138
 80001e4:	08007e70 	.word	0x08007e70
 80001e8:	080007a5 	.word	0x080007a5
 80001ec:	2000013c 	.word	0x2000013c
 80001f0:	08007e94 	.word	0x08007e94
 80001f4:	080007d9 	.word	0x080007d9
 80001f8:	20000140 	.word	0x20000140
 80001fc:	08007eb8 	.word	0x08007eb8
 8000200:	08000869 	.word	0x08000869
 8000204:	20000144 	.word	0x20000144
 8000208:	08007eec 	.word	0x08007eec
 800020c:	2000014c 	.word	0x2000014c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f007 fd9c 	bl	8007d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000232:	2301      	movs	r3, #1
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000244:	2302      	movs	r3, #2
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f001 ffeb 	bl	8002234 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000264:	f000 fb4a 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fa58 	bl	8002738 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028e:	f000 fb35 	bl	80008fc <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_SPI1_Init+0x64>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <MX_SPI1_Init+0x68>)
 80002a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002a6:	4b16      	ldr	r3, [pc, #88]	; (8000300 <MX_SPI1_Init+0x64>)
 80002a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_SPI1_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_SPI1_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_SPI1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_SPI1_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_SPI1_Init+0x64>)
 80002c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_SPI1_Init+0x64>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_SPI1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_SPI1_Init+0x64>)
 80002e8:	220a      	movs	r2, #10
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_SPI1_Init+0x64>)
 80002ee:	f002 fbe1 	bl	8002ab4 <HAL_SPI_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002f8:	f000 fb00 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000054 	.word	0x20000054
 8000304:	40013000 	.word	0x40013000

08000308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART1_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000314:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000340:	f003 fb8a 	bl	8003a58 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 fad7 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000ac 	.word	0x200000ac
 8000358:	40013800 	.word	0x40013800

0800035c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_DMA_Init+0x38>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <MX_DMA_Init+0x38>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_DMA_Init+0x38>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2105      	movs	r1, #5
 800037e:	200f      	movs	r0, #15
 8000380:	f001 fb8b 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000384:	200f      	movs	r0, #15
 8000386:	f001 fba4 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a20      	ldr	r2, [pc, #128]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1a      	ldr	r2, [pc, #104]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_GPIO_Init+0x9c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2118      	movs	r1, #24
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <MX_GPIO_Init+0xa0>)
 80003e2:	f001 fef7 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e6:	2304      	movs	r3, #4
 80003e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_GPIO_Init+0xa4>)
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <MX_GPIO_Init+0xa0>)
 80003fa:	f001 fd67 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 80003fe:	2318      	movs	r3, #24
 8000400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4619      	mov	r1, r3
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <MX_GPIO_Init+0xa0>)
 8000416:	f001 fd59 	bl	8001ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2105      	movs	r1, #5
 800041e:	2008      	movs	r0, #8
 8000420:	f001 fb3b 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000424:	2008      	movs	r0, #8
 8000426:	f001 fb54 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800
 800043c:	10210000 	.word	0x10210000

08000440 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b094      	sub	sp, #80	; 0x50
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800044a:	88fb      	ldrh	r3, [r7, #6]
 800044c:	2b04      	cmp	r3, #4
 800044e:	f040 80ca 	bne.w	80005e6 <HAL_GPIO_EXTI_Callback+0x1a6>
	{
		uint16_t Received_Data[32] = {0};
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2240      	movs	r2, #64	; 0x40
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f007 fc7e 	bl	8007d5c <memset>

		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000460:	4b63      	ldr	r3, [pc, #396]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f04f 31ff 	mov.w	r1, #4294967295
 8000468:	4618      	mov	r0, r3
 800046a:	f004 f96f 	bl	800474c <osMutexAcquire>
		NRF24_read(Received_Data, 32);
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	2120      	movs	r1, #32
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fee5 	bl	8001244 <NRF24_read>
		osMutexRelease(NRF_MutexHandle) ;
 800047a:	4b5d      	ldr	r3, [pc, #372]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f004 f9c2 	bl	8004808 <osMutexRelease>

		switch(Received_Data[1])
 8000484:	897b      	ldrh	r3, [r7, #10]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d002      	beq.n	8000490 <HAL_GPIO_EXTI_Callback+0x50>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d06d      	beq.n	800056a <HAL_GPIO_EXTI_Callback+0x12a>
				/*
				 * Stop immediately
				 */
			}
		default:
			break;
 800048e:	e0a9      	b.n	80005e4 <HAL_GPIO_EXTI_Callback+0x1a4>
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 8000490:	8a3b      	ldrh	r3, [r7, #16]
 8000492:	461a      	mov	r2, r3
 8000494:	4b57      	ldr	r3, [pc, #348]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3b07      	subs	r3, #7
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 800049c:	429a      	cmp	r2, r3
 800049e:	db07      	blt.n	80004b0 <HAL_GPIO_EXTI_Callback+0x70>
 80004a0:	8a3b      	ldrh	r3, [r7, #16]
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b53      	ldr	r3, [pc, #332]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3307      	adds	r3, #7
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dd11      	ble.n	80004d4 <HAL_GPIO_EXTI_Callback+0x94>
					((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80004b0:	8a7b      	ldrh	r3, [r7, #18]
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b4f      	ldr	r3, [pc, #316]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	3b07      	subs	r3, #7
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 80004be:	429a      	cmp	r2, r3
 80004c0:	db0a      	blt.n	80004d8 <HAL_GPIO_EXTI_Callback+0x98>
							(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 80004c2:	89fb      	ldrh	r3, [r7, #14]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b4b      	ldr	r3, [pc, #300]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3307      	adds	r3, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	3307      	adds	r3, #7
					((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dc01      	bgt.n	80004d8 <HAL_GPIO_EXTI_Callback+0x98>
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 80004d4:	2301      	movs	r3, #1
 80004d6:	e000      	b.n	80004da <HAL_GPIO_EXTI_Callback+0x9a>
 80004d8:	2300      	movs	r3, #0
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 80004da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 80004ea:	893b      	ldrh	r3, [r7, #8]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3304      	adds	r3, #4
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	3b07      	subs	r3, #7
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 80004f8:	429a      	cmp	r2, r3
 80004fa:	db08      	blt.n	800050e <HAL_GPIO_EXTI_Callback+0xce>
 80004fc:	893b      	ldrh	r3, [r7, #8]
 80004fe:	461a      	mov	r2, r3
 8000500:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3304      	adds	r3, #4
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3307      	adds	r3, #7
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 800050a:	429a      	cmp	r2, r3
 800050c:	dd11      	ble.n	8000532 <HAL_GPIO_EXTI_Callback+0xf2>
							((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 800050e:	8a7b      	ldrh	r3, [r7, #18]
 8000510:	461a      	mov	r2, r3
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3b07      	subs	r3, #7
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 800051c:	429a      	cmp	r2, r3
 800051e:	db0a      	blt.n	8000536 <HAL_GPIO_EXTI_Callback+0xf6>
									(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000520:	89fb      	ldrh	r3, [r7, #14]
 8000522:	461a      	mov	r2, r3
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3307      	adds	r3, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3307      	adds	r3, #7
							((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 800052e:	429a      	cmp	r2, r3
 8000530:	dc01      	bgt.n	8000536 <HAL_GPIO_EXTI_Callback+0xf6>
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <HAL_GPIO_EXTI_Callback+0xf8>
 8000536:	2300      	movs	r3, #0
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 8000538:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800053c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if(Is_Front){
 8000548:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800054c:	2b00      	cmp	r3, #0
 800054e:	d004      	beq.n	800055a <HAL_GPIO_EXTI_Callback+0x11a>
				Front_Car_ID = Received_Data[0];
 8000550:	893b      	ldrh	r3, [r7, #8]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e007      	b.n	800056a <HAL_GPIO_EXTI_Callback+0x12a>
			else if(Is_Back){
 800055a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <HAL_GPIO_EXTI_Callback+0x12a>
				Back_Car_ID = Received_Data[0];
 8000562:	893b      	ldrh	r3, [r7, #8]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000568:	701a      	strb	r2, [r3, #0]
			bool TX_Flag =0;
 800056a:	2300      	movs	r3, #0
 800056c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			bool RX_Flag =0;
 8000570:	2300      	movs	r3, #0
 8000572:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			NRF24_whatHappened(&TX_Flag,NULL,&RX_Flag);
 8000576:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800057a:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f92a 	bl	80017da <NRF24_whatHappened>
			if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000586:	89bb      	ldrh	r3, [r7, #12]
 8000588:	2b11      	cmp	r3, #17
 800058a:	d12b      	bne.n	80005e4 <HAL_GPIO_EXTI_Callback+0x1a4>
 800058c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000590:	2b00      	cmp	r3, #0
 8000592:	d01b      	beq.n	80005cc <HAL_GPIO_EXTI_Callback+0x18c>
				uint8_t ASK_Direction_Frame[4] ={0};
 8000594:	2300      	movs	r3, #0
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
				ASK_Direction_Frame[0] = CAR_ID ;
 8000598:	2311      	movs	r3, #17
 800059a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 800059e:	2302      	movs	r3, #2
 80005a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				ASK_Direction_Frame[2] = Front_Car_ID ;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				ASK_Direction_Frame[3] = My_Direction ;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				NRF24_stopListening();
 80005b4:	f000 fde6 	bl	8001184 <NRF24_stopListening>
				NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 80005b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005bc:	2204      	movs	r2, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 f8e0 	bl	8001786 <NRF24_writeAckPayload>
				NRF24_startListening();
 80005c6:	f000 fdb7 	bl	8001138 <NRF24_startListening>
			break;
 80005ca:	e00b      	b.n	80005e4 <HAL_GPIO_EXTI_Callback+0x1a4>
			else if ((CAR_ID == Received_Data[2] && TX_Flag))
 80005cc:	89bb      	ldrh	r3, [r7, #12]
 80005ce:	2b11      	cmp	r3, #17
 80005d0:	d108      	bne.n	80005e4 <HAL_GPIO_EXTI_Callback+0x1a4>
 80005d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d004      	beq.n	80005e4 <HAL_GPIO_EXTI_Callback+0x1a4>
				if (	Received_Data[3]==	My_Direction)
 80005da:	89fa      	ldrh	r2, [r7, #14]
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	429a      	cmp	r2, r3
			break;
 80005e4:	bf00      	nop
		}

	}
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000148 	.word	0x20000148
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	200002c0 	.word	0x200002c0
 80005fc:	200002c1 	.word	0x200002c1
 8000600:	200002b8 	.word	0x200002b8

08000604 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_UART_RxCpltCallback+0x1c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f003 ff32 	bl	800447c <osEventFlagsSet>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000014c 	.word	0x2000014c

08000624 <_CalcAvgDistance>:

uint8_t * _CalcAvgDistance( uint8_t * Data_Arr )
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 800062c:	2300      	movs	r3, #0
 800062e:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	82bb      	strh	r3, [r7, #20]
	static uint8_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000634:	2300      	movs	r3, #0
 8000636:	82fb      	strh	r3, [r7, #22]
 8000638:	e04d      	b.n	80006d6 <_CalcAvgDistance+0xb2>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	461a      	mov	r2, r3
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	4413      	add	r3, r2
 8000646:	461a      	mov	r2, r3
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	b29b      	uxth	r3, r3
 800064e:	3b03      	subs	r3, #3
 8000650:	b29b      	uxth	r3, r3
 8000652:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000654:	8afb      	ldrh	r3, [r7, #22]
 8000656:	461a      	mov	r2, r3
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	b29b      	uxth	r3, r3
 8000664:	3303      	adds	r3, #3
 8000666:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	82bb      	strh	r3, [r7, #20]
 800066c:	e01f      	b.n	80006ae <_CalcAvgDistance+0x8a>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + 360) % 360;
 800066e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <_CalcAvgDistance+0xc4>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	441a      	add	r2, r3
 800067e:	1211      	asrs	r1, r2, #8
 8000680:	17da      	asrs	r2, r3, #31
 8000682:	1a8a      	subs	r2, r1, r2
 8000684:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9a      	subs	r2, r3, r2
 800068e:	4613      	mov	r3, r2
 8000690:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	4413      	add	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 80006a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	3301      	adds	r3, #1
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	82bb      	strh	r3, [r7, #20]
 80006ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80006b2:	89bb      	ldrh	r3, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	ddda      	ble.n	800066e <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <_CalcAvgDistance+0xc8>)
 80006bc:	fba3 1302 	umull	r1, r3, r3, r2
 80006c0:	1ad2      	subs	r2, r2, r3
 80006c2:	0852      	lsrs	r2, r2, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	089a      	lsrs	r2, r3, #2
 80006c8:	8afb      	ldrh	r3, [r7, #22]
 80006ca:	b2d1      	uxtb	r1, r2
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <_CalcAvgDistance+0xcc>)
 80006ce:	54d1      	strb	r1, [r2, r3]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80006d0:	8afb      	ldrh	r3, [r7, #22]
 80006d2:	3301      	adds	r3, #1
 80006d4:	82fb      	strh	r3, [r7, #22]
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	2b07      	cmp	r3, #7
 80006da:	d9ae      	bls.n	800063a <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <_CalcAvgDistance+0xcc>)
}
 80006de:	4618      	mov	r0, r3
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	b60b60b7 	.word	0xb60b60b7
 80006ec:	24924925 	.word	0x24924925
 80006f0:	200002c4 	.word	0x200002c4

080006f4 <Init_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b095      	sub	sp, #84	; 0x54
 80006f8:	af12      	add	r7, sp, #72	; 0x48
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Init DMA UART to Distances Buffer
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer, 360);
 80006fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000700:	4921      	ldr	r1, [pc, #132]	; (8000788 <Init_Task+0x94>)
 8000702:	4822      	ldr	r0, [pc, #136]	; (800078c <Init_Task+0x98>)
 8000704:	f003 f9f8 	bl	8003af8 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <Init_Task+0x9c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4618      	mov	r0, r3
 8000712:	f004 f81b 	bl	800474c <osMutexAcquire>

	NRF24_begin(hspi1);
 8000716:	4c1f      	ldr	r4, [pc, #124]	; (8000794 <Init_Task+0xa0>)
 8000718:	4668      	mov	r0, sp
 800071a:	f104 0310 	add.w	r3, r4, #16
 800071e:	2248      	movs	r2, #72	; 0x48
 8000720:	4619      	mov	r1, r3
 8000722:	f007 fb47 	bl	8007db4 <memcpy>
 8000726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800072a:	f000 fc29 	bl	8000f80 <NRF24_begin>
	NRF24_setAutoAck(true);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 feea 	bl	8001508 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000734:	2020      	movs	r0, #32
 8000736:	f000 fe47 	bl	80013c8 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 800073a:	f000 fe9b 	bl	8001474 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 800073e:	f000 fe6b 	bl	8001418 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <Init_Task+0xa4>)
 8000744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fdbf 	bl	80012cc <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <Init_Task+0xa4>)
 8000750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000754:	4610      	mov	r0, r2
 8000756:	4619      	mov	r1, r3
 8000758:	f000 fd94 	bl	8001284 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 800075c:	2220      	movs	r2, #32
 800075e:	490f      	ldr	r1, [pc, #60]	; (800079c <Init_Task+0xa8>)
 8000760:	2001      	movs	r0, #1
 8000762:	f001 f810 	bl	8001786 <NRF24_writeAckPayload>
	NRF24_startListening();
 8000766:	f000 fce7 	bl	8001138 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <Init_Task+0x9c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f004 f84a 	bl	8004808 <osMutexRelease>

	/*Add any Inits here*/
	osThreadTerminate(Startup_TaskHandle);
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <Init_Task+0xac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fdbf 	bl	80042fc <osThreadTerminate>

  /* USER CODE END 5 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	20000150 	.word	0x20000150
 800078c:	200000ac 	.word	0x200000ac
 8000790:	20000148 	.word	0x20000148
 8000794:	20000054 	.word	0x20000054
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000138 	.word	0x20000138

080007a4 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <Distance_Calc+0x28>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	2200      	movs	r2, #0
 80007b6:	2101      	movs	r1, #1
 80007b8:	f003 feb8 	bl	800452c <osEventFlagsWait>
		/* TODO : Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <Distance_Calc+0x2c>)
 80007be:	f7ff ff31 	bl	8000624 <_CalcAvgDistance>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <Distance_Calc+0x30>)
 80007c6:	6013      	str	r3, [r2, #0]
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80007c8:	e7f0      	b.n	80007ac <Distance_Calc+0x8>
 80007ca:	bf00      	nop
 80007cc:	2000014c 	.word	0x2000014c
 80007d0:	20000150 	.word	0x20000150
 80007d4:	200002bc 	.word	0x200002bc

080007d8 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007e0:	2311      	movs	r3, #17
 80007e2:	733b      	strb	r3, [r7, #12]
 80007e4:	2301      	movs	r3, #1
 80007e6:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[BACK],
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <Localization+0x88>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	781b      	ldrb	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007ee:	73bb      	strb	r3, [r7, #14]
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <Localization+0x88>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <Localization+0x88>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	799b      	ldrb	r3, [r3, #6]
 80007fe:	743b      	strb	r3, [r7, #16]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <Localization+0x88>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	747b      	strb	r3, [r7, #17]
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <Localization+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79db      	ldrb	r3, [r3, #7]
 800080e:	74bb      	strb	r3, [r7, #18]
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <Localization+0x88>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	74fb      	strb	r3, [r7, #19]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <Localization+0x88>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	753b      	strb	r3, [r7, #20]
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Localization+0x88>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	78db      	ldrb	r3, [r3, #3]
 8000826:	757b      	strb	r3, [r7, #21]
				Obstcales_Detection[FRONT_RIGHT],Obstcales_Detection[FRONT_LEFT],
				Obstcales_Detection[BACK_RIGHT],Obstcales_Detection[BACK_LEFT]
		};

		/* Protect NRF Shared Resuource */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <Localization+0x8c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	4618      	mov	r0, r3
 8000832:	f003 ff8b 	bl	800474c <osMutexAcquire>

		NRF24_stopListening();
 8000836:	f000 fca5 	bl	8001184 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	210a      	movs	r1, #10
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fcab 	bl	800119c <NRF24_write>
		NRF24_startListening();
 8000846:	f000 fc77 	bl	8001138 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <Localization+0x8c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f003 ffda 	bl	8004808 <osMutexRelease>

		osDelay(3000);
 8000854:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000858:	f003 fd90 	bl	800437c <osDelay>
	{
 800085c:	e7c0      	b.n	80007e0 <Localization+0x8>
 800085e:	bf00      	nop
 8000860:	200002bc 	.word	0x200002bc
 8000864:	20000148 	.word	0x20000148

08000868 <Algo_Check>:
 * @retval None
 */

/* USER CODE END Header_Algo_Check */
void Algo_Check(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{

		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <Algo_Check+0x60>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d821      	bhi.n	80008be <Algo_Check+0x56>
		{
			uint8_t ASK_Direction_Frame[3] ={0};
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <Algo_Check+0x64>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	81bb      	strh	r3, [r7, #12]
 8000880:	2300      	movs	r3, #0
 8000882:	73bb      	strb	r3, [r7, #14]

			ASK_Direction_Frame[0] = CAR_ID ;
 8000884:	2311      	movs	r3, #17
 8000886:	733b      	strb	r3, [r7, #12]
			ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000888:	2302      	movs	r3, #2
 800088a:	737b      	strb	r3, [r7, #13]
			ASK_Direction_Frame[2] = Front_Car_ID ;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <Algo_Check+0x68>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	73bb      	strb	r3, [r7, #14]

			/* Protect NRF Shared Resuource */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <Algo_Check+0x6c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f04f 31ff 	mov.w	r1, #4294967295
 800089a:	4618      	mov	r0, r3
 800089c:	f003 ff56 	bl	800474c <osMutexAcquire>

			NRF24_stopListening();
 80008a0:	f000 fc70 	bl	8001184 <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2103      	movs	r1, #3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fc76 	bl	800119c <NRF24_write>
			NRF24_startListening();
 80008b0:	f000 fc42 	bl	8001138 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <Algo_Check+0x6c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 ffa5 	bl	8004808 <osMutexRelease>

		}
		osDelay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c2:	f003 fd5b 	bl	800437c <osDelay>
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 80008c6:	e7d3      	b.n	8000870 <Algo_Check+0x8>
 80008c8:	200002bc 	.word	0x200002bc
 80008cc:	08007e30 	.word	0x08007e30
 80008d0:	200002c0 	.word	0x200002c0
 80008d4:	20000148 	.word	0x20000148

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 ffe1 	bl	80018b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40000800 	.word	0x40000800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_MspInit+0x68>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_MspInit+0x68>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_MspInit+0x68>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_MspInit+0x68>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_MspInit+0x68>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x68>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f001 f8a8 	bl	8001a9a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_MspInit+0x6c>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_MspInit+0x6c>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	40010000 	.word	0x40010000

08000978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_SPI_MspInit+0x88>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d12f      	bne.n	80009f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 800099e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009c8:	23a0      	movs	r3, #160	; 0xa0
 80009ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009dc:	f001 fa76 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009f4:	f001 fa6a 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_UART_MspInit+0xd8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d157      	bne.n	8000adc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_UART_MspInit+0xdc>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <HAL_UART_MspInit+0xe0>)
 8000a72:	f001 fa2b 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <HAL_UART_MspInit+0xe0>)
 8000a8c:	f001 fa1e 	bl	8001ecc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0xe8>)
 8000a94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000ac2:	f001 f815 	bl	8001af0 <HAL_DMA_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000acc:	f7ff ff16 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000ad4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_UART_MspInit+0xe4>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	200000f4 	.word	0x200000f4
 8000af4:	40020058 	.word	0x40020058

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b26:	f107 0210 	add.w	r2, r7, #16
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 ff71 	bl	8002a18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b40:	f001 ff42 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8000b44:	6378      	str	r0, [r7, #52]	; 0x34
 8000b46:	e004      	b.n	8000b52 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b48:	f001 ff3e 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_InitTick+0xec>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	0c9b      	lsrs	r3, r3, #18
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <HAL_InitTick+0xf4>)
 8000b64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000b86:	4818      	ldr	r0, [pc, #96]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b88:	f002 fd1c 	bl	80035c4 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <HAL_InitTick+0xf0>)
 8000b9c:	f002 fd6a 	bl	8003674 <HAL_TIM_Base_Start_IT>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d111      	bne.n	8000bd2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bae:	201e      	movs	r0, #30
 8000bb0:	f000 ff8f 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b0f      	cmp	r3, #15
 8000bb8:	d808      	bhi.n	8000bcc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	201e      	movs	r0, #30
 8000bc0:	f000 ff6b 	bl	8001a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0xf8>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e002      	b.n	8000bd2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3738      	adds	r7, #56	; 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	200002cc 	.word	0x200002cc
 8000bec:	40000800 	.word	0x40000800
 8000bf0:	2000002c 	.word	0x2000002c

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f001 faee 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DMA1_Channel5_IRQHandler+0x10>)
 8000c32:	f001 f817 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000f4 	.word	0x200000f4

08000c40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM4_IRQHandler+0x10>)
 8000c46:	f002 fd67 	bl	8003718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200002cc 	.word	0x200002cc

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff fff8 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c66:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c7c:	4c09      	ldr	r4, [pc, #36]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f007 f86f 	bl	8007d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fa5f 	bl	8000150 <main>
  bx lr
 8000c92:	4770      	bx	lr
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000c9c:	08007f40 	.word	0x08007f40
  ldr r2, =_sbss
 8000ca0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000ca4:	20001a1c 	.word	0x20001a1c

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <NRF24_DelayMicroSeconds+0x38>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <NRF24_DelayMicroSeconds+0x3c>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9a      	lsrs	r2, r3, #18
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000ccc:	bf00      	nop
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	60fa      	str	r2, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1fa      	bne.n	8000cce <NRF24_DelayMicroSeconds+0x22>
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	165e9f81 	.word	0x165e9f81

08000cec <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <NRF24_csn+0x20>
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <NRF24_csn+0x38>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <NRF24_csn+0x3c>)
 8000d00:	8811      	ldrh	r1, [r2, #0]
 8000d02:	2201      	movs	r2, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fa65 	bl	80021d4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000d0a:	e007      	b.n	8000d1c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <NRF24_csn+0x38>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <NRF24_csn+0x3c>)
 8000d12:	8811      	ldrh	r1, [r2, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fa5c 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000328 	.word	0x20000328
 8000d28:	2000032c 	.word	0x2000032c

08000d2c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <NRF24_ce+0x20>
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <NRF24_ce+0x38>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <NRF24_ce+0x3c>)
 8000d40:	8811      	ldrh	r1, [r2, #0]
 8000d42:	2201      	movs	r2, #1
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fa45 	bl	80021d4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000d4a:	e007      	b.n	8000d5c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <NRF24_ce+0x38>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <NRF24_ce+0x3c>)
 8000d52:	8811      	ldrh	r1, [r2, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fa3c 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000328 	.word	0x20000328
 8000d68:	2000032e 	.word	0x2000032e

08000d6c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ffb8 	bl	8000cec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 031f 	and.w	r3, r3, #31
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d86:	f107 010c 	add.w	r1, r7, #12
 8000d8a:	2364      	movs	r3, #100	; 0x64
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <NRF24_read_register+0x4c>)
 8000d90:	f001 ff14 	bl	8002bbc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	1c59      	adds	r1, r3, #1
 8000d9a:	2364      	movs	r3, #100	; 0x64
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <NRF24_read_register+0x4c>)
 8000da0:	f002 f84f 	bl	8002e42 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff9f 	bl	8000cec <NRF24_csn>
	return retData;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000330 	.word	0x20000330

08000dbc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff8d 	bl	8000cec <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000ddc:	f107 010c 	add.w	r1, r7, #12
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	4808      	ldr	r0, [pc, #32]	; (8000e08 <NRF24_read_registerN+0x4c>)
 8000de6:	f001 fee9 	bl	8002bbc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <NRF24_read_registerN+0x4c>)
 8000df4:	f002 f825 	bl	8002e42 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff77 	bl	8000cec <NRF24_csn>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000330 	.word	0x20000330

08000e0c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ff65 	bl	8000cec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000e30:	f107 010c 	add.w	r1, r7, #12
 8000e34:	2364      	movs	r3, #100	; 0x64
 8000e36:	2202      	movs	r2, #2
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <NRF24_write_register+0x40>)
 8000e3a:	f001 febf 	bl	8002bbc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff ff54 	bl	8000cec <NRF24_csn>
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000330 	.word	0x20000330

08000e50 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff43 	bl	8000cec <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000e70:	f107 010c 	add.w	r1, r7, #12
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	2201      	movs	r2, #1
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <NRF24_write_registerN+0x4c>)
 8000e7a:	f001 fe9f 	bl	8002bbc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	6839      	ldr	r1, [r7, #0]
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <NRF24_write_registerN+0x4c>)
 8000e88:	f001 fe98 	bl	8002bbc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff2d 	bl	8000cec <NRF24_csn>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000330 	.word	0x20000330

08000ea0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff1d 	bl	8000cec <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000eb6:	f107 010f 	add.w	r1, r7, #15
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <NRF24_write_payload+0x40>)
 8000ec0:	f001 fe7c 	bl	8002bbc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <NRF24_write_payload+0x40>)
 8000ece:	f001 fe75 	bl	8002bbc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff ff0a 	bl	8000cec <NRF24_csn>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000330 	.word	0x20000330

08000ee4 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000ef0:	f000 fa80 	bl	80013f4 <NRF24_getPayloadSize>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d303      	bcc.n	8000f06 <NRF24_read_payload+0x22>
 8000efe:	f000 fa79 	bl	80013f4 <NRF24_getPayloadSize>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e000      	b.n	8000f08 <NRF24_read_payload+0x24>
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff feee 	bl	8000cec <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000f10:	2361      	movs	r3, #97	; 0x61
 8000f12:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000f14:	f107 010e 	add.w	r1, r7, #14
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <NRF24_read_payload+0x5c>)
 8000f1e:	f001 fe4d 	bl	8002bbc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <NRF24_read_payload+0x5c>)
 8000f2c:	f001 ff89 	bl	8002e42 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff fedb 	bl	8000cec <NRF24_csn>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000330 	.word	0x20000330

08000f44 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000f48:	21ff      	movs	r1, #255	; 0xff
 8000f4a:	20e1      	movs	r0, #225	; 0xe1
 8000f4c:	f7ff ff5e 	bl	8000e0c <NRF24_write_register>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000f58:	21ff      	movs	r1, #255	; 0xff
 8000f5a:	20e2      	movs	r0, #226	; 0xe2
 8000f5c:	f7ff ff56 	bl	8000e0c <NRF24_write_register>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f7ff fefe 	bl	8000d6c <NRF24_read_register>
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 8000f80:	b084      	sub	sp, #16
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f107 0c10 	add.w	ip, r7, #16
 8000f8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000f90:	4b64      	ldr	r3, [pc, #400]	; (8001124 <NRF24_begin+0x1a4>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2258      	movs	r2, #88	; 0x58
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f006 ff0a 	bl	8007db4 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 8000fa0:	4b61      	ldr	r3, [pc, #388]	; (8001128 <NRF24_begin+0x1a8>)
 8000fa2:	4a62      	ldr	r2, [pc, #392]	; (800112c <NRF24_begin+0x1ac>)
 8000fa4:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 8000fa6:	4b62      	ldr	r3, [pc, #392]	; (8001130 <NRF24_begin+0x1b0>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <NRF24_begin+0x1b4>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fe9a 	bl	8000cec <NRF24_csn>
	NRF24_ce(0);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff feb7 	bl	8000d2c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000fbe:	2005      	movs	r0, #5
 8000fc0:	f000 fc92 	bl	80018e8 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff20 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8000fcc:	213f      	movs	r1, #63	; 0x3f
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff ff1c 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff ff18 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8000fdc:	2103      	movs	r1, #3
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f7ff ff14 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f7ff ff10 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8000fec:	2102      	movs	r1, #2
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f7ff ff0c 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f7ff ff08 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8000ffc:	210e      	movs	r1, #14
 8000ffe:	2007      	movs	r0, #7
 8001000:	f7ff ff04 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8001004:	2100      	movs	r1, #0
 8001006:	2008      	movs	r0, #8
 8001008:	f7ff ff00 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 800100c:	2100      	movs	r1, #0
 800100e:	2009      	movs	r0, #9
 8001010:	f7ff fefc 	bl	8000e0c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001014:	23e7      	movs	r3, #231	; 0xe7
 8001016:	713b      	strb	r3, [r7, #4]
 8001018:	23e7      	movs	r3, #231	; 0xe7
 800101a:	70fb      	strb	r3, [r7, #3]
 800101c:	23e7      	movs	r3, #231	; 0xe7
 800101e:	70bb      	strb	r3, [r7, #2]
 8001020:	23e7      	movs	r3, #231	; 0xe7
 8001022:	707b      	strb	r3, [r7, #1]
 8001024:	23e7      	movs	r3, #231	; 0xe7
 8001026:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8001028:	463b      	mov	r3, r7
 800102a:	2205      	movs	r2, #5
 800102c:	4619      	mov	r1, r3
 800102e:	200a      	movs	r0, #10
 8001030:	f7ff ff0e 	bl	8000e50 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001034:	23c2      	movs	r3, #194	; 0xc2
 8001036:	713b      	strb	r3, [r7, #4]
 8001038:	23c2      	movs	r3, #194	; 0xc2
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	23c2      	movs	r3, #194	; 0xc2
 800103e:	70bb      	strb	r3, [r7, #2]
 8001040:	23c2      	movs	r3, #194	; 0xc2
 8001042:	707b      	strb	r3, [r7, #1]
 8001044:	23c2      	movs	r3, #194	; 0xc2
 8001046:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8001048:	463b      	mov	r3, r7
 800104a:	2205      	movs	r2, #5
 800104c:	4619      	mov	r1, r3
 800104e:	200b      	movs	r0, #11
 8001050:	f7ff fefe 	bl	8000e50 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8001054:	21c3      	movs	r1, #195	; 0xc3
 8001056:	200c      	movs	r0, #12
 8001058:	f7ff fed8 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 800105c:	21c4      	movs	r1, #196	; 0xc4
 800105e:	200d      	movs	r0, #13
 8001060:	f7ff fed4 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 8001064:	21c5      	movs	r1, #197	; 0xc5
 8001066:	200e      	movs	r0, #14
 8001068:	f7ff fed0 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 800106c:	21c6      	movs	r1, #198	; 0xc6
 800106e:	200f      	movs	r0, #15
 8001070:	f7ff fecc 	bl	8000e0c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001074:	23e7      	movs	r3, #231	; 0xe7
 8001076:	713b      	strb	r3, [r7, #4]
 8001078:	23e7      	movs	r3, #231	; 0xe7
 800107a:	70fb      	strb	r3, [r7, #3]
 800107c:	23e7      	movs	r3, #231	; 0xe7
 800107e:	70bb      	strb	r3, [r7, #2]
 8001080:	23e7      	movs	r3, #231	; 0xe7
 8001082:	707b      	strb	r3, [r7, #1]
 8001084:	23e7      	movs	r3, #231	; 0xe7
 8001086:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8001088:	463b      	mov	r3, r7
 800108a:	2205      	movs	r2, #5
 800108c:	4619      	mov	r1, r3
 800108e:	2010      	movs	r0, #16
 8001090:	f7ff fede 	bl	8000e50 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 8001094:	2100      	movs	r1, #0
 8001096:	2011      	movs	r0, #17
 8001098:	f7ff feb8 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	2012      	movs	r0, #18
 80010a0:	f7ff feb4 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2013      	movs	r0, #19
 80010a8:	f7ff feb0 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2014      	movs	r0, #20
 80010b0:	f7ff feac 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 80010b4:	2100      	movs	r1, #0
 80010b6:	2015      	movs	r0, #21
 80010b8:	f7ff fea8 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 80010bc:	2100      	movs	r1, #0
 80010be:	2016      	movs	r0, #22
 80010c0:	f7ff fea4 	bl	8000e0c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80010c4:	f000 fbc4 	bl	8001850 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 80010c8:	2100      	movs	r1, #0
 80010ca:	201c      	movs	r0, #28
 80010cc:	f7ff fe9e 	bl	8000e0c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	201d      	movs	r0, #29
 80010d4:	f7ff fe9a 	bl	8000e0c <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80010d8:	210f      	movs	r1, #15
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f944 	bl	8001368 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 fa26 	bl	8001532 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fa5c 	bl	80015a4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 fa9f 	bl	8001630 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80010f2:	f000 f9f1 	bl	80014d8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80010f6:	2020      	movs	r0, #32
 80010f8:	f000 f966 	bl	80013c8 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 80010fc:	f000 fac0 	bl	8001680 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001100:	f000 fb9e 	bl	8001840 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001104:	204c      	movs	r0, #76	; 0x4c
 8001106:	f000 f94a 	bl	800139e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800110a:	f7ff ff1b 	bl	8000f44 <NRF24_flush_tx>
	NRF24_flush_rx();
 800110e:	f7ff ff21 	bl	8000f54 <NRF24_flush_rx>

	NRF24_powerDown();
 8001112:	f000 faca 	bl	80016aa <NRF24_powerDown>

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr
 8001124:	20000330 	.word	0x20000330
 8001128:	20000328 	.word	0x20000328
 800112c:	40010800 	.word	0x40010800
 8001130:	2000032c 	.word	0x2000032c
 8001134:	2000032e 	.word	0x2000032e

08001138 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe15 	bl	8000d6c <NRF24_read_register>
 8001142:	4603      	mov	r3, r0
 8001144:	f043 0303 	orr.w	r3, r3, #3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fe5d 	bl	8000e0c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <NRF24_startListening+0x48>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	4313      	orrs	r3, r2
 800115a:	d004      	beq.n	8001166 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800115c:	2205      	movs	r2, #5
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <NRF24_startListening+0x48>)
 8001160:	200a      	movs	r0, #10
 8001162:	f7ff fe75 	bl	8000e50 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8001166:	f7ff feed 	bl	8000f44 <NRF24_flush_tx>
	NRF24_flush_rx();
 800116a:	f7ff fef3 	bl	8000f54 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff fddc 	bl	8000d2c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001174:	2096      	movs	r0, #150	; 0x96
 8001176:	f7ff fd99 	bl	8000cac <NRF24_DelayMicroSeconds>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000318 	.word	0x20000318

08001184 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fdcf 	bl	8000d2c <NRF24_ce>
	NRF24_flush_tx();
 800118e:	f7ff fed9 	bl	8000f44 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001192:	f7ff fedf 	bl	8000f54 <NRF24_flush_rx>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80011a8:	f000 fb4a 	bl	8001840 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fab9 	bl	8001728 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80011b6:	f000 fb8d 	bl	80018d4 <HAL_GetTick>
 80011ba:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80011bc:	230a      	movs	r3, #10
 80011be:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80011c0:	f107 030d 	add.w	r3, r7, #13
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	2008      	movs	r0, #8
 80011ca:	f7ff fdf7 	bl	8000dbc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80011ce:	f7ff fec9 	bl	8000f64 <NRF24_get_status>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <NRF24_write+0x54>
 80011e0:	f000 fb78 	bl	80018d4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8e7      	bhi.n	80011c0 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80011f0:	f107 010b 	add.w	r1, r7, #11
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <NRF24_write+0x90>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 faed 	bl	80017da <NRF24_whatHappened>
	retStatus = tx_ok;
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <NRF24_write+0x90>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800120c:	f000 f8fc 	bl	8001408 <NRF24_getDynamicPayloadSize>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <NRF24_write+0x94>)
 8001216:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001218:	f000 f80c 	bl	8001234 <NRF24_available>
	NRF24_flush_tx();
 800121c:	f7ff fe92 	bl	8000f44 <NRF24_flush_tx>
	return retStatus;
 8001220:	7bbb      	ldrb	r3, [r7, #14]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000320 	.word	0x20000320
 8001230:	20000321 	.word	0x20000321

08001234 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fa45 	bl	80016c8 <NRF24_availablePipe>
 800123e:	4603      	mov	r3, r0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}

08001244 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe45 	bl	8000ee4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800125a:	2017      	movs	r0, #23
 800125c:	f7ff fd86 	bl	8000d6c <NRF24_read_register>
 8001260:	4603      	mov	r3, r0
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001268:	f7ff fe74 	bl	8000f54 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800126c:	f000 f8cc 	bl	8001408 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800128e:	463b      	mov	r3, r7
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fddb 	bl	8000e50 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800129a:	463b      	mov	r3, r7
 800129c:	2205      	movs	r2, #5
 800129e:	4619      	mov	r1, r3
 80012a0:	2010      	movs	r0, #16
 80012a2:	f7ff fdd5 	bl	8000e50 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80012a6:	2320      	movs	r3, #32
 80012a8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <NRF24_openWritingPipe+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf28      	it	cs
 80012b4:	4613      	movcs	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	2011      	movs	r0, #17
 80012bc:	f7ff fda6 	bl	8000e0c <NRF24_write_register>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000322 	.word	0x20000322

080012cc <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4601      	mov	r1, r0
 80012d4:	e9c7 2300 	strd	r2, r3, [r7]
 80012d8:	460b      	mov	r3, r1
 80012da:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d104      	bne.n	80012ec <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80012e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e6:	491c      	ldr	r1, [pc, #112]	; (8001358 <NRF24_openReadingPipe+0x8c>)
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d82d      	bhi.n	800134e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d808      	bhi.n	800130a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <NRF24_openReadingPipe+0x90>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	4639      	mov	r1, r7
 8001300:	2205      	movs	r2, #5
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fda4 	bl	8000e50 <NRF24_write_registerN>
 8001308:	e007      	b.n	800131a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <NRF24_openReadingPipe+0x90>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	4639      	mov	r1, r7
 8001312:	2201      	movs	r2, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd9b 	bl	8000e50 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4a10      	ldr	r2, [pc, #64]	; (8001360 <NRF24_openReadingPipe+0x94>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	4a10      	ldr	r2, [pc, #64]	; (8001364 <NRF24_openReadingPipe+0x98>)
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd70 	bl	8000e0c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff fd1d 	bl	8000d6c <NRF24_read_register>
 8001332:	4603      	mov	r3, r0
 8001334:	b25a      	sxtb	r2, r3
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff fd5f 	bl	8000e0c <NRF24_write_register>
	}

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000318 	.word	0x20000318
 800135c:	08007f14 	.word	0x08007f14
 8001360:	08007f1c 	.word	0x08007f1c
 8001364:	20000322 	.word	0x20000322

08001368 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	b25a      	sxtb	r2, r3
 800137e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25b      	sxtb	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff fd3b 	bl	8000e0c <NRF24_write_register>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80013a8:	237f      	movs	r3, #127	; 0x7f
 80013aa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	bf28      	it	cs
 80013b4:	4613      	movcs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff fd26 	bl	8000e0c <NRF24_write_register>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80013d2:	2320      	movs	r3, #32
 80013d4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4293      	cmp	r3, r2
 80013dc:	bf28      	it	cs
 80013de:	4613      	movcs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <NRF24_setPayloadSize+0x28>)
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000322 	.word	0x20000322

080013f4 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	return payload_size;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <NRF24_getPayloadSize+0x10>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000322 	.word	0x20000322

08001408 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800140c:	2060      	movs	r0, #96	; 0x60
 800140e:	f7ff fcad 	bl	8000d6c <NRF24_read_register>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}

08001418 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800141c:	201d      	movs	r0, #29
 800141e:	f7ff fca5 	bl	8000d6c <NRF24_read_register>
 8001422:	4603      	mov	r3, r0
 8001424:	f043 0306 	orr.w	r3, r3, #6
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	201d      	movs	r0, #29
 800142e:	f7ff fced 	bl	8000e0c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001432:	201d      	movs	r0, #29
 8001434:	f7ff fc9a 	bl	8000d6c <NRF24_read_register>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800143e:	f000 fa07 	bl	8001850 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001442:	201d      	movs	r0, #29
 8001444:	f7ff fc92 	bl	8000d6c <NRF24_read_register>
 8001448:	4603      	mov	r3, r0
 800144a:	f043 0306 	orr.w	r3, r3, #6
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	201d      	movs	r0, #29
 8001454:	f7ff fcda 	bl	8000e0c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001458:	201c      	movs	r0, #28
 800145a:	f7ff fc87 	bl	8000d6c <NRF24_read_register>
 800145e:	4603      	mov	r3, r0
 8001460:	f043 0303 	orr.w	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4619      	mov	r1, r3
 8001468:	201c      	movs	r0, #28
 800146a:	f7ff fccf 	bl	8000e0c <NRF24_write_register>
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001478:	201d      	movs	r0, #29
 800147a:	f7ff fc77 	bl	8000d6c <NRF24_read_register>
 800147e:	4603      	mov	r3, r0
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	201d      	movs	r0, #29
 800148a:	f7ff fcbf 	bl	8000e0c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800148e:	201d      	movs	r0, #29
 8001490:	f7ff fc6c 	bl	8000d6c <NRF24_read_register>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800149a:	f000 f9d9 	bl	8001850 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800149e:	201d      	movs	r0, #29
 80014a0:	f7ff fc64 	bl	8000d6c <NRF24_read_register>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	201d      	movs	r0, #29
 80014b0:	f7ff fcac 	bl	8000e0c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80014b4:	201c      	movs	r0, #28
 80014b6:	f7ff fc59 	bl	8000d6c <NRF24_read_register>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	201c      	movs	r0, #28
 80014c6:	f7ff fca1 	bl	8000e0c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80014ca:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <NRF24_enableDynamicPayloads+0x60>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000323 	.word	0x20000323

080014d8 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80014dc:	201d      	movs	r0, #29
 80014de:	f7ff fc45 	bl	8000d6c <NRF24_read_register>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	201d      	movs	r0, #29
 80014ee:	f7ff fc8d 	bl	8000e0c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	201c      	movs	r0, #28
 80014f6:	f7ff fc89 	bl	8000e0c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80014fa:	4b02      	ldr	r3, [pc, #8]	; (8001504 <NRF24_disableDynamicPayloads+0x2c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000323 	.word	0x20000323

08001508 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001518:	213f      	movs	r1, #63	; 0x3f
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fc76 	bl	8000e0c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001520:	e003      	b.n	800152a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001522:	2100      	movs	r1, #0
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fc71 	bl	8000e0c <NRF24_write_register>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800153c:	2006      	movs	r0, #6
 800153e:	f7ff fc15 	bl	8000d6c <NRF24_read_register>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f023 0306 	bic.w	r3, r3, #6
 800154c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d104      	bne.n	800155e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0306 	orr.w	r3, r3, #6
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e019      	b.n	8001592 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d104      	bne.n	800156e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e011      	b.n	8001592 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d104      	bne.n	800157e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e009      	b.n	8001592 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d103      	bne.n	8001592 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f043 0306 	orr.w	r3, r3, #6
 8001590:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4619      	mov	r1, r3
 8001596:	2006      	movs	r0, #6
 8001598:	f7ff fc38 	bl	8000e0c <NRF24_write_register>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80015b2:	2006      	movs	r0, #6
 80015b4:	f7ff fbda 	bl	8000d6c <NRF24_read_register>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <NRF24_setDataRate+0x88>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80015c8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d107      	bne.n	80015e0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <NRF24_setDataRate+0x88>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	e00d      	b.n	80015fc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <NRF24_setDataRate+0x88>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80015ec:	7bbb      	ldrb	r3, [r7, #14]
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	73bb      	strb	r3, [r7, #14]
 80015f4:	e002      	b.n	80015fc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <NRF24_setDataRate+0x88>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	4619      	mov	r1, r3
 8001600:	2006      	movs	r0, #6
 8001602:	f7ff fc03 	bl	8000e0c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001606:	2006      	movs	r0, #6
 8001608:	f7ff fbb0 	bl	8000d6c <NRF24_read_register>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	4293      	cmp	r3, r2
 8001614:	d102      	bne.n	800161c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e002      	b.n	8001622 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <NRF24_setDataRate+0x88>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000324 	.word	0x20000324

08001630 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fb96 	bl	8000d6c <NRF24_read_register>
 8001640:	4603      	mov	r3, r0
 8001642:	f023 030c 	bic.w	r3, r3, #12
 8001646:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00f      	beq.n	800166e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d104      	bne.n	800165e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e007      	b.n	800166e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	4619      	mov	r1, r3
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fbca 	bl	8000e0c <NRF24_write_register>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fb70 	bl	8000d6c <NRF24_read_register>
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001696:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4619      	mov	r1, r3
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fbb5 	bl	8000e0c <NRF24_write_register>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fb5c 	bl	8000d6c <NRF24_read_register>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f023 0302 	bic.w	r3, r3, #2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fba4 	bl	8000e0c <NRF24_write_register>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80016d0:	f7ff fc48 	bl	8000f64 <NRF24_get_status>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	73bb      	strb	r3, [r7, #14]

  if (result)
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d017      	beq.n	800171e <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	2007      	movs	r0, #7
 8001708:	f7ff fb80 	bl	8000e0c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001716:	2120      	movs	r1, #32
 8001718:	2007      	movs	r0, #7
 800171a:	f7ff fb77 	bl	8000e0c <NRF24_write_register>
    }
  }
  return result;
 800171e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff faf9 	bl	8000d2c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fb16 	bl	8000d6c <NRF24_read_register>
 8001740:	4603      	mov	r3, r0
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fb5b 	bl	8000e0c <NRF24_write_register>
  NRF24_ce(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fae8 	bl	8000d2c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800175c:	2096      	movs	r0, #150	; 0x96
 800175e:	f7ff faa5 	bl	8000cac <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fb9a 	bl	8000ea0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fadd 	bl	8000d2c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001772:	200f      	movs	r0, #15
 8001774:	f7ff fa9a 	bl	8000cac <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fad7 	bl	8000d2c <NRF24_ce>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	6039      	str	r1, [r7, #0]
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	4613      	mov	r3, r2
 8001794:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800179a:	2320      	movs	r3, #32
 800179c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800179e:	7afa      	ldrb	r2, [r7, #11]
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	bf28      	it	cs
 80017a6:	4613      	movcs	r3, r2
 80017a8:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fa9e 	bl	8000cec <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f063 0357 	orn	r3, r3, #87	; 0x57
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	7aba      	ldrb	r2, [r7, #10]
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb42 	bl	8000e50 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fa8d 	bl	8000cec <NRF24_csn>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80017e6:	f7ff fbbd 	bl	8000f64 <NRF24_get_status>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80017f4:	2170      	movs	r1, #112	; 0x70
 80017f6:	2007      	movs	r0, #7
 80017f8:	f7ff fb08 	bl	8000e0c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2da      	uxtb	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	701a      	strb	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001844:	2170      	movs	r1, #112	; 0x70
 8001846:	2007      	movs	r0, #7
 8001848:	f7ff fae0 	bl	8000e0c <NRF24_write_register>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fa48 	bl	8000cec <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800185c:	2350      	movs	r3, #80	; 0x50
 800185e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001860:	2373      	movs	r3, #115	; 0x73
 8001862:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001864:	1d39      	adds	r1, r7, #4
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2202      	movs	r2, #2
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <NRF24_ACTIVATE_cmd+0x30>)
 800186c:	f001 f9a6 	bl	8002bbc <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fa3b 	bl	8000cec <NRF24_csn>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000330 	.word	0x20000330

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f8f5 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f7ff f92c 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff f832 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000030 	.word	0x20000030
 80018d0:	20000388 	.word	0x20000388

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000388 	.word	0x20000388

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffe0 	bl	80018d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000030 	.word	0x20000030

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <__NVIC_EnableIRQ+0x34>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff4f 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff64 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ffb2 	bl	8001a20 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff81 	bl	80019cc <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff57 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e043      	b.n	8001b8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_DMA_Init+0xa8>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_DMA_Init+0xac>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	009a      	lsls	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_DMA_Init+0xb0>)
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	bffdfff8 	.word	0xbffdfff8
 8001b9c:	cccccccd 	.word	0xcccccccd
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Start_IT+0x20>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e04b      	b.n	8001c5c <HAL_DMA_Start_IT+0xb8>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d13a      	bne.n	8001c4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f937 	bl	8001e70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 020e 	orr.w	r2, r2, #14
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e00f      	b.n	8001c3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 020a 	orr.w	r2, r2, #10
 8001c3a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e005      	b.n	8001c5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	2204      	movs	r2, #4
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d04f      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xc8>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d04a      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <HAL_DMA_IRQHandler+0x1f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d029      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xae>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <HAL_DMA_IRQHandler+0x1f4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d022      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xaa>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_DMA_IRQHandler+0x1f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xa4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <HAL_DMA_IRQHandler+0x1fc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d012      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x9e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_DMA_IRQHandler+0x200>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x98>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_DMA_IRQHandler+0x204>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d102      	bne.n	8001cf6 <HAL_DMA_IRQHandler+0x92>
 8001cf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001cf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cfa:	e00b      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001cfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d00:	e008      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001d02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0c:	e002      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001d0e:	2340      	movs	r3, #64	; 0x40
 8001d10:	e000      	b.n	8001d14 <HAL_DMA_IRQHandler+0xb0>
 8001d12:	2304      	movs	r3, #4
 8001d14:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_DMA_IRQHandler+0x208>)
 8001d16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8094 	beq.w	8001e4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d2a:	e08e      	b.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	2202      	movs	r2, #2
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d056      	beq.n	8001dea <HAL_DMA_IRQHandler+0x186>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d051      	beq.n	8001dea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020a 	bic.w	r2, r2, #10
 8001d62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_DMA_IRQHandler+0x1f0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d029      	beq.n	8001dca <HAL_DMA_IRQHandler+0x166>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <HAL_DMA_IRQHandler+0x1f4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x162>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <HAL_DMA_IRQHandler+0x1f8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01a      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x15c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_DMA_IRQHandler+0x1fc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d012      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a32      	ldr	r2, [pc, #200]	; (8001e64 <HAL_DMA_IRQHandler+0x200>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00a      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x150>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <HAL_DMA_IRQHandler+0x204>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d102      	bne.n	8001dae <HAL_DMA_IRQHandler+0x14a>
 8001da8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dac:	e00e      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db2:	e00b      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	e008      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbe:	e005      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	e002      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e000      	b.n	8001dcc <HAL_DMA_IRQHandler+0x168>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_DMA_IRQHandler+0x208>)
 8001dce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d034      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001de8:	e02f      	b.n	8001e4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2208      	movs	r2, #8
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d028      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x1e8>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 020e 	bic.w	r2, r2, #14
 8001e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
    }
  }
  return;
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
}
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40020008 	.word	0x40020008
 8001e58:	4002001c 	.word	0x4002001c
 8001e5c:	40020030 	.word	0x40020030
 8001e60:	40020044 	.word	0x40020044
 8001e64:	40020058 	.word	0x40020058
 8001e68:	4002006c 	.word	0x4002006c
 8001e6c:	40020000 	.word	0x40020000

08001e70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d108      	bne.n	8001eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eae:	e007      	b.n	8001ec0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e169      	b.n	80021b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8158 	bne.w	80021ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a9a      	ldr	r2, [pc, #616]	; (800216c <HAL_GPIO_Init+0x2a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d05e      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f08:	4a98      	ldr	r2, [pc, #608]	; (800216c <HAL_GPIO_Init+0x2a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d875      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f0e:	4a98      	ldr	r2, [pc, #608]	; (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d058      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f14:	4a96      	ldr	r2, [pc, #600]	; (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d86f      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f1a:	4a96      	ldr	r2, [pc, #600]	; (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d052      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f20:	4a94      	ldr	r2, [pc, #592]	; (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d869      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f26:	4a94      	ldr	r2, [pc, #592]	; (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04c      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d863      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f32:	4a92      	ldr	r2, [pc, #584]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d046      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d85d      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d82a      	bhi.n	8001f98 <HAL_GPIO_Init+0xcc>
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d859      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_GPIO_Init+0x80>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fa1 	.word	0x08001fa1
 8001f54:	08001fb3 	.word	0x08001fb3
 8001f58:	08001ff5 	.word	0x08001ff5
 8001f5c:	08001ffb 	.word	0x08001ffb
 8001f60:	08001ffb 	.word	0x08001ffb
 8001f64:	08001ffb 	.word	0x08001ffb
 8001f68:	08001ffb 	.word	0x08001ffb
 8001f6c:	08001ffb 	.word	0x08001ffb
 8001f70:	08001ffb 	.word	0x08001ffb
 8001f74:	08001ffb 	.word	0x08001ffb
 8001f78:	08001ffb 	.word	0x08001ffb
 8001f7c:	08001ffb 	.word	0x08001ffb
 8001f80:	08001ffb 	.word	0x08001ffb
 8001f84:	08001ffb 	.word	0x08001ffb
 8001f88:	08001ffb 	.word	0x08001ffb
 8001f8c:	08001ffb 	.word	0x08001ffb
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_GPIO_Init+0x2b4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9e:	e02c      	b.n	8001ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e029      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e024      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e01f      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e01a      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e013      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	611a      	str	r2, [r3, #16]
          break;
 8001fe6:	e009      	b.n	8001ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	615a      	str	r2, [r3, #20]
          break;
 8001ff2:	e003      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          break;
 8001ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d801      	bhi.n	8002006 <HAL_GPIO_Init+0x13a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e001      	b.n	800200a <HAL_GPIO_Init+0x13e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d802      	bhi.n	8002018 <HAL_GPIO_Init+0x14c>
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x152>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b08      	subs	r3, #8
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	210f      	movs	r1, #15
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80b1 	beq.w	80021ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204c:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002064:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_GPIO_Init+0x2bc>)
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a40      	ldr	r2, [pc, #256]	; (800218c <HAL_GPIO_Init+0x2c0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_GPIO_Init+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00d      	beq.n	80020b4 <HAL_GPIO_Init+0x1e8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_GPIO_Init+0x2c8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <HAL_GPIO_Init+0x1e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_GPIO_Init+0x1e0>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e004      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b8:	2300      	movs	r3, #0
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ca:	492f      	ldr	r1, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x2bc>)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	492c      	ldr	r1, [pc, #176]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4928      	ldr	r1, [pc, #160]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	491e      	ldr	r1, [pc, #120]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4918      	ldr	r1, [pc, #96]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4914      	ldr	r1, [pc, #80]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d021      	beq.n	80021a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e021      	b.n	80021ae <HAL_GPIO_Init+0x2e2>
 800216a:	bf00      	nop
 800216c:	10320000 	.word	0x10320000
 8002170:	10310000 	.word	0x10310000
 8002174:	10220000 	.word	0x10220000
 8002178:	10210000 	.word	0x10210000
 800217c:	10120000 	.word	0x10120000
 8002180:	10110000 	.word	0x10110000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_GPIO_Init+0x304>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4909      	ldr	r1, [pc, #36]	; (80021d0 <HAL_GPIO_Init+0x304>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f ae8e 	bne.w	8001ee0 <HAL_GPIO_Init+0x14>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	372c      	adds	r7, #44	; 0x2c
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f90c 	bl	8000440 <HAL_GPIO_EXTI_Callback>
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e272      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x12c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e24c      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x76>
 800229c:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xbc>
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fae0 	bl	80018d4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fadc 	bl	80018d4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e200      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe4>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff facc 	bl	80018d4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fac8 	bl	80018d4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1ec      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x10c>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c0      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fa81 	bl	80018d4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff fa7d 	bl	80018d4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fa60 	bl	80018d4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff fa5c 	bl	80018d4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e180      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d019      	beq.n	800247e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fa40 	bl	80018d4 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fa3c 	bl	80018d4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e160      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fafe 	bl	8002a78 <RCC_Delay>
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7ff fa26 	bl	80018d4 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff fa22 	bl	80018d4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e146      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	42420000 	.word	0x42420000
 80024a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a6 	beq.w	8002612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff f9e3 	bl	80018d4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7ff f9df 	bl	80018d4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e103      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b75      	ldr	r3, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x334>
 800254e:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x356>
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff f993 	bl	80018d4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7ff f98f 	bl	80018d4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0b1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x37e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f97d 	bl	80018d4 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7ff f979 	bl	80018d4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e09b      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d061      	beq.n	80026ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff f94d 	bl	80018d4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff f949 	bl	80018d4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e06d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4921      	ldr	r1, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a19      	ldr	r1, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	430b      	orrs	r3, r1
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff f91d 	bl	80018d4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7ff f919 	bl	80018d4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
 80026bc:	e035      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f906 	bl	80018d4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff f902 	bl	80018d4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e026      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x498>
 80026ea:	e01e      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e019      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x500>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d0      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4965      	ldr	r1, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e073      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7ff f854 	bl	80018d4 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7ff f850 	bl	80018d4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e053      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d210      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f906 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	08007efc 	.word	0x08007efc
 8002904:	20000028 	.word	0x20000028
 8002908:	2000002c 	.word	0x2000002c

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e027      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	e027      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0c5b      	lsrs	r3, r3, #17
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	fb03 f202 	mul.w	r2, r3, r2
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e004      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	693b      	ldr	r3, [r7, #16]
}
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08007f24 	.word	0x08007f24
 80029ac:	08007f34 	.word	0x08007f34
 80029b0:	003d0900 	.word	0x003d0900

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	20000028 	.word	0x20000028

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff2 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08007f0c 	.word	0x08007f0c

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0adb      	lsrs	r3, r3, #11
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08007f0c 	.word	0x08007f0c

08002a18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	220f      	movs	r2, #15
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_GetClockConfig+0x58>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_RCC_GetClockConfig+0x58>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_GetClockConfig+0x58>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_RCC_GetClockConfig+0x58>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0207 	and.w	r2, r3, #7
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40022000 	.word	0x40022000

08002a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <RCC_Delay+0x34>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <RCC_Delay+0x38>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a94:	bf00      	nop
  }
  while (Delay --);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	60fa      	str	r2, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <RCC_Delay+0x1c>
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000028 	.word	0x20000028
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e076      	b.n	8002bb4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad6:	d009      	beq.n	8002aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
 8002ade:	e005      	b.n	8002aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fd ff36 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	0c1a      	lsrs	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f002 0204 	and.w	r2, r2, #4
 8002b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_SPI_Transmit+0x22>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e12d      	b.n	8002e3a <HAL_SPI_Transmit+0x27e>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be6:	f7fe fe75 	bl	80018d4 <HAL_GetTick>
 8002bea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d002      	beq.n	8002c02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c00:	e116      	b.n	8002e30 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_SPI_Transmit+0x52>
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c12:	e10d      	b.n	8002e30 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2203      	movs	r2, #3
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5a:	d10f      	bne.n	8002c7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d007      	beq.n	8002c9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca2:	d14f      	bne.n	8002d44 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_Transmit+0xf6>
 8002cac:	8afb      	ldrh	r3, [r7, #22]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d142      	bne.n	8002d38 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	1c9a      	adds	r2, r3, #2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cd6:	e02f      	b.n	8002d38 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d112      	bne.n	8002d0c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	881a      	ldrh	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d0a:	e015      	b.n	8002d38 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0c:	f7fe fde2 	bl	80018d4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d803      	bhi.n	8002d24 <HAL_SPI_Transmit+0x168>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Transmit+0x16e>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d36:	e07b      	b.n	8002e30 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ca      	bne.n	8002cd8 <HAL_SPI_Transmit+0x11c>
 8002d42:	e050      	b.n	8002de6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit+0x196>
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d144      	bne.n	8002ddc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d78:	e030      	b.n	8002ddc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d113      	bne.n	8002db0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dae:	e015      	b.n	8002ddc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db0:	f7fe fd90 	bl	80018d4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d803      	bhi.n	8002dc8 <HAL_SPI_Transmit+0x20c>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d102      	bne.n	8002dce <HAL_SPI_Transmit+0x212>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dda:	e029      	b.n	8002e30 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1c9      	bne.n	8002d7a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fbcc 	bl	8003588 <SPI_EndRxTxTransaction>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e003      	b.n	8002e30 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e66:	e0fb      	b.n	8003060 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e70:	d112      	bne.n	8002e98 <HAL_SPI_Receive+0x56>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f8ef 	bl	8003072 <HAL_SPI_TransmitReceive>
 8002e94:	4603      	mov	r3, r0
 8002e96:	e0e8      	b.n	800306a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_SPI_Receive+0x64>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0e1      	b.n	800306a <HAL_SPI_Receive+0x228>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eae:	f7fe fd11 	bl	80018d4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Receive+0x7e>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ec4:	e0cc      	b.n	8003060 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	d10f      	bne.n	8002f2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d007      	beq.n	8002f4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d16a      	bne.n	800302a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f54:	e032      	b.n	8002fbc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d115      	bne.n	8002f90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f103 020c 	add.w	r2, r3, #12
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f8e:	e015      	b.n	8002fbc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f90:	f7fe fca0 	bl	80018d4 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d803      	bhi.n	8002fa8 <HAL_SPI_Receive+0x166>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d102      	bne.n	8002fae <HAL_SPI_Receive+0x16c>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fba:	e051      	b.n	8003060 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1c7      	bne.n	8002f56 <HAL_SPI_Receive+0x114>
 8002fc6:	e035      	b.n	8003034 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d113      	bne.n	8002ffe <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ffc:	e015      	b.n	800302a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffe:	f7fe fc69 	bl	80018d4 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d803      	bhi.n	8003016 <HAL_SPI_Receive+0x1d4>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d102      	bne.n	800301c <HAL_SPI_Receive+0x1da>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003028:	e01a      	b.n	8003060 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1c9      	bne.n	8002fc8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fa53 	bl	80034e4 <SPI_EndRxTransaction>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
 8003056:	e003      	b.n	8003060 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b08c      	sub	sp, #48	; 0x30
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003080:	2301      	movs	r3, #1
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x26>
 8003094:	2302      	movs	r3, #2
 8003096:	e198      	b.n	80033ca <HAL_SPI_TransmitReceive+0x358>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a0:	f7fe fc18 	bl	80018d4 <HAL_GetTick>
 80030a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d00f      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x70>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c8:	d107      	bne.n	80030da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_SPI_TransmitReceive+0x68>
 80030d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d003      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030e0:	e16d      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x82>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x82>
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fa:	e160      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b04      	cmp	r3, #4
 8003106:	d003      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2205      	movs	r2, #5
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	887a      	ldrh	r2, [r7, #2]
 8003126:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	887a      	ldrh	r2, [r7, #2]
 8003132:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d007      	beq.n	8003164 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316c:	d17c      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_SPI_TransmitReceive+0x10a>
 8003176:	8b7b      	ldrh	r3, [r7, #26]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d16a      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	1c9a      	adds	r2, r3, #2
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a0:	e057      	b.n	8003252 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d11b      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x176>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x176>
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d113      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d119      	bne.n	800322a <HAL_SPI_TransmitReceive+0x1b8>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	b292      	uxth	r2, r2
 800320c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003226:	2301      	movs	r3, #1
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800322a:	f7fe fb53 	bl	80018d4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003236:	429a      	cmp	r2, r3
 8003238:	d80b      	bhi.n	8003252 <HAL_SPI_TransmitReceive+0x1e0>
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d007      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003250:	e0b5      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1a2      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x130>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d19d      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x130>
 8003266:	e080      	b.n	800336a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x204>
 8003270:	8b7b      	ldrh	r3, [r7, #26]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d16f      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329c:	e05b      	b.n	8003356 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d11c      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x274>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x274>
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d114      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d119      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x2b6>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d014      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003324:	2301      	movs	r3, #1
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003328:	f7fe fad4 	bl	80018d4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003334:	429a      	cmp	r2, r3
 8003336:	d803      	bhi.n	8003340 <HAL_SPI_TransmitReceive+0x2ce>
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d102      	bne.n	8003346 <HAL_SPI_TransmitReceive+0x2d4>
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003354:	e033      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d19e      	bne.n	800329e <HAL_SPI_TransmitReceive+0x22c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d199      	bne.n	800329e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f90a 	bl	8003588 <SPI_EndRxTxTransaction>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003386:	e01a      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b4:	e003      	b.n	80033be <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033e4:	f7fe fa76 	bl	80018d4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033f4:	f7fe fa6e 	bl	80018d4 <HAL_GetTick>
 80033f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	015b      	lsls	r3, r3, #5
 8003400:	0d1b      	lsrs	r3, r3, #20
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340a:	e054      	b.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d050      	beq.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003414:	f7fe fa5e 	bl	80018d4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	d902      	bls.n	800342a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d13d      	bne.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003442:	d111      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d004      	beq.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d107      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d10f      	bne.n	8003492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e017      	b.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d19b      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000028 	.word	0x20000028

080034e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f8:	d111      	bne.n	800351e <SPI_EndRxTransaction+0x3a>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003502:	d004      	beq.n	800350e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d107      	bne.n	800351e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003526:	d117      	bne.n	8003558 <SPI_EndRxTransaction+0x74>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d112      	bne.n	8003558 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	2101      	movs	r1, #1
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff49 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01a      	beq.n	800357e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e013      	b.n	8003580 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ff36 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e000      	b.n	8003580 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2200      	movs	r2, #0
 800359c:	2180      	movs	r1, #128	; 0x80
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ff18 	bl	80033d4 <SPI_WaitFlagStateUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e000      	b.n	80035bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e041      	b.n	800365a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f839 	bl	8003662 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 f9b4 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d001      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e03a      	b.n	8003702 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_Start_IT+0x98>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_TIM_Base_Start_IT+0x9c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x58>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_TIM_Base_Start_IT+0xa0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	e007      	b.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8ed 	bl	800393a <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8e0 	bl	8003928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8ef 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0204 	mvn.w	r2, #4
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8c3 	bl	800393a <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8b6 	bl	8003928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8c5 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f899 	bl	800393a <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f88c 	bl	8003928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f89b 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f86f 	bl	800393a <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f862 	bl	8003928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f871 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd f81e 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8bf 	bl	8003a46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d10e      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f835 	bl	800395e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b20      	cmp	r3, #32
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0220 	mvn.w	r2, #32
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f88a 	bl	8003a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d007      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e042      	b.n	8003af0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fc ffc4 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa8f 	bl	8003fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d112      	bne.n	8003b38 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Receive_DMA+0x26>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00b      	b.n	8003b3a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f922 	bl	8003d78 <UART_Start_Receive_DMA>
 8003b34:	4603      	mov	r3, r0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b09c      	sub	sp, #112	; 0x70
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d172      	bne.n	8003c7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	623b      	str	r3, [r7, #32]
   return(result);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c26:	633a      	str	r2, [r7, #48]	; 0x30
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d119      	bne.n	8003c7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f023 0310 	bic.w	r3, r3, #16
 8003c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c6a:	61fa      	str	r2, [r7, #28]
 8003c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	617b      	str	r3, [r7, #20]
   return(result);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e5      	bne.n	8003c4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	2200      	movs	r2, #0
 8003c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c90:	4619      	mov	r1, r3
 8003c92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c94:	f7ff ff67 	bl	8003b66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c98:	e002      	b.n	8003ca0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c9c:	f7fc fcb2 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8003ca0:	bf00      	nop
 8003ca2:	3770      	adds	r7, #112	; 0x70
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff ff49 	bl	8003b66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cd4:	e002      	b.n	8003cdc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff ff33 	bl	8003b42 <HAL_UART_RxHalfCpltCallback>
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d108      	bne.n	8003d2a <UART_DMAError+0x46>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d24:	68b8      	ldr	r0, [r7, #8]
 8003d26:	f000 f8c1 	bl	8003eac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b22      	cmp	r3, #34	; 0x22
 8003d4a:	d108      	bne.n	8003d5e <UART_DMAError+0x7a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d58:	68b8      	ldr	r0, [r7, #8]
 8003d5a:	f000 f8ce 	bl	8003efa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f7ff fef2 	bl	8003b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b098      	sub	sp, #96	; 0x60
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2222      	movs	r2, #34	; 0x22
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <UART_Start_Receive_DMA+0x128>)
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	4a3d      	ldr	r2, [pc, #244]	; (8003ea4 <UART_Start_Receive_DMA+0x12c>)
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	4a3c      	ldr	r2, [pc, #240]	; (8003ea8 <UART_Start_Receive_DMA+0x130>)
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	f7fd fee4 	bl	8001ba4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	657b      	str	r3, [r7, #84]	; 0x54
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e4e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	617b      	str	r3, [r7, #20]
   return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e78:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e82:	627a      	str	r2, [r7, #36]	; 0x24
 8003e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3760      	adds	r7, #96	; 0x60
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	08003b7d 	.word	0x08003b7d
 8003ea4:	08003ca9 	.word	0x08003ca9
 8003ea8:	08003ce5 	.word	0x08003ce5

08003eac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	61ba      	str	r2, [r7, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003ef0:	bf00      	nop
 8003ef2:	3724      	adds	r7, #36	; 0x24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b095      	sub	sp, #84	; 0x54
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f22:	643a      	str	r2, [r7, #64]	; 0x40
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d119      	bne.n	8003fa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f92:	61ba      	str	r2, [r7, #24]
 8003f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fb4:	bf00      	nop
 8003fb6:	3754      	adds	r7, #84	; 0x54
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
	...

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ffa:	f023 030c 	bic.w	r3, r3, #12
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	430b      	orrs	r3, r1
 8004006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <UART_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d103      	bne.n	8004030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7fe fce2 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	e002      	b.n	8004036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7fe fcca 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <UART_SetConfig+0x118>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	0119      	lsls	r1, r3, #4
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <UART_SetConfig+0x118>)
 800406e:	fba3 0302 	umull	r0, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <UART_SetConfig+0x118>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4419      	add	r1, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <UART_SetConfig+0x118>)
 80040a6:	fba3 0302 	umull	r0, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	440a      	add	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40013800 	.word	0x40013800
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e2:	f3ef 8305 	mrs	r3, IPSR
 80040e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	607b      	str	r3, [r7, #4]
  return(result);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <osKernelInitialize+0x32>
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <osKernelInitialize+0x60>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d109      	bne.n	8004116 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004102:	f3ef 8311 	mrs	r3, BASEPRI
 8004106:	603b      	str	r3, [r7, #0]
  return(result);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800410e:	f06f 0305 	mvn.w	r3, #5
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e00c      	b.n	8004130 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <osKernelInitialize+0x60>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <osKernelInitialize+0x60>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	2000038c 	.word	0x2000038c

08004140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004146:	f3ef 8305 	mrs	r3, IPSR
 800414a:	60bb      	str	r3, [r7, #8]
  return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	607b      	str	r3, [r7, #4]
  return(result);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <osKernelStart+0x32>
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <osKernelStart+0x64>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d109      	bne.n	800417a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	603b      	str	r3, [r7, #0]
  return(result);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004172:	f06f 0305 	mvn.w	r3, #5
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00e      	b.n	8004198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <osKernelStart+0x64>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <osKernelStart+0x64>)
 8004184:	2202      	movs	r2, #2
 8004186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004188:	f001 fff2 	bl	8006170 <vTaskStartScheduler>
      stat = osOK;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e002      	b.n	8004198 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000038c 	.word	0x2000038c

080041a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b092      	sub	sp, #72	; 0x48
 80041ac:	af04      	add	r7, sp, #16
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b8:	f3ef 8305 	mrs	r3, IPSR
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8094 	bne.w	80042ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	623b      	str	r3, [r7, #32]
  return(result);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 808d 	bne.w	80042ee <osThreadNew+0x146>
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <osThreadNew+0x150>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d106      	bne.n	80041ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041dc:	f3ef 8311 	mrs	r3, BASEPRI
 80041e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 8082 	bne.w	80042ee <osThreadNew+0x146>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d07e      	beq.n	80042ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041f0:	2346      	movs	r3, #70	; 0x46
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041f4:	2318      	movs	r3, #24
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041f8:	2300      	movs	r3, #0
 80041fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041fc:	f107 031b 	add.w	r3, r7, #27
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d045      	beq.n	800429a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <osThreadNew+0x74>
        name = attr->name;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <osThreadNew+0x9a>
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b38      	cmp	r3, #56	; 0x38
 8004234:	d805      	bhi.n	8004242 <osThreadNew+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <osThreadNew+0x9e>
        return (NULL);
 8004242:	2300      	movs	r3, #0
 8004244:	e054      	b.n	80042f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <osThreadNew+0xd4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b5b      	cmp	r3, #91	; 0x5b
 8004264:	d90a      	bls.n	800427c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <osThreadNew+0xd4>
        mem = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	e010      	b.n	800429e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10c      	bne.n	800429e <osThreadNew+0xf6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <osThreadNew+0xf6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <osThreadNew+0xf6>
          mem = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	e001      	b.n	800429e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d110      	bne.n	80042c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ac:	9202      	str	r2, [sp, #8]
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 fcc0 	bl	8005c40 <xTaskCreateStatic>
 80042c0:	4603      	mov	r3, r0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e013      	b.n	80042ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f001 fd0a 	bl	8005cf8 <xTaskCreate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <osThreadNew+0x146>
          hTask = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ee:	697b      	ldr	r3, [r7, #20]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3738      	adds	r7, #56	; 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	2000038c 	.word	0x2000038c

080042fc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004308:	f3ef 8305 	mrs	r3, IPSR
 800430c:	613b      	str	r3, [r7, #16]
  return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004314:	f3ef 8310 	mrs	r3, PRIMASK
 8004318:	60fb      	str	r3, [r7, #12]
  return(result);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <osThreadTerminate+0x38>
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <osThreadTerminate+0x7c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d109      	bne.n	800433c <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004328:	f3ef 8311 	mrs	r3, BASEPRI
 800432c:	60bb      	str	r3, [r7, #8]
  return(result);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <osThreadTerminate+0x40>
    stat = osErrorISR;
 8004334:	f06f 0305 	mvn.w	r3, #5
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e017      	b.n	800436c <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8004342:	f06f 0303 	mvn.w	r3, #3
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e010      	b.n	800436c <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800434a:	69b8      	ldr	r0, [r7, #24]
 800434c:	f001 feb6 	bl	80060bc <eTaskGetState>
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d005      	beq.n	8004366 <osThreadTerminate+0x6a>
      stat = osOK;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800435e:	69b8      	ldr	r0, [r7, #24]
 8004360:	f001 fe06 	bl	8005f70 <vTaskDelete>
 8004364:	e002      	b.n	800436c <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8004366:	f06f 0302 	mvn.w	r3, #2
 800436a:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	2000038c 	.word	0x2000038c

0800437c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004384:	f3ef 8305 	mrs	r3, IPSR
 8004388:	613b      	str	r3, [r7, #16]
  return(result);
 800438a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10f      	bne.n	80043b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	60fb      	str	r3, [r7, #12]
  return(result);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <osDelay+0x34>
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <osDelay+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d109      	bne.n	80043b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043a4:	f3ef 8311 	mrs	r3, BASEPRI
 80043a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <osDelay+0x3c>
    stat = osErrorISR;
 80043b0:	f06f 0305 	mvn.w	r3, #5
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e007      	b.n	80043c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 fe46 	bl	8006054 <vTaskDelay>
    }
  }

  return (stat);
 80043c8:	697b      	ldr	r3, [r7, #20]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2000038c 	.word	0x2000038c

080043d8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e4:	f3ef 8305 	mrs	r3, IPSR
 80043e8:	617b      	str	r3, [r7, #20]
  return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13d      	bne.n	800446c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8310 	mrs	r3, PRIMASK
 80043f4:	613b      	str	r3, [r7, #16]
  return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d137      	bne.n	800446c <osEventFlagsNew+0x94>
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <osEventFlagsNew+0xa0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d105      	bne.n	8004410 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004404:	f3ef 8311 	mrs	r3, BASEPRI
 8004408:	60fb      	str	r3, [r7, #12]
  return(result);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d12d      	bne.n	800446c <osEventFlagsNew+0x94>
    mem = -1;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <osEventFlagsNew+0x5a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b1f      	cmp	r3, #31
 800442a:	d902      	bls.n	8004432 <osEventFlagsNew+0x5a>
        mem = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e00c      	b.n	800444c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <osEventFlagsNew+0x74>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <osEventFlagsNew+0x74>
          mem = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e001      	b.n	800444c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d106      	bne.n	8004460 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fa56 	bl	8004908 <xEventGroupCreateStatic>
 800445c:	61f8      	str	r0, [r7, #28]
 800445e:	e005      	b.n	800446c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004466:	f000 fa86 	bl	8004976 <xEventGroupCreate>
 800446a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800446c:	69fb      	ldr	r3, [r7, #28]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000038c 	.word	0x2000038c

0800447c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <osEventFlagsSet+0x1e>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800449a:	f06f 0303 	mvn.w	r3, #3
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e03a      	b.n	8004518 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	617b      	str	r3, [r7, #20]
  return(result);
 80044a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	613b      	str	r3, [r7, #16]
  return(result);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <osEventFlagsSet+0x52>
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <osEventFlagsSet+0xa8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d123      	bne.n	800450a <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044c2:	f3ef 8311 	mrs	r3, BASEPRI
 80044c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01d      	beq.n	800450a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	461a      	mov	r2, r3
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	69b8      	ldr	r0, [r7, #24]
 80044dc:	f000 fbee 	bl	8004cbc <xEventGroupSetBitsFromISR>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80044e6:	f06f 0302 	mvn.w	r3, #2
 80044ea:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80044ec:	e013      	b.n	8004516 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <osEventFlagsSet+0x9a>
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <osEventFlagsSet+0xac>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004508:	e005      	b.n	8004516 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	69b8      	ldr	r0, [r7, #24]
 800450e:	f000 fb1b 	bl	8004b48 <xEventGroupSetBits>
 8004512:	61f8      	str	r0, [r7, #28]
 8004514:	e000      	b.n	8004518 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004516:	bf00      	nop
  }

  return (rflags);
 8004518:	69fb      	ldr	r3, [r7, #28]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2000038c 	.word	0x2000038c
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b08e      	sub	sp, #56	; 0x38
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <osEventFlagsWait+0x22>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800454e:	f06f 0303 	mvn.w	r3, #3
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	e059      	b.n	800460a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004556:	f3ef 8305 	mrs	r3, IPSR
 800455a:	61fb      	str	r3, [r7, #28]
  return(result);
 800455c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	61bb      	str	r3, [r7, #24]
  return(result);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <osEventFlagsWait+0x56>
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <osEventFlagsWait+0xe8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d109      	bne.n	800458a <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004576:	f3ef 8311 	mrs	r3, BASEPRI
 800457a:	617b      	str	r3, [r7, #20]
  return(result);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8004582:	f06f 0305 	mvn.w	r3, #5
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	e03f      	b.n	800460a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004598:	e001      	b.n	800459e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800459a:	2300      	movs	r3, #0
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ac:	e001      	b.n	80045b2 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	6a38      	ldr	r0, [r7, #32]
 80045be:	f000 f9f5 	bl	80049ac <xEventGroupWaitBits>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d019      	beq.n	800460a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80045dc:	f06f 0301 	mvn.w	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e012      	b.n	800460a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80045e4:	f06f 0302 	mvn.w	r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e00e      	b.n	800460a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80045fc:	f06f 0301 	mvn.w	r3, #1
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	e002      	b.n	800460a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004604:	f06f 0302 	mvn.w	r3, #2
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800460c:	4618      	mov	r0, r3
 800460e:	3730      	adds	r7, #48	; 0x30
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000038c 	.word	0x2000038c

08004618 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004624:	f3ef 8305 	mrs	r3, IPSR
 8004628:	613b      	str	r3, [r7, #16]
  return(result);
 800462a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 8085 	bne.w	800473c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004632:	f3ef 8310 	mrs	r3, PRIMASK
 8004636:	60fb      	str	r3, [r7, #12]
  return(result);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d17e      	bne.n	800473c <osMutexNew+0x124>
 800463e:	4b42      	ldr	r3, [pc, #264]	; (8004748 <osMutexNew+0x130>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d105      	bne.n	8004652 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004646:	f3ef 8311 	mrs	r3, BASEPRI
 800464a:	60bb      	str	r3, [r7, #8]
  return(result);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d174      	bne.n	800473c <osMutexNew+0x124>
    if (attr != NULL) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	e001      	b.n	8004664 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <osMutexNew+0x5c>
      rmtx = 1U;
 800466e:	2301      	movs	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e001      	b.n	8004678 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d15c      	bne.n	800473c <osMutexNew+0x124>
      mem = -1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d015      	beq.n	80046ba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <osMutexNew+0x8c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b4f      	cmp	r3, #79	; 0x4f
 800469c:	d902      	bls.n	80046a4 <osMutexNew+0x8c>
          mem = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e00c      	b.n	80046be <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <osMutexNew+0xa6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d104      	bne.n	80046be <osMutexNew+0xa6>
            mem = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e001      	b.n	80046be <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d112      	bne.n	80046ea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	4619      	mov	r1, r3
 80046d0:	2004      	movs	r0, #4
 80046d2:	f000 fd29 	bl	8005128 <xQueueCreateMutexStatic>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24
 80046d8:	e016      	b.n	8004708 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4619      	mov	r1, r3
 80046e0:	2001      	movs	r0, #1
 80046e2:	f000 fd21 	bl	8005128 <xQueueCreateMutexStatic>
 80046e6:	6278      	str	r0, [r7, #36]	; 0x24
 80046e8:	e00e      	b.n	8004708 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80046f6:	2004      	movs	r0, #4
 80046f8:	f000 fcfe 	bl	80050f8 <xQueueCreateMutex>
 80046fc:	6278      	str	r0, [r7, #36]	; 0x24
 80046fe:	e003      	b.n	8004708 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004700:	2001      	movs	r0, #1
 8004702:	f000 fcf9 	bl	80050f8 <xQueueCreateMutex>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <osMutexNew+0x110>
        if (attr != NULL) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <osMutexNew+0x104>
          name = attr->name;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e001      	b.n	8004720 <osMutexNew+0x108>
        } else {
          name = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004720:	6979      	ldr	r1, [r7, #20]
 8004722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004724:	f001 fa30 	bl	8005b88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <osMutexNew+0x124>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	2000038c 	.word	0x2000038c

0800474c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800476a:	f3ef 8305 	mrs	r3, IPSR
 800476e:	613b      	str	r3, [r7, #16]
  return(result);
 8004770:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004776:	f3ef 8310 	mrs	r3, PRIMASK
 800477a:	60fb      	str	r3, [r7, #12]
  return(result);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <osMutexAcquire+0x4a>
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <osMutexAcquire+0xb8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d109      	bne.n	800479e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800478a:	f3ef 8311 	mrs	r3, BASEPRI
 800478e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004796:	f06f 0305 	mvn.w	r3, #5
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e02c      	b.n	80047f8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80047a4:	f06f 0303 	mvn.w	r3, #3
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e025      	b.n	80047f8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d011      	beq.n	80047d6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	69b8      	ldr	r0, [r7, #24]
 80047b6:	f000 fd06 	bl	80051c6 <xQueueTakeMutexRecursive>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d01b      	beq.n	80047f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80047c6:	f06f 0301 	mvn.w	r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	e014      	b.n	80047f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80047ce:	f06f 0302 	mvn.w	r3, #2
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	e010      	b.n	80047f8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	69b8      	ldr	r0, [r7, #24]
 80047da:	f000 ffa1 	bl	8005720 <xQueueSemaphoreTake>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d009      	beq.n	80047f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80047ea:	f06f 0301 	mvn.w	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e002      	b.n	80047f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80047f8:	69fb      	ldr	r3, [r7, #28]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2000038c 	.word	0x2000038c

08004808 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	613b      	str	r3, [r7, #16]
  return(result);
 800482a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10f      	bne.n	8004850 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004830:	f3ef 8310 	mrs	r3, PRIMASK
 8004834:	60fb      	str	r3, [r7, #12]
  return(result);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <osMutexRelease+0x48>
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <osMutexRelease+0x9c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d109      	bne.n	8004858 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004844:	f3ef 8311 	mrs	r3, BASEPRI
 8004848:	60bb      	str	r3, [r7, #8]
  return(result);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004850:	f06f 0305 	mvn.w	r3, #5
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e01f      	b.n	8004898 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800485e:	f06f 0303 	mvn.w	r3, #3
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e018      	b.n	8004898 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800486c:	69b8      	ldr	r0, [r7, #24]
 800486e:	f000 fc76 	bl	800515e <xQueueGiveMutexRecursive>
 8004872:	4603      	mov	r3, r0
 8004874:	2b01      	cmp	r3, #1
 8004876:	d00f      	beq.n	8004898 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004878:	f06f 0302 	mvn.w	r3, #2
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e00b      	b.n	8004898 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004880:	2300      	movs	r3, #0
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	69b8      	ldr	r0, [r7, #24]
 8004888:	f000 fcd4 	bl	8005234 <xQueueGenericSend>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d002      	beq.n	8004898 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004892:	f06f 0302 	mvn.w	r3, #2
 8004896:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004898:	69fb      	ldr	r3, [r7, #28]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	2000038c 	.word	0x2000038c

080048a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a06      	ldr	r2, [pc, #24]	; (80048d0 <vApplicationGetIdleTaskMemory+0x28>)
 80048b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80048be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2246      	movs	r2, #70	; 0x46
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	20000390 	.word	0x20000390
 80048d4:	200003ec 	.word	0x200003ec

080048d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a06      	ldr	r2, [pc, #24]	; (8004900 <vApplicationGetTimerTaskMemory+0x28>)
 80048e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a05      	ldr	r2, [pc, #20]	; (8004904 <vApplicationGetTimerTaskMemory+0x2c>)
 80048ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	228c      	movs	r2, #140	; 0x8c
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	20000504 	.word	0x20000504
 8004904:	20000560 	.word	0x20000560

08004908 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800492c:	2320      	movs	r3, #32
 800492e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b20      	cmp	r3, #32
 8004934:	d00a      	beq.n	800494c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f9bf 	bl	8004ce4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800496c:	697b      	ldr	r3, [r7, #20]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800497c:	2020      	movs	r0, #32
 800497e:	f003 f815 	bl	80079ac <pvPortMalloc>
 8004982:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f9a5 	bl	8004ce4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80049a0:	687b      	ldr	r3, [r7, #4]
	}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b090      	sub	sp, #64	; 0x40
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	623b      	str	r3, [r7, #32]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <xEventGroupWaitBits+0x56>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61fb      	str	r3, [r7, #28]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xEventGroupWaitBits+0x72>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61bb      	str	r3, [r7, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a1e:	f002 f89f 	bl	8006b60 <xTaskGetSchedulerState>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <xEventGroupWaitBits+0x82>
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <xEventGroupWaitBits+0x86>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xEventGroupWaitBits+0x88>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	617b      	str	r3, [r7, #20]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004a4e:	f001 fbf5 	bl	800623c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a5e:	f000 f90b 	bl	8004c78 <prvTestWaitCondition>
 8004a62:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d028      	beq.n	8004aca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	401a      	ands	r2, r3
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e020      	b.n	8004aca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d104      	bne.n	8004a98 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004a92:	2301      	movs	r3, #1
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30
 8004a96:	e018      	b.n	8004aca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	1d18      	adds	r0, r3, #4
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	4313      	orrs	r3, r2
 8004abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f001 fdb3 	bl	800662c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004aca:	f001 fbc5 	bl	8006258 <xTaskResumeAll>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d031      	beq.n	8004b3a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <xEventGroupWaitBits+0x198>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004aec:	f002 f9b8 	bl	8006e60 <uxTaskResetEventItemValue>
 8004af0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11a      	bne.n	8004b32 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004afc:	f002 fe56 	bl	80077ac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b0c:	f000 f8b4 	bl	8004c78 <prvTestWaitCondition>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	401a      	ands	r2, r3
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004b2e:	f002 fe6d 	bl	800780c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3740      	adds	r7, #64	; 0x40
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	; 0x38
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b52:	2300      	movs	r3, #0
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xEventGroupSetBits+0x32>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	613b      	str	r3, [r7, #16]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <xEventGroupSetBits+0x52>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004ba6:	f001 fb49 	bl	800623c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004bbc:	e03c      	b.n	8004c38 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bdc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	e008      	b.n	8004c0c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d101      	bne.n	8004c0c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c30:	f001 fdc8 	bl	80067c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d1be      	bne.n	8004bbe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	43db      	mvns	r3, r3
 8004c48:	401a      	ands	r2, r3
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004c4e:	f001 fb03 	bl	8006258 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	681b      	ldr	r3, [r3, #0]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3738      	adds	r7, #56	; 0x38
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff6c 	bl	8004b48 <xEventGroupSetBits>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e007      	b.n	8004cae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d101      	bne.n	8004cae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004cae:	697b      	ldr	r3, [r7, #20]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
	...

08004cbc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	4804      	ldr	r0, [pc, #16]	; (8004ce0 <xEventGroupSetBitsFromISR+0x24>)
 8004cd0:	f002 fc58 	bl	8007584 <xTimerPendFunctionCallFromISR>
 8004cd4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004cd6:	697b      	ldr	r3, [r7, #20]
	}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004c5f 	.word	0x08004c5f

08004ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0208 	add.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 0208 	add.w	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0208 	add.w	r2, r3, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d103      	bne.n	8004da0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e00c      	b.n	8004dba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3308      	adds	r3, #8
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e002      	b.n	8004dae <vListInsert+0x2e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d2f6      	bcs.n	8004da8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d103      	bne.n	8004e24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr
	...

08004e44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xQueueGenericReset+0x2a>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60bb      	str	r3, [r7, #8]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e6e:	f002 fc9d 	bl	80077ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	441a      	add	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	22ff      	movs	r2, #255	; 0xff
 8004eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	22ff      	movs	r2, #255	; 0xff
 8004eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d114      	bne.n	8004eee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01a      	beq.n	8004f02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3310      	adds	r3, #16
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fc13 	bl	80066fc <xTaskRemoveFromEventList>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <xQueueGenericReset+0xcc>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	e009      	b.n	8004f02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fef6 	bl	8004ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fef1 	bl	8004ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f02:	f002 fc83 	bl	800780c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	; 0x38
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <xQueueGenericCreateStatic+0x52>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <xQueueGenericCreateStatic+0x56>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <xQueueGenericCreateStatic+0x58>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xQueueGenericCreateStatic+0x7e>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <xQueueGenericCreateStatic+0x82>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericCreateStatic+0x84>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61fb      	str	r3, [r7, #28]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fb2:	2350      	movs	r3, #80	; 0x50
 8004fb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b50      	cmp	r3, #80	; 0x50
 8004fba:	d00a      	beq.n	8004fd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	61bb      	str	r3, [r7, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fe4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f843 	bl	800507e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3730      	adds	r7, #48	; 0x30
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005002:	b580      	push	{r7, lr}
 8005004:	b08a      	sub	sp, #40	; 0x28
 8005006:	af02      	add	r7, sp, #8
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	613b      	str	r3, [r7, #16]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e004      	b.n	8005042 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3350      	adds	r3, #80	; 0x50
 8005046:	4618      	mov	r0, r3
 8005048:	f002 fcb0 	bl	80079ac <pvPortMalloc>
 800504c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00f      	beq.n	8005074 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	3350      	adds	r3, #80	; 0x50
 8005058:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005062:	79fa      	ldrb	r2, [r7, #7]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f805 	bl	800507e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005074:	69bb      	ldr	r3, [r7, #24]
	}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e002      	b.n	80050a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050ac:	2101      	movs	r1, #1
 80050ae:	69b8      	ldr	r0, [r7, #24]
 80050b0:	f7ff fec8 	bl	8004e44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050e4:	2300      	movs	r3, #0
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8a2 	bl	8005234 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	461a      	mov	r2, r3
 800510e:	6939      	ldr	r1, [r7, #16]
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f7ff ff76 	bl	8005002 <xQueueGenericCreate>
 8005116:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ffd3 	bl	80050c4 <prvInitialiseMutex>

		return pxNewQueue;
 800511e:	68fb      	ldr	r3, [r7, #12]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	4603      	mov	r3, r0
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	6939      	ldr	r1, [r7, #16]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff fee4 	bl	8004f14 <xQueueGenericCreateStatic>
 800514c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ffb8 	bl	80050c4 <prvInitialiseMutex>

		return pxNewQueue;
 8005154:	68fb      	ldr	r3, [r7, #12]
	}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800515e:	b590      	push	{r4, r7, lr}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	685c      	ldr	r4, [r3, #4]
 800518a:	f001 fcdb 	bl	8006b44 <xTaskGetCurrentTaskHandle>
 800518e:	4603      	mov	r3, r0
 8005190:	429c      	cmp	r4, r3
 8005192:	d111      	bne.n	80051b8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	1e5a      	subs	r2, r3, #1
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80051a6:	2300      	movs	r3, #0
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	6938      	ldr	r0, [r7, #16]
 80051ae:	f000 f841 	bl	8005234 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e001      	b.n	80051bc <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051bc:	697b      	ldr	r3, [r7, #20]
	}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}

080051c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80051c6:	b590      	push	{r4, r7, lr}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	60fb      	str	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	685c      	ldr	r4, [r3, #4]
 80051f4:	f001 fca6 	bl	8006b44 <xTaskGetCurrentTaskHandle>
 80051f8:	4603      	mov	r3, r0
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d107      	bne.n	800520e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e00c      	b.n	8005228 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6938      	ldr	r0, [r7, #16]
 8005212:	f000 fa85 	bl	8005720 <xQueueSemaphoreTake>
 8005216:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005228:	697b      	ldr	r3, [r7, #20]
	}
 800522a:	4618      	mov	r0, r3
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
	...

08005234 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericSend+0x32>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <xQueueGenericSend+0x40>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueGenericSend+0x44>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueGenericSend+0x46>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xQueueGenericSend+0x60>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d103      	bne.n	80052a2 <xQueueGenericSend+0x6e>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <xQueueGenericSend+0x72>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <xQueueGenericSend+0x74>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	623b      	str	r3, [r7, #32]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c2:	f001 fc4d 	bl	8006b60 <xTaskGetSchedulerState>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <xQueueGenericSend+0x9e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <xQueueGenericSend+0xa2>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <xQueueGenericSend+0xa4>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f2:	f002 fa5b 	bl	80077ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <xQueueGenericSend+0xd4>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d129      	bne.n	800535c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800530e:	f000 fb2a 	bl	8005966 <prvCopyDataToQueue>
 8005312:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f9eb 	bl	80066fc <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d013      	beq.n	8005354 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800532c:	4b3f      	ldr	r3, [pc, #252]	; (800542c <xQueueGenericSend+0x1f8>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	e00a      	b.n	8005354 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <xQueueGenericSend+0x1f8>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005354:	f002 fa5a 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8005358:	2301      	movs	r3, #1
 800535a:	e063      	b.n	8005424 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005362:	f002 fa53 	bl	800780c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
 8005368:	e05c      	b.n	8005424 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fa87 	bl	8006888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800537e:	f002 fa45 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005382:	f000 ff5b 	bl	800623c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005386:	f002 fa11 	bl	80077ac <vPortEnterCritical>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005390:	b25b      	sxtb	r3, r3
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d103      	bne.n	80053a0 <xQueueGenericSend+0x16c>
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d103      	bne.n	80053b6 <xQueueGenericSend+0x182>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b6:	f002 fa29 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ba:	1d3a      	adds	r2, r7, #4
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fa76 	bl	80068b4 <xTaskCheckForTimeOut>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d124      	bne.n	8005418 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d0:	f000 fbc1 	bl	8005b56 <prvIsQueueFull>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d018      	beq.n	800540c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	3310      	adds	r3, #16
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 f8fe 	bl	80065e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ea:	f000 fb4c 	bl	8005a86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053ee:	f000 ff33 	bl	8006258 <xTaskResumeAll>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f47f af7c 	bne.w	80052f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <xQueueGenericSend+0x1f8>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	e772      	b.n	80052f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800540c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540e:	f000 fb3a 	bl	8005a86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005412:	f000 ff21 	bl	8006258 <xTaskResumeAll>
 8005416:	e76c      	b.n	80052f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fb34 	bl	8005a86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800541e:	f000 ff1b 	bl	8006258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005422:	2300      	movs	r3, #0
		}
	}
}
 8005424:	4618      	mov	r0, r3
 8005426:	3738      	adds	r7, #56	; 0x38
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <xQueueGenericSendFromISR+0x3c>
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <xQueueGenericSendFromISR+0x40>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <xQueueGenericSendFromISR+0x42>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	623b      	str	r3, [r7, #32]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d103      	bne.n	800549a <xQueueGenericSendFromISR+0x6a>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <xQueueGenericSendFromISR+0x6e>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueGenericSendFromISR+0x70>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61fb      	str	r3, [r7, #28]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054ba:	f002 fa39 	bl	8007930 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054be:	f3ef 8211 	mrs	r2, BASEPRI
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61ba      	str	r2, [r7, #24]
 80054d4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <xQueueGenericSendFromISR+0xbc>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d12c      	bne.n	8005546 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fc:	f000 fa33 	bl	8005966 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005500:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d112      	bne.n	8005530 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f8f0 	bl	80066fc <xTaskRemoveFromEventList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e007      	b.n	8005540 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005534:	3301      	adds	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	b25a      	sxtb	r2, r3
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005544:	e001      	b.n	800554a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005546:	2300      	movs	r3, #0
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005554:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005558:	4618      	mov	r0, r3
 800555a:	3738      	adds	r7, #56	; 0x38
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xQueueReceive+0x30>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	623b      	str	r3, [r7, #32]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <xQueueReceive+0x3e>
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueReceive+0x42>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueReceive+0x44>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueReceive+0x5e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055be:	f001 facf 	bl	8006b60 <xTaskGetSchedulerState>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <xQueueReceive+0x6e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <xQueueReceive+0x72>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueReceive+0x74>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueReceive+0x8e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61bb      	str	r3, [r7, #24]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ee:	f002 f8dd 	bl	80077ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01f      	beq.n	800563e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005602:	f000 fa1a 	bl	8005a3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00f      	beq.n	8005636 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	3310      	adds	r3, #16
 800561a:	4618      	mov	r0, r3
 800561c:	f001 f86e 	bl	80066fc <xTaskRemoveFromEventList>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005626:	4b3d      	ldr	r3, [pc, #244]	; (800571c <xQueueReceive+0x1bc>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005636:	f002 f8e9 	bl	800780c <vPortExitCritical>
				return pdPASS;
 800563a:	2301      	movs	r3, #1
 800563c:	e069      	b.n	8005712 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005644:	f002 f8e2 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005648:	2300      	movs	r3, #0
 800564a:	e062      	b.n	8005712 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f916 	bl	8006888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005660:	f002 f8d4 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005664:	f000 fdea 	bl	800623c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005668:	f002 f8a0 	bl	80077ac <vPortEnterCritical>
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005672:	b25b      	sxtb	r3, r3
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d103      	bne.n	8005682 <xQueueReceive+0x122>
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d103      	bne.n	8005698 <xQueueReceive+0x138>
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005698:	f002 f8b8 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569c:	1d3a      	adds	r2, r7, #4
 800569e:	f107 0310 	add.w	r3, r7, #16
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f905 	bl	80068b4 <xTaskCheckForTimeOut>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d123      	bne.n	80056f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b2:	f000 fa3a 	bl	8005b2a <prvIsQueueEmpty>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d017      	beq.n	80056ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 ff8d 	bl	80065e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056cc:	f000 f9db 	bl	8005a86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056d0:	f000 fdc2 	bl	8006258 <xTaskResumeAll>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d189      	bne.n	80055ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <xQueueReceive+0x1bc>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e780      	b.n	80055ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ee:	f000 f9ca 	bl	8005a86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f2:	f000 fdb1 	bl	8006258 <xTaskResumeAll>
 80056f6:	e77a      	b.n	80055ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fa:	f000 f9c4 	bl	8005a86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056fe:	f000 fdab 	bl	8006258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005704:	f000 fa11 	bl	8005b2a <prvIsQueueEmpty>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f43f af6f 	beq.w	80055ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005710:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005712:	4618      	mov	r0, r3
 8005714:	3730      	adds	r7, #48	; 0x30
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61fb      	str	r3, [r7, #28]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005770:	f001 f9f6 	bl	8006b60 <xTaskGetSchedulerState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <xQueueSemaphoreTake+0x60>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueSemaphoreTake+0x64>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueSemaphoreTake+0x66>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	61bb      	str	r3, [r7, #24]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a0:	f002 f804 	bl	80077ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d024      	beq.n	80057fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80057c0:	f001 fb66 	bl	8006e90 <pvTaskIncrementMutexHeldCount>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00f      	beq.n	80057f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	3310      	adds	r3, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 ff90 	bl	80066fc <xTaskRemoveFromEventList>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057e2:	4b54      	ldr	r3, [pc, #336]	; (8005934 <xQueueSemaphoreTake+0x214>)
 80057e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057f2:	f002 f80b 	bl	800780c <vPortExitCritical>
				return pdPASS;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e097      	b.n	800592a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d111      	bne.n	8005824 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	617b      	str	r3, [r7, #20]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800581c:	f001 fff6 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005820:	2300      	movs	r3, #0
 8005822:	e082      	b.n	800592a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800582a:	f107 030c 	add.w	r3, r7, #12
 800582e:	4618      	mov	r0, r3
 8005830:	f001 f82a 	bl	8006888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005838:	f001 ffe8 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800583c:	f000 fcfe 	bl	800623c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005840:	f001 ffb4 	bl	80077ac <vPortEnterCritical>
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d103      	bne.n	800585a <xQueueSemaphoreTake+0x13a>
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005860:	b25b      	sxtb	r3, r3
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d103      	bne.n	8005870 <xQueueSemaphoreTake+0x150>
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005870:	f001 ffcc 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005874:	463a      	mov	r2, r7
 8005876:	f107 030c 	add.w	r3, r7, #12
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f819 	bl	80068b4 <xTaskCheckForTimeOut>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d132      	bne.n	80058ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800588a:	f000 f94e 	bl	8005b2a <prvIsQueueEmpty>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d026      	beq.n	80058e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800589c:	f001 ff86 	bl	80077ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f979 	bl	8006b9c <xTaskPriorityInherit>
 80058aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80058ac:	f001 ffae 	bl	800780c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fe93 	bl	80065e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058c0:	f000 f8e1 	bl	8005a86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058c4:	f000 fcc8 	bl	8006258 <xTaskResumeAll>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af68 	bne.w	80057a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <xQueueSemaphoreTake+0x214>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	e75e      	b.n	80057a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80058e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058e4:	f000 f8cf 	bl	8005a86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e8:	f000 fcb6 	bl	8006258 <xTaskResumeAll>
 80058ec:	e758      	b.n	80057a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058f0:	f000 f8c9 	bl	8005a86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f4:	f000 fcb0 	bl	8006258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fa:	f000 f916 	bl	8005b2a <prvIsQueueEmpty>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f43f af4d 	beq.w	80057a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800590c:	f001 ff4e 	bl	80077ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005912:	f000 f811 	bl	8005938 <prvGetDisinheritPriorityAfterTimeout>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fa18 	bl	8006d54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005924:	f001 ff72 	bl	800780c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800592a:	4618      	mov	r0, r3
 800592c:	3738      	adds	r7, #56	; 0x38
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e001      	b.n	800595a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800595a:	68fb      	ldr	r3, [r7, #12]
	}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10d      	bne.n	80059a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d14d      	bne.n	8005a28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f971 	bl	8006c78 <xTaskPriorityDisinherit>
 8005996:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e043      	b.n	8005a28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d119      	bne.n	80059da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6898      	ldr	r0, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	461a      	mov	r2, r3
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	f002 f9ff 	bl	8007db4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	441a      	add	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d32b      	bcc.n	8005a28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	e026      	b.n	8005a28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68d8      	ldr	r0, [r3, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	461a      	mov	r2, r3
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	f002 f9e5 	bl	8007db4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	425b      	negs	r3, r3
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d207      	bcs.n	8005a16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	425b      	negs	r3, r3
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d105      	bne.n	8005a28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d018      	beq.n	8005a7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d303      	bcc.n	8005a6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	461a      	mov	r2, r3
 8005a78:	6838      	ldr	r0, [r7, #0]
 8005a7a:	f002 f99b 	bl	8007db4 <memcpy>
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a8e:	f001 fe8d 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a9a:	e011      	b.n	8005ac0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe27 	bl	80066fc <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ab4:	f000 ff60 	bl	8006978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dce9      	bgt.n	8005a9c <prvUnlockQueue+0x16>
 8005ac8:	e000      	b.n	8005acc <prvUnlockQueue+0x46>
					break;
 8005aca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 fe9a 	bl	800780c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ad8:	f001 fe68 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae4:	e011      	b.n	8005b0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d012      	beq.n	8005b14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3310      	adds	r3, #16
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fe02 	bl	80066fc <xTaskRemoveFromEventList>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005afe:	f000 ff3b 	bl	8006978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dce9      	bgt.n	8005ae6 <prvUnlockQueue+0x60>
 8005b12:	e000      	b.n	8005b16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b1e:	f001 fe75 	bl	800780c <vPortExitCritical>
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b32:	f001 fe3b 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e001      	b.n	8005b48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b48:	f001 fe60 	bl	800780c <vPortExitCritical>

	return xReturn;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b5e:	f001 fe25 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d102      	bne.n	8005b74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e001      	b.n	8005b78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b78:	f001 fe48 	bl	800780c <vPortExitCritical>

	return xReturn;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e014      	b.n	8005bc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b98:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <vQueueAddToRegistry+0x4c>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10b      	bne.n	8005bbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ba4:	490b      	ldr	r1, [pc, #44]	; (8005bd4 <vQueueAddToRegistry+0x4c>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vQueueAddToRegistry+0x4c>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bba:	e006      	b.n	8005bca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b07      	cmp	r3, #7
 8005bc6:	d9e7      	bls.n	8005b98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	20000790 	.word	0x20000790

08005bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005be8:	f001 fde0 	bl	80077ac <vPortEnterCritical>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d103      	bne.n	8005c02 <vQueueWaitForMessageRestricted+0x2a>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c08:	b25b      	sxtb	r3, r3
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d103      	bne.n	8005c18 <vQueueWaitForMessageRestricted+0x40>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c18:	f001 fdf8 	bl	800780c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fd39 	bl	80066a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7ff ff27 	bl	8005a86 <prvUnlockQueue>
	}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af04      	add	r7, sp, #16
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	623b      	str	r3, [r7, #32]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	61fb      	str	r3, [r7, #28]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c86:	235c      	movs	r3, #92	; 0x5c
 8005c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b5c      	cmp	r3, #92	; 0x5c
 8005c8e:	d00a      	beq.n	8005ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	61bb      	str	r3, [r7, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01e      	beq.n	8005cea <xTaskCreateStatic+0xaa>
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01b      	beq.n	8005cea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f850 	bl	8005d82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ce4:	f000 f8d4 	bl	8005e90 <prvAddNewTaskToReadyList>
 8005ce8:	e001      	b.n	8005cee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cee:	697b      	ldr	r3, [r7, #20]
	}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3728      	adds	r7, #40	; 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	; 0x30
 8005cfc:	af04      	add	r7, sp, #16
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 fe4d 	bl	80079ac <pvPortMalloc>
 8005d12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d1a:	205c      	movs	r0, #92	; 0x5c
 8005d1c:	f001 fe46 	bl	80079ac <pvPortMalloc>
 8005d20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d2e:	e005      	b.n	8005d3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d30:	6978      	ldr	r0, [r7, #20]
 8005d32:	f001 feff 	bl	8007b34 <vPortFree>
 8005d36:	e001      	b.n	8005d3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f80e 	bl	8005d82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d66:	69f8      	ldr	r0, [r7, #28]
 8005d68:	f000 f892 	bl	8005e90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	e002      	b.n	8005d78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d78:	69bb      	ldr	r3, [r7, #24]
	}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	21a5      	movs	r1, #165	; 0xa5
 8005d9c:	f001 ffde 	bl	8007d5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005daa:	3b01      	subs	r3, #1
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <prvInitialiseNewTask+0x58>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	617b      	str	r3, [r7, #20]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	e012      	b.n	8005e06 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	7819      	ldrb	r1, [r3, #0]
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	3334      	adds	r3, #52	; 0x34
 8005df0:	460a      	mov	r2, r1
 8005df2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2b0f      	cmp	r3, #15
 8005e0a:	d9e9      	bls.n	8005de0 <prvInitialiseNewTask+0x5e>
 8005e0c:	e000      	b.n	8005e10 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005e0e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	2b37      	cmp	r3, #55	; 0x37
 8005e1c:	d901      	bls.n	8005e22 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e1e:	2337      	movs	r3, #55	; 0x37
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	2200      	movs	r2, #0
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe ff72 	bl	8004d22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	3318      	adds	r3, #24
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe ff6d 	bl	8004d22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2200      	movs	r2, #0
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	69b8      	ldr	r0, [r7, #24]
 8005e72:	f001 fba7 	bl	80075c4 <pxPortInitialiseStack>
 8005e76:	4602      	mov	r2, r0
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e88:	bf00      	nop
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e98:	f001 fc88 	bl	80077ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <prvAddNewTaskToReadyList+0xc4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	; (8005f54 <prvAddNewTaskToReadyList+0xc4>)
 8005ea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <prvAddNewTaskToReadyList+0xc8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eae:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <prvAddNewTaskToReadyList+0xc8>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <prvAddNewTaskToReadyList+0xc4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d110      	bne.n	8005ede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ebc:	f000 fd80 	bl	80069c0 <prvInitialiseTaskLists>
 8005ec0:	e00d      	b.n	8005ede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <prvAddNewTaskToReadyList+0xcc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <prvAddNewTaskToReadyList+0xc8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d802      	bhi.n	8005ede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <prvAddNewTaskToReadyList+0xc8>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ede:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <prvAddNewTaskToReadyList+0xd0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <prvAddNewTaskToReadyList+0xd0>)
 8005ee6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <prvAddNewTaskToReadyList+0xd0>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <prvAddNewTaskToReadyList+0xd4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d903      	bls.n	8005f04 <prvAddNewTaskToReadyList+0x74>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <prvAddNewTaskToReadyList+0xd4>)
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <prvAddNewTaskToReadyList+0xd8>)
 8005f12:	441a      	add	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f7fe ff0d 	bl	8004d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f20:	f001 fc74 	bl	800780c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <prvAddNewTaskToReadyList+0xcc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvAddNewTaskToReadyList+0xc8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d207      	bcs.n	8005f4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <prvAddNewTaskToReadyList+0xdc>)
 8005f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000ca4 	.word	0x20000ca4
 8005f58:	200007d0 	.word	0x200007d0
 8005f5c:	20000cb0 	.word	0x20000cb0
 8005f60:	20000cc0 	.word	0x20000cc0
 8005f64:	20000cac 	.word	0x20000cac
 8005f68:	200007d4 	.word	0x200007d4
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f78:	f001 fc18 	bl	80077ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <vTaskDelete+0x18>
 8005f82:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <vTaskDelete+0xc4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	e000      	b.n	8005f8a <vTaskDelete+0x1a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe ff2d 	bl	8004df0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe ff24 	bl	8004df0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005fa8:	4b23      	ldr	r3, [pc, #140]	; (8006038 <vTaskDelete+0xc8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <vTaskDelete+0xc8>)
 8005fb0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005fb2:	4b20      	ldr	r3, [pc, #128]	; (8006034 <vTaskDelete+0xc4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d10b      	bne.n	8005fd4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	481e      	ldr	r0, [pc, #120]	; (800603c <vTaskDelete+0xcc>)
 8005fc4:	f7fe feb9 	bl	8004d3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <vTaskDelete+0xd0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <vTaskDelete+0xd0>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	e009      	b.n	8005fe8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <vTaskDelete+0xd4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <vTaskDelete+0xd4>)
 8005fdc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fd5c 	bl	8006a9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005fe4:	f000 fd8a 	bl	8006afc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005fe8:	f001 fc10 	bl	800780c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <vTaskDelete+0xd8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01b      	beq.n	800602c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <vTaskDelete+0xc4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d116      	bne.n	800602c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <vTaskDelete+0xdc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <vTaskDelete+0xac>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60bb      	str	r3, [r7, #8]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <vTaskDelete+0xe0>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200007d0 	.word	0x200007d0
 8006038:	20000cc0 	.word	0x20000cc0
 800603c:	20000c78 	.word	0x20000c78
 8006040:	20000c8c 	.word	0x20000c8c
 8006044:	20000ca4 	.word	0x20000ca4
 8006048:	20000cb0 	.word	0x20000cb0
 800604c:	20000ccc 	.word	0x20000ccc
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d017      	beq.n	8006096 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <vTaskDelay+0x60>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <vTaskDelay+0x30>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60bb      	str	r3, [r7, #8]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006084:	f000 f8da 	bl	800623c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006088:	2100      	movs	r1, #0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 ff14 	bl	8006eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006090:	f000 f8e2 	bl	8006258 <xTaskResumeAll>
 8006094:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <vTaskDelay+0x64>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000ccc 	.word	0x20000ccc
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <eTaskGetState+0x28>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60bb      	str	r3, [r7, #8]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <eTaskGetState+0xa0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d102      	bne.n	80060f4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
 80060f2:	e02d      	b.n	8006150 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 80060f4:	f001 fb5a 	bl	80077ac <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80060fe:	f001 fb85 	bl	800780c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8006102:	4b17      	ldr	r3, [pc, #92]	; (8006160 <eTaskGetState+0xa4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	429a      	cmp	r2, r3
 800610a:	d004      	beq.n	8006116 <eTaskGetState+0x5a>
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <eTaskGetState+0xa8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	429a      	cmp	r2, r3
 8006114:	d102      	bne.n	800611c <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006116:	2302      	movs	r3, #2
 8006118:	75fb      	strb	r3, [r7, #23]
 800611a:	e019      	b.n	8006150 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <eTaskGetState+0xac>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d109      	bne.n	8006138 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 800612c:	2303      	movs	r3, #3
 800612e:	75fb      	strb	r3, [r7, #23]
 8006130:	e00e      	b.n	8006150 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8006132:	2302      	movs	r3, #2
 8006134:	75fb      	strb	r3, [r7, #23]
 8006136:	e00b      	b.n	8006150 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a0c      	ldr	r2, [pc, #48]	; (800616c <eTaskGetState+0xb0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d002      	beq.n	8006146 <eTaskGetState+0x8a>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006146:	2304      	movs	r3, #4
 8006148:	75fb      	strb	r3, [r7, #23]
 800614a:	e001      	b.n	8006150 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800614c:	2301      	movs	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	200007d0 	.word	0x200007d0
 8006160:	20000c5c 	.word	0x20000c5c
 8006164:	20000c60 	.word	0x20000c60
 8006168:	20000c90 	.word	0x20000c90
 800616c:	20000c78 	.word	0x20000c78

08006170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617e:	463a      	mov	r2, r7
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fb8e 	bl	80048a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	460a      	mov	r2, r1
 800619e:	4921      	ldr	r1, [pc, #132]	; (8006224 <vTaskStartScheduler+0xb4>)
 80061a0:	4821      	ldr	r0, [pc, #132]	; (8006228 <vTaskStartScheduler+0xb8>)
 80061a2:	f7ff fd4d 	bl	8005c40 <xTaskCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4a20      	ldr	r2, [pc, #128]	; (800622c <vTaskStartScheduler+0xbc>)
 80061aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ac:	4b1f      	ldr	r3, [pc, #124]	; (800622c <vTaskStartScheduler+0xbc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e001      	b.n	80061be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061c4:	f000 fecc 	bl	8006f60 <xTimerCreateTimerTask>
 80061c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d116      	bne.n	80061fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <vTaskStartScheduler+0xc0>)
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <vTaskStartScheduler+0xc4>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061f2:	4b11      	ldr	r3, [pc, #68]	; (8006238 <vTaskStartScheduler+0xc8>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061f8:	f001 fa66 	bl	80076c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061fc:	e00e      	b.n	800621c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d10a      	bne.n	800621c <vTaskStartScheduler+0xac>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <vTaskStartScheduler+0xaa>
}
 800621c:	bf00      	nop
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08007e34 	.word	0x08007e34
 8006228:	08006991 	.word	0x08006991
 800622c:	20000cc8 	.word	0x20000cc8
 8006230:	20000cc4 	.word	0x20000cc4
 8006234:	20000cb0 	.word	0x20000cb0
 8006238:	20000ca8 	.word	0x20000ca8

0800623c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <vTaskSuspendAll+0x18>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a03      	ldr	r2, [pc, #12]	; (8006254 <vTaskSuspendAll+0x18>)
 8006248:	6013      	str	r3, [r2, #0]
}
 800624a:	bf00      	nop
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000ccc 	.word	0x20000ccc

08006258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006266:	4b42      	ldr	r3, [pc, #264]	; (8006370 <xTaskResumeAll+0x118>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <xTaskResumeAll+0x2c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	603b      	str	r3, [r7, #0]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006284:	f001 fa92 	bl	80077ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006288:	4b39      	ldr	r3, [pc, #228]	; (8006370 <xTaskResumeAll+0x118>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3b01      	subs	r3, #1
 800628e:	4a38      	ldr	r2, [pc, #224]	; (8006370 <xTaskResumeAll+0x118>)
 8006290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006292:	4b37      	ldr	r3, [pc, #220]	; (8006370 <xTaskResumeAll+0x118>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d162      	bne.n	8006360 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <xTaskResumeAll+0x11c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05e      	beq.n	8006360 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062a2:	e02f      	b.n	8006304 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062a4:	4b34      	ldr	r3, [pc, #208]	; (8006378 <xTaskResumeAll+0x120>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3318      	adds	r3, #24
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fd9d 	bl	8004df0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fd98 	bl	8004df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <xTaskResumeAll+0x124>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d903      	bls.n	80062d4 <xTaskResumeAll+0x7c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a2a      	ldr	r2, [pc, #168]	; (800637c <xTaskResumeAll+0x124>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4a27      	ldr	r2, [pc, #156]	; (8006380 <xTaskResumeAll+0x128>)
 80062e2:	441a      	add	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fe fd25 	bl	8004d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4b23      	ldr	r3, [pc, #140]	; (8006384 <xTaskResumeAll+0x12c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <xTaskResumeAll+0x130>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006304:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <xTaskResumeAll+0x120>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1cb      	bne.n	80062a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006312:	f000 fbf3 	bl	8006afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <xTaskResumeAll+0x134>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006322:	f000 f845 	bl	80063b0 <xTaskIncrementTick>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <xTaskResumeAll+0x130>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3b01      	subs	r3, #1
 8006336:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f1      	bne.n	8006322 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800633e:	4b13      	ldr	r3, [pc, #76]	; (800638c <xTaskResumeAll+0x134>)
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006344:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xTaskResumeAll+0x130>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006350:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <xTaskResumeAll+0x138>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006360:	f001 fa54 	bl	800780c <vPortExitCritical>

	return xAlreadyYielded;
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000ccc 	.word	0x20000ccc
 8006374:	20000ca4 	.word	0x20000ca4
 8006378:	20000c64 	.word	0x20000c64
 800637c:	20000cac 	.word	0x20000cac
 8006380:	200007d4 	.word	0x200007d4
 8006384:	200007d0 	.word	0x200007d0
 8006388:	20000cb8 	.word	0x20000cb8
 800638c:	20000cb4 	.word	0x20000cb4
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800639a:	4b04      	ldr	r3, [pc, #16]	; (80063ac <xTaskGetTickCount+0x18>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063a0:	687b      	ldr	r3, [r7, #4]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	20000ca8 	.word	0x20000ca8

080063b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ba:	4b51      	ldr	r3, [pc, #324]	; (8006500 <xTaskIncrementTick+0x150>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 808e 	bne.w	80064e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063c4:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <xTaskIncrementTick+0x154>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063cc:	4a4d      	ldr	r2, [pc, #308]	; (8006504 <xTaskIncrementTick+0x154>)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d120      	bne.n	800641a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063d8:	4b4b      	ldr	r3, [pc, #300]	; (8006508 <xTaskIncrementTick+0x158>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	603b      	str	r3, [r7, #0]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xTaskIncrementTick+0x46>
 80063f8:	4b43      	ldr	r3, [pc, #268]	; (8006508 <xTaskIncrementTick+0x158>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4b43      	ldr	r3, [pc, #268]	; (800650c <xTaskIncrementTick+0x15c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a41      	ldr	r2, [pc, #260]	; (8006508 <xTaskIncrementTick+0x158>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4a41      	ldr	r2, [pc, #260]	; (800650c <xTaskIncrementTick+0x15c>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	4b40      	ldr	r3, [pc, #256]	; (8006510 <xTaskIncrementTick+0x160>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	4a3f      	ldr	r2, [pc, #252]	; (8006510 <xTaskIncrementTick+0x160>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	f000 fb71 	bl	8006afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800641a:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <xTaskIncrementTick+0x164>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d34e      	bcc.n	80064c2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006424:	4b38      	ldr	r3, [pc, #224]	; (8006508 <xTaskIncrementTick+0x158>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <xTaskIncrementTick+0x82>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <xTaskIncrementTick+0x84>
 8006432:	2300      	movs	r3, #0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006438:	4b36      	ldr	r3, [pc, #216]	; (8006514 <xTaskIncrementTick+0x164>)
 800643a:	f04f 32ff 	mov.w	r2, #4294967295
 800643e:	601a      	str	r2, [r3, #0]
					break;
 8006440:	e03f      	b.n	80064c2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006442:	4b31      	ldr	r3, [pc, #196]	; (8006508 <xTaskIncrementTick+0x158>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d203      	bcs.n	8006462 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800645a:	4a2e      	ldr	r2, [pc, #184]	; (8006514 <xTaskIncrementTick+0x164>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6013      	str	r3, [r2, #0]
						break;
 8006460:	e02f      	b.n	80064c2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	3304      	adds	r3, #4
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fcc2 	bl	8004df0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	3318      	adds	r3, #24
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fcb9 	bl	8004df0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	4b25      	ldr	r3, [pc, #148]	; (8006518 <xTaskIncrementTick+0x168>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d903      	bls.n	8006492 <xTaskIncrementTick+0xe2>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a22      	ldr	r2, [pc, #136]	; (8006518 <xTaskIncrementTick+0x168>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a1f      	ldr	r2, [pc, #124]	; (800651c <xTaskIncrementTick+0x16c>)
 80064a0:	441a      	add	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe fc46 	bl	8004d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <xTaskIncrementTick+0x170>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3b3      	bcc.n	8006424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c0:	e7b0      	b.n	8006424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <xTaskIncrementTick+0x170>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	4914      	ldr	r1, [pc, #80]	; (800651c <xTaskIncrementTick+0x16c>)
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d907      	bls.n	80064ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e004      	b.n	80064ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <xTaskIncrementTick+0x174>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <xTaskIncrementTick+0x174>)
 80064e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064ea:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <xTaskIncrementTick+0x178>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064f6:	697b      	ldr	r3, [r7, #20]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000ccc 	.word	0x20000ccc
 8006504:	20000ca8 	.word	0x20000ca8
 8006508:	20000c5c 	.word	0x20000c5c
 800650c:	20000c60 	.word	0x20000c60
 8006510:	20000cbc 	.word	0x20000cbc
 8006514:	20000cc4 	.word	0x20000cc4
 8006518:	20000cac 	.word	0x20000cac
 800651c:	200007d4 	.word	0x200007d4
 8006520:	200007d0 	.word	0x200007d0
 8006524:	20000cb4 	.word	0x20000cb4
 8006528:	20000cb8 	.word	0x20000cb8

0800652c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <vTaskSwitchContext+0xa4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <vTaskSwitchContext+0xa8>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006540:	e041      	b.n	80065c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <vTaskSwitchContext+0xa8>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <vTaskSwitchContext+0xac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e010      	b.n	8006572 <vTaskSwitchContext+0x46>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <vTaskSwitchContext+0x40>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <vTaskSwitchContext+0x3e>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3b01      	subs	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	491a      	ldr	r1, [pc, #104]	; (80065dc <vTaskSwitchContext+0xb0>)
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0e4      	beq.n	8006550 <vTaskSwitchContext+0x24>
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4a12      	ldr	r2, [pc, #72]	; (80065dc <vTaskSwitchContext+0xb0>)
 8006592:	4413      	add	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	3308      	adds	r3, #8
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d104      	bne.n	80065b6 <vTaskSwitchContext+0x8a>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <vTaskSwitchContext+0xb4>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <vTaskSwitchContext+0xac>)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6013      	str	r3, [r2, #0]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	20000ccc 	.word	0x20000ccc
 80065d4:	20000cb8 	.word	0x20000cb8
 80065d8:	20000cac 	.word	0x20000cac
 80065dc:	200007d4 	.word	0x200007d4
 80065e0:	200007d0 	.word	0x200007d0

080065e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60fb      	str	r3, [r7, #12]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <vTaskPlaceOnEventList+0x44>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3318      	adds	r3, #24
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe fbb4 	bl	8004d80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006618:	2101      	movs	r1, #1
 800661a:	6838      	ldr	r0, [r7, #0]
 800661c:	f000 fc4c 	bl	8006eb8 <prvAddCurrentTaskToDelayedList>
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200007d0 	.word	0x200007d0

0800662c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	617b      	str	r3, [r7, #20]
}
 8006650:	bf00      	nop
 8006652:	e7fe      	b.n	8006652 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006654:	4b11      	ldr	r3, [pc, #68]	; (800669c <vTaskPlaceOnUnorderedEventList+0x70>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	613b      	str	r3, [r7, #16]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800667c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3318      	adds	r3, #24
 8006684:	4619      	mov	r1, r3
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fe fb57 	bl	8004d3a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800668c:	2101      	movs	r1, #1
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc12 	bl	8006eb8 <prvAddCurrentTaskToDelayedList>
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000ccc 	.word	0x20000ccc
 80066a0:	200007d0 	.word	0x200007d0

080066a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3318      	adds	r3, #24
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7fe fb30 	bl	8004d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	68b8      	ldr	r0, [r7, #8]
 80066ea:	f000 fbe5 	bl	8006eb8 <prvAddCurrentTaskToDelayedList>
	}
 80066ee:	bf00      	nop
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200007d0 	.word	0x200007d0

080066fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	60fb      	str	r3, [r7, #12]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3318      	adds	r3, #24
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fb5f 	bl	8004df0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006732:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <xTaskRemoveFromEventList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11d      	bne.n	8006776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fb56 	bl	8004df0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <xTaskRemoveFromEventList+0xb4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d903      	bls.n	8006758 <xTaskRemoveFromEventList+0x5c>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <xTaskRemoveFromEventList+0xb4>)
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <xTaskRemoveFromEventList+0xb8>)
 8006766:	441a      	add	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fe fae3 	bl	8004d3a <vListInsertEnd>
 8006774:	e005      	b.n	8006782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3318      	adds	r3, #24
 800677a:	4619      	mov	r1, r3
 800677c:	480e      	ldr	r0, [pc, #56]	; (80067b8 <xTaskRemoveFromEventList+0xbc>)
 800677e:	f7fe fadc 	bl	8004d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <xTaskRemoveFromEventList+0xc0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d905      	bls.n	800679c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <xTaskRemoveFromEventList+0xc4>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e001      	b.n	80067a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80067a0:	697b      	ldr	r3, [r7, #20]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000ccc 	.word	0x20000ccc
 80067b0:	20000cac 	.word	0x20000cac
 80067b4:	200007d4 	.word	0x200007d4
 80067b8:	20000c64 	.word	0x20000c64
 80067bc:	200007d0 	.word	0x200007d0
 80067c0:	20000cb8 	.word	0x20000cb8

080067c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	613b      	str	r3, [r7, #16]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60fb      	str	r3, [r7, #12]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fe fae9 	bl	8004df0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	3304      	adds	r3, #4
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fae4 	bl	8004df0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	4b12      	ldr	r3, [pc, #72]	; (8006878 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d903      	bls.n	800683c <vTaskRemoveFromUnorderedEventList+0x78>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a0f      	ldr	r2, [pc, #60]	; (8006878 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4a0c      	ldr	r2, [pc, #48]	; (800687c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800684a:	441a      	add	r2, r3
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7fe fa71 	bl	8004d3a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	429a      	cmp	r2, r3
 8006864:	d902      	bls.n	800686c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006868:	2201      	movs	r2, #1
 800686a:	601a      	str	r2, [r3, #0]
	}
}
 800686c:	bf00      	nop
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000ccc 	.word	0x20000ccc
 8006878:	20000cac 	.word	0x20000cac
 800687c:	200007d4 	.word	0x200007d4
 8006880:	200007d0 	.word	0x200007d0
 8006884:	20000cb8 	.word	0x20000cb8

08006888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <vTaskInternalSetTimeOutState+0x24>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <vTaskInternalSetTimeOutState+0x28>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000cbc 	.word	0x20000cbc
 80068b0:	20000ca8 	.word	0x20000ca8

080068b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	613b      	str	r3, [r7, #16]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068f6:	f000 ff59 	bl	80077ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <xTaskCheckForTimeOut+0xbc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d102      	bne.n	800691a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e023      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <xTaskCheckForTimeOut+0xc0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d007      	beq.n	8006936 <xTaskCheckForTimeOut+0x82>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	429a      	cmp	r2, r3
 800692e:	d302      	bcc.n	8006936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	e015      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	429a      	cmp	r2, r3
 800693e:	d20b      	bcs.n	8006958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ff9b 	bl	8006888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e004      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006962:	f000 ff53 	bl	800780c <vPortExitCritical>

	return xReturn;
 8006966:	69fb      	ldr	r3, [r7, #28]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000ca8 	.word	0x20000ca8
 8006974:	20000cbc 	.word	0x20000cbc

08006978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <vTaskMissedYield+0x14>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
}
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000cb8 	.word	0x20000cb8

08006990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006998:	f000 f852 	bl	8006a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <prvIdleTask+0x28>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d9f9      	bls.n	8006998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <prvIdleTask+0x2c>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069b4:	e7f0      	b.n	8006998 <prvIdleTask+0x8>
 80069b6:	bf00      	nop
 80069b8:	200007d4 	.word	0x200007d4
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	e00c      	b.n	80069e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <prvInitialiseTaskLists+0x60>)
 80069d8:	4413      	add	r3, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe f982 	bl	8004ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3301      	adds	r3, #1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b37      	cmp	r3, #55	; 0x37
 80069ea:	d9ef      	bls.n	80069cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069ec:	480d      	ldr	r0, [pc, #52]	; (8006a24 <prvInitialiseTaskLists+0x64>)
 80069ee:	f7fe f979 	bl	8004ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069f2:	480d      	ldr	r0, [pc, #52]	; (8006a28 <prvInitialiseTaskLists+0x68>)
 80069f4:	f7fe f976 	bl	8004ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069f8:	480c      	ldr	r0, [pc, #48]	; (8006a2c <prvInitialiseTaskLists+0x6c>)
 80069fa:	f7fe f973 	bl	8004ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069fe:	480c      	ldr	r0, [pc, #48]	; (8006a30 <prvInitialiseTaskLists+0x70>)
 8006a00:	f7fe f970 	bl	8004ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a04:	480b      	ldr	r0, [pc, #44]	; (8006a34 <prvInitialiseTaskLists+0x74>)
 8006a06:	f7fe f96d 	bl	8004ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <prvInitialiseTaskLists+0x78>)
 8006a0c:	4a05      	ldr	r2, [pc, #20]	; (8006a24 <prvInitialiseTaskLists+0x64>)
 8006a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvInitialiseTaskLists+0x7c>)
 8006a12:	4a05      	ldr	r2, [pc, #20]	; (8006a28 <prvInitialiseTaskLists+0x68>)
 8006a14:	601a      	str	r2, [r3, #0]
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200007d4 	.word	0x200007d4
 8006a24:	20000c34 	.word	0x20000c34
 8006a28:	20000c48 	.word	0x20000c48
 8006a2c:	20000c64 	.word	0x20000c64
 8006a30:	20000c78 	.word	0x20000c78
 8006a34:	20000c90 	.word	0x20000c90
 8006a38:	20000c5c 	.word	0x20000c5c
 8006a3c:	20000c60 	.word	0x20000c60

08006a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a46:	e019      	b.n	8006a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a48:	f000 feb0 	bl	80077ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <prvCheckTasksWaitingTermination+0x50>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe f9c9 	bl	8004df0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <prvCheckTasksWaitingTermination+0x54>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <prvCheckTasksWaitingTermination+0x54>)
 8006a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a72:	f000 fecb 	bl	800780c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f810 	bl	8006a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e1      	bne.n	8006a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000c78 	.word	0x20000c78
 8006a94:	20000ca4 	.word	0x20000ca4
 8006a98:	20000c8c 	.word	0x20000c8c

08006a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 f83e 	bl	8007b34 <vPortFree>
				vPortFree( pxTCB );
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f83b 	bl	8007b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006abe:	e018      	b.n	8006af2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d103      	bne.n	8006ad2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f832 	bl	8007b34 <vPortFree>
	}
 8006ad0:	e00f      	b.n	8006af2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d00a      	beq.n	8006af2 <prvDeleteTCB+0x56>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60fb      	str	r3, [r7, #12]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <prvDeleteTCB+0x54>
	}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b02:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <prvResetNextTaskUnblockTime+0x40>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <prvResetNextTaskUnblockTime+0x14>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <prvResetNextTaskUnblockTime+0x16>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <prvResetNextTaskUnblockTime+0x44>)
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b1e:	e008      	b.n	8006b32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <prvResetNextTaskUnblockTime+0x40>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <prvResetNextTaskUnblockTime+0x44>)
 8006b30:	6013      	str	r3, [r2, #0]
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	20000c5c 	.word	0x20000c5c
 8006b40:	20000cc4 	.word	0x20000cc4

08006b44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <xTaskGetCurrentTaskHandle+0x18>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b50:	687b      	ldr	r3, [r7, #4]
	}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	200007d0 	.word	0x200007d0

08006b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <xTaskGetSchedulerState+0x34>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	e008      	b.n	8006b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <xTaskGetSchedulerState+0x38>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	e001      	b.n	8006b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b86:	687b      	ldr	r3, [r7, #4]
	}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000cb0 	.word	0x20000cb0
 8006b98:	20000ccc 	.word	0x20000ccc

08006b9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d056      	beq.n	8006c60 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <xTaskPriorityInherit+0xd0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d246      	bcs.n	8006c4e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	db06      	blt.n	8006bd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc8:	4b28      	ldr	r3, [pc, #160]	; (8006c6c <xTaskPriorityInherit+0xd0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6959      	ldr	r1, [r3, #20]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4a22      	ldr	r2, [pc, #136]	; (8006c70 <xTaskPriorityInherit+0xd4>)
 8006be8:	4413      	add	r3, r2
 8006bea:	4299      	cmp	r1, r3
 8006bec:	d101      	bne.n	8006bf2 <xTaskPriorityInherit+0x56>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <xTaskPriorityInherit+0x58>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d022      	beq.n	8006c3e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe f8f7 	bl	8004df0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c02:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <xTaskPriorityInherit+0xd0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <xTaskPriorityInherit+0xd8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d903      	bls.n	8006c20 <xTaskPriorityInherit+0x84>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <xTaskPriorityInherit+0xd8>)
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <xTaskPriorityInherit+0xd4>)
 8006c2e:	441a      	add	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7fe f87f 	bl	8004d3a <vListInsertEnd>
 8006c3c:	e004      	b.n	8006c48 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <xTaskPriorityInherit+0xd0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e008      	b.n	8006c60 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <xTaskPriorityInherit+0xd0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d201      	bcs.n	8006c60 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c60:	68fb      	ldr	r3, [r7, #12]
	}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200007d0 	.word	0x200007d0
 8006c70:	200007d4 	.word	0x200007d4
 8006c74:	20000cac 	.word	0x20000cac

08006c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d056      	beq.n	8006d3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c8e:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <xTaskPriorityDisinherit+0xd0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d00a      	beq.n	8006cae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	60fb      	str	r3, [r7, #12]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d02c      	beq.n	8006d3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d128      	bne.n	8006d3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe f87e 	bl	8004df0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <xTaskPriorityDisinherit+0xd4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <xTaskPriorityDisinherit+0xa4>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <xTaskPriorityDisinherit+0xd4>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <xTaskPriorityDisinherit+0xd8>)
 8006d2a:	441a      	add	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fe f801 	bl	8004d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d3c:	697b      	ldr	r3, [r7, #20]
	}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200007d0 	.word	0x200007d0
 8006d4c:	20000cac 	.word	0x20000cac
 8006d50:	200007d4 	.word	0x200007d4

08006d54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d06f      	beq.n	8006e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d902      	bls.n	8006d9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e002      	b.n	8006da0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d050      	beq.n	8006e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d14b      	bne.n	8006e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006db4:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10a      	bne.n	8006dd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60bb      	str	r3, [r7, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db04      	blt.n	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	6959      	ldr	r1, [r3, #20]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e02:	4413      	add	r3, r2
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d101      	bne.n	8006e0c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01c      	beq.n	8006e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3304      	adds	r3, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd ffea 	bl	8004df0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	4b0e      	ldr	r3, [pc, #56]	; (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d903      	bls.n	8006e30 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a0b      	ldr	r2, [pc, #44]	; (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a06      	ldr	r2, [pc, #24]	; (8006e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fd ff77 	bl	8004d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e4c:	bf00      	nop
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200007d0 	.word	0x200007d0
 8006e58:	200007d4 	.word	0x200007d4
 8006e5c:	20000cac 	.word	0x20000cac

08006e60 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <uxTaskResetEventItemValue+0x2c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <uxTaskResetEventItemValue+0x2c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <uxTaskResetEventItemValue+0x2c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006e7c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006e7e:	687b      	ldr	r3, [r7, #4]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	200007d0 	.word	0x200007d0

08006e90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
	}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	200007d0 	.word	0x200007d0

08006eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec8:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fd ff8e 	bl	8004df0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d10a      	bne.n	8006ef2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4819      	ldr	r0, [pc, #100]	; (8006f50 <prvAddCurrentTaskToDelayedList+0x98>)
 8006eec:	f7fd ff25 	bl	8004d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ef0:	e026      	b.n	8006f40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d209      	bcs.n	8006f1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fd ff32 	bl	8004d80 <vListInsert>
}
 8006f1c:	e010      	b.n	8006f40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f1e:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f7fd ff28 	bl	8004d80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d202      	bcs.n	8006f40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f3a:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6013      	str	r3, [r2, #0]
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000ca8 	.word	0x20000ca8
 8006f4c:	200007d0 	.word	0x200007d0
 8006f50:	20000c90 	.word	0x20000c90
 8006f54:	20000c60 	.word	0x20000c60
 8006f58:	20000c5c 	.word	0x20000c5c
 8006f5c:	20000cc4 	.word	0x20000cc4

08006f60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f6a:	f000 facb 	bl	8007504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f6e:	4b1c      	ldr	r3, [pc, #112]	; (8006fe0 <xTimerCreateTimerTask+0x80>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d021      	beq.n	8006fba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f7e:	1d3a      	adds	r2, r7, #4
 8006f80:	f107 0108 	add.w	r1, r7, #8
 8006f84:	f107 030c 	add.w	r3, r7, #12
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd fca5 	bl	80048d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	4910      	ldr	r1, [pc, #64]	; (8006fe4 <xTimerCreateTimerTask+0x84>)
 8006fa2:	4811      	ldr	r0, [pc, #68]	; (8006fe8 <xTimerCreateTimerTask+0x88>)
 8006fa4:	f7fe fe4c 	bl	8005c40 <xTaskCreateStatic>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4a10      	ldr	r2, [pc, #64]	; (8006fec <xTimerCreateTimerTask+0x8c>)
 8006fac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <xTimerCreateTimerTask+0x8c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fd6:	697b      	ldr	r3, [r7, #20]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000d00 	.word	0x20000d00
 8006fe4:	08007e3c 	.word	0x08007e3c
 8006fe8:	0800710d 	.word	0x0800710d
 8006fec:	20000d04 	.word	0x20000d04

08006ff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	623b      	str	r3, [r7, #32]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800701e:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <xTimerGenericCommand+0x98>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02a      	beq.n	800707c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b05      	cmp	r3, #5
 8007036:	dc18      	bgt.n	800706a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007038:	f7ff fd92 	bl	8006b60 <xTaskGetSchedulerState>
 800703c:	4603      	mov	r3, r0
 800703e:	2b02      	cmp	r3, #2
 8007040:	d109      	bne.n	8007056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007042:	4b11      	ldr	r3, [pc, #68]	; (8007088 <xTimerGenericCommand+0x98>)
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f107 0110 	add.w	r1, r7, #16
 800704a:	2300      	movs	r3, #0
 800704c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704e:	f7fe f8f1 	bl	8005234 <xQueueGenericSend>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24
 8007054:	e012      	b.n	800707c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <xTimerGenericCommand+0x98>)
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	f107 0110 	add.w	r1, r7, #16
 800705e:	2300      	movs	r3, #0
 8007060:	2200      	movs	r2, #0
 8007062:	f7fe f8e7 	bl	8005234 <xQueueGenericSend>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24
 8007068:	e008      	b.n	800707c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <xTimerGenericCommand+0x98>)
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	f107 0110 	add.w	r1, r7, #16
 8007072:	2300      	movs	r3, #0
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	f7fe f9db 	bl	8005430 <xQueueGenericSendFromISR>
 800707a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800707e:	4618      	mov	r0, r3
 8007080:	3728      	adds	r7, #40	; 0x28
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000d00 	.word	0x20000d00

0800708c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007096:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <prvProcessExpiredTimer+0x7c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fd fea3 	bl	8004df0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d122      	bne.n	80070f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	18d1      	adds	r1, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	6978      	ldr	r0, [r7, #20]
 80070c0:	f000 f8c8 	bl	8007254 <prvInsertTimerInActiveList>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d016      	beq.n	80070f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ca:	2300      	movs	r3, #0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	2100      	movs	r1, #0
 80070d4:	6978      	ldr	r0, [r7, #20]
 80070d6:	f7ff ff8b 	bl	8006ff0 <xTimerGenericCommand>
 80070da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60fb      	str	r3, [r7, #12]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	4798      	blx	r3
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20000cf8 	.word	0x20000cf8

0800710c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f857 	bl	80071cc <prvGetNextExpireTime>
 800711e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4619      	mov	r1, r3
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f803 	bl	8007130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800712a:	f000 f8d5 	bl	80072d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800712e:	e7f1      	b.n	8007114 <prvTimerTask+0x8>

08007130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800713a:	f7ff f87f 	bl	800623c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f866 	bl	8007214 <prvSampleTimeNow>
 8007148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d130      	bne.n	80071b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <prvProcessTimerOrBlockTask+0x3c>
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	429a      	cmp	r2, r3
 800715c:	d806      	bhi.n	800716c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800715e:	f7ff f87b 	bl	8006258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ff91 	bl	800708c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800716a:	e024      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <prvProcessTimerOrBlockTask+0x90>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <prvProcessTimerOrBlockTask+0x94>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	f7fe fd21 	bl	8005bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007196:	f7ff f85f 	bl	8006258 <xTaskResumeAll>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <prvProcessTimerOrBlockTask+0x98>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
}
 80071b0:	e001      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071b2:	f7ff f851 	bl	8006258 <xTaskResumeAll>
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000cfc 	.word	0x20000cfc
 80071c4:	20000d00 	.word	0x20000d00
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bf0c      	ite	eq
 80071de:	2301      	moveq	r3, #1
 80071e0:	2300      	movne	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e001      	b.n	8007202 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000cf8 	.word	0x20000cf8

08007214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800721c:	f7ff f8ba 	bl	8006394 <xTaskGetTickCount>
 8007220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d205      	bcs.n	8007238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800722c:	f000 f908 	bl	8007440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e002      	b.n	800723e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000d08 	.word	0x20000d08

08007254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d812      	bhi.n	80072a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e01b      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <prvInsertTimerInActiveList+0x7c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fd fd71 	bl	8004d80 <vListInsert>
 800729e:	e012      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d206      	bcs.n	80072b6 <prvInsertTimerInActiveList+0x62>
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e007      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <prvInsertTimerInActiveList+0x80>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fd fd5d 	bl	8004d80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000cfc 	.word	0x20000cfc
 80072d4:	20000cf8 	.word	0x20000cf8

080072d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	e09d      	b.n	800741c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da18      	bge.n	8007318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	3304      	adds	r3, #4
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730e:	6850      	ldr	r0, [r2, #4]
 8007310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007312:	6892      	ldr	r2, [r2, #8]
 8007314:	4611      	mov	r1, r2
 8007316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db7e      	blt.n	800741c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fd5e 	bl	8004df0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007334:	463b      	mov	r3, r7
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ff6c 	bl	8007214 <prvSampleTimeNow>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b09      	cmp	r3, #9
 8007342:	d86a      	bhi.n	800741a <prvProcessReceivedCommands+0x142>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <prvProcessReceivedCommands+0x74>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007375 	.word	0x08007375
 8007350:	08007375 	.word	0x08007375
 8007354:	08007375 	.word	0x08007375
 8007358:	0800741d 	.word	0x0800741d
 800735c:	080073d1 	.word	0x080073d1
 8007360:	08007409 	.word	0x08007409
 8007364:	08007375 	.word	0x08007375
 8007368:	08007375 	.word	0x08007375
 800736c:	0800741d 	.word	0x0800741d
 8007370:	080073d1 	.word	0x080073d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	18d1      	adds	r1, r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007382:	f7ff ff67 	bl	8007254 <prvInsertTimerInActiveList>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d047      	beq.n	800741c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007392:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d13f      	bne.n	800741c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	441a      	add	r2, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ae:	f7ff fe1f 	bl	8006ff0 <xTimerGenericCommand>
 80073b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d130      	bne.n	800741c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	61bb      	str	r3, [r7, #24]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	617b      	str	r3, [r7, #20]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	18d1      	adds	r1, r2, r3
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007402:	f7ff ff27 	bl	8007254 <prvInsertTimerInActiveList>
					break;
 8007406:	e009      	b.n	800741c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007414:	f000 fb8e 	bl	8007b34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007418:	e000      	b.n	800741c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800741a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800741c:	4b07      	ldr	r3, [pc, #28]	; (800743c <prvProcessReceivedCommands+0x164>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	1d39      	adds	r1, r7, #4
 8007422:	2200      	movs	r2, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe f89b 	bl	8005560 <xQueueReceive>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f af57 	bne.w	80072e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	3730      	adds	r7, #48	; 0x30
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000d00 	.word	0x20000d00

08007440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007446:	e045      	b.n	80074d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007448:	4b2c      	ldr	r3, [pc, #176]	; (80074fc <prvSwitchTimerLists+0xbc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007452:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <prvSwitchTimerLists+0xbc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3304      	adds	r3, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd fcc5 	bl	8004df0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d12e      	bne.n	80074d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4413      	add	r3, r2
 800747e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d90e      	bls.n	80074a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <prvSwitchTimerLists+0xbc>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fd fc6e 	bl	8004d80 <vListInsert>
 80074a4:	e016      	b.n	80074d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074a6:	2300      	movs	r3, #0
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	2100      	movs	r1, #0
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fd9d 	bl	8006ff0 <xTimerGenericCommand>
 80074b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	603b      	str	r3, [r7, #0]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <prvSwitchTimerLists+0xbc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1b4      	bne.n	8007448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <prvSwitchTimerLists+0xbc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <prvSwitchTimerLists+0xc0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a04      	ldr	r2, [pc, #16]	; (80074fc <prvSwitchTimerLists+0xbc>)
 80074ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074ec:	4a04      	ldr	r2, [pc, #16]	; (8007500 <prvSwitchTimerLists+0xc0>)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6013      	str	r3, [r2, #0]
}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000cf8 	.word	0x20000cf8
 8007500:	20000cfc 	.word	0x20000cfc

08007504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800750a:	f000 f94f 	bl	80077ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800750e:	4b15      	ldr	r3, [pc, #84]	; (8007564 <prvCheckForValidListAndQueue+0x60>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d120      	bne.n	8007558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007516:	4814      	ldr	r0, [pc, #80]	; (8007568 <prvCheckForValidListAndQueue+0x64>)
 8007518:	f7fd fbe4 	bl	8004ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800751c:	4813      	ldr	r0, [pc, #76]	; (800756c <prvCheckForValidListAndQueue+0x68>)
 800751e:	f7fd fbe1 	bl	8004ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007522:	4b13      	ldr	r3, [pc, #76]	; (8007570 <prvCheckForValidListAndQueue+0x6c>)
 8007524:	4a10      	ldr	r2, [pc, #64]	; (8007568 <prvCheckForValidListAndQueue+0x64>)
 8007526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007528:	4b12      	ldr	r3, [pc, #72]	; (8007574 <prvCheckForValidListAndQueue+0x70>)
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <prvCheckForValidListAndQueue+0x68>)
 800752c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800752e:	2300      	movs	r3, #0
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4b11      	ldr	r3, [pc, #68]	; (8007578 <prvCheckForValidListAndQueue+0x74>)
 8007534:	4a11      	ldr	r2, [pc, #68]	; (800757c <prvCheckForValidListAndQueue+0x78>)
 8007536:	2110      	movs	r1, #16
 8007538:	200a      	movs	r0, #10
 800753a:	f7fd fceb 	bl	8004f14 <xQueueGenericCreateStatic>
 800753e:	4603      	mov	r3, r0
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <prvCheckForValidListAndQueue+0x60>)
 8007542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007544:	4b07      	ldr	r3, [pc, #28]	; (8007564 <prvCheckForValidListAndQueue+0x60>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <prvCheckForValidListAndQueue+0x60>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	490b      	ldr	r1, [pc, #44]	; (8007580 <prvCheckForValidListAndQueue+0x7c>)
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fb18 	bl	8005b88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007558:	f000 f958 	bl	800780c <vPortExitCritical>
}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000d00 	.word	0x20000d00
 8007568:	20000cd0 	.word	0x20000cd0
 800756c:	20000ce4 	.word	0x20000ce4
 8007570:	20000cf8 	.word	0x20000cf8
 8007574:	20000cfc 	.word	0x20000cfc
 8007578:	20000dac 	.word	0x20000dac
 800757c:	20000d0c 	.word	0x20000d0c
 8007580:	08007e44 	.word	0x08007e44

08007584 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007592:	f06f 0301 	mvn.w	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <xTimerPendFunctionCallFromISR+0x3c>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	f107 0114 	add.w	r1, r7, #20
 80075ac:	2300      	movs	r3, #0
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	f7fd ff3e 	bl	8005430 <xQueueGenericSendFromISR>
 80075b4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000d00 	.word	0x20000d00

080075c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b04      	subs	r3, #4
 80075d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f023 0201 	bic.w	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <pxPortInitialiseStack+0x54>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b14      	subs	r3, #20
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b20      	subs	r3, #32
 800760a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr
 8007618:	0800761d 	.word	0x0800761d

0800761c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <prvTaskExitError+0x54>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d00a      	beq.n	8007646 <prvTaskExitError+0x2a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <prvTaskExitError+0x28>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
}
 8007658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800765a:	bf00      	nop
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0fc      	beq.n	800765c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000034 	.word	0x20000034
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	f04e 0e0d 	orr.w	lr, lr, #13
 800769e:	4770      	bx	lr

080076a0 <pxCurrentTCBConst2>:
 80076a0:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80076a8:	4806      	ldr	r0, [pc, #24]	; (80076c4 <prvPortStartFirstTask+0x1c>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	b662      	cpsie	i
 80076b4:	b661      	cpsie	f
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	df00      	svc	0
 80076c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076c2:	bf00      	nop
 80076c4:	e000ed08 	.word	0xe000ed08

080076c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076ce:	4b32      	ldr	r3, [pc, #200]	; (8007798 <xPortStartScheduler+0xd0>)
 80076d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	22ff      	movs	r2, #255	; 0xff
 80076de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	4b2a      	ldr	r3, [pc, #168]	; (800779c <xPortStartScheduler+0xd4>)
 80076f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <xPortStartScheduler+0xd8>)
 80076f8:	2207      	movs	r2, #7
 80076fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076fc:	e009      	b.n	8007712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80076fe:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d0ef      	beq.n	80076fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800771e:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1c3 0307 	rsb	r3, r3, #7
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00a      	beq.n	8007740 <xPortStartScheduler+0x78>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007748:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <xPortStartScheduler+0xd8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007752:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <xPortStartScheduler+0xd8>)
 8007754:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800775e:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <xPortStartScheduler+0xdc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a10      	ldr	r2, [pc, #64]	; (80077a4 <xPortStartScheduler+0xdc>)
 8007764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800776a:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <xPortStartScheduler+0xdc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a0d      	ldr	r2, [pc, #52]	; (80077a4 <xPortStartScheduler+0xdc>)
 8007770:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007774:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007776:	f000 f8b9 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <xPortStartScheduler+0xe0>)
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007780:	f7ff ff92 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007784:	f7fe fed2 	bl	800652c <vTaskSwitchContext>
	prvTaskExitError();
 8007788:	f7ff ff48 	bl	800761c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	e000e400 	.word	0xe000e400
 800779c:	20000dfc 	.word	0x20000dfc
 80077a0:	20000e00 	.word	0x20000e00
 80077a4:	e000ed20 	.word	0xe000ed20
 80077a8:	20000034 	.word	0x20000034

080077ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <vPortEnterCritical+0x58>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a0d      	ldr	r2, [pc, #52]	; (8007804 <vPortEnterCritical+0x58>)
 80077ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <vPortEnterCritical+0x58>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d10f      	bne.n	80077f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <vPortEnterCritical+0x5c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	603b      	str	r3, [r7, #0]
}
 80077f4:	bf00      	nop
 80077f6:	e7fe      	b.n	80077f6 <vPortEnterCritical+0x4a>
	}
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000034 	.word	0x20000034
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <vPortExitCritical+0x4c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <vPortExitCritical+0x24>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007830:	4b09      	ldr	r3, [pc, #36]	; (8007858 <vPortExitCritical+0x4c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3b01      	subs	r3, #1
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <vPortExitCritical+0x4c>)
 8007838:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800783a:	4b07      	ldr	r3, [pc, #28]	; (8007858 <vPortExitCritical+0x4c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <vPortExitCritical+0x42>
 8007842:	2300      	movs	r3, #0
 8007844:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f383 8811 	msr	BASEPRI, r3
}
 800784c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	20000034 	.word	0x20000034
 800785c:	00000000 	.word	0x00000000

08007860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007860:	f3ef 8009 	mrs	r0, PSP
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4b0d      	ldr	r3, [pc, #52]	; (80078a0 <pxCurrentTCBConst>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800787a:	f380 8811 	msr	BASEPRI, r0
 800787e:	f7fe fe55 	bl	800652c <vTaskSwitchContext>
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007896:	f380 8809 	msr	PSP, r0
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	4770      	bx	lr

080078a0 <pxCurrentTCBConst>:
 80078a0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fd75 	bl	80063b0 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <SysTick_Handler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortSetupTimerInterrupt+0x30>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a09      	ldr	r2, [pc, #36]	; (8007928 <vPortSetupTimerInterrupt+0x3c>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a08      	ldr	r2, [pc, #32]	; (800792c <vPortSetupTimerInterrupt+0x40>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b03      	ldr	r3, [pc, #12]	; (800791c <vPortSetupTimerInterrupt+0x30>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	e000e010 	.word	0xe000e010
 8007920:	e000e018 	.word	0xe000e018
 8007924:	20000028 	.word	0x20000028
 8007928:	10624dd3 	.word	0x10624dd3
 800792c:	e000e014 	.word	0xe000e014

08007930 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b0f      	cmp	r3, #15
 8007940:	d914      	bls.n	800796c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007942:	4a16      	ldr	r2, [pc, #88]	; (800799c <vPortValidateInterruptPriority+0x6c>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800794c:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <vPortValidateInterruptPriority+0x70>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	7afa      	ldrb	r2, [r7, #11]
 8007952:	429a      	cmp	r2, r3
 8007954:	d20a      	bcs.n	800796c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	607b      	str	r3, [r7, #4]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <vPortValidateInterruptPriority+0x74>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <vPortValidateInterruptPriority+0x78>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d90a      	bls.n	8007992 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	603b      	str	r3, [r7, #0]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <vPortValidateInterruptPriority+0x60>
	}
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr
 800799c:	e000e3f0 	.word	0xe000e3f0
 80079a0:	20000dfc 	.word	0x20000dfc
 80079a4:	e000ed0c 	.word	0xe000ed0c
 80079a8:	20000e00 	.word	0x20000e00

080079ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079b8:	f7fe fc40 	bl	800623c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079bc:	4b58      	ldr	r3, [pc, #352]	; (8007b20 <pvPortMalloc+0x174>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079c4:	f000 f910 	bl	8007be8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079c8:	4b56      	ldr	r3, [pc, #344]	; (8007b24 <pvPortMalloc+0x178>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f040 808e 	bne.w	8007af2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01d      	beq.n	8007a18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079dc:	2208      	movs	r2, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d014      	beq.n	8007a18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f023 0307 	bic.w	r3, r3, #7
 80079f4:	3308      	adds	r3, #8
 80079f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <pvPortMalloc+0x6c>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	617b      	str	r3, [r7, #20]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d069      	beq.n	8007af2 <pvPortMalloc+0x146>
 8007a1e:	4b42      	ldr	r3, [pc, #264]	; (8007b28 <pvPortMalloc+0x17c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d864      	bhi.n	8007af2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a28:	4b40      	ldr	r3, [pc, #256]	; (8007b2c <pvPortMalloc+0x180>)
 8007a2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a2c:	4b3f      	ldr	r3, [pc, #252]	; (8007b2c <pvPortMalloc+0x180>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a32:	e004      	b.n	8007a3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d903      	bls.n	8007a50 <pvPortMalloc+0xa4>
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f1      	bne.n	8007a34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a50:	4b33      	ldr	r3, [pc, #204]	; (8007b20 <pvPortMalloc+0x174>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d04b      	beq.n	8007af2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2208      	movs	r2, #8
 8007a60:	4413      	add	r3, r2
 8007a62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	2308      	movs	r3, #8
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d91f      	bls.n	8007abc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <pvPortMalloc+0xf8>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	613b      	str	r3, [r7, #16]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ab6:	69b8      	ldr	r0, [r7, #24]
 8007ab8:	f000 f8f8 	bl	8007cac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007abc:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <pvPortMalloc+0x17c>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <pvPortMalloc+0x17c>)
 8007ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007aca:	4b17      	ldr	r3, [pc, #92]	; (8007b28 <pvPortMalloc+0x17c>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <pvPortMalloc+0x184>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d203      	bcs.n	8007ade <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <pvPortMalloc+0x17c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <pvPortMalloc+0x184>)
 8007adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <pvPortMalloc+0x178>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007af2:	f7fe fbb1 	bl	8006258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <pvPortMalloc+0x16a>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60fb      	str	r3, [r7, #12]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <pvPortMalloc+0x168>
	return pvReturn;
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3728      	adds	r7, #40	; 0x28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001a0c 	.word	0x20001a0c
 8007b24:	20001a18 	.word	0x20001a18
 8007b28:	20001a10 	.word	0x20001a10
 8007b2c:	20001a04 	.word	0x20001a04
 8007b30:	20001a14 	.word	0x20001a14

08007b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d048      	beq.n	8007bd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b46:	2308      	movs	r3, #8
 8007b48:	425b      	negs	r3, r3
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	4b21      	ldr	r3, [pc, #132]	; (8007be0 <vPortFree+0xac>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vPortFree+0x44>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60fb      	str	r3, [r7, #12]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <vPortFree+0x62>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60bb      	str	r3, [r7, #8]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <vPortFree+0xac>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d019      	beq.n	8007bd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d115      	bne.n	8007bd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortFree+0xac>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bbc:	f7fe fb3e 	bl	800623c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <vPortFree+0xb0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4413      	add	r3, r2
 8007bca:	4a06      	ldr	r2, [pc, #24]	; (8007be4 <vPortFree+0xb0>)
 8007bcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bce:	6938      	ldr	r0, [r7, #16]
 8007bd0:	f000 f86c 	bl	8007cac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007bd4:	f7fe fb40 	bl	8006258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20001a18 	.word	0x20001a18
 8007be4:	20001a10 	.word	0x20001a10

08007be8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007bf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bf4:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <prvHeapInit+0xac>)
 8007bf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00c      	beq.n	8007c1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3307      	adds	r3, #7
 8007c06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0307 	bic.w	r3, r3, #7
 8007c0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	4a1f      	ldr	r2, [pc, #124]	; (8007c94 <prvHeapInit+0xac>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c20:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <prvHeapInit+0xb0>)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c26:	4b1c      	ldr	r3, [pc, #112]	; (8007c98 <prvHeapInit+0xb0>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c34:	2208      	movs	r2, #8
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0307 	bic.w	r3, r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <prvHeapInit+0xb4>)
 8007c48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <prvHeapInit+0xb4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <prvHeapInit+0xb4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c68:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <prvHeapInit+0xb4>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <prvHeapInit+0xb8>)
 8007c76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <prvHeapInit+0xbc>)
 8007c7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c80:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <prvHeapInit+0xc0>)
 8007c82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c86:	601a      	str	r2, [r3, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000e04 	.word	0x20000e04
 8007c98:	20001a04 	.word	0x20001a04
 8007c9c:	20001a0c 	.word	0x20001a0c
 8007ca0:	20001a14 	.word	0x20001a14
 8007ca4:	20001a10 	.word	0x20001a10
 8007ca8:	20001a18 	.word	0x20001a18

08007cac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cb4:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <prvInsertBlockIntoFreeList+0xa8>)
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e002      	b.n	8007cc0 <prvInsertBlockIntoFreeList+0x14>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d8f7      	bhi.n	8007cba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d108      	bne.n	8007cee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	441a      	add	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d118      	bne.n	8007d34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <prvInsertBlockIntoFreeList+0xac>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d00d      	beq.n	8007d2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e008      	b.n	8007d3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <prvInsertBlockIntoFreeList+0xac>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e003      	b.n	8007d3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d002      	beq.n	8007d4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr
 8007d54:	20001a04 	.word	0x20001a04
 8007d58:	20001a0c 	.word	0x20001a0c

08007d5c <memset>:
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4402      	add	r2, r0
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d100      	bne.n	8007d66 <memset+0xa>
 8007d64:	4770      	bx	lr
 8007d66:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6a:	e7f9      	b.n	8007d60 <memset+0x4>

08007d6c <__libc_init_array>:
 8007d6c:	b570      	push	{r4, r5, r6, lr}
 8007d6e:	2600      	movs	r6, #0
 8007d70:	4d0c      	ldr	r5, [pc, #48]	; (8007da4 <__libc_init_array+0x38>)
 8007d72:	4c0d      	ldr	r4, [pc, #52]	; (8007da8 <__libc_init_array+0x3c>)
 8007d74:	1b64      	subs	r4, r4, r5
 8007d76:	10a4      	asrs	r4, r4, #2
 8007d78:	42a6      	cmp	r6, r4
 8007d7a:	d109      	bne.n	8007d90 <__libc_init_array+0x24>
 8007d7c:	f000 f828 	bl	8007dd0 <_init>
 8007d80:	2600      	movs	r6, #0
 8007d82:	4d0a      	ldr	r5, [pc, #40]	; (8007dac <__libc_init_array+0x40>)
 8007d84:	4c0a      	ldr	r4, [pc, #40]	; (8007db0 <__libc_init_array+0x44>)
 8007d86:	1b64      	subs	r4, r4, r5
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	42a6      	cmp	r6, r4
 8007d8c:	d105      	bne.n	8007d9a <__libc_init_array+0x2e>
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d94:	4798      	blx	r3
 8007d96:	3601      	adds	r6, #1
 8007d98:	e7ee      	b.n	8007d78 <__libc_init_array+0xc>
 8007d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9e:	4798      	blx	r3
 8007da0:	3601      	adds	r6, #1
 8007da2:	e7f2      	b.n	8007d8a <__libc_init_array+0x1e>
 8007da4:	08007f38 	.word	0x08007f38
 8007da8:	08007f38 	.word	0x08007f38
 8007dac:	08007f38 	.word	0x08007f38
 8007db0:	08007f3c 	.word	0x08007f3c

08007db4 <memcpy>:
 8007db4:	440a      	add	r2, r1
 8007db6:	4291      	cmp	r1, r2
 8007db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dbc:	d100      	bne.n	8007dc0 <memcpy+0xc>
 8007dbe:	4770      	bx	lr
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc6:	4291      	cmp	r1, r2
 8007dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dcc:	d1f9      	bne.n	8007dc2 <memcpy+0xe>
 8007dce:	bd10      	pop	{r4, pc}

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
