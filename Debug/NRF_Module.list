
NRF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008358  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008468  08008468  00009468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800866c  0800866c  0000a038  2**0
                  CONTENTS
  4 .ARM          00000000  0800866c  0800866c  0000a038  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800866c  0800866c  0000a038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0000966c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00009670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08008674  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000390c  20000038  080086ac  0000a038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003944  080086ac  0000a944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7a2  00000000  00000000  0000a061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cce  00000000  00000000  00024803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  00029d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a248  00000000  00000000  0002aff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5b0  00000000  00000000  0004523d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e8e  00000000  00000000  0005f7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f667b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a8  00000000  00000000  000f66c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000fcc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	08008450 	.word	0x08008450

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	08008450 	.word	0x08008450

08000150 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8000154:	4802      	ldr	r0, [pc, #8]	@ (8000160 <configureTimerForRunTimeStats+0x10>)
 8000156:	f003 fbad 	bl	80038b4 <HAL_TIM_Base_Start_IT>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	200000ac 	.word	0x200000ac

08000164 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8000168:	4b02      	ldr	r3, [pc, #8]	@ (8000174 <getRunTimeCounterValue+0x10>)
 800016a:	681b      	ldr	r3, [r3, #0]
}
 800016c:	4618      	mov	r0, r3
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	20000368 	.word	0x20000368

08000178 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f001 fca4 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f886 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f998 	bl	80004c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000194:	f000 f978 	bl	8000488 <MX_DMA_Init>
  MX_SPI1_Init();
 8000198:	f000 f8c6 	bl	8000328 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800019c:	f000 f94a 	bl	8000434 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80001a0:	f000 f8f8 	bl	8000394 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a4:	f004 fa68 	bl	8004678 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of NRF_Mutex */
  NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 80001a8:	4823      	ldr	r0, [pc, #140]	@ (8000238 <main+0xb4>)
 80001aa:	f004 fd01 	bl	8004bb0 <osMutexNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a22      	ldr	r2, [pc, #136]	@ (800023c <main+0xb8>)
 80001b2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Startup_Task */
  Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 80001b4:	4a22      	ldr	r2, [pc, #136]	@ (8000240 <main+0xbc>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4822      	ldr	r0, [pc, #136]	@ (8000244 <main+0xc0>)
 80001ba:	f004 fac3 	bl	8004744 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a21      	ldr	r2, [pc, #132]	@ (8000248 <main+0xc4>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* creation of Calc_Dis */
  Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 80001c4:	4a21      	ldr	r2, [pc, #132]	@ (800024c <main+0xc8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4821      	ldr	r0, [pc, #132]	@ (8000250 <main+0xcc>)
 80001ca:	f004 fabb 	bl	8004744 <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a20      	ldr	r2, [pc, #128]	@ (8000254 <main+0xd0>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* creation of Local */
  LocalHandle = osThreadNew(Localization, NULL, &Local_attributes);
 80001d4:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <main+0xd4>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4820      	ldr	r0, [pc, #128]	@ (800025c <main+0xd8>)
 80001da:	f004 fab3 	bl	8004744 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000260 <main+0xdc>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* creation of Check_Algo */
  Check_AlgoHandle = osThreadNew(Algo_Check, NULL, &Check_Algo_attributes);
 80001e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000264 <main+0xe0>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	481f      	ldr	r0, [pc, #124]	@ (8000268 <main+0xe4>)
 80001ea:	f004 faab 	bl	8004744 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a1e      	ldr	r2, [pc, #120]	@ (800026c <main+0xe8>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of BSW_Algo */
  BSW_AlgoHandle = osThreadNew(BSW_Check, NULL, &BSW_Algo_attributes);
 80001f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000270 <main+0xec>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	481e      	ldr	r0, [pc, #120]	@ (8000274 <main+0xf0>)
 80001fa:	f004 faa3 	bl	8004744 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <main+0xf4>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of DPW_Algo */
  DPW_AlgoHandle = osThreadNew(DPW_Check, NULL, &DPW_Algo_attributes);
 8000204:	4a1d      	ldr	r2, [pc, #116]	@ (800027c <main+0xf8>)
 8000206:	2100      	movs	r1, #0
 8000208:	481d      	ldr	r0, [pc, #116]	@ (8000280 <main+0xfc>)
 800020a:	f004 fa9b 	bl	8004744 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a1c      	ldr	r2, [pc, #112]	@ (8000284 <main+0x100>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(WirelessReceive, NULL, &Receive_attributes);
 8000214:	4a1c      	ldr	r2, [pc, #112]	@ (8000288 <main+0x104>)
 8000216:	2100      	movs	r1, #0
 8000218:	481c      	ldr	r0, [pc, #112]	@ (800028c <main+0x108>)
 800021a:	f004 fa93 	bl	8004744 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a1b      	ldr	r2, [pc, #108]	@ (8000290 <main+0x10c>)
 8000222:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of EventGroup */
  EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 8000224:	481b      	ldr	r0, [pc, #108]	@ (8000294 <main+0x110>)
 8000226:	f004 fba5 	bl	8004974 <osEventFlagsNew>
 800022a:	4603      	mov	r3, r0
 800022c:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <main+0x114>)
 800022e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f004 fa54 	bl	80046dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0xb0>
 8000238:	08008610 	.word	0x08008610
 800023c:	2000019c 	.word	0x2000019c
 8000240:	08008514 	.word	0x08008514
 8000244:	08000671 	.word	0x08000671
 8000248:	20000180 	.word	0x20000180
 800024c:	08008538 	.word	0x08008538
 8000250:	08000721 	.word	0x08000721
 8000254:	20000184 	.word	0x20000184
 8000258:	0800855c 	.word	0x0800855c
 800025c:	08000755 	.word	0x08000755
 8000260:	20000188 	.word	0x20000188
 8000264:	08008580 	.word	0x08008580
 8000268:	080007e5 	.word	0x080007e5
 800026c:	2000018c 	.word	0x2000018c
 8000270:	080085a4 	.word	0x080085a4
 8000274:	08000855 	.word	0x08000855
 8000278:	20000190 	.word	0x20000190
 800027c:	080085c8 	.word	0x080085c8
 8000280:	0800089d 	.word	0x0800089d
 8000284:	20000194 	.word	0x20000194
 8000288:	080085ec 	.word	0x080085ec
 800028c:	080008e9 	.word	0x080008e9
 8000290:	20000198 	.word	0x20000198
 8000294:	08008620 	.word	0x08008620
 8000298:	200001a0 	.word	0x200001a0

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	@ 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f008 f896 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002be:	2301      	movs	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 f8cd 	bl	8002484 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f0:	f000 fbf0 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fb3a 	bl	8002988 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800031a:	f000 fbdb 	bl	8000ad4 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	@ 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b17      	ldr	r3, [pc, #92]	@ (800038c <MX_SPI1_Init+0x64>)
 800032e:	4a18      	ldr	r2, [pc, #96]	@ (8000390 <MX_SPI1_Init+0x68>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000332:	4b16      	ldr	r3, [pc, #88]	@ (800038c <MX_SPI1_Init+0x64>)
 8000334:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <MX_SPI1_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_SPI1_Init+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_SPI1_Init+0x64>)
 8000354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_SPI1_Init+0x64>)
 800035c:	2220      	movs	r2, #32
 800035e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <MX_SPI1_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_SPI1_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_SPI1_Init+0x64>)
 8000374:	220a      	movs	r2, #10
 8000376:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000378:	4804      	ldr	r0, [pc, #16]	@ (800038c <MX_SPI1_Init+0x64>)
 800037a:	f002 fcc3 	bl	8002d04 <HAL_SPI_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000384:	f000 fba6 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000054 	.word	0x20000054
 8000390:	40013000 	.word	0x40013000

08000394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_TIM3_Init+0x98>)
 80003b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000430 <MX_TIM3_Init+0x9c>)
 80003b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <MX_TIM3_Init+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_TIM3_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003c4:	4b19      	ldr	r3, [pc, #100]	@ (800042c <MX_TIM3_Init+0x98>)
 80003c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_TIM3_Init+0x98>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_TIM3_Init+0x98>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d8:	4814      	ldr	r0, [pc, #80]	@ (800042c <MX_TIM3_Init+0x98>)
 80003da:	f003 fa1b 	bl	8003814 <HAL_TIM_Base_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003e4:	f000 fb76 	bl	8000ad4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	480d      	ldr	r0, [pc, #52]	@ (800042c <MX_TIM3_Init+0x98>)
 80003f8:	f003 fbb6 	bl	8003b68 <HAL_TIM_SlaveConfigSynchro>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000402:	f000 fb67 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4806      	ldr	r0, [pc, #24]	@ (800042c <MX_TIM3_Init+0x98>)
 8000414:	f003 fd7e 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800041e:	f000 fb59 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000ac 	.word	0x200000ac
 8000430:	40000400 	.word	0x40000400

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <MX_USART1_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 8000440:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_USART1_UART_Init+0x4c>)
 800046c:	f003 fdc2 	bl	8003ff4 <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 fb2d 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000f4 	.word	0x200000f4
 8000484:	40013800 	.word	0x40013800

08000488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <MX_DMA_Init+0x38>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <MX_DMA_Init+0x38>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <MX_DMA_Init+0x38>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2105      	movs	r1, #5
 80004aa:	200f      	movs	r0, #15
 80004ac:	f001 fc1d 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004b0:	200f      	movs	r0, #15
 80004b2:	f001 fc36 	bl	8001d22 <HAL_NVIC_EnableIRQ>

}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d8:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a20      	ldr	r2, [pc, #128]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <MX_GPIO_Init+0x9c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2118      	movs	r1, #24
 800050c:	4815      	ldr	r0, [pc, #84]	@ (8000564 <MX_GPIO_Init+0xa0>)
 800050e:	f001 ff89 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000512:	2304      	movs	r3, #4
 8000514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_GPIO_Init+0xa4>)
 8000518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	4619      	mov	r1, r3
 8000524:	480f      	ldr	r0, [pc, #60]	@ (8000564 <MX_GPIO_Init+0xa0>)
 8000526:	f001 fdf9 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 800052a:	2318      	movs	r3, #24
 800052c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	4808      	ldr	r0, [pc, #32]	@ (8000564 <MX_GPIO_Init+0xa0>)
 8000542:	f001 fdeb 	bl	800211c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2105      	movs	r1, #5
 800054a:	2008      	movs	r0, #8
 800054c:	f001 fbcd 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000550:	2008      	movs	r0, #8
 8000552:	f001 fbe6 	bl	8001d22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000556:	bf00      	nop
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800
 8000568:	10210000 	.word	0x10210000

0800056c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <HAL_UART_RxCpltCallback+0x1c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fa42 	bl	8004a18 <osEventFlagsSet>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001a0 	.word	0x200001a0

080005a0 <_CalcAvgDistance>:

uint8_t * _CalcAvgDistance( uint8_t * Data_Arr )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 80005a8:	2300      	movs	r3, #0
 80005aa:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	82bb      	strh	r3, [r7, #20]
	static uint8_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	82fb      	strh	r3, [r7, #22]
 80005b4:	e04d      	b.n	8000652 <_CalcAvgDistance+0xb2>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 80005ba:	8afb      	ldrh	r3, [r7, #22]
 80005bc:	461a      	mov	r2, r3
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	461a      	mov	r2, r3
 80005c4:	0112      	lsls	r2, r2, #4
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3b03      	subs	r3, #3
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 80005d0:	8afb      	ldrh	r3, [r7, #22]
 80005d2:	461a      	mov	r2, r3
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	b29b      	uxth	r3, r3
 80005e0:	3303      	adds	r3, #3
 80005e2:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 80005e4:	89fb      	ldrh	r3, [r7, #14]
 80005e6:	82bb      	strh	r3, [r7, #20]
 80005e8:	e01f      	b.n	800062a <_CalcAvgDistance+0x8a>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + 360) % 360;
 80005ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <_CalcAvgDistance+0xc4>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	441a      	add	r2, r3
 80005fa:	1211      	asrs	r1, r2, #8
 80005fc:	17da      	asrs	r2, r3, #31
 80005fe:	1a8a      	subs	r2, r1, r2
 8000600:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000604:	fb01 f202 	mul.w	r2, r1, r2
 8000608:	1a9a      	subs	r2, r3, r2
 800060a:	4613      	mov	r3, r2
 800060c:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 800060e:	897b      	ldrh	r3, [r7, #10]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	4413      	add	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 800061e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000622:	b29b      	uxth	r3, r3
 8000624:	3301      	adds	r3, #1
 8000626:	b29b      	uxth	r3, r3
 8000628:	82bb      	strh	r3, [r7, #20]
 800062a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800062e:	89bb      	ldrh	r3, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	ddda      	ble.n	80005ea <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <_CalcAvgDistance+0xc8>)
 8000638:	fba3 1302 	umull	r1, r3, r3, r2
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	0852      	lsrs	r2, r2, #1
 8000640:	4413      	add	r3, r2
 8000642:	089a      	lsrs	r2, r3, #2
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	b2d1      	uxtb	r1, r2
 8000648:	4a08      	ldr	r2, [pc, #32]	@ (800066c <_CalcAvgDistance+0xcc>)
 800064a:	54d1      	strb	r1, [r2, r3]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 800064c:	8afb      	ldrh	r3, [r7, #22]
 800064e:	3301      	adds	r3, #1
 8000650:	82fb      	strh	r3, [r7, #22]
 8000652:	8afb      	ldrh	r3, [r7, #22]
 8000654:	2b07      	cmp	r3, #7
 8000656:	d9ae      	bls.n	80005b6 <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <_CalcAvgDistance+0xcc>)
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	b60b60b7 	.word	0xb60b60b7
 8000668:	24924925 	.word	0x24924925
 800066c:	20000318 	.word	0x20000318

08000670 <Init_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b095      	sub	sp, #84	@ 0x54
 8000674:	af12      	add	r7, sp, #72	@ 0x48
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Init DMA UART to Distances Buffer
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer, 360);
 8000678:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800067c:	4921      	ldr	r1, [pc, #132]	@ (8000704 <Init_Task+0x94>)
 800067e:	4822      	ldr	r0, [pc, #136]	@ (8000708 <Init_Task+0x98>)
 8000680:	f003 fd08 	bl	8004094 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <Init_Task+0x9c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fb29 	bl	8004ce4 <osMutexAcquire>

	NRF24_begin(hspi1);
 8000692:	4c1f      	ldr	r4, [pc, #124]	@ (8000710 <Init_Task+0xa0>)
 8000694:	4668      	mov	r0, sp
 8000696:	f104 0310 	add.w	r3, r4, #16
 800069a:	2248      	movs	r2, #72	@ 0x48
 800069c:	4619      	mov	r1, r3
 800069e:	f007 fec9 	bl	8008434 <memcpy>
 80006a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006a6:	f000 fd93 	bl	80011d0 <NRF24_begin>
	NRF24_setAutoAck(true);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 f854 	bl	8001758 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 80006b0:	2020      	movs	r0, #32
 80006b2:	f000 ffb1 	bl	8001618 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 80006b6:	f001 f805 	bl	80016c4 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80006ba:	f000 ffd5 	bl	8001668 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <Init_Task+0xa4>)
 80006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 ff29 	bl	800151c <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <Init_Task+0xa4>)
 80006cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d0:	4610      	mov	r0, r2
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fefe 	bl	80014d4 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 80006d8:	2220      	movs	r2, #32
 80006da:	490f      	ldr	r1, [pc, #60]	@ (8000718 <Init_Task+0xa8>)
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 f97a 	bl	80019d6 <NRF24_writeAckPayload>
	NRF24_startListening();
 80006e2:	f000 fe51 	bl	8001388 <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <Init_Task+0x9c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fb58 	bl	8004da0 <osMutexRelease>

	/*Add any Inits here*/
	/*Stack Size for this Task = 348 B*/
	osThreadTerminate(Startup_TaskHandle);
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <Init_Task+0xac>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f8cf 	bl	8004898 <osThreadTerminate>

  /* USER CODE END 5 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	200001a4 	.word	0x200001a4
 8000708:	200000f4 	.word	0x200000f4
 800070c:	2000019c 	.word	0x2000019c
 8000710:	20000054 	.word	0x20000054
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000180 	.word	0x20000180

08000720 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <Distance_Calc+0x28>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	f004 f9c6 	bl	8004ac4 <osEventFlagsWait>
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <Distance_Calc+0x2c>)
 800073a:	f7ff ff31 	bl	80005a0 <_CalcAvgDistance>
 800073e:	4603      	mov	r3, r0
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <Distance_Calc+0x30>)
 8000742:	6013      	str	r3, [r2, #0]
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000744:	bf00      	nop
 8000746:	e7ef      	b.n	8000728 <Distance_Calc+0x8>
 8000748:	200001a0 	.word	0x200001a0
 800074c:	200001a4 	.word	0x200001a4
 8000750:	20000310 	.word	0x20000310

08000754 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800075c:	2311      	movs	r3, #17
 800075e:	733b      	strb	r3, [r7, #12]
 8000760:	2301      	movs	r3, #1
 8000762:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[BACK],
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <Localization+0x88>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	781b      	ldrb	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800076a:	73bb      	strb	r3, [r7, #14]
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <Localization+0x88>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <Localization+0x88>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	799b      	ldrb	r3, [r3, #6]
 800077a:	743b      	strb	r3, [r7, #16]
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <Localization+0x88>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	747b      	strb	r3, [r7, #17]
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <Localization+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	74bb      	strb	r3, [r7, #18]
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <Localization+0x88>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	74fb      	strb	r3, [r7, #19]
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <Localization+0x88>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	753b      	strb	r3, [r7, #20]
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <Localization+0x88>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	78db      	ldrb	r3, [r3, #3]
 80007a2:	757b      	strb	r3, [r7, #21]
				Obstcales_Detection[FRONT_RIGHT],Obstcales_Detection[FRONT_LEFT],
				Obstcales_Detection[BACK_RIGHT],Obstcales_Detection[BACK_LEFT]
		};

		/* Protect NRF Shared Resuource */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <Localization+0x8c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fa99 	bl	8004ce4 <osMutexAcquire>

		NRF24_stopListening();
 80007b2:	f000 fe0f 	bl	80013d4 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	210a      	movs	r1, #10
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fe15 	bl	80013ec <NRF24_write>
		NRF24_startListening();
 80007c2:	f000 fde1 	bl	8001388 <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <Localization+0x8c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fae8 	bl	8004da0 <osMutexRelease>

		osDelay(3000);
 80007d0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80007d4:	f004 f8a0 	bl	8004918 <osDelay>
	{
 80007d8:	bf00      	nop
 80007da:	e7bf      	b.n	800075c <Localization+0x8>
 80007dc:	20000310 	.word	0x20000310
 80007e0:	2000019c 	.word	0x2000019c

080007e4 <Algo_Check>:
 * @retval None
 */

/* USER CODE END Header_Algo_Check */
void Algo_Check(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{

		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <Algo_Check+0x60>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b64      	cmp	r3, #100	@ 0x64
 80007f4:	d821      	bhi.n	800083a <Algo_Check+0x56>
		{
			uint8_t ASK_Direction_Frame[3] ={0};
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <Algo_Check+0x64>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	81bb      	strh	r3, [r7, #12]
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]

			ASK_Direction_Frame[0] = CAR_ID ;
 8000800:	2311      	movs	r3, #17
 8000802:	733b      	strb	r3, [r7, #12]
			ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000804:	2302      	movs	r3, #2
 8000806:	737b      	strb	r3, [r7, #13]
			ASK_Direction_Frame[2] = Front_Car_ID ;
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <Algo_Check+0x68>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	73bb      	strb	r3, [r7, #14]

			/* Protect NRF Shared Resuource */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <Algo_Check+0x6c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f04f 31ff 	mov.w	r1, #4294967295
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fa64 	bl	8004ce4 <osMutexAcquire>

			NRF24_stopListening();
 800081c:	f000 fdda 	bl	80013d4 <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2103      	movs	r1, #3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fde0 	bl	80013ec <NRF24_write>
			NRF24_startListening();
 800082c:	f000 fdac 	bl	8001388 <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <Algo_Check+0x6c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fab3 	bl	8004da0 <osMutexRelease>

		}
		osDelay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083e:	f004 f86b 	bl	8004918 <osDelay>
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000842:	e7d3      	b.n	80007ec <Algo_Check+0x8>
 8000844:	20000310 	.word	0x20000310
 8000848:	080084d0 	.word	0x080084d0
 800084c:	20000314 	.word	0x20000314
 8000850:	2000019c 	.word	0x2000019c

08000854 <BSW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Check */
void BSW_Check(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSW_Check */
	/* Infinite loop */
	for(;;)
	{

		bool BSW_Flag_R = false;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
		bool BSW_Flag_L = false;
 8000860:	2300      	movs	r3, #0
 8000862:	73bb      	strb	r3, [r7, #14]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 8000864:	2387      	movs	r3, #135	@ 0x87
 8000866:	737b      	strb	r3, [r7, #13]
 8000868:	bf00      	nop
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	2b59      	cmp	r3, #89	@ 0x59
 800086e:	d902      	bls.n	8000876 <BSW_Check+0x22>
				Angle_Iterator--)
		{
			if (Distances_Buffer[Angle_Iterator] <= BSW_Threshold)
			{
				/*break the loop and invoke BSW Left warning*/
				BSW_Flag_L = true;
 8000870:	2301      	movs	r3, #1
 8000872:	73bb      	strb	r3, [r7, #14]
				break;
 8000874:	bf00      	nop
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 8000876:	23e1      	movs	r3, #225	@ 0xe1
 8000878:	817b      	strh	r3, [r7, #10]
 800087a:	bf00      	nop
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 800087c:	897b      	ldrh	r3, [r7, #10]
 800087e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000882:	d802      	bhi.n	800088a <BSW_Check+0x36>
				Angle_Iterator++)
		{
			if (Distances_Buffer[Angle_Iterator] <= BSW_Threshold)
			{
				/*break the loop and invoke BSW Left warning*/
				BSW_Flag_R = true;
 8000884:	2301      	movs	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
				break;
 8000888:	bf00      	nop
		else
		{
			/*Abort the Algorithm*/
		}

		BSW_Flag_L = false;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]

		BSW_Flag_R = false;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]

		osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f004 f83f 	bl	8004918 <osDelay>
	{
 800089a:	e7df      	b.n	800085c <BSW_Check+0x8>

0800089c <DPW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Check */
void DPW_Check(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DPW_Check */
	/* Infinite loop */
	for(;;)
	{
		bool DPW_Flag_R = false;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
		bool DPW_Flag_L = false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73bb      	strb	r3, [r7, #14]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 80008ac:	232d      	movs	r3, #45	@ 0x2d
 80008ae:	737b      	strb	r3, [r7, #13]
 80008b0:	bf00      	nop
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 80008b2:	7b7b      	ldrb	r3, [r7, #13]
 80008b4:	2b0e      	cmp	r3, #14
 80008b6:	d902      	bls.n	80008be <DPW_Check+0x22>
				Angle_Iterator--)
		{
			if (Distances_Buffer[Angle_Iterator] <= DPW_Threshold)
			{
				/*break the loop and invoke DPW Left warning*/
				DPW_Flag_L = true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73bb      	strb	r3, [r7, #14]
				break;
 80008bc:	bf00      	nop
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 80008be:	f240 133b 	movw	r3, #315	@ 0x13b
 80008c2:	817b      	strh	r3, [r7, #10]
 80008c4:	bf00      	nop
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 80008c6:	897b      	ldrh	r3, [r7, #10]
 80008c8:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 80008cc:	d202      	bcs.n	80008d4 <DPW_Check+0x38>
				Angle_Iterator++)
		{
			if (Distances_Buffer[Angle_Iterator] <= DPW_Threshold)
			{
				/*break the loop and invoke DPW Left warning*/
				DPW_Flag_R = true;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
				break;
 80008d2:	bf00      	nop
		else
		{
			/*Abort the Algorithm*/
		}

		DPW_Flag_L = false;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73bb      	strb	r3, [r7, #14]

		DPW_Flag_R = false;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]

		osDelay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e0:	f004 f81a 	bl	8004918 <osDelay>
	{
 80008e4:	e7de      	b.n	80008a4 <DPW_Check+0x8>
	...

080008e8 <WirelessReceive>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_WirelessReceive */
void WirelessReceive(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	@ 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WirelessReceive */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 80008f0:	f000 fdc8 	bl	8001484 <NRF24_available>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 80cb 	beq.w	8000a92 <WirelessReceive+0x1aa>
			uint8_t Received_Data[32] = {0};
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 8000914:	4b61      	ldr	r3, [pc, #388]	@ (8000a9c <WirelessReceive+0x1b4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f9e1 	bl	8004ce4 <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2120      	movs	r1, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fdb3 	bl	8001494 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 800092e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a9c <WirelessReceive+0x1b4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fa34 	bl	8004da0 <osMutexRelease>

			switch(Received_Data[1])
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d002      	beq.n	8000944 <WirelessReceive+0x5c>
 800093e:	2b02      	cmp	r3, #2
 8000940:	d06c      	beq.n	8000a1c <WirelessReceive+0x134>
					/*
					 * Stop immediately
					 */
				}
			default:
				break;
 8000942:	e0a5      	b.n	8000a90 <WirelessReceive+0x1a8>
				bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 8000944:	7c3b      	ldrb	r3, [r7, #16]
 8000946:	461a      	mov	r2, r3
 8000948:	4b55      	ldr	r3, [pc, #340]	@ (8000aa0 <WirelessReceive+0x1b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3b07      	subs	r3, #7
						(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 8000950:	429a      	cmp	r2, r3
 8000952:	db07      	blt.n	8000964 <WirelessReceive+0x7c>
 8000954:	7c3b      	ldrb	r3, [r7, #16]
 8000956:	461a      	mov	r2, r3
 8000958:	4b51      	ldr	r3, [pc, #324]	@ (8000aa0 <WirelessReceive+0x1b8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3307      	adds	r3, #7
				bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 8000960:	429a      	cmp	r2, r3
 8000962:	dd11      	ble.n	8000988 <WirelessReceive+0xa0>
						((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000964:	7c7b      	ldrb	r3, [r7, #17]
 8000966:	461a      	mov	r2, r3
 8000968:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa0 <WirelessReceive+0x1b8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3b07      	subs	r3, #7
						(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 8000972:	429a      	cmp	r2, r3
 8000974:	db0a      	blt.n	800098c <WirelessReceive+0xa4>
								(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	461a      	mov	r2, r3
 800097a:	4b49      	ldr	r3, [pc, #292]	@ (8000aa0 <WirelessReceive+0x1b8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3307      	adds	r3, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3307      	adds	r3, #7
						((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000984:	429a      	cmp	r2, r3
 8000986:	dc01      	bgt.n	800098c <WirelessReceive+0xa4>
						(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <WirelessReceive+0xa6>
 800098c:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 800098e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000992:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
				bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 800099e:	7b3b      	ldrb	r3, [r7, #12]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa0 <WirelessReceive+0x1b8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3304      	adds	r3, #4
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3b07      	subs	r3, #7
						(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 80009ac:	429a      	cmp	r2, r3
 80009ae:	db08      	blt.n	80009c2 <WirelessReceive+0xda>
 80009b0:	7b3b      	ldrb	r3, [r7, #12]
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa0 <WirelessReceive+0x1b8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3304      	adds	r3, #4
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3307      	adds	r3, #7
				bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 80009be:	429a      	cmp	r2, r3
 80009c0:	dd11      	ble.n	80009e6 <WirelessReceive+0xfe>
								((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80009c2:	7c7b      	ldrb	r3, [r7, #17]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b36      	ldr	r3, [pc, #216]	@ (8000aa0 <WirelessReceive+0x1b8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	3b07      	subs	r3, #7
						(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 80009d0:	429a      	cmp	r2, r3
 80009d2:	db0a      	blt.n	80009ea <WirelessReceive+0x102>
										(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b31      	ldr	r3, [pc, #196]	@ (8000aa0 <WirelessReceive+0x1b8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3307      	adds	r3, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3307      	adds	r3, #7
								((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dc01      	bgt.n	80009ea <WirelessReceive+0x102>
						(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <WirelessReceive+0x104>
 80009ea:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 80009ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80009f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				if(Is_Front){
 80009fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <WirelessReceive+0x124>
					Front_Car_ID = Received_Data[0];
 8000a04:	7b3a      	ldrb	r2, [r7, #12]
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <WirelessReceive+0x1bc>)
 8000a08:	701a      	strb	r2, [r3, #0]
				break;
 8000a0a:	e03f      	b.n	8000a8c <WirelessReceive+0x1a4>
				else if(Is_Back){
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d03b      	beq.n	8000a8c <WirelessReceive+0x1a4>
					Back_Car_ID = Received_Data[0];
 8000a14:	7b3a      	ldrb	r2, [r7, #12]
 8000a16:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <WirelessReceive+0x1c0>)
 8000a18:	701a      	strb	r2, [r3, #0]
				break;
 8000a1a:	e037      	b.n	8000a8c <WirelessReceive+0x1a4>
				bool TX_Flag =0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				bool RX_Flag =0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				bool TX_Fail = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
				if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	2b11      	cmp	r3, #17
 8000a32:	d12d      	bne.n	8000a90 <WirelessReceive+0x1a8>
 8000a34:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d01b      	beq.n	8000a74 <WirelessReceive+0x18c>
					uint8_t ASK_Direction_Frame[4] ={0};
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					ASK_Direction_Frame[0] = CAR_ID ;
 8000a40:	2311      	movs	r3, #17
 8000a42:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
					ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					ASK_Direction_Frame[2] = Front_Car_ID ;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <WirelessReceive+0x1bc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					ASK_Direction_Frame[3] = My_Direction ;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <WirelessReceive+0x1c4>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					NRF24_stopListening();
 8000a5c:	f000 fcba 	bl	80013d4 <NRF24_stopListening>
					NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 8000a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f000 ffb4 	bl	80019d6 <NRF24_writeAckPayload>
					NRF24_startListening();
 8000a6e:	f000 fc8b 	bl	8001388 <NRF24_startListening>
				break;
 8000a72:	e00d      	b.n	8000a90 <WirelessReceive+0x1a8>
				else if ((CAR_ID == Received_Data[2] && TX_Flag))
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	2b11      	cmp	r3, #17
 8000a78:	d10a      	bne.n	8000a90 <WirelessReceive+0x1a8>
 8000a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <WirelessReceive+0x1a8>
					if (	Received_Data[3]==	My_Direction)
 8000a82:	7bfa      	ldrb	r2, [r7, #15]
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <WirelessReceive+0x1c4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
				break;
 8000a8a:	e001      	b.n	8000a90 <WirelessReceive+0x1a8>
				break;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <WirelessReceive+0x1aa>
				break;
 8000a90:	bf00      	nop
			}

		}
		osDelay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f003 ff40 	bl	8004918 <osDelay>
		if(NRF24_available()){
 8000a98:	e72a      	b.n	80008f0 <WirelessReceive+0x8>
 8000a9a:	bf00      	nop
 8000a9c:	2000019c 	.word	0x2000019c
 8000aa0:	20000310 	.word	0x20000310
 8000aa4:	20000314 	.word	0x20000314
 8000aa8:	20000315 	.word	0x20000315
 8000aac:	2000030c 	.word	0x2000030c

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f001 f81d 	bl	8001b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_MspInit+0x68>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <HAL_MspInit+0x68>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_MspInit+0x68>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_MspInit+0x68>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <HAL_MspInit+0x68>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x68>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f001 f8e4 	bl	8001cea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_MspInit+0x6c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_MspInit+0x6c>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000

08000b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d12f      	bne.n	8000bd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_SPI_MspInit+0x8c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ba0:	23a0      	movs	r3, #160	@ 0xa0
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <HAL_SPI_MspInit+0x90>)
 8000bb4:	f001 fab2 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb8:	2340      	movs	r3, #64	@ 0x40
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_SPI_MspInit+0x90>)
 8000bcc:	f001 faa6 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <HAL_TIM_Base_MspInit+0x44>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d113      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_TIM_Base_MspInit+0x48>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2105      	movs	r1, #5
 8000c12:	201d      	movs	r0, #29
 8000c14:	f001 f869 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c18:	201d      	movs	r0, #29
 8000c1a:	f001 f882 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d08 <HAL_UART_MspInit+0xd8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d157      	bne.n	8000d00 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c50:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a2d      	ldr	r2, [pc, #180]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <HAL_UART_MspInit+0xdc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <HAL_UART_MspInit+0xe0>)
 8000c96:	f001 fa41 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <HAL_UART_MspInit+0xe0>)
 8000cb0:	f001 fa34 	bl	800211c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <HAL_UART_MspInit+0xe8>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cda:	2220      	movs	r2, #32
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ce4:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000ce6:	f001 f82b 	bl	8001d40 <HAL_DMA_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000cf0:	f7ff fef0 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cfa:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_UART_MspInit+0xe4>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	2000013c 	.word	0x2000013c
 8000d18:	40020058 	.word	0x40020058

08000d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d32:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a33      	ldr	r2, [pc, #204]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b31      	ldr	r3, [pc, #196]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4a:	f107 0210 	add.w	r2, r7, #16
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 ff87 	bl	8002c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d103      	bne.n	8000d6c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d64:	f001 ff58 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8000d68:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d6a:	e004      	b.n	8000d76 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6c:	f001 ff54 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8000d70:	4603      	mov	r3, r0
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d78:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	0c9b      	lsrs	r3, r3, #18
 8000d80:	3b01      	subs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000d86:	4a22      	ldr	r2, [pc, #136]	@ (8000e10 <HAL_InitTick+0xf4>)
 8000d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000d8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d90:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d96:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000daa:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000dac:	f002 fd32 	bl	8003814 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000db6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d11b      	bne.n	8000df6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000dbe:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000dc0:	f002 fd78 	bl	80038b4 <HAL_TIM_Base_Start_IT>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d111      	bne.n	8000df6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dd2:	201e      	movs	r0, #30
 8000dd4:	f000 ffa5 	bl	8001d22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d808      	bhi.n	8000df0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000dde:	2200      	movs	r2, #0
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	201e      	movs	r0, #30
 8000de4:	f000 ff81 	bl	8001cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_InitTick+0xf8>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e002      	b.n	8000df6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3738      	adds	r7, #56	@ 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	20000320 	.word	0x20000320
 8000e10:	40000800 	.word	0x40000800
 8000e14:	2000002c 	.word	0x2000002c

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f001 faff 	bl	8002454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <DMA1_Channel5_IRQHandler+0x10>)
 8000e62:	f001 f827 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000013c 	.word	0x2000013c

08000e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <TIM3_IRQHandler+0x18>)
 8000e76:	f002 fd6f 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <TIM3_IRQHandler+0x1c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a02      	ldr	r2, [pc, #8]	@ (8000e8c <TIM3_IRQHandler+0x1c>)
 8000e82:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	20000368 	.word	0x20000368

08000e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM4_IRQHandler+0x10>)
 8000e96:	f002 fd5f 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000320 	.word	0x20000320

08000ea4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f7ff fff8 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eb6:	490c      	ldr	r1, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a09      	ldr	r2, [pc, #36]	@ (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ecc:	4c09      	ldr	r4, [pc, #36]	@ (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f007 fa87 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ede:	f7ff f951 	bl	8000184 <main>
  bx lr
 8000ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000eec:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 8000ef0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000ef4:	20003944 	.word	0x20003944

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <NRF24_DelayMicroSeconds+0x38>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <NRF24_DelayMicroSeconds+0x3c>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9a      	lsrs	r2, r3, #18
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000f1c:	bf00      	nop
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	60fa      	str	r2, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1fa      	bne.n	8000f1e <NRF24_DelayMicroSeconds+0x22>
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000028 	.word	0x20000028
 8000f38:	165e9f81 	.word	0x165e9f81

08000f3c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <NRF24_csn+0x20>
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <NRF24_csn+0x38>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <NRF24_csn+0x3c>)
 8000f50:	8811      	ldrh	r1, [r2, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fa65 	bl	8002424 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000f5a:	e007      	b.n	8000f6c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <NRF24_csn+0x38>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <NRF24_csn+0x3c>)
 8000f62:	8811      	ldrh	r1, [r2, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 fa5c 	bl	8002424 <HAL_GPIO_WritePin>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000380 	.word	0x20000380
 8000f78:	20000384 	.word	0x20000384

08000f7c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <NRF24_ce+0x20>
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <NRF24_ce+0x38>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <NRF24_ce+0x3c>)
 8000f90:	8811      	ldrh	r1, [r2, #0]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fa45 	bl	8002424 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000f9a:	e007      	b.n	8000fac <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <NRF24_ce+0x38>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <NRF24_ce+0x3c>)
 8000fa2:	8811      	ldrh	r1, [r2, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fa3c 	bl	8002424 <HAL_GPIO_WritePin>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000380 	.word	0x20000380
 8000fb8:	20000386 	.word	0x20000386

08000fbc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ffb8 	bl	8000f3c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000fd6:	f107 010c 	add.w	r1, r7, #12
 8000fda:	2364      	movs	r3, #100	@ 0x64
 8000fdc:	2201      	movs	r2, #1
 8000fde:	480a      	ldr	r0, [pc, #40]	@ (8001008 <NRF24_read_register+0x4c>)
 8000fe0:	f001 ff14 	bl	8002e0c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	2201      	movs	r2, #1
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <NRF24_read_register+0x4c>)
 8000ff0:	f002 f84f 	bl	8003092 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ff9f 	bl	8000f3c <NRF24_csn>
	return retData;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000388 	.word	0x20000388

0800100c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff ff8d 	bl	8000f3c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800102c:	f107 010c 	add.w	r1, r7, #12
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	2201      	movs	r2, #1
 8001034:	4808      	ldr	r0, [pc, #32]	@ (8001058 <NRF24_read_registerN+0x4c>)
 8001036:	f001 fee9 	bl	8002e0c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	b29a      	uxth	r2, r3
 800103e:	2364      	movs	r3, #100	@ 0x64
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <NRF24_read_registerN+0x4c>)
 8001044:	f002 f825 	bl	8003092 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff77 	bl	8000f3c <NRF24_csn>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000388 	.word	0x20000388

0800105c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff65 	bl	8000f3c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	b2db      	uxtb	r3, r3
 800107a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	2364      	movs	r3, #100	@ 0x64
 8001086:	2202      	movs	r2, #2
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <NRF24_write_register+0x40>)
 800108a:	f001 febf 	bl	8002e0c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ff54 	bl	8000f3c <NRF24_csn>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000388 	.word	0x20000388

080010a0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff43 	bl	8000f3c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010c0:	f107 010c 	add.w	r1, r7, #12
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4808      	ldr	r0, [pc, #32]	@ (80010ec <NRF24_write_registerN+0x4c>)
 80010ca:	f001 fe9f 	bl	8002e0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	2364      	movs	r3, #100	@ 0x64
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <NRF24_write_registerN+0x4c>)
 80010d8:	f001 fe98 	bl	8002e0c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff2d 	bl	8000f3c <NRF24_csn>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000388 	.word	0x20000388

080010f0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff1d 	bl	8000f3c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001102:	23a0      	movs	r3, #160	@ 0xa0
 8001104:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001106:	f107 010f 	add.w	r1, r7, #15
 800110a:	2364      	movs	r3, #100	@ 0x64
 800110c:	2201      	movs	r2, #1
 800110e:	4808      	ldr	r0, [pc, #32]	@ (8001130 <NRF24_write_payload+0x40>)
 8001110:	f001 fe7c 	bl	8002e0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	@ 0x64
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <NRF24_write_payload+0x40>)
 800111e:	f001 fe75 	bl	8002e0c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ff0a 	bl	8000f3c <NRF24_csn>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000388 	.word	0x20000388

08001134 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001140:	f000 fa80 	bl	8001644 <NRF24_getPayloadSize>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	4293      	cmp	r3, r2
 800114c:	d303      	bcc.n	8001156 <NRF24_read_payload+0x22>
 800114e:	f000 fa79 	bl	8001644 <NRF24_getPayloadSize>
 8001152:	4603      	mov	r3, r0
 8001154:	e000      	b.n	8001158 <NRF24_read_payload+0x24>
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff feee 	bl	8000f3c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001160:	2361      	movs	r3, #97	@ 0x61
 8001162:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001164:	f107 010e 	add.w	r1, r7, #14
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <NRF24_read_payload+0x5c>)
 800116e:	f001 fe4d 	bl	8002e0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	b29a      	uxth	r2, r3
 8001176:	2364      	movs	r3, #100	@ 0x64
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <NRF24_read_payload+0x5c>)
 800117c:	f001 ff89 	bl	8003092 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fedb 	bl	8000f3c <NRF24_csn>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000388 	.word	0x20000388

08001194 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001198:	21ff      	movs	r1, #255	@ 0xff
 800119a:	20e1      	movs	r0, #225	@ 0xe1
 800119c:	f7ff ff5e 	bl	800105c <NRF24_write_register>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80011a8:	21ff      	movs	r1, #255	@ 0xff
 80011aa:	20e2      	movs	r0, #226	@ 0xe2
 80011ac:	f7ff ff56 	bl	800105c <NRF24_write_register>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80011ba:	2007      	movs	r0, #7
 80011bc:	f7ff fefe 	bl	8000fbc <NRF24_read_register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 80011d0:	b084      	sub	sp, #16
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	f107 0c10 	add.w	ip, r7, #16
 80011dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80011e0:	4b64      	ldr	r3, [pc, #400]	@ (8001374 <NRF24_begin+0x1a4>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2258      	movs	r2, #88	@ 0x58
 80011ea:	4619      	mov	r1, r3
 80011ec:	f007 f922 	bl	8008434 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <NRF24_begin+0x1a8>)
 80011f2:	4a62      	ldr	r2, [pc, #392]	@ (800137c <NRF24_begin+0x1ac>)
 80011f4:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 80011f6:	4b62      	ldr	r3, [pc, #392]	@ (8001380 <NRF24_begin+0x1b0>)
 80011f8:	2208      	movs	r2, #8
 80011fa:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 80011fc:	4b61      	ldr	r3, [pc, #388]	@ (8001384 <NRF24_begin+0x1b4>)
 80011fe:	2210      	movs	r2, #16
 8001200:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fe9a 	bl	8000f3c <NRF24_csn>
	NRF24_ce(0);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff feb7 	bl	8000f7c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800120e:	2005      	movs	r0, #5
 8001210:	f000 fc92 	bl	8001b38 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8001214:	2108      	movs	r1, #8
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff20 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 800121c:	213f      	movs	r1, #63	@ 0x3f
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff ff1c 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8001224:	2103      	movs	r1, #3
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ff18 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 800122c:	2103      	movs	r1, #3
 800122e:	2003      	movs	r0, #3
 8001230:	f7ff ff14 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8001234:	2103      	movs	r1, #3
 8001236:	2004      	movs	r0, #4
 8001238:	f7ff ff10 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 800123c:	2102      	movs	r1, #2
 800123e:	2005      	movs	r0, #5
 8001240:	f7ff ff0c 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8001244:	210f      	movs	r1, #15
 8001246:	2006      	movs	r0, #6
 8001248:	f7ff ff08 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 800124c:	210e      	movs	r1, #14
 800124e:	2007      	movs	r0, #7
 8001250:	f7ff ff04 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8001254:	2100      	movs	r1, #0
 8001256:	2008      	movs	r0, #8
 8001258:	f7ff ff00 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 800125c:	2100      	movs	r1, #0
 800125e:	2009      	movs	r0, #9
 8001260:	f7ff fefc 	bl	800105c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001264:	23e7      	movs	r3, #231	@ 0xe7
 8001266:	713b      	strb	r3, [r7, #4]
 8001268:	23e7      	movs	r3, #231	@ 0xe7
 800126a:	70fb      	strb	r3, [r7, #3]
 800126c:	23e7      	movs	r3, #231	@ 0xe7
 800126e:	70bb      	strb	r3, [r7, #2]
 8001270:	23e7      	movs	r3, #231	@ 0xe7
 8001272:	707b      	strb	r3, [r7, #1]
 8001274:	23e7      	movs	r3, #231	@ 0xe7
 8001276:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8001278:	463b      	mov	r3, r7
 800127a:	2205      	movs	r2, #5
 800127c:	4619      	mov	r1, r3
 800127e:	200a      	movs	r0, #10
 8001280:	f7ff ff0e 	bl	80010a0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001284:	23c2      	movs	r3, #194	@ 0xc2
 8001286:	713b      	strb	r3, [r7, #4]
 8001288:	23c2      	movs	r3, #194	@ 0xc2
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	23c2      	movs	r3, #194	@ 0xc2
 800128e:	70bb      	strb	r3, [r7, #2]
 8001290:	23c2      	movs	r3, #194	@ 0xc2
 8001292:	707b      	strb	r3, [r7, #1]
 8001294:	23c2      	movs	r3, #194	@ 0xc2
 8001296:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8001298:	463b      	mov	r3, r7
 800129a:	2205      	movs	r2, #5
 800129c:	4619      	mov	r1, r3
 800129e:	200b      	movs	r0, #11
 80012a0:	f7ff fefe 	bl	80010a0 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 80012a4:	21c3      	movs	r1, #195	@ 0xc3
 80012a6:	200c      	movs	r0, #12
 80012a8:	f7ff fed8 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 80012ac:	21c4      	movs	r1, #196	@ 0xc4
 80012ae:	200d      	movs	r0, #13
 80012b0:	f7ff fed4 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 80012b4:	21c5      	movs	r1, #197	@ 0xc5
 80012b6:	200e      	movs	r0, #14
 80012b8:	f7ff fed0 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 80012bc:	21c6      	movs	r1, #198	@ 0xc6
 80012be:	200f      	movs	r0, #15
 80012c0:	f7ff fecc 	bl	800105c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80012c4:	23e7      	movs	r3, #231	@ 0xe7
 80012c6:	713b      	strb	r3, [r7, #4]
 80012c8:	23e7      	movs	r3, #231	@ 0xe7
 80012ca:	70fb      	strb	r3, [r7, #3]
 80012cc:	23e7      	movs	r3, #231	@ 0xe7
 80012ce:	70bb      	strb	r3, [r7, #2]
 80012d0:	23e7      	movs	r3, #231	@ 0xe7
 80012d2:	707b      	strb	r3, [r7, #1]
 80012d4:	23e7      	movs	r3, #231	@ 0xe7
 80012d6:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80012d8:	463b      	mov	r3, r7
 80012da:	2205      	movs	r2, #5
 80012dc:	4619      	mov	r1, r3
 80012de:	2010      	movs	r0, #16
 80012e0:	f7ff fede 	bl	80010a0 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2011      	movs	r0, #17
 80012e8:	f7ff feb8 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 80012ec:	2100      	movs	r1, #0
 80012ee:	2012      	movs	r0, #18
 80012f0:	f7ff feb4 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 80012f4:	2100      	movs	r1, #0
 80012f6:	2013      	movs	r0, #19
 80012f8:	f7ff feb0 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 80012fc:	2100      	movs	r1, #0
 80012fe:	2014      	movs	r0, #20
 8001300:	f7ff feac 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 8001304:	2100      	movs	r1, #0
 8001306:	2015      	movs	r0, #21
 8001308:	f7ff fea8 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2016      	movs	r0, #22
 8001310:	f7ff fea4 	bl	800105c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001314:	f000 fbc4 	bl	8001aa0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f7ff fe9e 	bl	800105c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	201d      	movs	r0, #29
 8001324:	f7ff fe9a 	bl	800105c <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001328:	210f      	movs	r1, #15
 800132a:	200f      	movs	r0, #15
 800132c:	f000 f944 	bl	80015b8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 fa26 	bl	8001782 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 fa5c 	bl	80017f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800133c:	2002      	movs	r0, #2
 800133e:	f000 fa9f 	bl	8001880 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001342:	f000 f9f1 	bl	8001728 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001346:	2020      	movs	r0, #32
 8001348:	f000 f966 	bl	8001618 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 800134c:	f000 fac0 	bl	80018d0 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001350:	f000 fb9e 	bl	8001a90 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001354:	204c      	movs	r0, #76	@ 0x4c
 8001356:	f000 f94a 	bl	80015ee <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800135a:	f7ff ff1b 	bl	8001194 <NRF24_flush_tx>
	NRF24_flush_rx();
 800135e:	f7ff ff21 	bl	80011a4 <NRF24_flush_rx>

	NRF24_powerDown();
 8001362:	f000 faca 	bl	80018fa <NRF24_powerDown>

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001370:	b004      	add	sp, #16
 8001372:	4770      	bx	lr
 8001374:	20000388 	.word	0x20000388
 8001378:	20000380 	.word	0x20000380
 800137c:	40010800 	.word	0x40010800
 8001380:	20000384 	.word	0x20000384
 8001384:	20000386 	.word	0x20000386

08001388 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fe15 	bl	8000fbc <NRF24_read_register>
 8001392:	4603      	mov	r3, r0
 8001394:	f043 0303 	orr.w	r3, r3, #3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fe5d 	bl	800105c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <NRF24_startListening+0x48>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	d004      	beq.n	80013b6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80013ac:	2205      	movs	r2, #5
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <NRF24_startListening+0x48>)
 80013b0:	200a      	movs	r0, #10
 80013b2:	f7ff fe75 	bl	80010a0 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80013b6:	f7ff feed 	bl	8001194 <NRF24_flush_tx>
	NRF24_flush_rx();
 80013ba:	f7ff fef3 	bl	80011a4 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fddc 	bl	8000f7c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80013c4:	2096      	movs	r0, #150	@ 0x96
 80013c6:	f7ff fd99 	bl	8000efc <NRF24_DelayMicroSeconds>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000370 	.word	0x20000370

080013d4 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fdcf 	bl	8000f7c <NRF24_ce>
	NRF24_flush_tx();
 80013de:	f7ff fed9 	bl	8001194 <NRF24_flush_tx>
	NRF24_flush_rx();
 80013e2:	f7ff fedf 	bl	80011a4 <NRF24_flush_rx>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80013f8:	f000 fb4a 	bl	8001a90 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fab9 	bl	8001978 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001406:	f000 fb8d 	bl	8001b24 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800140c:	230a      	movs	r3, #10
 800140e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001410:	f107 030d 	add.w	r3, r7, #13
 8001414:	2201      	movs	r2, #1
 8001416:	4619      	mov	r1, r3
 8001418:	2008      	movs	r0, #8
 800141a:	f7ff fdf7 	bl	800100c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800141e:	f7ff fec9 	bl	80011b4 <NRF24_get_status>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <NRF24_write+0x54>
 8001430:	f000 fb78 	bl	8001b24 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8e7      	bhi.n	8001410 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001440:	f107 010b 	add.w	r1, r7, #11
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <NRF24_write+0x90>)
 800144a:	4618      	mov	r0, r3
 800144c:	f000 faed 	bl	8001a2a <NRF24_whatHappened>
	retStatus = tx_ok;
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <NRF24_write+0x90>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800145c:	f000 f8fc 	bl	8001658 <NRF24_getDynamicPayloadSize>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <NRF24_write+0x94>)
 8001466:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001468:	f000 f80c 	bl	8001484 <NRF24_available>
	NRF24_flush_tx();
 800146c:	f7ff fe92 	bl	8001194 <NRF24_flush_tx>
	return retStatus;
 8001470:	7bbb      	ldrb	r3, [r7, #14]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000378 	.word	0x20000378
 8001480:	20000379 	.word	0x20000379

08001484 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fa45 	bl	8001918 <NRF24_availablePipe>
 800148e:	4603      	mov	r3, r0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fe45 	bl	8001134 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80014aa:	2017      	movs	r0, #23
 80014ac:	f7ff fd86 	bl	8000fbc <NRF24_read_register>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80014b8:	f7ff fe74 	bl	80011a4 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80014bc:	f000 f8cc 	bl	8001658 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80014de:	463b      	mov	r3, r7
 80014e0:	2205      	movs	r2, #5
 80014e2:	4619      	mov	r1, r3
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff fddb 	bl	80010a0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80014ea:	463b      	mov	r3, r7
 80014ec:	2205      	movs	r2, #5
 80014ee:	4619      	mov	r1, r3
 80014f0:	2010      	movs	r0, #16
 80014f2:	f7ff fdd5 	bl	80010a0 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80014f6:	2320      	movs	r3, #32
 80014f8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <NRF24_openWritingPipe+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	4293      	cmp	r3, r2
 8001502:	bf28      	it	cs
 8001504:	4613      	movcs	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	2011      	movs	r0, #17
 800150c:	f7ff fda6 	bl	800105c <NRF24_write_register>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000037a 	.word	0x2000037a

0800151c <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4601      	mov	r1, r0
 8001524:	e9c7 2300 	strd	r2, r3, [r7]
 8001528:	460b      	mov	r3, r1
 800152a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001536:	491c      	ldr	r1, [pc, #112]	@ (80015a8 <NRF24_openReadingPipe+0x8c>)
 8001538:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b06      	cmp	r3, #6
 8001540:	d82d      	bhi.n	800159e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d808      	bhi.n	800155a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	4a18      	ldr	r2, [pc, #96]	@ (80015ac <NRF24_openReadingPipe+0x90>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	4639      	mov	r1, r7
 8001550:	2205      	movs	r2, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fda4 	bl	80010a0 <NRF24_write_registerN>
 8001558:	e007      	b.n	800156a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <NRF24_openReadingPipe+0x90>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	4639      	mov	r1, r7
 8001562:	2201      	movs	r2, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd9b 	bl	80010a0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4a10      	ldr	r2, [pc, #64]	@ (80015b0 <NRF24_openReadingPipe+0x94>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <NRF24_openReadingPipe+0x98>)
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd70 	bl	800105c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff fd1d 	bl	8000fbc <NRF24_read_register>
 8001582:	4603      	mov	r3, r0
 8001584:	b25a      	sxtb	r2, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	2002      	movs	r0, #2
 800159a:	f7ff fd5f 	bl	800105c <NRF24_write_register>
	}

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000370 	.word	0x20000370
 80015ac:	08008648 	.word	0x08008648
 80015b0:	08008650 	.word	0x08008650
 80015b4:	2000037a 	.word	0x2000037a

080015b8 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff fd3b 	bl	800105c <NRF24_write_register>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80015f8:	237f      	movs	r3, #127	@ 0x7f
 80015fa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4293      	cmp	r3, r2
 8001602:	bf28      	it	cs
 8001604:	4613      	movcs	r3, r2
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	2005      	movs	r0, #5
 800160c:	f7ff fd26 	bl	800105c <NRF24_write_register>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001622:	2320      	movs	r3, #32
 8001624:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4293      	cmp	r3, r2
 800162c:	bf28      	it	cs
 800162e:	4613      	movcs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <NRF24_setPayloadSize+0x28>)
 8001634:	701a      	strb	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	2000037a 	.word	0x2000037a

08001644 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	return payload_size;
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <NRF24_getPayloadSize+0x10>)
 800164a:	781b      	ldrb	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	2000037a 	.word	0x2000037a

08001658 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800165c:	2060      	movs	r0, #96	@ 0x60
 800165e:	f7ff fcad 	bl	8000fbc <NRF24_read_register>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}

08001668 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800166c:	201d      	movs	r0, #29
 800166e:	f7ff fca5 	bl	8000fbc <NRF24_read_register>
 8001672:	4603      	mov	r3, r0
 8001674:	f043 0306 	orr.w	r3, r3, #6
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	201d      	movs	r0, #29
 800167e:	f7ff fced 	bl	800105c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001682:	201d      	movs	r0, #29
 8001684:	f7ff fc9a 	bl	8000fbc <NRF24_read_register>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800168e:	f000 fa07 	bl	8001aa0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001692:	201d      	movs	r0, #29
 8001694:	f7ff fc92 	bl	8000fbc <NRF24_read_register>
 8001698:	4603      	mov	r3, r0
 800169a:	f043 0306 	orr.w	r3, r3, #6
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	201d      	movs	r0, #29
 80016a4:	f7ff fcda 	bl	800105c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80016a8:	201c      	movs	r0, #28
 80016aa:	f7ff fc87 	bl	8000fbc <NRF24_read_register>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f043 0303 	orr.w	r3, r3, #3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	201c      	movs	r0, #28
 80016ba:	f7ff fccf 	bl	800105c <NRF24_write_register>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80016c8:	201d      	movs	r0, #29
 80016ca:	f7ff fc77 	bl	8000fbc <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	201d      	movs	r0, #29
 80016da:	f7ff fcbf 	bl	800105c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80016de:	201d      	movs	r0, #29
 80016e0:	f7ff fc6c 	bl	8000fbc <NRF24_read_register>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80016ea:	f000 f9d9 	bl	8001aa0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80016ee:	201d      	movs	r0, #29
 80016f0:	f7ff fc64 	bl	8000fbc <NRF24_read_register>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	201d      	movs	r0, #29
 8001700:	f7ff fcac 	bl	800105c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001704:	201c      	movs	r0, #28
 8001706:	f7ff fc59 	bl	8000fbc <NRF24_read_register>
 800170a:	4603      	mov	r3, r0
 800170c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4619      	mov	r1, r3
 8001714:	201c      	movs	r0, #28
 8001716:	f7ff fca1 	bl	800105c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800171a:	4b02      	ldr	r3, [pc, #8]	@ (8001724 <NRF24_enableDynamicPayloads+0x60>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000037b 	.word	0x2000037b

08001728 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800172c:	201d      	movs	r0, #29
 800172e:	f7ff fc45 	bl	8000fbc <NRF24_read_register>
 8001732:	4603      	mov	r3, r0
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	201d      	movs	r0, #29
 800173e:	f7ff fc8d 	bl	800105c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001742:	2100      	movs	r1, #0
 8001744:	201c      	movs	r0, #28
 8001746:	f7ff fc89 	bl	800105c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800174a:	4b02      	ldr	r3, [pc, #8]	@ (8001754 <NRF24_disableDynamicPayloads+0x2c>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000037b 	.word	0x2000037b

08001758 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001768:	213f      	movs	r1, #63	@ 0x3f
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fc76 	bl	800105c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001770:	e003      	b.n	800177a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001772:	2100      	movs	r1, #0
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fc71 	bl	800105c <NRF24_write_register>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800178c:	2006      	movs	r0, #6
 800178e:	f7ff fc15 	bl	8000fbc <NRF24_read_register>
 8001792:	4603      	mov	r3, r0
 8001794:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	f023 0306 	bic.w	r3, r3, #6
 800179c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d104      	bne.n	80017ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	f043 0306 	orr.w	r3, r3, #6
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e019      	b.n	80017e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d104      	bne.n	80017be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e011      	b.n	80017e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e009      	b.n	80017e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d103      	bne.n	80017e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f043 0306 	orr.w	r3, r3, #6
 80017e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2006      	movs	r0, #6
 80017e8:	f7ff fc38 	bl	800105c <NRF24_write_register>
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001802:	2006      	movs	r0, #6
 8001804:	f7ff fbda 	bl	8000fbc <NRF24_read_register>
 8001808:	4603      	mov	r3, r0
 800180a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <NRF24_setDataRate+0x88>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001818:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d107      	bne.n	8001830 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <NRF24_setDataRate+0x88>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	73bb      	strb	r3, [r7, #14]
 800182e:	e00d      	b.n	800184c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <NRF24_setDataRate+0x88>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	73bb      	strb	r3, [r7, #14]
 8001844:	e002      	b.n	800184c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <NRF24_setDataRate+0x88>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	4619      	mov	r1, r3
 8001850:	2006      	movs	r0, #6
 8001852:	f7ff fc03 	bl	800105c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001856:	2006      	movs	r0, #6
 8001858:	f7ff fbb0 	bl	8000fbc <NRF24_read_register>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	4293      	cmp	r3, r2
 8001864:	d102      	bne.n	800186c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e002      	b.n	8001872 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <NRF24_setDataRate+0x88>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000037c 	.word	0x2000037c

08001880 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fb96 	bl	8000fbc <NRF24_read_register>
 8001890:	4603      	mov	r3, r0
 8001892:	f023 030c 	bic.w	r3, r3, #12
 8001896:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00f      	beq.n	80018be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d104      	bne.n	80018ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e007      	b.n	80018be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	4619      	mov	r1, r3
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fbca 	bl	800105c <NRF24_write_register>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fb70 	bl	8000fbc <NRF24_read_register>
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e6:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4619      	mov	r1, r3
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fbb5 	bl	800105c <NRF24_write_register>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fb5c 	bl	8000fbc <NRF24_read_register>
 8001904:	4603      	mov	r3, r0
 8001906:	f023 0302 	bic.w	r3, r3, #2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4619      	mov	r1, r3
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fba4 	bl	800105c <NRF24_write_register>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001920:	f7ff fc48 	bl	80011b4 <NRF24_get_status>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001938:	7bbb      	ldrb	r3, [r7, #14]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	b2da      	uxtb	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001954:	2140      	movs	r1, #64	@ 0x40
 8001956:	2007      	movs	r0, #7
 8001958:	f7ff fb80 	bl	800105c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001966:	2120      	movs	r1, #32
 8001968:	2007      	movs	r0, #7
 800196a:	f7ff fb77 	bl	800105c <NRF24_write_register>
    }
  }
  return result;
 800196e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff faf9 	bl	8000f7c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fb16 	bl	8000fbc <NRF24_read_register>
 8001990:	4603      	mov	r3, r0
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fb5b 	bl	800105c <NRF24_write_register>
  NRF24_ce(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fae8 	bl	8000f7c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80019ac:	2096      	movs	r0, #150	@ 0x96
 80019ae:	f7ff faa5 	bl	8000efc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fb9a 	bl	80010f0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fadd 	bl	8000f7c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff fa9a 	bl	8000efc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fad7 	bl	8000f7c <NRF24_ce>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	6039      	str	r1, [r7, #0]
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80019ea:	2320      	movs	r3, #32
 80019ec:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80019ee:	7afa      	ldrb	r2, [r7, #11]
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	bf28      	it	cs
 80019f6:	4613      	movcs	r3, r2
 80019f8:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fa9e 	bl	8000f3c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	f063 0357 	orn	r3, r3, #87	@ 0x57
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	7aba      	ldrb	r2, [r7, #10]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fb42 	bl	80010a0 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fa8d 	bl	8000f3c <NRF24_csn>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001a36:	f7ff fbbd 	bl	80011b4 <NRF24_get_status>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001a44:	2170      	movs	r1, #112	@ 0x70
 8001a46:	2007      	movs	r0, #7
 8001a48:	f7ff fb08 	bl	800105c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	701a      	strb	r2, [r3, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001a94:	2170      	movs	r1, #112	@ 0x70
 8001a96:	2007      	movs	r0, #7
 8001a98:	f7ff fae0 	bl	800105c <NRF24_write_register>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fa48 	bl	8000f3c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001aac:	2350      	movs	r3, #80	@ 0x50
 8001aae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001ab0:	2373      	movs	r3, #115	@ 0x73
 8001ab2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001ab4:	1d39      	adds	r1, r7, #4
 8001ab6:	2364      	movs	r3, #100	@ 0x64
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <NRF24_ACTIVATE_cmd+0x30>)
 8001abc:	f001 f9a6 	bl	8002e0c <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fa3b 	bl	8000f3c <NRF24_csn>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000388 	.word	0x20000388

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f8f5 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f7ff f916 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7fe fff6 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a03      	ldr	r2, [pc, #12]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000030 	.word	0x20000030
 8001b20:	200003e0 	.word	0x200003e0

08001b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <HAL_GetTick+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	200003e0 	.word	0x200003e0

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffe0 	bl	8001b24 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000030 	.word	0x20000030

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4906      	ldr	r1, [pc, #24]	@ (8001c18 <__NVIC_EnableIRQ+0x34>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff4f 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff64 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ffb2 	bl	8001c70 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff81 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff57 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e043      	b.n	8001dde <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_DMA_Init+0xa8>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <HAL_DMA_Init+0xac>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1f      	ldr	r2, [pc, #124]	@ (8001df0 <HAL_DMA_Init+0xb0>)
 8001d72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	bffdfff8 	.word	0xbffdfff8
 8001dec:	cccccccd 	.word	0xcccccccd
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Start_IT+0x20>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e04b      	b.n	8001eac <HAL_DMA_Start_IT+0xb8>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d13a      	bne.n	8001e9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f937 	bl	80020c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 020e 	orr.w	r2, r2, #14
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e00f      	b.n	8001e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 020a 	orr.w	r2, r2, #10
 8001e8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e005      	b.n	8001eaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d04f      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc8>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0204 	bic.w	r2, r2, #4
 8001f02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a66      	ldr	r2, [pc, #408]	@ (80020a4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d029      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xae>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d022      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xaa>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a63      	ldr	r2, [pc, #396]	@ (80020ac <HAL_DMA_IRQHandler+0x1f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01a      	beq.n	8001f58 <HAL_DMA_IRQHandler+0xa4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a62      	ldr	r2, [pc, #392]	@ (80020b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d012      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x9e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a60      	ldr	r2, [pc, #384]	@ (80020b4 <HAL_DMA_IRQHandler+0x200>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00a      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x98>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80020b8 <HAL_DMA_IRQHandler+0x204>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d102      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x92>
 8001f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f44:	e00e      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f4a:	e00b      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f50:	e008      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f56:	e005      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f5c:	e002      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f5e:	2340      	movs	r3, #64	@ 0x40
 8001f60:	e000      	b.n	8001f64 <HAL_DMA_IRQHandler+0xb0>
 8001f62:	2304      	movs	r3, #4
 8001f64:	4a55      	ldr	r2, [pc, #340]	@ (80020bc <HAL_DMA_IRQHandler+0x208>)
 8001f66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8094 	beq.w	800209a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f7a:	e08e      	b.n	800209a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	2202      	movs	r2, #2
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d056      	beq.n	800203a <HAL_DMA_IRQHandler+0x186>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d051      	beq.n	800203a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020a 	bic.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a38      	ldr	r2, [pc, #224]	@ (80020a4 <HAL_DMA_IRQHandler+0x1f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d029      	beq.n	800201a <HAL_DMA_IRQHandler+0x166>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a37      	ldr	r2, [pc, #220]	@ (80020a8 <HAL_DMA_IRQHandler+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_IRQHandler+0x162>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_DMA_IRQHandler+0x1f8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01a      	beq.n	8002010 <HAL_DMA_IRQHandler+0x15c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_DMA_IRQHandler+0x1fc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d012      	beq.n	800200a <HAL_DMA_IRQHandler+0x156>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_DMA_IRQHandler+0x200>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x150>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a31      	ldr	r2, [pc, #196]	@ (80020b8 <HAL_DMA_IRQHandler+0x204>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x14a>
 8001ff8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ffc:	e00e      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 8001ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002002:	e00b      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 8002004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002008:	e008      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 800200a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200e:	e005      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 8002010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002014:	e002      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 8002016:	2320      	movs	r3, #32
 8002018:	e000      	b.n	800201c <HAL_DMA_IRQHandler+0x168>
 800201a:	2302      	movs	r3, #2
 800201c:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <HAL_DMA_IRQHandler+0x208>)
 800201e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d034      	beq.n	800209a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002038:	e02f      	b.n	800209a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2208      	movs	r2, #8
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d028      	beq.n	800209c <HAL_DMA_IRQHandler+0x1e8>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 020e 	bic.w	r2, r2, #14
 8002062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
    }
  }
  return;
 800209a:	bf00      	nop
 800209c:	bf00      	nop
}
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020008 	.word	0x40020008
 80020a8:	4002001c 	.word	0x4002001c
 80020ac:	40020030 	.word	0x40020030
 80020b0:	40020044 	.word	0x40020044
 80020b4:	40020058 	.word	0x40020058
 80020b8:	4002006c 	.word	0x4002006c
 80020bc:	40020000 	.word	0x40020000

080020c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d108      	bne.n	8002100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020fe:	e007      	b.n	8002110 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b08b      	sub	sp, #44	@ 0x2c
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212e:	e169      	b.n	8002404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002130:	2201      	movs	r2, #1
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8158 	bne.w	80023fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a9a      	ldr	r2, [pc, #616]	@ (80023bc <HAL_GPIO_Init+0x2a0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d05e      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
 8002158:	4a98      	ldr	r2, [pc, #608]	@ (80023bc <HAL_GPIO_Init+0x2a0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d875      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 800215e:	4a98      	ldr	r2, [pc, #608]	@ (80023c0 <HAL_GPIO_Init+0x2a4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d058      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
 8002164:	4a96      	ldr	r2, [pc, #600]	@ (80023c0 <HAL_GPIO_Init+0x2a4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d86f      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 800216a:	4a96      	ldr	r2, [pc, #600]	@ (80023c4 <HAL_GPIO_Init+0x2a8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d052      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
 8002170:	4a94      	ldr	r2, [pc, #592]	@ (80023c4 <HAL_GPIO_Init+0x2a8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d869      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 8002176:	4a94      	ldr	r2, [pc, #592]	@ (80023c8 <HAL_GPIO_Init+0x2ac>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04c      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
 800217c:	4a92      	ldr	r2, [pc, #584]	@ (80023c8 <HAL_GPIO_Init+0x2ac>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d863      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 8002182:	4a92      	ldr	r2, [pc, #584]	@ (80023cc <HAL_GPIO_Init+0x2b0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d046      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
 8002188:	4a90      	ldr	r2, [pc, #576]	@ (80023cc <HAL_GPIO_Init+0x2b0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d85d      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 800218e:	2b12      	cmp	r3, #18
 8002190:	d82a      	bhi.n	80021e8 <HAL_GPIO_Init+0xcc>
 8002192:	2b12      	cmp	r3, #18
 8002194:	d859      	bhi.n	800224a <HAL_GPIO_Init+0x12e>
 8002196:	a201      	add	r2, pc, #4	@ (adr r2, 800219c <HAL_GPIO_Init+0x80>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	08002217 	.word	0x08002217
 80021a0:	080021f1 	.word	0x080021f1
 80021a4:	08002203 	.word	0x08002203
 80021a8:	08002245 	.word	0x08002245
 80021ac:	0800224b 	.word	0x0800224b
 80021b0:	0800224b 	.word	0x0800224b
 80021b4:	0800224b 	.word	0x0800224b
 80021b8:	0800224b 	.word	0x0800224b
 80021bc:	0800224b 	.word	0x0800224b
 80021c0:	0800224b 	.word	0x0800224b
 80021c4:	0800224b 	.word	0x0800224b
 80021c8:	0800224b 	.word	0x0800224b
 80021cc:	0800224b 	.word	0x0800224b
 80021d0:	0800224b 	.word	0x0800224b
 80021d4:	0800224b 	.word	0x0800224b
 80021d8:	0800224b 	.word	0x0800224b
 80021dc:	0800224b 	.word	0x0800224b
 80021e0:	080021f9 	.word	0x080021f9
 80021e4:	0800220d 	.word	0x0800220d
 80021e8:	4a79      	ldr	r2, [pc, #484]	@ (80023d0 <HAL_GPIO_Init+0x2b4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ee:	e02c      	b.n	800224a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e029      	b.n	800224c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	3304      	adds	r3, #4
 80021fe:	623b      	str	r3, [r7, #32]
          break;
 8002200:	e024      	b.n	800224c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	3308      	adds	r3, #8
 8002208:	623b      	str	r3, [r7, #32]
          break;
 800220a:	e01f      	b.n	800224c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	330c      	adds	r3, #12
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e01a      	b.n	800224c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221e:	2304      	movs	r3, #4
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e013      	b.n	800224c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800222c:	2308      	movs	r3, #8
 800222e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	611a      	str	r2, [r3, #16]
          break;
 8002236:	e009      	b.n	800224c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	615a      	str	r2, [r3, #20]
          break;
 8002242:	e003      	b.n	800224c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
          break;
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x130>
          break;
 800224a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2bff      	cmp	r3, #255	@ 0xff
 8002250:	d801      	bhi.n	8002256 <HAL_GPIO_Init+0x13a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	e001      	b.n	800225a <HAL_GPIO_Init+0x13e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2bff      	cmp	r3, #255	@ 0xff
 8002260:	d802      	bhi.n	8002268 <HAL_GPIO_Init+0x14c>
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	e002      	b.n	800226e <HAL_GPIO_Init+0x152>
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	3b08      	subs	r3, #8
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	210f      	movs	r1, #15
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	6a39      	ldr	r1, [r7, #32]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	431a      	orrs	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80b1 	beq.w	80023fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800229c:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <HAL_GPIO_Init+0x2b8>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	@ (80023d4 <HAL_GPIO_Init+0x2b8>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022b4:	4a48      	ldr	r2, [pc, #288]	@ (80023d8 <HAL_GPIO_Init+0x2bc>)
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a40      	ldr	r2, [pc, #256]	@ (80023dc <HAL_GPIO_Init+0x2c0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_GPIO_Init+0x1ec>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3f      	ldr	r2, [pc, #252]	@ (80023e0 <HAL_GPIO_Init+0x2c4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00d      	beq.n	8002304 <HAL_GPIO_Init+0x1e8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a3e      	ldr	r2, [pc, #248]	@ (80023e4 <HAL_GPIO_Init+0x2c8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x1e4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3d      	ldr	r2, [pc, #244]	@ (80023e8 <HAL_GPIO_Init+0x2cc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_GPIO_Init+0x1e0>
 80022f8:	2303      	movs	r3, #3
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e004      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002300:	2302      	movs	r3, #2
 8002302:	e002      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_GPIO_Init+0x1ee>
 8002308:	2300      	movs	r3, #0
 800230a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800230c:	f002 0203 	and.w	r2, r2, #3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4093      	lsls	r3, r2
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800231a:	492f      	ldr	r1, [pc, #188]	@ (80023d8 <HAL_GPIO_Init+0x2bc>)
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002334:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	492c      	ldr	r1, [pc, #176]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	43db      	mvns	r3, r3
 800234a:	4928      	ldr	r1, [pc, #160]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800234c:	4013      	ands	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4922      	ldr	r1, [pc, #136]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	60cb      	str	r3, [r1, #12]
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	43db      	mvns	r3, r3
 8002372:	491e      	ldr	r1, [pc, #120]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002374:	4013      	ands	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4918      	ldr	r1, [pc, #96]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	4914      	ldr	r1, [pc, #80]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 800239c:	4013      	ands	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d021      	beq.n	80023f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	490e      	ldr	r1, [pc, #56]	@ (80023ec <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e021      	b.n	80023fe <HAL_GPIO_Init+0x2e2>
 80023ba:	bf00      	nop
 80023bc:	10320000 	.word	0x10320000
 80023c0:	10310000 	.word	0x10310000
 80023c4:	10220000 	.word	0x10220000
 80023c8:	10210000 	.word	0x10210000
 80023cc:	10120000 	.word	0x10120000
 80023d0:	10110000 	.word	0x10110000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40010800 	.word	0x40010800
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	40011000 	.word	0x40011000
 80023e8:	40011400 	.word	0x40011400
 80023ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4909      	ldr	r1, [pc, #36]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	3301      	adds	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	f47f ae8e 	bne.w	8002130 <HAL_GPIO_Init+0x14>
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	372c      	adds	r7, #44	@ 0x2c
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f87a 	bl	800056c <HAL_GPIO_EXTI_Callback>
  }
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e272      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b0:	4b8f      	ldr	r3, [pc, #572]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
 80024bc:	4b8c      	ldr	r3, [pc, #560]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x12c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e24c      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x76>
 80024ec:	4b80      	ldr	r3, [pc, #512]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7f      	ldr	r2, [pc, #508]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b7b      	ldr	r3, [pc, #492]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7a      	ldr	r2, [pc, #488]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b78      	ldr	r3, [pc, #480]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a77      	ldr	r2, [pc, #476]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xbc>
 8002526:	4b72      	ldr	r3, [pc, #456]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a71      	ldr	r2, [pc, #452]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 8002540:	4b6b      	ldr	r3, [pc, #428]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b68      	ldr	r3, [pc, #416]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a67      	ldr	r2, [pc, #412]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fae0 	bl	8001b24 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fadc 	bl	8001b24 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e200      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5d      	ldr	r3, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe4>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff facc 	bl	8001b24 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fac8 	bl	8001b24 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1ec      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x10c>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ca:	4b49      	ldr	r3, [pc, #292]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
 80025d6:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c0      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4939      	ldr	r1, [pc, #228]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b36      	ldr	r3, [pc, #216]	@ (80026f4 <HAL_RCC_OscConfig+0x270>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fa81 	bl	8001b24 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fa7d 	bl	8001b24 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a1      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4927      	ldr	r1, [pc, #156]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <HAL_RCC_OscConfig+0x270>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fa60 	bl	8001b24 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff fa5c 	bl	8001b24 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e180      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03a      	beq.n	8002708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_RCC_OscConfig+0x274>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7ff fa40 	bl	8001b24 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fa3c 	bl	8001b24 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e160      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 fafe 	bl	8002cc8 <RCC_Delay>
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_RCC_OscConfig+0x274>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7ff fa26 	bl	8001b24 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026da:	e00f      	b.n	80026fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff fa22 	bl	8001b24 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d908      	bls.n	80026fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e146      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	42420000 	.word	0x42420000
 80026f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b92      	ldr	r3, [pc, #584]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a6 	beq.w	8002862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8b      	ldr	r3, [pc, #556]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a87      	ldr	r2, [pc, #540]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b85      	ldr	r3, [pc, #532]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b82      	ldr	r3, [pc, #520]	@ (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7e      	ldr	r2, [pc, #504]	@ (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7ff f9e3 	bl	8001b24 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff f9df 	bl	8001b24 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	@ 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e103      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b75      	ldr	r3, [pc, #468]	@ (800294c <HAL_RCC_OscConfig+0x4c8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 8002788:	4b6f      	ldr	r3, [pc, #444]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a6e      	ldr	r2, [pc, #440]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x334>
 800279e:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a69      	ldr	r2, [pc, #420]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b67      	ldr	r3, [pc, #412]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a66      	ldr	r2, [pc, #408]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x356>
 80027c0:	4b61      	ldr	r3, [pc, #388]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a60      	ldr	r2, [pc, #384]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027da:	4b5b      	ldr	r3, [pc, #364]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a5a      	ldr	r2, [pc, #360]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a57      	ldr	r2, [pc, #348]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f993 	bl	8001b24 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff f98f 	bl	8001b24 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0b1      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4b      	ldr	r3, [pc, #300]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x37e>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff f97d 	bl	8001b24 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7ff f979 	bl	8001b24 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e09b      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3c      	ldr	r3, [pc, #240]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8087 	beq.w	800297a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d061      	beq.n	800293c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d146      	bne.n	800290e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b33      	ldr	r3, [pc, #204]	@ (8002950 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7ff f94d 	bl	8001b24 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f949 	bl	8001b24 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e06d      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b4:	d108      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4921      	ldr	r1, [pc, #132]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a19      	ldr	r1, [r3, #32]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	430b      	orrs	r3, r1
 80028da:	491b      	ldr	r1, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff f91d 	bl	8001b24 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f919 	bl	8001b24 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e03d      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x46a>
 800290c:	e035      	b.n	800297a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x4cc>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f906 	bl	8001b24 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f902 	bl	8001b24 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e026      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x498>
 800293a:	e01e      	b.n	800297a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e019      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_OscConfig+0x500>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0d0      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d910      	bls.n	80029cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b67      	ldr	r3, [pc, #412]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0207 	bic.w	r2, r3, #7
 80029b2:	4965      	ldr	r1, [pc, #404]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a58      	ldr	r2, [pc, #352]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d040      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d115      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b41      	ldr	r3, [pc, #260]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e073      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3d      	ldr	r3, [pc, #244]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06b      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4936      	ldr	r1, [pc, #216]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7ff f854 	bl	8001b24 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7ff f850 	bl	8001b24 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e053      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d210      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	4922      	ldr	r1, [pc, #136]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b02:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	490a      	ldr	r1, [pc, #40]	@ (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	5ccb      	ldrb	r3, [r1, r3]
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1cc>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x1d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f8f0 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08008630 	.word	0x08008630
 8002b54:	20000028 	.word	0x20000028
 8002b58:	2000002c 	.word	0x2000002c

08002b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x30>
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x36>
 8002b8a:	e027      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8e:	613b      	str	r3, [r7, #16]
      break;
 8002b90:	e027      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0c9b      	lsrs	r3, r3, #18
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0c5b      	lsrs	r3, r3, #17
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bbe:	fb03 f202 	mul.w	r2, r3, r2
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e004      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	613b      	str	r3, [r7, #16]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bde:	613b      	str	r3, [r7, #16]
      break;
 8002be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be2:	693b      	ldr	r3, [r7, #16]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	007a1200 	.word	0x007a1200
 8002bf8:	08008658 	.word	0x08008658
 8002bfc:	08008668 	.word	0x08008668
 8002c00:	003d0900 	.word	0x003d0900

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000028 	.word	0x20000028

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff2 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	@ (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08008640 	.word	0x08008640

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0adb      	lsrs	r3, r3, #11
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08008640 	.word	0x08008640

08002c68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	220f      	movs	r2, #15
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c84:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_RCC_GetClockConfig+0x58>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <RCC_Delay+0x34>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <RCC_Delay+0x38>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a5b      	lsrs	r3, r3, #9
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce4:	bf00      	nop
  }
  while (Delay --);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e5a      	subs	r2, r3, #1
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f9      	bne.n	8002ce4 <RCC_Delay+0x1c>
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000028 	.word	0x20000028
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e076      	b.n	8002e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d26:	d009      	beq.n	8002d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
 8002d2e:	e005      	b.n	8002d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd fefa 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc0:	ea42 0103 	orr.w	r1, r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f002 0204 	and.w	r2, r2, #4
 8002de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_SPI_Transmit+0x22>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e12d      	b.n	800308a <HAL_SPI_Transmit+0x27e>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e36:	f7fe fe75 	bl	8001b24 <HAL_GetTick>
 8002e3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e50:	e116      	b.n	8003080 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Transmit+0x52>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e62:	e10d      	b.n	8003080 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2203      	movs	r2, #3
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eaa:	d10f      	bne.n	8002ecc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d007      	beq.n	8002eea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef2:	d14f      	bne.n	8002f94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Transmit+0xf6>
 8002efc:	8afb      	ldrh	r3, [r7, #22]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d142      	bne.n	8002f88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f26:	e02f      	b.n	8002f88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d112      	bne.n	8002f5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f5a:	e015      	b.n	8002f88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5c:	f7fe fde2 	bl	8001b24 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d803      	bhi.n	8002f74 <HAL_SPI_Transmit+0x168>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d102      	bne.n	8002f7a <HAL_SPI_Transmit+0x16e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f86:	e07b      	b.n	8003080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ca      	bne.n	8002f28 <HAL_SPI_Transmit+0x11c>
 8002f92:	e050      	b.n	8003036 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0x196>
 8002f9c:	8afb      	ldrh	r3, [r7, #22]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d144      	bne.n	800302c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fc8:	e030      	b.n	800302c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d113      	bne.n	8003000 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ffe:	e015      	b.n	800302c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003000:	f7fe fd90 	bl	8001b24 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d803      	bhi.n	8003018 <HAL_SPI_Transmit+0x20c>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d102      	bne.n	800301e <HAL_SPI_Transmit+0x212>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800302a:	e029      	b.n	8003080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1c9      	bne.n	8002fca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fbcc 	bl	80037d8 <SPI_EndRxTxTransaction>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e003      	b.n	8003080 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003088:	7ffb      	ldrb	r3, [r7, #31]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af02      	add	r7, sp, #8
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030b6:	e0fb      	b.n	80032b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c0:	d112      	bne.n	80030e8 <HAL_SPI_Receive+0x56>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2204      	movs	r2, #4
 80030ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030d2:	88fa      	ldrh	r2, [r7, #6]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8ef 	bl	80032c2 <HAL_SPI_TransmitReceive>
 80030e4:	4603      	mov	r3, r0
 80030e6:	e0e8      	b.n	80032ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_SPI_Receive+0x64>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e0e1      	b.n	80032ba <HAL_SPI_Receive+0x228>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fe:	f7fe fd11 	bl	8001b24 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Receive+0x7e>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003114:	e0cc      	b.n	80032b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2204      	movs	r2, #4
 800311a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315c:	d10f      	bne.n	800317e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800316c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b40      	cmp	r3, #64	@ 0x40
 800318a:	d007      	beq.n	800319c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d16a      	bne.n	800327a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031a4:	e032      	b.n	800320c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d115      	bne.n	80031e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f103 020c 	add.w	r2, r3, #12
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031de:	e015      	b.n	800320c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e0:	f7fe fca0 	bl	8001b24 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d803      	bhi.n	80031f8 <HAL_SPI_Receive+0x166>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_Receive+0x16c>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800320a:	e051      	b.n	80032b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1c7      	bne.n	80031a6 <HAL_SPI_Receive+0x114>
 8003216:	e035      	b.n	8003284 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d113      	bne.n	800324e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	b292      	uxth	r2, r2
 8003232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800324c:	e015      	b.n	800327a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324e:	f7fe fc69 	bl	8001b24 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d803      	bhi.n	8003266 <HAL_SPI_Receive+0x1d4>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d102      	bne.n	800326c <HAL_SPI_Receive+0x1da>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003278:	e01a      	b.n	80032b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1c9      	bne.n	8003218 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fa53 	bl	8003734 <SPI_EndRxTransaction>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e003      	b.n	80032b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08c      	sub	sp, #48	@ 0x30
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x26>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e198      	b.n	800361a <HAL_SPI_TransmitReceive+0x358>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f0:	f7fe fc18 	bl	8001b24 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800330a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00f      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x70>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003318:	d107      	bne.n	800332a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_SPI_TransmitReceive+0x68>
 8003322:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003330:	e16d      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x82>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x82>
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800334a:	e160      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b04      	cmp	r3, #4
 8003356:	d003      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2205      	movs	r2, #5
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d007      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033bc:	d17c      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x10a>
 80033c6:	8b7b      	ldrh	r3, [r7, #26]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d16a      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f0:	e057      	b.n	80034a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x176>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x176>
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d113      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d119      	bne.n	800347a <HAL_SPI_TransmitReceive+0x1b8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345a:	b292      	uxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800347a:	f7fe fb53 	bl	8001b24 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003486:	429a      	cmp	r2, r3
 8003488:	d80b      	bhi.n	80034a2 <HAL_SPI_TransmitReceive+0x1e0>
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d007      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80034a0:	e0b5      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1a2      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x130>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d19d      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x130>
 80034b6:	e080      	b.n	80035ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x204>
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d16f      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ec:	e05b      	b.n	80035a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11c      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x274>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x274>
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d114      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d119      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x2b6>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003574:	2301      	movs	r3, #1
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003578:	f7fe fad4 	bl	8001b24 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003584:	429a      	cmp	r2, r3
 8003586:	d803      	bhi.n	8003590 <HAL_SPI_TransmitReceive+0x2ce>
 8003588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x2d4>
 8003590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80035a4:	e033      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d19e      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x22c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d199      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f90a 	bl	80037d8 <SPI_EndRxTxTransaction>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80035d6:	e01a      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003604:	e003      	b.n	800360e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003616:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800361a:	4618      	mov	r0, r3
 800361c:	3730      	adds	r7, #48	@ 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003634:	f7fe fa76 	bl	8001b24 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4413      	add	r3, r2
 8003642:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003644:	f7fe fa6e 	bl	8001b24 <HAL_GetTick>
 8003648:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800364a:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	015b      	lsls	r3, r3, #5
 8003650:	0d1b      	lsrs	r3, r3, #20
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800365a:	e054      	b.n	8003706 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d050      	beq.n	8003706 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003664:	f7fe fa5e 	bl	8001b24 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	429a      	cmp	r2, r3
 8003672:	d902      	bls.n	800367a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d13d      	bne.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003692:	d111      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369c:	d004      	beq.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a6:	d107      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c0:	d10f      	bne.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e017      	b.n	8003726 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3b01      	subs	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d19b      	bne.n	800365c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000028 	.word	0x20000028

08003734 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003748:	d111      	bne.n	800376e <SPI_EndRxTransaction+0x3a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003752:	d004      	beq.n	800375e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375c:	d107      	bne.n	800376e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003776:	d117      	bne.n	80037a8 <SPI_EndRxTransaction+0x74>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003780:	d112      	bne.n	80037a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	2101      	movs	r1, #1
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff ff49 	bl	8003624 <SPI_WaitFlagStateUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01a      	beq.n	80037ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e013      	b.n	80037d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff ff36 	bl	8003624 <SPI_WaitFlagStateUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c2:	f043 0220 	orr.w	r2, r3, #32
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e000      	b.n	80037d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2180      	movs	r1, #128	@ 0x80
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff ff18 	bl	8003624 <SPI_WaitFlagStateUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e000      	b.n	800380c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd f9d2 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 f9ee 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e03a      	b.n	8003942 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_TIM_Base_Start_IT+0x98>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f6:	d009      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <HAL_TIM_Base_Start_IT+0x9c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <HAL_TIM_Base_Start_IT+0xa0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d010      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e007      	b.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f92f 	bl	8003bfe <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f922 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f931 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f905 	bl	8003bfe <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8f8 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f907 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8db 	bl	8003bfe <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8ce 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8dd 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8b1 	bl	8003bfe <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8a4 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8b3 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc ffea 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa6d 	bl	8003fe2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f877 	bl	8003c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0220 	mvn.w	r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa38 	bl	8003fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e031      	b.n	8003be4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8b0 	bl	8003cf8 <TIM_SlaveTimer_SetConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e018      	b.n	8003be4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <TIM_Base_SetConfig+0xb8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a26      	ldr	r2, [pc, #152]	@ (8003cf0 <TIM_Base_SetConfig+0xbc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x30>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <TIM_Base_SetConfig+0xc0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	@ (8003cec <TIM_Base_SetConfig+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <TIM_Base_SetConfig+0xbc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0x62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <TIM_Base_SetConfig+0xc0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a07      	ldr	r2, [pc, #28]	@ (8003cec <TIM_Base_SetConfig+0xb8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b70      	cmp	r3, #112	@ 0x70
 8003d40:	d01a      	beq.n	8003d78 <TIM_SlaveTimer_SetConfig+0x80>
 8003d42:	2b70      	cmp	r3, #112	@ 0x70
 8003d44:	d860      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d46:	2b60      	cmp	r3, #96	@ 0x60
 8003d48:	d054      	beq.n	8003df4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003d4a:	2b60      	cmp	r3, #96	@ 0x60
 8003d4c:	d85c      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d4e:	2b50      	cmp	r3, #80	@ 0x50
 8003d50:	d046      	beq.n	8003de0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003d52:	2b50      	cmp	r3, #80	@ 0x50
 8003d54:	d858      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d56:	2b40      	cmp	r3, #64	@ 0x40
 8003d58:	d019      	beq.n	8003d8e <TIM_SlaveTimer_SetConfig+0x96>
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d854      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d5e:	2b30      	cmp	r3, #48	@ 0x30
 8003d60:	d055      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x116>
 8003d62:	2b30      	cmp	r3, #48	@ 0x30
 8003d64:	d850      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d051      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x116>
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d84c      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04d      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x116>
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d04b      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x116>
 8003d76:	e047      	b.n	8003e08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	f000 f8a4 	bl	8003ed4 <TIM_ETR_SetConfig>
      break;
 8003d8c:	e040      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d101      	bne.n	8003d9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e03b      	b.n	8003e12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
      break;
 8003dde:	e017      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dec:	461a      	mov	r2, r3
 8003dee:	f000 f814 	bl	8003e1a <TIM_TI1_ConfigInputStage>
      break;
 8003df2:	e00d      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 f838 	bl	8003e76 <TIM_TI2_ConfigInputStage>
      break;
 8003e06:	e003      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e000      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e0e:	bf00      	nop
  }

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0201 	bic.w	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 030a 	bic.w	r3, r3, #10
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b087      	sub	sp, #28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 0210 	bic.w	r2, r3, #16
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	031b      	lsls	r3, r3, #12
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e046      	b.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d009      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800

08003fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e042      	b.n	800408c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc fe08 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	@ 0x24
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa8f 	bl	800455c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800404c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800405c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800406c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d112      	bne.n	80040d4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_UART_Receive_DMA+0x26>
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00b      	b.n	80040d6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f922 	bl	8004314 <UART_Start_Receive_DMA>
 80040d0:	4603      	mov	r3, r0
 80040d2:	e000      	b.n	80040d6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b09c      	sub	sp, #112	@ 0x70
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d172      	bne.n	800421a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004136:	2200      	movs	r2, #0
 8004138:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800414a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800415a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800415c:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800417e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	667b      	str	r3, [r7, #100]	@ 0x64
 8004186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800418e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800419c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	623b      	str	r3, [r7, #32]
   return(result);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d119      	bne.n	800421a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f023 0310 	bic.w	r3, r3, #16
 80041fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	617b      	str	r3, [r7, #20]
   return(result);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800421c:	2200      	movs	r2, #0
 800421e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800422c:	4619      	mov	r1, r3
 800422e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004230:	f7ff ff67 	bl	8004102 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004234:	e002      	b.n	800423c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004236:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004238:	f7fc f9a2 	bl	8000580 <HAL_UART_RxCpltCallback>
}
 800423c:	bf00      	nop
 800423e:	3770      	adds	r7, #112	@ 0x70
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425c:	2b01      	cmp	r3, #1
 800425e:	d108      	bne.n	8004272 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff ff49 	bl	8004102 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004270:	e002      	b.n	8004278 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff33 	bl	80040de <HAL_UART_RxHalfCpltCallback>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	@ 0x21
 80042b2:	d108      	bne.n	80042c6 <UART_DMAError+0x46>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	f000 f8c1 	bl	8004448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b22      	cmp	r3, #34	@ 0x22
 80042e6:	d108      	bne.n	80042fa <UART_DMAError+0x7a>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2200      	movs	r2, #0
 80042f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f000 f8ce 	bl	8004496 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f7ff fef2 	bl	80040f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b098      	sub	sp, #96	@ 0x60
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2222      	movs	r2, #34	@ 0x22
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	4a3e      	ldr	r2, [pc, #248]	@ (800443c <UART_Start_Receive_DMA+0x128>)
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	4a3d      	ldr	r2, [pc, #244]	@ (8004440 <UART_Start_Receive_DMA+0x12c>)
 800434a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	4a3c      	ldr	r2, [pc, #240]	@ (8004444 <UART_Start_Receive_DMA+0x130>)
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	2200      	movs	r2, #0
 800435a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	f7fd fd3e 	bl	8001df4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d019      	beq.n	80043ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80043bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80043c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80043f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	617b      	str	r3, [r7, #20]
   return(result);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004414:	653b      	str	r3, [r7, #80]	@ 0x50
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800441e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6a39      	ldr	r1, [r7, #32]
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	61fb      	str	r3, [r7, #28]
   return(result);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3760      	adds	r7, #96	@ 0x60
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08004119 	.word	0x08004119
 8004440:	08004245 	.word	0x08004245
 8004444:	08004281 	.word	0x08004281

08004448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	@ 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	61ba      	str	r2, [r7, #24]
 8004472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800448c:	bf00      	nop
 800448e:	3724      	adds	r7, #36	@ 0x24
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b095      	sub	sp, #84	@ 0x54
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044be:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	2b01      	cmp	r3, #1
 800450c:	d119      	bne.n	8004542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	647b      	str	r3, [r7, #68]	@ 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800452e:	61ba      	str	r2, [r7, #24]
 8004530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004550:	bf00      	nop
 8004552:	3754      	adds	r7, #84	@ 0x54
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
	...

0800455c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004596:	f023 030c 	bic.w	r3, r3, #12
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2c      	ldr	r2, [pc, #176]	@ (8004670 <UART_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fb3c 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	e002      	b.n	80045d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe fb24 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	4a22      	ldr	r2, [pc, #136]	@ (8004674 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	0119      	lsls	r1, r3, #4
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fbb2 f2f3 	udiv	r2, r2, r3
 8004608:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <UART_SetConfig+0x118>)
 800460a:	fba3 0302 	umull	r0, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2064      	movs	r0, #100	@ 0x64
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	3332      	adds	r3, #50	@ 0x32
 800461c:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <UART_SetConfig+0x118>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004628:	4419      	add	r1, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <UART_SetConfig+0x118>)
 8004642:	fba3 0302 	umull	r0, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2064      	movs	r0, #100	@ 0x64
 800464a:	fb00 f303 	mul.w	r3, r0, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	3332      	adds	r3, #50	@ 0x32
 8004654:	4a07      	ldr	r2, [pc, #28]	@ (8004674 <UART_SetConfig+0x118>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	440a      	add	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40013800 	.word	0x40013800
 8004674:	51eb851f 	.word	0x51eb851f

08004678 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60bb      	str	r3, [r7, #8]
  return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	607b      	str	r3, [r7, #4]
  return(result);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <osKernelInitialize+0x32>
 8004696:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <osKernelInitialize+0x60>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d109      	bne.n	80046b2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800469e:	f3ef 8311 	mrs	r3, BASEPRI
 80046a2:	603b      	str	r3, [r7, #0]
  return(result);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046aa:	f06f 0305 	mvn.w	r3, #5
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e00c      	b.n	80046cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046b2:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <osKernelInitialize+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046ba:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <osKernelInitialize+0x60>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e002      	b.n	80046cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	200003e4 	.word	0x200003e4

080046dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e2:	f3ef 8305 	mrs	r3, IPSR
 80046e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ee:	f3ef 8310 	mrs	r3, PRIMASK
 80046f2:	607b      	str	r3, [r7, #4]
  return(result);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <osKernelStart+0x32>
 80046fa:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <osKernelStart+0x64>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d109      	bne.n	8004716 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004702:	f3ef 8311 	mrs	r3, BASEPRI
 8004706:	603b      	str	r3, [r7, #0]
  return(result);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <osKernelStart+0x3a>
    stat = osErrorISR;
 800470e:	f06f 0305 	mvn.w	r3, #5
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e00e      	b.n	8004734 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <osKernelStart+0x64>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800471e:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <osKernelStart+0x64>)
 8004720:	2202      	movs	r2, #2
 8004722:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004724:	f002 f81e 	bl	8006764 <vTaskStartScheduler>
      stat = osOK;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e002      	b.n	8004734 <osKernelStart+0x58>
    } else {
      stat = osError;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200003e4 	.word	0x200003e4

08004744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b092      	sub	sp, #72	@ 0x48
 8004748:	af04      	add	r7, sp, #16
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004754:	f3ef 8305 	mrs	r3, IPSR
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 8094 	bne.w	800488a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004762:	f3ef 8310 	mrs	r3, PRIMASK
 8004766:	623b      	str	r3, [r7, #32]
  return(result);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 808d 	bne.w	800488a <osThreadNew+0x146>
 8004770:	4b48      	ldr	r3, [pc, #288]	@ (8004894 <osThreadNew+0x150>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d106      	bne.n	8004786 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004778:	f3ef 8311 	mrs	r3, BASEPRI
 800477c:	61fb      	str	r3, [r7, #28]
  return(result);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 8082 	bne.w	800488a <osThreadNew+0x146>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d07e      	beq.n	800488a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004790:	2318      	movs	r3, #24
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004794:	2300      	movs	r3, #0
 8004796:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004798:	f107 031b 	add.w	r3, r7, #27
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d045      	beq.n	8004836 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <osThreadNew+0x74>
        name = attr->name;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <osThreadNew+0x9a>
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	2b38      	cmp	r3, #56	@ 0x38
 80047d0:	d805      	bhi.n	80047de <osThreadNew+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <osThreadNew+0x9e>
        return (NULL);
 80047de:	2300      	movs	r3, #0
 80047e0:	e054      	b.n	800488c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00e      	beq.n	8004818 <osThreadNew+0xd4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b63      	cmp	r3, #99	@ 0x63
 8004800:	d90a      	bls.n	8004818 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004806:	2b00      	cmp	r3, #0
 8004808:	d006      	beq.n	8004818 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <osThreadNew+0xd4>
        mem = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004816:	e010      	b.n	800483a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10c      	bne.n	800483a <osThreadNew+0xf6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <osThreadNew+0xf6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <osThreadNew+0xf6>
          mem = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004834:	e001      	b.n	800483a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	2b01      	cmp	r3, #1
 800483e:	d110      	bne.n	8004862 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004848:	9202      	str	r2, [sp, #8]
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004854:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f001 fcde 	bl	8006218 <xTaskCreateStatic>
 800485c:	4603      	mov	r3, r0
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e013      	b.n	800488a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d110      	bne.n	800488a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	b29a      	uxth	r2, r3
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 fd2b 	bl	80062d6 <xTaskCreate>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <osThreadNew+0x146>
          hTask = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3738      	adds	r7, #56	@ 0x38
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200003e4 	.word	0x200003e4

08004898 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a4:	f3ef 8305 	mrs	r3, IPSR
 80048a8:	613b      	str	r3, [r7, #16]
  return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10f      	bne.n	80048d0 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b0:	f3ef 8310 	mrs	r3, PRIMASK
 80048b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <osThreadTerminate+0x38>
 80048bc:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <osThreadTerminate+0x7c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d109      	bne.n	80048d8 <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048c4:	f3ef 8311 	mrs	r3, BASEPRI
 80048c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <osThreadTerminate+0x40>
    stat = osErrorISR;
 80048d0:	f06f 0305 	mvn.w	r3, #5
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e017      	b.n	8004908 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 80048de:	f06f 0303 	mvn.w	r3, #3
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e010      	b.n	8004908 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 80048e6:	69b8      	ldr	r0, [r7, #24]
 80048e8:	f001 fee2 	bl	80066b0 <eTaskGetState>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d005      	beq.n	8004902 <osThreadTerminate+0x6a>
      stat = osOK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 80048fa:	69b8      	ldr	r0, [r7, #24]
 80048fc:	f001 fe2e 	bl	800655c <vTaskDelete>
 8004900:	e002      	b.n	8004908 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8004902:	f06f 0302 	mvn.w	r3, #2
 8004906:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004908:	69fb      	ldr	r3, [r7, #28]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200003e4 	.word	0x200003e4

08004918 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004920:	f3ef 8305 	mrs	r3, IPSR
 8004924:	613b      	str	r3, [r7, #16]
  return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10f      	bne.n	800494c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492c:	f3ef 8310 	mrs	r3, PRIMASK
 8004930:	60fb      	str	r3, [r7, #12]
  return(result);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <osDelay+0x34>
 8004938:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <osDelay+0x58>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d109      	bne.n	8004954 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004940:	f3ef 8311 	mrs	r3, BASEPRI
 8004944:	60bb      	str	r3, [r7, #8]
  return(result);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <osDelay+0x3c>
    stat = osErrorISR;
 800494c:	f06f 0305 	mvn.w	r3, #5
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e007      	b.n	8004964 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <osDelay+0x4c>
      vTaskDelay(ticks);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f001 fe70 	bl	8006644 <vTaskDelay>
    }
  }

  return (stat);
 8004964:	697b      	ldr	r3, [r7, #20]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200003e4 	.word	0x200003e4

08004974 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004980:	f3ef 8305 	mrs	r3, IPSR
 8004984:	617b      	str	r3, [r7, #20]
  return(result);
 8004986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004988:	2b00      	cmp	r3, #0
 800498a:	d13d      	bne.n	8004a08 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498c:	f3ef 8310 	mrs	r3, PRIMASK
 8004990:	613b      	str	r3, [r7, #16]
  return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d137      	bne.n	8004a08 <osEventFlagsNew+0x94>
 8004998:	4b1e      	ldr	r3, [pc, #120]	@ (8004a14 <osEventFlagsNew+0xa0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d105      	bne.n	80049ac <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049a0:	f3ef 8311 	mrs	r3, BASEPRI
 80049a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d12d      	bne.n	8004a08 <osEventFlagsNew+0x94>
    mem = -1;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d006      	beq.n	80049ce <osEventFlagsNew+0x5a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b1f      	cmp	r3, #31
 80049c6:	d902      	bls.n	80049ce <osEventFlagsNew+0x5a>
        mem = 1;
 80049c8:	2301      	movs	r3, #1
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e00c      	b.n	80049e8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <osEventFlagsNew+0x74>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <osEventFlagsNew+0x74>
          mem = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e001      	b.n	80049e8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d106      	bne.n	80049fc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa56 	bl	8004ea4 <xEventGroupCreateStatic>
 80049f8:	61f8      	str	r0, [r7, #28]
 80049fa:	e005      	b.n	8004a08 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004a02:	f000 fa88 	bl	8004f16 <xEventGroupCreate>
 8004a06:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004a08:	69fb      	ldr	r3, [r7, #28]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200003e4 	.word	0x200003e4

08004a18 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <osEventFlagsSet+0x1c>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a32:	d303      	bcc.n	8004a3c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004a34:	f06f 0303 	mvn.w	r3, #3
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e03a      	b.n	8004ab2 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3c:	f3ef 8305 	mrs	r3, IPSR
 8004a40:	617b      	str	r3, [r7, #20]
  return(result);
 8004a42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a48:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <osEventFlagsSet+0x50>
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <osEventFlagsSet+0xa4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d123      	bne.n	8004aa4 <osEventFlagsSet+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	461a      	mov	r2, r3
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	69b8      	ldr	r0, [r7, #24]
 8004a76:	f000 fbf5 	bl	8005264 <xEventGroupSetBitsFromISR>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 8004a80:	f06f 0302 	mvn.w	r3, #2
 8004a84:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004a86:	e013      	b.n	8004ab0 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00e      	beq.n	8004ab0 <osEventFlagsSet+0x98>
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <osEventFlagsSet+0xa8>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004aa2:	e005      	b.n	8004ab0 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	69b8      	ldr	r0, [r7, #24]
 8004aa8:	f000 fb22 	bl	80050f0 <xEventGroupSetBits>
 8004aac:	61f8      	str	r0, [r7, #28]
 8004aae:	e000      	b.n	8004ab2 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004ab0:	bf00      	nop
  }

  return (rflags);
 8004ab2:	69fb      	ldr	r3, [r7, #28]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	200003e4 	.word	0x200003e4
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08e      	sub	sp, #56	@ 0x38
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <osEventFlagsWait+0x20>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae2:	d303      	bcc.n	8004aec <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004ae4:	f06f 0303 	mvn.w	r3, #3
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aea:	e059      	b.n	8004ba0 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aec:	f3ef 8305 	mrs	r3, IPSR
 8004af0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004af2:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af8:	f3ef 8310 	mrs	r3, PRIMASK
 8004afc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <osEventFlagsWait+0x54>
 8004b04:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <osEventFlagsWait+0xe8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d109      	bne.n	8004b20 <osEventFlagsWait+0x5c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b10:	617b      	str	r3, [r7, #20]
  return(result);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 8004b18:	f06f 0305 	mvn.w	r3, #5
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1e:	e03f      	b.n	8004ba0 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2e:	e001      	b.n	8004b34 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b42:	e001      	b.n	8004b48 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	6a38      	ldr	r0, [r7, #32]
 8004b54:	f000 f9fa 	bl	8004f4c <xEventGroupWaitBits>
 8004b58:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d019      	beq.n	8004ba0 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 8004b72:	f06f 0301 	mvn.w	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b78:	e012      	b.n	8004ba0 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004b7a:	f06f 0302 	mvn.w	r3, #2
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b80:	e00e      	b.n	8004ba0 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 8004b92:	f06f 0301 	mvn.w	r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b98:	e002      	b.n	8004ba0 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004b9a:	f06f 0302 	mvn.w	r3, #2
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3730      	adds	r7, #48	@ 0x30
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200003e4 	.word	0x200003e4

08004bb0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bbc:	f3ef 8305 	mrs	r3, IPSR
 8004bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 8085 	bne.w	8004cd4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bca:	f3ef 8310 	mrs	r3, PRIMASK
 8004bce:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d17e      	bne.n	8004cd4 <osMutexNew+0x124>
 8004bd6:	4b42      	ldr	r3, [pc, #264]	@ (8004ce0 <osMutexNew+0x130>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d105      	bne.n	8004bea <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bde:	f3ef 8311 	mrs	r3, BASEPRI
 8004be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d174      	bne.n	8004cd4 <osMutexNew+0x124>
    if (attr != NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	e001      	b.n	8004bfc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <osMutexNew+0x5c>
      rmtx = 1U;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	e001      	b.n	8004c10 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d15c      	bne.n	8004cd4 <osMutexNew+0x124>
      mem = -1;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d015      	beq.n	8004c52 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <osMutexNew+0x8c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c34:	d902      	bls.n	8004c3c <osMutexNew+0x8c>
          mem = 1;
 8004c36:	2301      	movs	r3, #1
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e00c      	b.n	8004c56 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <osMutexNew+0xa6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <osMutexNew+0xa6>
            mem = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e001      	b.n	8004c56 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d112      	bne.n	8004c82 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4619      	mov	r1, r3
 8004c68:	2004      	movs	r0, #4
 8004c6a:	f000 fd39 	bl	80056e0 <xQueueCreateMutexStatic>
 8004c6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c70:	e016      	b.n	8004ca0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4619      	mov	r1, r3
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f000 fd31 	bl	80056e0 <xQueueCreateMutexStatic>
 8004c7e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c80:	e00e      	b.n	8004ca0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004c8e:	2004      	movs	r0, #4
 8004c90:	f000 fd0e 	bl	80056b0 <xQueueCreateMutex>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c96:	e003      	b.n	8004ca0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f000 fd09 	bl	80056b0 <xQueueCreateMutex>
 8004c9e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <osMutexNew+0x110>
        if (attr != NULL) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <osMutexNew+0x104>
          name = attr->name;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e001      	b.n	8004cb8 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004cb8:	6979      	ldr	r1, [r7, #20]
 8004cba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cbc:	f001 fa50 	bl	8006160 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <osMutexNew+0x124>
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3728      	adds	r7, #40	@ 0x28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200003e4 	.word	0x200003e4

08004ce4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d02:	f3ef 8305 	mrs	r3, IPSR
 8004d06:	613b      	str	r3, [r7, #16]
  return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <osMutexAcquire+0x4a>
 8004d1a:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <osMutexAcquire+0xb8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d109      	bne.n	8004d36 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d22:	f3ef 8311 	mrs	r3, BASEPRI
 8004d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004d2e:	f06f 0305 	mvn.w	r3, #5
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e02c      	b.n	8004d90 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004d3c:	f06f 0303 	mvn.w	r3, #3
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e025      	b.n	8004d90 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d011      	beq.n	8004d6e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	69b8      	ldr	r0, [r7, #24]
 8004d4e:	f000 fd17 	bl	8005780 <xQueueTakeMutexRecursive>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d01b      	beq.n	8004d90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004d5e:	f06f 0301 	mvn.w	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e014      	b.n	8004d90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004d66:	f06f 0302 	mvn.w	r3, #2
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e010      	b.n	8004d90 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	69b8      	ldr	r0, [r7, #24]
 8004d72:	f000 ffbd 	bl	8005cf0 <xQueueSemaphoreTake>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d009      	beq.n	8004d90 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004d82:	f06f 0301 	mvn.w	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e002      	b.n	8004d90 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004d8a:	f06f 0302 	mvn.w	r3, #2
 8004d8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d90:	69fb      	ldr	r3, [r7, #28]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200003e4 	.word	0x200003e4

08004da0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbc:	f3ef 8305 	mrs	r3, IPSR
 8004dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10f      	bne.n	8004de8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <osMutexRelease+0x48>
 8004dd4:	4b19      	ldr	r3, [pc, #100]	@ (8004e3c <osMutexRelease+0x9c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d109      	bne.n	8004df0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004de8:	f06f 0305 	mvn.w	r3, #5
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e01f      	b.n	8004e30 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004df6:	f06f 0303 	mvn.w	r3, #3
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e018      	b.n	8004e30 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e04:	69b8      	ldr	r0, [r7, #24]
 8004e06:	f000 fc86 	bl	8005716 <xQueueGiveMutexRecursive>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d00f      	beq.n	8004e30 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e10:	f06f 0302 	mvn.w	r3, #2
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e00b      	b.n	8004e30 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	69b8      	ldr	r0, [r7, #24]
 8004e20:	f000 fce6 	bl	80057f0 <xQueueGenericSend>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d002      	beq.n	8004e30 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e2a:	f06f 0302 	mvn.w	r3, #2
 8004e2e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004e30:	69fb      	ldr	r3, [r7, #28]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200003e4 	.word	0x200003e4

08004e40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a06      	ldr	r2, [pc, #24]	@ (8004e68 <vApplicationGetIdleTaskMemory+0x28>)
 8004e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a05      	ldr	r2, [pc, #20]	@ (8004e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8004e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	@ 0x80
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	200003e8 	.word	0x200003e8
 8004e6c:	2000044c 	.word	0x2000044c

08004e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8004e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a06      	ldr	r2, [pc, #24]	@ (8004ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8004e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000064c 	.word	0x2000064c
 8004ea0:	200006b0 	.word	0x200006b0

08004ea4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004eca:	2320      	movs	r3, #32
 8004ecc:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d00b      	beq.n	8004eec <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	60fb      	str	r3, [r7, #12]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <xEventGroupCreateStatic+0x44>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f9c3 	bl	800528c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004f0c:	697b      	ldr	r3, [r7, #20]
	}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004f1c:	2020      	movs	r0, #32
 8004f1e:	f003 f87f 	bl	8008020 <pvPortMalloc>
 8004f22:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f9a9 	bl	800528c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004f40:	687b      	ldr	r3, [r7, #4]
	}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b090      	sub	sp, #64	@ 0x40
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	623b      	str	r3, [r7, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f8a:	d30b      	bcc.n	8004fa4 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <xEventGroupWaitBits+0x76>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	61bb      	str	r3, [r7, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	e7fd      	b.n	8004fbe <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc2:	f002 f8f5 	bl	80071b0 <xTaskGetSchedulerState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <xEventGroupWaitBits+0x86>
 8004fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <xEventGroupWaitBits+0x8a>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <xEventGroupWaitBits+0x8c>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	617b      	str	r3, [r7, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004ff4:	f001 fc20 	bl	8006838 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005004:	f000 f90d 	bl	8005222 <prvTestWaitCondition>
 8005008:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005014:	2300      	movs	r3, #0
 8005016:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d028      	beq.n	8005070 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800501e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e020      	b.n	8005070 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800502e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	633b      	str	r3, [r7, #48]	@ 0x30
 800503c:	e018      	b.n	8005070 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005058:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	1d18      	adds	r0, r3, #4
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	4313      	orrs	r3, r2
 8005064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005066:	4619      	mov	r1, r3
 8005068:	f001 fe00 	bl	8006c6c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005070:	f001 fbf0 	bl	8006854 <xTaskResumeAll>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005078:	2b00      	cmp	r3, #0
 800507a:	d031      	beq.n	80050e0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8005082:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <xEventGroupWaitBits+0x1a0>)
 8005084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005092:	f002 fa11 	bl	80074b8 <uxTaskResetEventItemValue>
 8005096:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11a      	bne.n	80050d8 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80050a2:	f002 febb 	bl	8007e1c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80050a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80050b2:	f000 f8b6 	bl	8005222 <prvTestWaitCondition>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80050d4:	f002 fed2 	bl	8007e7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80050d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3740      	adds	r7, #64	@ 0x40
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	@ 0x38
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80050fa:	2300      	movs	r3, #0
 80050fc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <xEventGroupSetBits+0x34>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	613b      	str	r3, [r7, #16]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800512a:	d30b      	bcc.n	8005144 <xEventGroupSetBits+0x54>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	e7fd      	b.n	8005140 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	3304      	adds	r3, #4
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3308      	adds	r3, #8
 800514e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005150:	f001 fb72 	bl	8006838 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	431a      	orrs	r2, r3
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005166:	e03c      	b.n	80051e2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800516e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800517e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005186:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800519e:	2301      	movs	r3, #1
 80051a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a2:	e008      	b.n	80051b6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d101      	bne.n	80051b6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80051c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051d6:	4619      	mov	r1, r3
 80051d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80051da:	f001 fe15 	bl	8006e08 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80051e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d1be      	bne.n	8005168 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80051f8:	f001 fb2c 	bl	8006854 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3738      	adds	r7, #56	@ 0x38
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff6b 	bl	80050f0 <xEventGroupSetBits>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d107      	bne.n	8005248 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e007      	b.n	8005258 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d101      	bne.n	8005258 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005258:	697b      	ldr	r3, [r7, #20]
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	4804      	ldr	r0, [pc, #16]	@ (8005288 <xEventGroupSetBitsFromISR+0x24>)
 8005278:	f002 fcbe 	bl	8007bf8 <xTimerPendFunctionCallFromISR>
 800527c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800527e:	697b      	ldr	r3, [r7, #20]
	}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	08005209 	.word	0x08005209

0800528c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f103 0208 	add.w	r2, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f103 0208 	add.w	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f103 0208 	add.w	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d103      	bne.n	8005348 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e00c      	b.n	8005362 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3308      	adds	r3, #8
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e002      	b.n	8005356 <vListInsert+0x2e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d2f6      	bcs.n	8005350 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6892      	ldr	r2, [r2, #8]
 80053ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6852      	ldr	r2, [r2, #4]
 80053b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d103      	bne.n	80053cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1e5a      	subs	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
	...

080053ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <xQueueGenericReset+0x2c>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	60bb      	str	r3, [r7, #8]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005418:	f002 fd00 	bl	8007e1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	441a      	add	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	3b01      	subs	r3, #1
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	22ff      	movs	r2, #255	@ 0xff
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	22ff      	movs	r2, #255	@ 0xff
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d114      	bne.n	8005498 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01a      	beq.n	80054ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3310      	adds	r3, #16
 800547a:	4618      	mov	r0, r3
 800547c:	f001 fc60 	bl	8006d40 <xTaskRemoveFromEventList>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <xQueueGenericReset+0xd0>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	e009      	b.n	80054ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3310      	adds	r3, #16
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fef5 	bl	800528c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3324      	adds	r3, #36	@ 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fef0 	bl	800528c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054ac:	f002 fce6 	bl	8007e7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054b0:	2301      	movs	r3, #1
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08e      	sub	sp, #56	@ 0x38
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10b      	bne.n	80054ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <xQueueGenericCreateStatic+0x56>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <xQueueGenericCreateStatic+0x5a>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericCreateStatic+0x5c>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <xQueueGenericCreateStatic+0x84>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueGenericCreateStatic+0x88>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueGenericCreateStatic+0x8a>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61fb      	str	r3, [r7, #28]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005566:	2350      	movs	r3, #80	@ 0x50
 8005568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b50      	cmp	r3, #80	@ 0x50
 800556e:	d00b      	beq.n	8005588 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61bb      	str	r3, [r7, #24]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800559a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f844 	bl	8005636 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	@ 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e004      	b.n	80055fa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	fb02 f303 	mul.w	r3, r2, r3
 80055f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3350      	adds	r3, #80	@ 0x50
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 fd0e 	bl	8008020 <pvPortMalloc>
 8005604:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00f      	beq.n	800562c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	3350      	adds	r3, #80	@ 0x50
 8005610:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800561a:	79fa      	ldrb	r2, [r7, #7]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f805 	bl	8005636 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800562c:	69bb      	ldr	r3, [r7, #24]
	}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e002      	b.n	8005658 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005664:	2101      	movs	r1, #1
 8005666:	69b8      	ldr	r0, [r7, #24]
 8005668:	f7ff fec0 	bl	80053ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800569c:	2300      	movs	r3, #0
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8a4 	bl	80057f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056ba:	2301      	movs	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	6978      	ldr	r0, [r7, #20]
 80056ca:	f7ff ff75 	bl	80055b8 <xQueueGenericCreate>
 80056ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff ffd3 	bl	800567c <prvInitialiseMutex>

		return pxNewQueue;
 80056d6:	68fb      	ldr	r3, [r7, #12]
	}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	4603      	mov	r3, r0
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	6939      	ldr	r1, [r7, #16]
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7ff fede 	bl	80054c0 <xQueueGenericCreateStatic>
 8005704:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff ffb8 	bl	800567c <prvInitialiseMutex>

		return pxNewQueue;
 800570c:	68fb      	ldr	r3, [r7, #12]
	}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685c      	ldr	r4, [r3, #4]
 8005744:	f001 fd26 	bl	8007194 <xTaskGetCurrentTaskHandle>
 8005748:	4603      	mov	r3, r0
 800574a:	429c      	cmp	r4, r3
 800574c:	d111      	bne.n	8005772 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005760:	2300      	movs	r3, #0
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f000 f842 	bl	80057f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005776:	697b      	ldr	r3, [r7, #20]
	}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685c      	ldr	r4, [r3, #4]
 80057b0:	f001 fcf0 	bl	8007194 <xTaskGetCurrentTaskHandle>
 80057b4:	4603      	mov	r3, r0
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d107      	bne.n	80057ca <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e00c      	b.n	80057e4 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6938      	ldr	r0, [r7, #16]
 80057ce:	f000 fa8f 	bl	8005cf0 <xQueueSemaphoreTake>
 80057d2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80057e4:	697b      	ldr	r3, [r7, #20]
	}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}
	...

080057f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08e      	sub	sp, #56	@ 0x38
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <xQueueGenericSend+0x34>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x42>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <xQueueGenericSend+0x46>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <xQueueGenericSend+0x48>
 8005836:	2300      	movs	r3, #0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <xQueueGenericSend+0x64>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	e7fd      	b.n	8005850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d103      	bne.n	8005862 <xQueueGenericSend+0x72>
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <xQueueGenericSend+0x76>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericSend+0x78>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <xQueueGenericSend+0x94>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	623b      	str	r3, [r7, #32]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005884:	f001 fc94 	bl	80071b0 <xTaskGetSchedulerState>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <xQueueGenericSend+0xa4>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <xQueueGenericSend+0xa8>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <xQueueGenericSend+0xaa>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61fb      	str	r3, [r7, #28]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058b6:	f002 fab1 	bl	8007e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <xQueueGenericSend+0xdc>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d129      	bne.n	8005920 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058d2:	f000 fb34 	bl	8005f3e <prvCopyDataToQueue>
 80058d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	3324      	adds	r3, #36	@ 0x24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fa2b 	bl	8006d40 <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058f0:	4b3f      	ldr	r3, [pc, #252]	@ (80059f0 <xQueueGenericSend+0x200>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	e00a      	b.n	8005918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005908:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <xQueueGenericSend+0x200>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005918:	f002 fab0 	bl	8007e7c <vPortExitCritical>
				return pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	e063      	b.n	80059e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005926:	f002 faa9 	bl	8007e7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800592a:	2300      	movs	r3, #0
 800592c:	e05c      	b.n	80059e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005934:	f107 0314 	add.w	r3, r7, #20
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fac9 	bl	8006ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800593e:	2301      	movs	r3, #1
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005942:	f002 fa9b 	bl	8007e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005946:	f000 ff77 	bl	8006838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800594a:	f002 fa67 	bl	8007e1c <vPortEnterCritical>
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005954:	b25b      	sxtb	r3, r3
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d103      	bne.n	8005964 <xQueueGenericSend+0x174>
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800596a:	b25b      	sxtb	r3, r3
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d103      	bne.n	800597a <xQueueGenericSend+0x18a>
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597a:	f002 fa7f 	bl	8007e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800597e:	1d3a      	adds	r2, r7, #4
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fab8 	bl	8006efc <xTaskCheckForTimeOut>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d124      	bne.n	80059dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005994:	f000 fbcb 	bl	800612e <prvIsQueueFull>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d018      	beq.n	80059d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	3310      	adds	r3, #16
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f93a 	bl	8006c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ae:	f000 fb56 	bl	800605e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059b2:	f000 ff4f 	bl	8006854 <xTaskResumeAll>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f af7c 	bne.w	80058b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80059be:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <xQueueGenericSend+0x200>)
 80059c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	e772      	b.n	80058b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d2:	f000 fb44 	bl	800605e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059d6:	f000 ff3d 	bl	8006854 <xTaskResumeAll>
 80059da:	e76c      	b.n	80058b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059de:	f000 fb3e 	bl	800605e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e2:	f000 ff37 	bl	8006854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059e6:	2300      	movs	r3, #0
		}
	}
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3738      	adds	r7, #56	@ 0x38
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	@ 0x38
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <xQueueGenericSendFromISR+0x3e>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <xQueueGenericSendFromISR+0x42>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <xQueueGenericSendFromISR+0x44>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	623b      	str	r3, [r7, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSendFromISR+0x6e>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <xQueueGenericSendFromISR+0x72>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <xQueueGenericSendFromISR+0x74>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	61fb      	str	r3, [r7, #28]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a84:	f002 fa8c 	bl	8007fa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a88:	f3ef 8211 	mrs	r2, BASEPRI
 8005a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	61ba      	str	r2, [r7, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <xQueueGenericSendFromISR+0xc2>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d12c      	bne.n	8005b10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac6:	f000 fa3a 	bl	8005f3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d112      	bne.n	8005afa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d016      	beq.n	8005b0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	3324      	adds	r3, #36	@ 0x24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 f92d 	bl	8006d40 <xTaskRemoveFromEventList>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e007      	b.n	8005b0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005afa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005afe:	3301      	adds	r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	b25a      	sxtb	r2, r3
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005b0e:	e001      	b.n	8005b14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3738      	adds	r7, #56	@ 0x38
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	@ 0x30
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <xQueueReceive+0x32>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	623b      	str	r3, [r7, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d103      	bne.n	8005b6c <xQueueReceive+0x40>
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueReceive+0x44>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <xQueueReceive+0x46>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <xQueueReceive+0x62>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fb      	str	r3, [r7, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b8e:	f001 fb0f 	bl	80071b0 <xTaskGetSchedulerState>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <xQueueReceive+0x72>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <xQueueReceive+0x76>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <xQueueReceive+0x78>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueReceive+0x94>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	61bb      	str	r3, [r7, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc0:	f002 f92c 	bl	8007e1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01f      	beq.n	8005c10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd4:	f000 fa1d 	bl	8006012 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	1e5a      	subs	r2, r3, #1
 8005bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	3310      	adds	r3, #16
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 f8a7 	bl	8006d40 <xTaskRemoveFromEventList>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cec <xQueueReceive+0x1c0>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c08:	f002 f938 	bl	8007e7c <vPortExitCritical>
				return pdPASS;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e069      	b.n	8005ce4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c16:	f002 f931 	bl	8007e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e062      	b.n	8005ce4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c24:	f107 0310 	add.w	r3, r7, #16
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 f951 	bl	8006ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c32:	f002 f923 	bl	8007e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c36:	f000 fdff 	bl	8006838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c3a:	f002 f8ef 	bl	8007e1c <vPortEnterCritical>
 8005c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d103      	bne.n	8005c54 <xQueueReceive+0x128>
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d103      	bne.n	8005c6a <xQueueReceive+0x13e>
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c6a:	f002 f907 	bl	8007e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c6e:	1d3a      	adds	r2, r7, #4
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 f940 	bl	8006efc <xTaskCheckForTimeOut>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d123      	bne.n	8005cca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c84:	f000 fa3d 	bl	8006102 <prvIsQueueEmpty>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	3324      	adds	r3, #36	@ 0x24
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 ffc2 	bl	8006c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c9e:	f000 f9de 	bl	800605e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ca2:	f000 fdd7 	bl	8006854 <xTaskResumeAll>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d189      	bne.n	8005bc0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005cac:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <xQueueReceive+0x1c0>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	e780      	b.n	8005bc0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc0:	f000 f9cd 	bl	800605e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cc4:	f000 fdc6 	bl	8006854 <xTaskResumeAll>
 8005cc8:	e77a      	b.n	8005bc0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ccc:	f000 f9c7 	bl	800605e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cd0:	f000 fdc0 	bl	8006854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd6:	f000 fa14 	bl	8006102 <prvIsQueueEmpty>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f43f af6f 	beq.w	8005bc0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ce2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3730      	adds	r7, #48	@ 0x30
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	@ 0x38
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	623b      	str	r3, [r7, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	e7fd      	b.n	8005d20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	61fb      	str	r3, [r7, #28]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d44:	f001 fa34 	bl	80071b0 <xTaskGetSchedulerState>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <xQueueSemaphoreTake+0x64>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <xQueueSemaphoreTake+0x68>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <xQueueSemaphoreTake+0x6a>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61bb      	str	r3, [r7, #24]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d76:	f002 f851 	bl	8007e1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d024      	beq.n	8005dd0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d96:	f001 fba7 	bl	80074e8 <pvTaskIncrementMutexHeldCount>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00f      	beq.n	8005dc8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	3310      	adds	r3, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ffc7 	bl	8006d40 <xTaskRemoveFromEventList>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005db8:	4b54      	ldr	r3, [pc, #336]	@ (8005f0c <xQueueSemaphoreTake+0x21c>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dc8:	f002 f858 	bl	8007e7c <vPortExitCritical>
				return pdPASS;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e098      	b.n	8005f02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d112      	bne.n	8005dfc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	617b      	str	r3, [r7, #20]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005df4:	f002 f842 	bl	8007e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e082      	b.n	8005f02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 f862 	bl	8006ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e10:	f002 f834 	bl	8007e7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e14:	f000 fd10 	bl	8006838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e18:	f002 f800 	bl	8007e1c <vPortEnterCritical>
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d103      	bne.n	8005e32 <xQueueSemaphoreTake+0x142>
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e38:	b25b      	sxtb	r3, r3
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d103      	bne.n	8005e48 <xQueueSemaphoreTake+0x158>
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e48:	f002 f818 	bl	8007e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e4c:	463a      	mov	r2, r7
 8005e4e:	f107 030c 	add.w	r3, r7, #12
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f851 	bl	8006efc <xTaskCheckForTimeOut>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d132      	bne.n	8005ec6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e62:	f000 f94e 	bl	8006102 <prvIsQueueEmpty>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d026      	beq.n	8005eba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005e74:	f001 ffd2 	bl	8007e1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f9b5 	bl	80071ec <xTaskPriorityInherit>
 8005e82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005e84:	f001 fffa 	bl	8007e7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	3324      	adds	r3, #36	@ 0x24
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fec5 	bl	8006c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e98:	f000 f8e1 	bl	800605e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e9c:	f000 fcda 	bl	8006854 <xTaskResumeAll>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f af67 	bne.w	8005d76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005ea8:	4b18      	ldr	r3, [pc, #96]	@ (8005f0c <xQueueSemaphoreTake+0x21c>)
 8005eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	e75d      	b.n	8005d76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005eba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ebc:	f000 f8cf 	bl	800605e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ec0:	f000 fcc8 	bl	8006854 <xTaskResumeAll>
 8005ec4:	e757      	b.n	8005d76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ec8:	f000 f8c9 	bl	800605e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ecc:	f000 fcc2 	bl	8006854 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ed2:	f000 f916 	bl	8006102 <prvIsQueueEmpty>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f43f af4c 	beq.w	8005d76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ee4:	f001 ff9a 	bl	8007e1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005eea:	f000 f811 	bl	8005f10 <prvGetDisinheritPriorityAfterTimeout>
 8005eee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fa56 	bl	80073a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005efc:	f001 ffbe 	bl	8007e7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3738      	adds	r7, #56	@ 0x38
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e001      	b.n	8005f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f32:	68fb      	ldr	r3, [r7, #12]
	}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b086      	sub	sp, #24
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10d      	bne.n	8005f78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d14d      	bne.n	8006000 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 f9ad 	bl	80072c8 <xTaskPriorityDisinherit>
 8005f6e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e043      	b.n	8006000 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d119      	bne.n	8005fb2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6898      	ldr	r0, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	461a      	mov	r2, r3
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	f002 fa53 	bl	8008434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d32b      	bcc.n	8006000 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	e026      	b.n	8006000 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68d8      	ldr	r0, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	f002 fa39 	bl	8008434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	425b      	negs	r3, r3
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d207      	bcs.n	8005fee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	425b      	negs	r3, r3
 8005fe8:	441a      	add	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d105      	bne.n	8006000 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006008:	697b      	ldr	r3, [r7, #20]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d018      	beq.n	8006056 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d303      	bcc.n	8006046 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68d9      	ldr	r1, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	461a      	mov	r2, r3
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f002 f9ef 	bl	8008434 <memcpy>
	}
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006066:	f001 fed9 	bl	8007e1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006070:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006072:	e011      	b.n	8006098 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3324      	adds	r3, #36	@ 0x24
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fe5d 	bl	8006d40 <xTaskRemoveFromEventList>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800608c:	f000 ff9a 	bl	8006fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	3b01      	subs	r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	dce9      	bgt.n	8006074 <prvUnlockQueue+0x16>
 80060a0:	e000      	b.n	80060a4 <prvUnlockQueue+0x46>
					break;
 80060a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	22ff      	movs	r2, #255	@ 0xff
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80060ac:	f001 fee6 	bl	8007e7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060b0:	f001 feb4 	bl	8007e1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060bc:	e011      	b.n	80060e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d012      	beq.n	80060ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3310      	adds	r3, #16
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fe38 	bl	8006d40 <xTaskRemoveFromEventList>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060d6:	f000 ff75 	bl	8006fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	3b01      	subs	r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dce9      	bgt.n	80060be <prvUnlockQueue+0x60>
 80060ea:	e000      	b.n	80060ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	22ff      	movs	r2, #255	@ 0xff
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060f6:	f001 fec1 	bl	8007e7c <vPortExitCritical>
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610a:	f001 fe87 	bl	8007e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e001      	b.n	8006120 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f001 feac 	bl	8007e7c <vPortExitCritical>

	return xReturn;
 8006124:	68fb      	ldr	r3, [r7, #12]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006136:	f001 fe71 	bl	8007e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006142:	429a      	cmp	r2, r3
 8006144:	d102      	bne.n	800614c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006146:	2301      	movs	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e001      	b.n	8006150 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006150:	f001 fe94 	bl	8007e7c <vPortExitCritical>

	return xReturn;
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e014      	b.n	800619a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006170:	4a0e      	ldr	r2, [pc, #56]	@ (80061ac <vQueueAddToRegistry+0x4c>)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800617c:	490b      	ldr	r1, [pc, #44]	@ (80061ac <vQueueAddToRegistry+0x4c>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006186:	4a09      	ldr	r2, [pc, #36]	@ (80061ac <vQueueAddToRegistry+0x4c>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006192:	e006      	b.n	80061a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b07      	cmp	r3, #7
 800619e:	d9e7      	bls.n	8006170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	20000ab0 	.word	0x20000ab0

080061b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061c0:	f001 fe2c 	bl	8007e1c <vPortEnterCritical>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d103      	bne.n	80061da <vQueueWaitForMessageRestricted+0x2a>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d103      	bne.n	80061f0 <vQueueWaitForMessageRestricted+0x40>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061f0:	f001 fe44 	bl	8007e7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3324      	adds	r3, #36	@ 0x24
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd6f 	bl	8006ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7ff ff27 	bl	800605e <prvUnlockQueue>
	}
 8006210:	bf00      	nop
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	@ 0x38
 800621c:	af04      	add	r7, sp, #16
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xTaskCreateStatic+0x2c>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	623b      	str	r3, [r7, #32]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <xTaskCreateStatic+0x4a>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	61fb      	str	r3, [r7, #28]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006262:	2364      	movs	r3, #100	@ 0x64
 8006264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b64      	cmp	r3, #100	@ 0x64
 800626a:	d00b      	beq.n	8006284 <xTaskCreateStatic+0x6c>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61bb      	str	r3, [r7, #24]
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01e      	beq.n	80062c8 <xTaskCreateStatic+0xb0>
 800628a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2202      	movs	r2, #2
 800629e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062a2:	2300      	movs	r3, #0
 80062a4:	9303      	str	r3, [sp, #12]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	f107 0314 	add.w	r3, r7, #20
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f850 	bl	8006360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c2:	f000 f8db 	bl	800647c <prvAddNewTaskToReadyList>
 80062c6:	e001      	b.n	80062cc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062cc:	697b      	ldr	r3, [r7, #20]
	}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3728      	adds	r7, #40	@ 0x28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b08c      	sub	sp, #48	@ 0x30
 80062da:	af04      	add	r7, sp, #16
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fe98 	bl	8008020 <pvPortMalloc>
 80062f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80062f8:	2064      	movs	r0, #100	@ 0x64
 80062fa:	f001 fe91 	bl	8008020 <pvPortMalloc>
 80062fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30
 800630c:	e005      	b.n	800631a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800630e:	6978      	ldr	r0, [r7, #20]
 8006310:	f001 ff4e 	bl	80081b0 <vPortFree>
 8006314:	e001      	b.n	800631a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006328:	88fa      	ldrh	r2, [r7, #6]
 800632a:	2300      	movs	r3, #0
 800632c:	9303      	str	r3, [sp, #12]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	9302      	str	r3, [sp, #8]
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f80e 	bl	8006360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006344:	69f8      	ldr	r0, [r7, #28]
 8006346:	f000 f899 	bl	800647c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800634a:	2301      	movs	r3, #1
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e002      	b.n	8006356 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006356:	69bb      	ldr	r3, [r7, #24]
	}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	461a      	mov	r2, r3
 8006378:	21a5      	movs	r1, #165	@ 0xa5
 800637a:	f002 f82f 	bl	80083dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006388:	3b01      	subs	r3, #1
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f023 0307 	bic.w	r3, r3, #7
 8006396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	617b      	str	r3, [r7, #20]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e012      	b.n	80063ec <prvInitialiseNewTask+0x8c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	7819      	ldrb	r1, [r3, #0]
 80063ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	3334      	adds	r3, #52	@ 0x34
 80063d6:	460a      	mov	r2, r1
 80063d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d006      	beq.n	80063f4 <prvInitialiseNewTask+0x94>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b0f      	cmp	r3, #15
 80063f0:	d9e9      	bls.n	80063c6 <prvInitialiseNewTask+0x66>
 80063f2:	e000      	b.n	80063f6 <prvInitialiseNewTask+0x96>
		{
			break;
 80063f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	2b37      	cmp	r3, #55	@ 0x37
 8006402:	d901      	bls.n	8006408 <prvInitialiseNewTask+0xa8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006404:	2337      	movs	r3, #55	@ 0x37
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800640c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006412:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	2200      	movs	r2, #0
 8006418:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe ff53 	bl	80052ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	3318      	adds	r3, #24
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe ff4e 	bl	80052ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006432:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006436:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006442:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	2200      	movs	r2, #0
 8006448:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	2200      	movs	r2, #0
 800644e:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	69b8      	ldr	r0, [r7, #24]
 800645e:	f001 fbeb 	bl	8007c38 <pxPortInitialiseStack>
 8006462:	4602      	mov	r2, r0
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800646e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006474:	bf00      	nop
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006484:	f001 fcca 	bl	8007e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006488:	4b2d      	ldr	r3, [pc, #180]	@ (8006540 <prvAddNewTaskToReadyList+0xc4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a2c      	ldr	r2, [pc, #176]	@ (8006540 <prvAddNewTaskToReadyList+0xc4>)
 8006490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006492:	4b2c      	ldr	r3, [pc, #176]	@ (8006544 <prvAddNewTaskToReadyList+0xc8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800649a:	4a2a      	ldr	r2, [pc, #168]	@ (8006544 <prvAddNewTaskToReadyList+0xc8>)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064a0:	4b27      	ldr	r3, [pc, #156]	@ (8006540 <prvAddNewTaskToReadyList+0xc4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d110      	bne.n	80064ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064a8:	f000 fdb2 	bl	8007010 <prvInitialiseTaskLists>
 80064ac:	e00d      	b.n	80064ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064ae:	4b26      	ldr	r3, [pc, #152]	@ (8006548 <prvAddNewTaskToReadyList+0xcc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064b6:	4b23      	ldr	r3, [pc, #140]	@ (8006544 <prvAddNewTaskToReadyList+0xc8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d802      	bhi.n	80064ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <prvAddNewTaskToReadyList+0xc8>)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ca:	4b20      	ldr	r3, [pc, #128]	@ (800654c <prvAddNewTaskToReadyList+0xd0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <prvAddNewTaskToReadyList+0xd0>)
 80064d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064d4:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <prvAddNewTaskToReadyList+0xd0>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <prvAddNewTaskToReadyList+0xd4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d903      	bls.n	80064f0 <prvAddNewTaskToReadyList+0x74>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <prvAddNewTaskToReadyList+0xd4>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <prvAddNewTaskToReadyList+0xd8>)
 80064fe:	441a      	add	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f7fe feeb 	bl	80052e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800650c:	f001 fcb6 	bl	8007e7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006510:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <prvAddNewTaskToReadyList+0xcc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <prvAddNewTaskToReadyList+0xc8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	429a      	cmp	r2, r3
 8006524:	d207      	bcs.n	8006536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006526:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <prvAddNewTaskToReadyList+0xdc>)
 8006528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000fc4 	.word	0x20000fc4
 8006544:	20000af0 	.word	0x20000af0
 8006548:	20000fd0 	.word	0x20000fd0
 800654c:	20000fe0 	.word	0x20000fe0
 8006550:	20000fcc 	.word	0x20000fcc
 8006554:	20000af4 	.word	0x20000af4
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006564:	f001 fc5a 	bl	8007e1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <vTaskDelete+0x18>
 800656e:	4b2d      	ldr	r3, [pc, #180]	@ (8006624 <vTaskDelete+0xc8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	e000      	b.n	8006576 <vTaskDelete+0x1a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe ff0b 	bl	8005398 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3318      	adds	r3, #24
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe ff02 	bl	8005398 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006594:	4b24      	ldr	r3, [pc, #144]	@ (8006628 <vTaskDelete+0xcc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	4a23      	ldr	r2, [pc, #140]	@ (8006628 <vTaskDelete+0xcc>)
 800659c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800659e:	4b21      	ldr	r3, [pc, #132]	@ (8006624 <vTaskDelete+0xc8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d10b      	bne.n	80065c0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	481f      	ldr	r0, [pc, #124]	@ (800662c <vTaskDelete+0xd0>)
 80065b0:	f7fe fe97 	bl	80052e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80065b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006630 <vTaskDelete+0xd4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <vTaskDelete+0xd4>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e009      	b.n	80065d4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <vTaskDelete+0xd8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <vTaskDelete+0xd8>)
 80065c8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fd8e 	bl	80070ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80065d0:	f000 fdbc 	bl	800714c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80065d4:	f001 fc52 	bl	8007e7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80065d8:	4b17      	ldr	r3, [pc, #92]	@ (8006638 <vTaskDelete+0xdc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01c      	beq.n	800661a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80065e0:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <vTaskDelete+0xc8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d117      	bne.n	800661a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80065ea:	4b14      	ldr	r3, [pc, #80]	@ (800663c <vTaskDelete+0xe0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <vTaskDelete+0xae>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <vTaskDelete+0xe4>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000af0 	.word	0x20000af0
 8006628:	20000fe0 	.word	0x20000fe0
 800662c:	20000f98 	.word	0x20000f98
 8006630:	20000fac 	.word	0x20000fac
 8006634:	20000fc4 	.word	0x20000fc4
 8006638:	20000fd0 	.word	0x20000fd0
 800663c:	20000fec 	.word	0x20000fec
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006656:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <vTaskDelay+0x64>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <vTaskDelay+0x32>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60bb      	str	r3, [r7, #8]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006676:	f000 f8df 	bl	8006838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800667a:	2100      	movs	r1, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 ff47 	bl	8007510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006682:	f000 f8e7 	bl	8006854 <xTaskResumeAll>
 8006686:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d107      	bne.n	800669e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800668e:	4b07      	ldr	r3, [pc, #28]	@ (80066ac <vTaskDelay+0x68>)
 8006690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000fec 	.word	0x20000fec
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <eTaskGetState+0x2a>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60bb      	str	r3, [r7, #8]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80066da:	4b1d      	ldr	r3, [pc, #116]	@ (8006750 <eTaskGetState+0xa0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d102      	bne.n	80066ea <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80066e4:	2300      	movs	r3, #0
 80066e6:	75fb      	strb	r3, [r7, #23]
 80066e8:	e02d      	b.n	8006746 <eTaskGetState+0x96>
		}
		else
		{
			taskENTER_CRITICAL();
 80066ea:	f001 fb97 	bl	8007e1c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80066f4:	f001 fbc2 	bl	8007e7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80066f8:	4b16      	ldr	r3, [pc, #88]	@ (8006754 <eTaskGetState+0xa4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d004      	beq.n	800670c <eTaskGetState+0x5c>
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <eTaskGetState+0xa8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	429a      	cmp	r2, r3
 800670a:	d102      	bne.n	8006712 <eTaskGetState+0x62>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800670c:	2302      	movs	r3, #2
 800670e:	75fb      	strb	r3, [r7, #23]
 8006710:	e019      	b.n	8006746 <eTaskGetState+0x96>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a11      	ldr	r2, [pc, #68]	@ (800675c <eTaskGetState+0xac>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d109      	bne.n	800672e <eTaskGetState+0x7e>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <eTaskGetState+0x78>
					{
						eReturn = eSuspended;
 8006722:	2303      	movs	r3, #3
 8006724:	75fb      	strb	r3, [r7, #23]
 8006726:	e00e      	b.n	8006746 <eTaskGetState+0x96>
					}
					else
					{
						eReturn = eBlocked;
 8006728:	2302      	movs	r3, #2
 800672a:	75fb      	strb	r3, [r7, #23]
 800672c:	e00b      	b.n	8006746 <eTaskGetState+0x96>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a0b      	ldr	r2, [pc, #44]	@ (8006760 <eTaskGetState+0xb0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d002      	beq.n	800673c <eTaskGetState+0x8c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <eTaskGetState+0x92>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800673c:	2304      	movs	r3, #4
 800673e:	75fb      	strb	r3, [r7, #23]
 8006740:	e001      	b.n	8006746 <eTaskGetState+0x96>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000af0 	.word	0x20000af0
 8006754:	20000f7c 	.word	0x20000f7c
 8006758:	20000f80 	.word	0x20000f80
 800675c:	20000fb0 	.word	0x20000fb0
 8006760:	20000f98 	.word	0x20000f98

08006764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	@ 0x28
 8006768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006772:	463a      	mov	r2, r7
 8006774:	1d39      	adds	r1, r7, #4
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fb60 	bl	8004e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	9202      	str	r2, [sp, #8]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	2300      	movs	r3, #0
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	460a      	mov	r2, r1
 8006792:	4923      	ldr	r1, [pc, #140]	@ (8006820 <vTaskStartScheduler+0xbc>)
 8006794:	4823      	ldr	r0, [pc, #140]	@ (8006824 <vTaskStartScheduler+0xc0>)
 8006796:	f7ff fd3f 	bl	8006218 <xTaskCreateStatic>
 800679a:	4603      	mov	r3, r0
 800679c:	4a22      	ldr	r2, [pc, #136]	@ (8006828 <vTaskStartScheduler+0xc4>)
 800679e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067a0:	4b21      	ldr	r3, [pc, #132]	@ (8006828 <vTaskStartScheduler+0xc4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e001      	b.n	80067b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067b8:	f000 fefe 	bl	80075b8 <xTimerCreateTimerTask>
 80067bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d118      	bne.n	80067f6 <vTaskStartScheduler+0x92>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067d8:	4b14      	ldr	r3, [pc, #80]	@ (800682c <vTaskStartScheduler+0xc8>)
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067e0:	4b13      	ldr	r3, [pc, #76]	@ (8006830 <vTaskStartScheduler+0xcc>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067e6:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <vTaskStartScheduler+0xd0>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80067ec:	f7f9 fcb0 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067f0:	f001 faa2 	bl	8007d38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067f4:	e00f      	b.n	8006816 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d10b      	bne.n	8006816 <vTaskStartScheduler+0xb2>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <vTaskStartScheduler+0xae>
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	080084d4 	.word	0x080084d4
 8006824:	08006fdd 	.word	0x08006fdd
 8006828:	20000fe8 	.word	0x20000fe8
 800682c:	20000fe4 	.word	0x20000fe4
 8006830:	20000fd0 	.word	0x20000fd0
 8006834:	20000fc8 	.word	0x20000fc8

08006838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800683c:	4b04      	ldr	r3, [pc, #16]	@ (8006850 <vTaskSuspendAll+0x18>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	4a03      	ldr	r2, [pc, #12]	@ (8006850 <vTaskSuspendAll+0x18>)
 8006844:	6013      	str	r3, [r2, #0]
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000fec 	.word	0x20000fec

08006854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006862:	4b42      	ldr	r3, [pc, #264]	@ (800696c <xTaskResumeAll+0x118>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <xTaskResumeAll+0x2e>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	603b      	str	r3, [r7, #0]
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	e7fd      	b.n	800687e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006882:	f001 facb 	bl	8007e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006886:	4b39      	ldr	r3, [pc, #228]	@ (800696c <xTaskResumeAll+0x118>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3b01      	subs	r3, #1
 800688c:	4a37      	ldr	r2, [pc, #220]	@ (800696c <xTaskResumeAll+0x118>)
 800688e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006890:	4b36      	ldr	r3, [pc, #216]	@ (800696c <xTaskResumeAll+0x118>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d162      	bne.n	800695e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006898:	4b35      	ldr	r3, [pc, #212]	@ (8006970 <xTaskResumeAll+0x11c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d05e      	beq.n	800695e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a0:	e02f      	b.n	8006902 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80068a2:	4b34      	ldr	r3, [pc, #208]	@ (8006974 <xTaskResumeAll+0x120>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3318      	adds	r3, #24
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fd72 	bl	8005398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fd6d 	bl	8005398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006978 <xTaskResumeAll+0x124>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <xTaskResumeAll+0x7e>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <xTaskResumeAll+0x124>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4a27      	ldr	r2, [pc, #156]	@ (800697c <xTaskResumeAll+0x128>)
 80068e0:	441a      	add	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe fcfa 	bl	80052e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f2:	4b23      	ldr	r3, [pc, #140]	@ (8006980 <xTaskResumeAll+0x12c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80068fc:	4b21      	ldr	r3, [pc, #132]	@ (8006984 <xTaskResumeAll+0x130>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006902:	4b1c      	ldr	r3, [pc, #112]	@ (8006974 <xTaskResumeAll+0x120>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1cb      	bne.n	80068a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006910:	f000 fc1c 	bl	800714c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006914:	4b1c      	ldr	r3, [pc, #112]	@ (8006988 <xTaskResumeAll+0x134>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006920:	f000 f844 	bl	80069ac <xTaskIncrementTick>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800692a:	4b16      	ldr	r3, [pc, #88]	@ (8006984 <xTaskResumeAll+0x130>)
 800692c:	2201      	movs	r2, #1
 800692e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3b01      	subs	r3, #1
 8006934:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f1      	bne.n	8006920 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <xTaskResumeAll+0x134>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <xTaskResumeAll+0x130>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800694a:	2301      	movs	r3, #1
 800694c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800694e:	4b0f      	ldr	r3, [pc, #60]	@ (800698c <xTaskResumeAll+0x138>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800695e:	f001 fa8d 	bl	8007e7c <vPortExitCritical>

	return xAlreadyYielded;
 8006962:	68bb      	ldr	r3, [r7, #8]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000fec 	.word	0x20000fec
 8006970:	20000fc4 	.word	0x20000fc4
 8006974:	20000f84 	.word	0x20000f84
 8006978:	20000fcc 	.word	0x20000fcc
 800697c:	20000af4 	.word	0x20000af4
 8006980:	20000af0 	.word	0x20000af0
 8006984:	20000fd8 	.word	0x20000fd8
 8006988:	20000fd4 	.word	0x20000fd4
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006996:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <xTaskGetTickCount+0x18>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800699c:	687b      	ldr	r3, [r7, #4]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	20000fc8 	.word	0x20000fc8

080069ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b6:	4b52      	ldr	r3, [pc, #328]	@ (8006b00 <xTaskIncrementTick+0x154>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f040 808f 	bne.w	8006ade <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069c0:	4b50      	ldr	r3, [pc, #320]	@ (8006b04 <xTaskIncrementTick+0x158>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069c8:	4a4e      	ldr	r2, [pc, #312]	@ (8006b04 <xTaskIncrementTick+0x158>)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d121      	bne.n	8006a18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80069d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006b08 <xTaskIncrementTick+0x15c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	603b      	str	r3, [r7, #0]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskIncrementTick+0x46>
 80069f6:	4b44      	ldr	r3, [pc, #272]	@ (8006b08 <xTaskIncrementTick+0x15c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	4b43      	ldr	r3, [pc, #268]	@ (8006b0c <xTaskIncrementTick+0x160>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a41      	ldr	r2, [pc, #260]	@ (8006b08 <xTaskIncrementTick+0x15c>)
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	4a41      	ldr	r2, [pc, #260]	@ (8006b0c <xTaskIncrementTick+0x160>)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	4b41      	ldr	r3, [pc, #260]	@ (8006b10 <xTaskIncrementTick+0x164>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	4a3f      	ldr	r2, [pc, #252]	@ (8006b10 <xTaskIncrementTick+0x164>)
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	f000 fb9a 	bl	800714c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a18:	4b3e      	ldr	r3, [pc, #248]	@ (8006b14 <xTaskIncrementTick+0x168>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d34e      	bcc.n	8006ac0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a22:	4b39      	ldr	r3, [pc, #228]	@ (8006b08 <xTaskIncrementTick+0x15c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <xTaskIncrementTick+0x84>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <xTaskIncrementTick+0x86>
 8006a30:	2300      	movs	r3, #0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a36:	4b37      	ldr	r3, [pc, #220]	@ (8006b14 <xTaskIncrementTick+0x168>)
 8006a38:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3c:	601a      	str	r2, [r3, #0]
					break;
 8006a3e:	e03f      	b.n	8006ac0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a40:	4b31      	ldr	r3, [pc, #196]	@ (8006b08 <xTaskIncrementTick+0x15c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d203      	bcs.n	8006a60 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a58:	4a2e      	ldr	r2, [pc, #184]	@ (8006b14 <xTaskIncrementTick+0x168>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6013      	str	r3, [r2, #0]
						break;
 8006a5e:	e02f      	b.n	8006ac0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fc97 	bl	8005398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3318      	adds	r3, #24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fc8e 	bl	8005398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4b25      	ldr	r3, [pc, #148]	@ (8006b18 <xTaskIncrementTick+0x16c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d903      	bls.n	8006a90 <xTaskIncrementTick+0xe4>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	4a22      	ldr	r2, [pc, #136]	@ (8006b18 <xTaskIncrementTick+0x16c>)
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <xTaskIncrementTick+0x170>)
 8006a9e:	441a      	add	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fe fc1b 	bl	80052e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b20 <xTaskIncrementTick+0x174>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3b3      	bcc.n	8006a22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006abe:	e7b0      	b.n	8006a22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ac0:	4b17      	ldr	r3, [pc, #92]	@ (8006b20 <xTaskIncrementTick+0x174>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac6:	4915      	ldr	r1, [pc, #84]	@ (8006b1c <xTaskIncrementTick+0x170>)
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d907      	bls.n	8006ae8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e004      	b.n	8006ae8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ade:	4b11      	ldr	r3, [pc, #68]	@ (8006b24 <xTaskIncrementTick+0x178>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b24 <xTaskIncrementTick+0x178>)
 8006ae6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b28 <xTaskIncrementTick+0x17c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006af0:	2301      	movs	r3, #1
 8006af2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006af4:	697b      	ldr	r3, [r7, #20]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000fec 	.word	0x20000fec
 8006b04:	20000fc8 	.word	0x20000fc8
 8006b08:	20000f7c 	.word	0x20000f7c
 8006b0c:	20000f80 	.word	0x20000f80
 8006b10:	20000fdc 	.word	0x20000fdc
 8006b14:	20000fe4 	.word	0x20000fe4
 8006b18:	20000fcc 	.word	0x20000fcc
 8006b1c:	20000af4 	.word	0x20000af4
 8006b20:	20000af0 	.word	0x20000af0
 8006b24:	20000fd4 	.word	0x20000fd4
 8006b28:	20000fd8 	.word	0x20000fd8

08006b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b32:	4b34      	ldr	r3, [pc, #208]	@ (8006c04 <vTaskSwitchContext+0xd8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b3a:	4b33      	ldr	r3, [pc, #204]	@ (8006c08 <vTaskSwitchContext+0xdc>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b40:	e05b      	b.n	8006bfa <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 8006b42:	4b31      	ldr	r3, [pc, #196]	@ (8006c08 <vTaskSwitchContext+0xdc>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006b48:	f7f9 fb0c 	bl	8000164 <getRunTimeCounterValue>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c0c <vTaskSwitchContext+0xe0>)
 8006b50:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006b52:	4b2e      	ldr	r3, [pc, #184]	@ (8006c0c <vTaskSwitchContext+0xe0>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b2e      	ldr	r3, [pc, #184]	@ (8006c10 <vTaskSwitchContext+0xe4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d909      	bls.n	8006b72 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c14 <vTaskSwitchContext+0xe8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006b64:	4a29      	ldr	r2, [pc, #164]	@ (8006c0c <vTaskSwitchContext+0xe0>)
 8006b66:	6810      	ldr	r0, [r2, #0]
 8006b68:	4a29      	ldr	r2, [pc, #164]	@ (8006c10 <vTaskSwitchContext+0xe4>)
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	1a82      	subs	r2, r0, r2
 8006b6e:	440a      	add	r2, r1
 8006b70:	659a      	str	r2, [r3, #88]	@ 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8006b72:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <vTaskSwitchContext+0xe0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a26      	ldr	r2, [pc, #152]	@ (8006c10 <vTaskSwitchContext+0xe4>)
 8006b78:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b7a:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <vTaskSwitchContext+0xec>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e011      	b.n	8006ba6 <vTaskSwitchContext+0x7a>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10b      	bne.n	8006ba0 <vTaskSwitchContext+0x74>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	607b      	str	r3, [r7, #4]
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	e7fd      	b.n	8006b9c <vTaskSwitchContext+0x70>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	491d      	ldr	r1, [pc, #116]	@ (8006c1c <vTaskSwitchContext+0xf0>)
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0e3      	beq.n	8006b82 <vTaskSwitchContext+0x56>
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <vTaskSwitchContext+0xf0>)
 8006bc6:	4413      	add	r3, r2
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d104      	bne.n	8006bea <vTaskSwitchContext+0xbe>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <vTaskSwitchContext+0xe8>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <vTaskSwitchContext+0xec>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6013      	str	r3, [r2, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000fec 	.word	0x20000fec
 8006c08:	20000fd8 	.word	0x20000fd8
 8006c0c:	20000ff4 	.word	0x20000ff4
 8006c10:	20000ff0 	.word	0x20000ff0
 8006c14:	20000af0 	.word	0x20000af0
 8006c18:	20000fcc 	.word	0x20000fcc
 8006c1c:	20000af4 	.word	0x20000af4

08006c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c48:	4b07      	ldr	r3, [pc, #28]	@ (8006c68 <vTaskPlaceOnEventList+0x48>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3318      	adds	r3, #24
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fe fb69 	bl	8005328 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c56:	2101      	movs	r1, #1
 8006c58:	6838      	ldr	r0, [r7, #0]
 8006c5a:	f000 fc59 	bl	8007510 <prvAddCurrentTaskToDelayedList>
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000af0 	.word	0x20000af0

08006c6c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617b      	str	r3, [r7, #20]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	613b      	str	r3, [r7, #16]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006cc0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cc2:	4b08      	ldr	r3, [pc, #32]	@ (8006ce4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3318      	adds	r3, #24
 8006cc8:	4619      	mov	r1, r3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7fe fb09 	bl	80052e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc1c 	bl	8007510 <prvAddCurrentTaskToDelayedList>
}
 8006cd8:	bf00      	nop
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000fec 	.word	0x20000fec
 8006ce4:	20000af0 	.word	0x20000af0

08006ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	617b      	str	r3, [r7, #20]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d12:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3318      	adds	r3, #24
 8006d18:	4619      	mov	r1, r3
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7fe fae1 	bl	80052e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d26:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	68b8      	ldr	r0, [r7, #8]
 8006d30:	f000 fbee 	bl	8007510 <prvAddCurrentTaskToDelayedList>
	}
 8006d34:	bf00      	nop
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000af0 	.word	0x20000af0

08006d40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60fb      	str	r3, [r7, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3318      	adds	r3, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fb10 	bl	8005398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d78:	4b1d      	ldr	r3, [pc, #116]	@ (8006df0 <xTaskRemoveFromEventList+0xb0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11d      	bne.n	8006dbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe fb07 	bl	8005398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8e:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <xTaskRemoveFromEventList+0xb4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d903      	bls.n	8006d9e <xTaskRemoveFromEventList+0x5e>
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9a:	4a16      	ldr	r2, [pc, #88]	@ (8006df4 <xTaskRemoveFromEventList+0xb4>)
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4a13      	ldr	r2, [pc, #76]	@ (8006df8 <xTaskRemoveFromEventList+0xb8>)
 8006dac:	441a      	add	r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f7fe fa94 	bl	80052e2 <vListInsertEnd>
 8006dba:	e005      	b.n	8006dc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	3318      	adds	r3, #24
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	480e      	ldr	r0, [pc, #56]	@ (8006dfc <xTaskRemoveFromEventList+0xbc>)
 8006dc4:	f7fe fa8d 	bl	80052e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <xTaskRemoveFromEventList+0xc0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d905      	bls.n	8006de2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <xTaskRemoveFromEventList+0xc4>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e001      	b.n	8006de6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006de6:	697b      	ldr	r3, [r7, #20]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000fec 	.word	0x20000fec
 8006df4:	20000fcc 	.word	0x20000fcc
 8006df8:	20000af4 	.word	0x20000af4
 8006dfc:	20000f84 	.word	0x20000f84
 8006e00:	20000af0 	.word	0x20000af0
 8006e04:	20000fd8 	.word	0x20000fd8

08006e08 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e12:	4b2a      	ldr	r3, [pc, #168]	@ (8006ebc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	613b      	str	r3, [r7, #16]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	e7fd      	b.n	8006e5c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fe fa99 	bl	8005398 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fa94 	bl	8005398 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d903      	bls.n	8006e84 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4a0c      	ldr	r2, [pc, #48]	@ (8006ec4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006e92:	441a      	add	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f7fe fa21 	bl	80052e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea4:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d902      	bls.n	8006eb4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006eae:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
	}
}
 8006eb4:	bf00      	nop
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000fec 	.word	0x20000fec
 8006ec0:	20000fcc 	.word	0x20000fcc
 8006ec4:	20000af4 	.word	0x20000af4
 8006ec8:	20000af0 	.word	0x20000af0
 8006ecc:	20000fd8 	.word	0x20000fd8

08006ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ed8:	4b06      	ldr	r3, [pc, #24]	@ (8006ef4 <vTaskInternalSetTimeOutState+0x24>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <vTaskInternalSetTimeOutState+0x28>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000fdc 	.word	0x20000fdc
 8006ef8:	20000fc8 	.word	0x20000fc8

08006efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	613b      	str	r3, [r7, #16]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	60fb      	str	r3, [r7, #12]
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f42:	f000 ff6b 	bl	8007e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f46:	4b1d      	ldr	r3, [pc, #116]	@ (8006fbc <xTaskCheckForTimeOut+0xc0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d102      	bne.n	8006f66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	e023      	b.n	8006fae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b15      	ldr	r3, [pc, #84]	@ (8006fc0 <xTaskCheckForTimeOut+0xc4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d007      	beq.n	8006f82 <xTaskCheckForTimeOut+0x86>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e015      	b.n	8006fae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d20b      	bcs.n	8006fa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ff99 	bl	8006ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	e004      	b.n	8006fae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fae:	f000 ff65 	bl	8007e7c <vPortExitCritical>

	return xReturn;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000fc8 	.word	0x20000fc8
 8006fc0:	20000fdc 	.word	0x20000fdc

08006fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fc8:	4b03      	ldr	r3, [pc, #12]	@ (8006fd8 <vTaskMissedYield+0x14>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000fd8 	.word	0x20000fd8

08006fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fe4:	f000 f854 	bl	8007090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fe8:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <prvIdleTask+0x2c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006ff0:	4b06      	ldr	r3, [pc, #24]	@ (800700c <prvIdleTask+0x30>)
 8006ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007000:	f7f9 f8ba 	bl	8000178 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007004:	e7ee      	b.n	8006fe4 <prvIdleTask+0x8>
 8007006:	bf00      	nop
 8007008:	20000af4 	.word	0x20000af4
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	e00c      	b.n	8007036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a12      	ldr	r2, [pc, #72]	@ (8007070 <prvInitialiseTaskLists+0x60>)
 8007028:	4413      	add	r3, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe f92e 	bl	800528c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3301      	adds	r3, #1
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b37      	cmp	r3, #55	@ 0x37
 800703a:	d9ef      	bls.n	800701c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800703c:	480d      	ldr	r0, [pc, #52]	@ (8007074 <prvInitialiseTaskLists+0x64>)
 800703e:	f7fe f925 	bl	800528c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007042:	480d      	ldr	r0, [pc, #52]	@ (8007078 <prvInitialiseTaskLists+0x68>)
 8007044:	f7fe f922 	bl	800528c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007048:	480c      	ldr	r0, [pc, #48]	@ (800707c <prvInitialiseTaskLists+0x6c>)
 800704a:	f7fe f91f 	bl	800528c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800704e:	480c      	ldr	r0, [pc, #48]	@ (8007080 <prvInitialiseTaskLists+0x70>)
 8007050:	f7fe f91c 	bl	800528c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007054:	480b      	ldr	r0, [pc, #44]	@ (8007084 <prvInitialiseTaskLists+0x74>)
 8007056:	f7fe f919 	bl	800528c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <prvInitialiseTaskLists+0x78>)
 800705c:	4a05      	ldr	r2, [pc, #20]	@ (8007074 <prvInitialiseTaskLists+0x64>)
 800705e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007060:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <prvInitialiseTaskLists+0x7c>)
 8007062:	4a05      	ldr	r2, [pc, #20]	@ (8007078 <prvInitialiseTaskLists+0x68>)
 8007064:	601a      	str	r2, [r3, #0]
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000af4 	.word	0x20000af4
 8007074:	20000f54 	.word	0x20000f54
 8007078:	20000f68 	.word	0x20000f68
 800707c:	20000f84 	.word	0x20000f84
 8007080:	20000f98 	.word	0x20000f98
 8007084:	20000fb0 	.word	0x20000fb0
 8007088:	20000f7c 	.word	0x20000f7c
 800708c:	20000f80 	.word	0x20000f80

08007090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007096:	e019      	b.n	80070cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007098:	f000 fec0 	bl	8007e1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800709c:	4b10      	ldr	r3, [pc, #64]	@ (80070e0 <prvCheckTasksWaitingTermination+0x50>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe f975 	bl	8005398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <prvCheckTasksWaitingTermination+0x54>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	4a0b      	ldr	r2, [pc, #44]	@ (80070e4 <prvCheckTasksWaitingTermination+0x54>)
 80070b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070b8:	4b0b      	ldr	r3, [pc, #44]	@ (80070e8 <prvCheckTasksWaitingTermination+0x58>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	4a0a      	ldr	r2, [pc, #40]	@ (80070e8 <prvCheckTasksWaitingTermination+0x58>)
 80070c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070c2:	f000 fedb 	bl	8007e7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f810 	bl	80070ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <prvCheckTasksWaitingTermination+0x58>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e1      	bne.n	8007098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000f98 	.word	0x20000f98
 80070e4:	20000fc4 	.word	0x20000fc4
 80070e8:	20000fac 	.word	0x20000fac

080070ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d108      	bne.n	8007110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f854 	bl	80081b0 <vPortFree>
				vPortFree( pxTCB );
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f851 	bl	80081b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800710e:	e019      	b.n	8007144 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007116:	2b01      	cmp	r3, #1
 8007118:	d103      	bne.n	8007122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 f848 	bl	80081b0 <vPortFree>
	}
 8007120:	e010      	b.n	8007144 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007128:	2b02      	cmp	r3, #2
 800712a:	d00b      	beq.n	8007144 <prvDeleteTCB+0x58>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60fb      	str	r3, [r7, #12]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <prvDeleteTCB+0x54>
	}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007152:	4b0e      	ldr	r3, [pc, #56]	@ (800718c <prvResetNextTaskUnblockTime+0x40>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <prvResetNextTaskUnblockTime+0x14>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <prvResetNextTaskUnblockTime+0x16>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007166:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <prvResetNextTaskUnblockTime+0x44>)
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800716e:	e008      	b.n	8007182 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007170:	4b06      	ldr	r3, [pc, #24]	@ (800718c <prvResetNextTaskUnblockTime+0x40>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4a04      	ldr	r2, [pc, #16]	@ (8007190 <prvResetNextTaskUnblockTime+0x44>)
 8007180:	6013      	str	r3, [r2, #0]
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	20000f7c 	.word	0x20000f7c
 8007190:	20000fe4 	.word	0x20000fe4

08007194 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800719a:	4b04      	ldr	r3, [pc, #16]	@ (80071ac <xTaskGetCurrentTaskHandle+0x18>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80071a0:	687b      	ldr	r3, [r7, #4]
	}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr
 80071ac:	20000af0 	.word	0x20000af0

080071b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <xTaskGetSchedulerState+0x34>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071be:	2301      	movs	r3, #1
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	e008      	b.n	80071d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c4:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <xTaskGetSchedulerState+0x38>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071cc:	2302      	movs	r3, #2
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	e001      	b.n	80071d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071d6:	687b      	ldr	r3, [r7, #4]
	}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20000fd0 	.word	0x20000fd0
 80071e8:	20000fec 	.word	0x20000fec

080071ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d056      	beq.n	80072b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007206:	4b2d      	ldr	r3, [pc, #180]	@ (80072bc <xTaskPriorityInherit+0xd0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	429a      	cmp	r2, r3
 800720e:	d246      	bcs.n	800729e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	db06      	blt.n	8007226 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007218:	4b28      	ldr	r3, [pc, #160]	@ (80072bc <xTaskPriorityInherit+0xd0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6959      	ldr	r1, [r3, #20]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <xTaskPriorityInherit+0xd4>)
 8007238:	4413      	add	r3, r2
 800723a:	4299      	cmp	r1, r3
 800723c:	d101      	bne.n	8007242 <xTaskPriorityInherit+0x56>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xTaskPriorityInherit+0x58>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d022      	beq.n	800728e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe f8a3 	bl	8005398 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007252:	4b1a      	ldr	r3, [pc, #104]	@ (80072bc <xTaskPriorityInherit+0xd0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007260:	4b18      	ldr	r3, [pc, #96]	@ (80072c4 <xTaskPriorityInherit+0xd8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d903      	bls.n	8007270 <xTaskPriorityInherit+0x84>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	4a15      	ldr	r2, [pc, #84]	@ (80072c4 <xTaskPriorityInherit+0xd8>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4a10      	ldr	r2, [pc, #64]	@ (80072c0 <xTaskPriorityInherit+0xd4>)
 800727e:	441a      	add	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f7fe f82b 	bl	80052e2 <vListInsertEnd>
 800728c:	e004      	b.n	8007298 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800728e:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <xTaskPriorityInherit+0xd0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e008      	b.n	80072b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072a2:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <xTaskPriorityInherit+0xd0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d201      	bcs.n	80072b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072b0:	68fb      	ldr	r3, [r7, #12]
	}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000af0 	.word	0x20000af0
 80072c0:	20000af4 	.word	0x20000af4
 80072c4:	20000fcc 	.word	0x20000fcc

080072c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d058      	beq.n	8007390 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072de:	4b2f      	ldr	r3, [pc, #188]	@ (800739c <xTaskPriorityDisinherit+0xd4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d00b      	beq.n	8007300 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	60fb      	str	r3, [r7, #12]
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60bb      	str	r3, [r7, #8]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007324:	1e5a      	subs	r2, r3, #1
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007332:	429a      	cmp	r2, r3
 8007334:	d02c      	beq.n	8007390 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	2b00      	cmp	r3, #0
 800733c:	d128      	bne.n	8007390 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3304      	adds	r3, #4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f828 	bl	8005398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	4b0f      	ldr	r3, [pc, #60]	@ (80073a0 <xTaskPriorityDisinherit+0xd8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d903      	bls.n	8007370 <xTaskPriorityDisinherit+0xa8>
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	4a0c      	ldr	r2, [pc, #48]	@ (80073a0 <xTaskPriorityDisinherit+0xd8>)
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4a09      	ldr	r2, [pc, #36]	@ (80073a4 <xTaskPriorityDisinherit+0xdc>)
 800737e:	441a      	add	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7fd ffab 	bl	80052e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007390:	697b      	ldr	r3, [r7, #20]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000af0 	.word	0x20000af0
 80073a0:	20000fcc 	.word	0x20000fcc
 80073a4:	20000af4 	.word	0x20000af4

080073a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d071      	beq.n	80074a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d902      	bls.n	80073f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	e002      	b.n	80073f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d051      	beq.n	80074a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	429a      	cmp	r2, r3
 8007408:	d14c      	bne.n	80074a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800740a:	4b28      	ldr	r3, [pc, #160]	@ (80074ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d10b      	bne.n	800742c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60bb      	str	r3, [r7, #8]
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	db04      	blt.n	800744a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	6959      	ldr	r1, [r3, #20]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4a15      	ldr	r2, [pc, #84]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800745a:	4413      	add	r3, r2
 800745c:	4299      	cmp	r1, r3
 800745e:	d101      	bne.n	8007464 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01c      	beq.n	80074a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3304      	adds	r3, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f7fd ff92 	bl	8005398 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007478:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d903      	bls.n	8007488 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	4a0b      	ldr	r2, [pc, #44]	@ (80074b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a06      	ldr	r2, [pc, #24]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007496:	441a      	add	r2, r3
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fd ff1f 	bl	80052e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074a4:	bf00      	nop
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000af0 	.word	0x20000af0
 80074b0:	20000af4 	.word	0x20000af4
 80074b4:	20000fcc 	.word	0x20000fcc

080074b8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80074be:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <uxTaskResetEventItemValue+0x2c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <uxTaskResetEventItemValue+0x2c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <uxTaskResetEventItemValue+0x2c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80074d4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80074d6:	687b      	ldr	r3, [r7, #4]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000af0 	.word	0x20000af0

080074e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80074ec:	4b07      	ldr	r3, [pc, #28]	@ (800750c <pvTaskIncrementMutexHeldCount+0x24>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <pvTaskIncrementMutexHeldCount+0x24>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074fa:	3201      	adds	r2, #1
 80074fc:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80074fe:	4b03      	ldr	r3, [pc, #12]	@ (800750c <pvTaskIncrementMutexHeldCount+0x24>)
 8007500:	681b      	ldr	r3, [r3, #0]
	}
 8007502:	4618      	mov	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000af0 	.word	0x20000af0

08007510 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800751a:	4b21      	ldr	r3, [pc, #132]	@ (80075a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007520:	4b20      	ldr	r3, [pc, #128]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd ff36 	bl	8005398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d10a      	bne.n	800754a <prvAddCurrentTaskToDelayedList+0x3a>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d007      	beq.n	800754a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800753a:	4b1a      	ldr	r3, [pc, #104]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4819      	ldr	r0, [pc, #100]	@ (80075a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007544:	f7fd fecd 	bl	80052e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007548:	e026      	b.n	8007598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007552:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	429a      	cmp	r2, r3
 8007560:	d209      	bcs.n	8007576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007562:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b0f      	ldr	r3, [pc, #60]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fd feda 	bl	8005328 <vListInsert>
}
 8007574:	e010      	b.n	8007598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007576:	4b0e      	ldr	r3, [pc, #56]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	4619      	mov	r1, r3
 8007582:	4610      	mov	r0, r2
 8007584:	f7fd fed0 	bl	8005328 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007588:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	d202      	bcs.n	8007598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007592:	4a08      	ldr	r2, [pc, #32]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6013      	str	r3, [r2, #0]
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000fc8 	.word	0x20000fc8
 80075a4:	20000af0 	.word	0x20000af0
 80075a8:	20000fb0 	.word	0x20000fb0
 80075ac:	20000f80 	.word	0x20000f80
 80075b0:	20000f7c 	.word	0x20000f7c
 80075b4:	20000fe4 	.word	0x20000fe4

080075b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	@ 0x28
 80075bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075c2:	f000 fad9 	bl	8007b78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075c6:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <xTimerCreateTimerTask+0x84>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d021      	beq.n	8007612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075d6:	1d3a      	adds	r2, r7, #4
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	f107 030c 	add.w	r3, r7, #12
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd fc45 	bl	8004e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	2302      	movs	r3, #2
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	460a      	mov	r2, r1
 80075f8:	4911      	ldr	r1, [pc, #68]	@ (8007640 <xTimerCreateTimerTask+0x88>)
 80075fa:	4812      	ldr	r0, [pc, #72]	@ (8007644 <xTimerCreateTimerTask+0x8c>)
 80075fc:	f7fe fe0c 	bl	8006218 <xTaskCreateStatic>
 8007600:	4603      	mov	r3, r0
 8007602:	4a11      	ldr	r2, [pc, #68]	@ (8007648 <xTimerCreateTimerTask+0x90>)
 8007604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007606:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <xTimerCreateTimerTask+0x90>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	613b      	str	r3, [r7, #16]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007630:	697b      	ldr	r3, [r7, #20]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20001028 	.word	0x20001028
 8007640:	08008504 	.word	0x08008504
 8007644:	0800776d 	.word	0x0800776d
 8007648:	2000102c 	.word	0x2000102c

0800764c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <xTimerGenericCommand+0x30>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	623b      	str	r3, [r7, #32]
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	e7fd      	b.n	8007678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800767c:	4b19      	ldr	r3, [pc, #100]	@ (80076e4 <xTimerGenericCommand+0x98>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d02a      	beq.n	80076da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b05      	cmp	r3, #5
 8007694:	dc18      	bgt.n	80076c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007696:	f7ff fd8b 	bl	80071b0 <xTaskGetSchedulerState>
 800769a:	4603      	mov	r3, r0
 800769c:	2b02      	cmp	r3, #2
 800769e:	d109      	bne.n	80076b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076a0:	4b10      	ldr	r3, [pc, #64]	@ (80076e4 <xTimerGenericCommand+0x98>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	f107 0110 	add.w	r1, r7, #16
 80076a8:	2300      	movs	r3, #0
 80076aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ac:	f7fe f8a0 	bl	80057f0 <xQueueGenericSend>
 80076b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80076b2:	e012      	b.n	80076da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076b4:	4b0b      	ldr	r3, [pc, #44]	@ (80076e4 <xTimerGenericCommand+0x98>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	f107 0110 	add.w	r1, r7, #16
 80076bc:	2300      	movs	r3, #0
 80076be:	2200      	movs	r2, #0
 80076c0:	f7fe f896 	bl	80057f0 <xQueueGenericSend>
 80076c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80076c6:	e008      	b.n	80076da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <xTimerGenericCommand+0x98>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	f107 0110 	add.w	r1, r7, #16
 80076d0:	2300      	movs	r3, #0
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	f7fe f98e 	bl	80059f4 <xQueueGenericSendFromISR>
 80076d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3728      	adds	r7, #40	@ 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20001028 	.word	0x20001028

080076e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007768 <prvProcessExpiredTimer+0x80>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3304      	adds	r3, #4
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fe49 	bl	8005398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d123      	bne.n	8007756 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	18d1      	adds	r1, r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	6978      	ldr	r0, [r7, #20]
 800771c:	f000 f8cc 	bl	80078b8 <prvInsertTimerInActiveList>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d017      	beq.n	8007756 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007726:	2300      	movs	r3, #0
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	2300      	movs	r3, #0
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	2100      	movs	r1, #0
 8007730:	6978      	ldr	r0, [r7, #20]
 8007732:	f7ff ff8b 	bl	800764c <xTimerGenericCommand>
 8007736:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10b      	bne.n	8007756 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60fb      	str	r3, [r7, #12]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	4798      	blx	r3
}
 800775e:	bf00      	nop
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20001020 	.word	0x20001020

0800776c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007774:	f107 0308 	add.w	r3, r7, #8
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f859 	bl	8007830 <prvGetNextExpireTime>
 800777e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4619      	mov	r1, r3
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f805 	bl	8007794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800778a:	f000 f8d7 	bl	800793c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800778e:	bf00      	nop
 8007790:	e7f0      	b.n	8007774 <prvTimerTask+0x8>
	...

08007794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800779e:	f7ff f84b 	bl	8006838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f866 	bl	8007878 <prvSampleTimeNow>
 80077ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d130      	bne.n	8007816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <prvProcessTimerOrBlockTask+0x3c>
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d806      	bhi.n	80077d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077c2:	f7ff f847 	bl	8006854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff8d 	bl	80076e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077ce:	e024      	b.n	800781a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077d6:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <prvProcessTimerOrBlockTask+0x90>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80077e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <prvProcessTimerOrBlockTask+0x94>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4619      	mov	r1, r3
 80077f6:	f7fe fcdb 	bl	80061b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80077fa:	f7ff f82b 	bl	8006854 <xTaskResumeAll>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007804:	4b09      	ldr	r3, [pc, #36]	@ (800782c <prvProcessTimerOrBlockTask+0x98>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
}
 8007814:	e001      	b.n	800781a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007816:	f7ff f81d 	bl	8006854 <xTaskResumeAll>
}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20001024 	.word	0x20001024
 8007828:	20001028 	.word	0x20001028
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007838:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <prvGetNextExpireTime+0x44>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf0c      	ite	eq
 8007842:	2301      	moveq	r3, #1
 8007844:	2300      	movne	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <prvGetNextExpireTime+0x44>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e001      	b.n	8007866 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20001020 	.word	0x20001020

08007878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007880:	f7ff f886 	bl	8006990 <xTaskGetTickCount>
 8007884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007886:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <prvSampleTimeNow+0x3c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d205      	bcs.n	800789c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007890:	f000 f910 	bl	8007ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e002      	b.n	80078a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078a2:	4a04      	ldr	r2, [pc, #16]	@ (80078b4 <prvSampleTimeNow+0x3c>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20001030 	.word	0x20001030

080078b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d812      	bhi.n	8007904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	1ad2      	subs	r2, r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d302      	bcc.n	80078f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e01b      	b.n	800792a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078f2:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <prvInsertTimerInActiveList+0x7c>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f7fd fd13 	bl	8005328 <vListInsert>
 8007902:	e012      	b.n	800792a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d206      	bcs.n	800791a <prvInsertTimerInActiveList+0x62>
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d302      	bcc.n	800791a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e007      	b.n	800792a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800791a:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <prvInsertTimerInActiveList+0x80>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7fd fcff 	bl	8005328 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20001024 	.word	0x20001024
 8007938:	20001020 	.word	0x20001020

0800793c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08e      	sub	sp, #56	@ 0x38
 8007940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007942:	e0a5      	b.n	8007a90 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	da19      	bge.n	800797e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	3304      	adds	r3, #4
 800794e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	61fb      	str	r3, [r7, #28]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007974:	6850      	ldr	r0, [r2, #4]
 8007976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007978:	6892      	ldr	r2, [r2, #8]
 800797a:	4611      	mov	r1, r2
 800797c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f2c0 8085 	blt.w	8007a90 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd fcfe 	bl	8005398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799c:	463b      	mov	r3, r7
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff6a 	bl	8007878 <prvSampleTimeNow>
 80079a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b09      	cmp	r3, #9
 80079aa:	d86c      	bhi.n	8007a86 <prvProcessReceivedCommands+0x14a>
 80079ac:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <prvProcessReceivedCommands+0x78>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	08007a87 	.word	0x08007a87
 80079c4:	08007a3b 	.word	0x08007a3b
 80079c8:	08007a75 	.word	0x08007a75
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079dd 	.word	0x080079dd
 80079d4:	08007a87 	.word	0x08007a87
 80079d8:	08007a3b 	.word	0x08007a3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	18d1      	adds	r1, r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079ea:	f7ff ff65 	bl	80078b8 <prvInsertTimerInActiveList>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d04a      	beq.n	8007a8a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d142      	bne.n	8007a8a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	441a      	add	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	2300      	movs	r3, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a16:	f7ff fe19 	bl	800764c <xTimerGenericCommand>
 8007a1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d133      	bne.n	8007a8a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	61bb      	str	r3, [r7, #24]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	617b      	str	r3, [r7, #20]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	18d1      	adds	r1, r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a6e:	f7ff ff23 	bl	80078b8 <prvInsertTimerInActiveList>
					break;
 8007a72:	e00d      	b.n	8007a90 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d107      	bne.n	8007a8e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a80:	f000 fb96 	bl	80081b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a84:	e003      	b.n	8007a8e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8007a86:	bf00      	nop
 8007a88:	e002      	b.n	8007a90 <prvProcessReceivedCommands+0x154>
					break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <prvProcessReceivedCommands+0x154>
					break;
 8007a8e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <prvProcessReceivedCommands+0x174>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1d39      	adds	r1, r7, #4
 8007a96:	2200      	movs	r2, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe f847 	bl	8005b2c <xQueueReceive>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f af4f 	bne.w	8007944 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20001028 	.word	0x20001028

08007ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aba:	e046      	b.n	8007b4a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007abc:	4b2c      	ldr	r3, [pc, #176]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fd fc5f 	bl	8005398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d12f      	bne.n	8007b4a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d90e      	bls.n	8007b1a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b08:	4b19      	ldr	r3, [pc, #100]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f7fd fc08 	bl	8005328 <vListInsert>
 8007b18:	e017      	b.n	8007b4a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	2100      	movs	r1, #0
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fd91 	bl	800764c <xTimerGenericCommand>
 8007b2a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <prvSwitchTimerLists+0x96>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	603b      	str	r3, [r7, #0]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1b3      	bne.n	8007abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b54:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b5a:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <prvSwitchTimerLists+0xc0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a04      	ldr	r2, [pc, #16]	@ (8007b70 <prvSwitchTimerLists+0xbc>)
 8007b60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b62:	4a04      	ldr	r2, [pc, #16]	@ (8007b74 <prvSwitchTimerLists+0xc0>)
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	6013      	str	r3, [r2, #0]
}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20001020 	.word	0x20001020
 8007b74:	20001024 	.word	0x20001024

08007b78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b7e:	f000 f94d 	bl	8007e1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b82:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <prvCheckForValidListAndQueue+0x60>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d120      	bne.n	8007bcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b8a:	4814      	ldr	r0, [pc, #80]	@ (8007bdc <prvCheckForValidListAndQueue+0x64>)
 8007b8c:	f7fd fb7e 	bl	800528c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b90:	4813      	ldr	r0, [pc, #76]	@ (8007be0 <prvCheckForValidListAndQueue+0x68>)
 8007b92:	f7fd fb7b 	bl	800528c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b96:	4b13      	ldr	r3, [pc, #76]	@ (8007be4 <prvCheckForValidListAndQueue+0x6c>)
 8007b98:	4a10      	ldr	r2, [pc, #64]	@ (8007bdc <prvCheckForValidListAndQueue+0x64>)
 8007b9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b9c:	4b12      	ldr	r3, [pc, #72]	@ (8007be8 <prvCheckForValidListAndQueue+0x70>)
 8007b9e:	4a10      	ldr	r2, [pc, #64]	@ (8007be0 <prvCheckForValidListAndQueue+0x68>)
 8007ba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <prvCheckForValidListAndQueue+0x74>)
 8007ba8:	4a11      	ldr	r2, [pc, #68]	@ (8007bf0 <prvCheckForValidListAndQueue+0x78>)
 8007baa:	2110      	movs	r1, #16
 8007bac:	200a      	movs	r0, #10
 8007bae:	f7fd fc87 	bl	80054c0 <xQueueGenericCreateStatic>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <prvCheckForValidListAndQueue+0x60>)
 8007bb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007bb8:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <prvCheckForValidListAndQueue+0x60>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007bc0:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <prvCheckForValidListAndQueue+0x60>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	490b      	ldr	r1, [pc, #44]	@ (8007bf4 <prvCheckForValidListAndQueue+0x7c>)
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe faca 	bl	8006160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bcc:	f000 f956 	bl	8007e7c <vPortExitCritical>
}
 8007bd0:	bf00      	nop
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20001028 	.word	0x20001028
 8007bdc:	20000ff8 	.word	0x20000ff8
 8007be0:	2000100c 	.word	0x2000100c
 8007be4:	20001020 	.word	0x20001020
 8007be8:	20001024 	.word	0x20001024
 8007bec:	200010d4 	.word	0x200010d4
 8007bf0:	20001034 	.word	0x20001034
 8007bf4:	0800850c 	.word	0x0800850c

08007bf8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	@ 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007c06:	f06f 0301 	mvn.w	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c18:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <xTimerPendFunctionCallFromISR+0x3c>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	f107 0114 	add.w	r1, r7, #20
 8007c20:	2300      	movs	r3, #0
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	f7fd fee6 	bl	80059f4 <xQueueGenericSendFromISR>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	@ 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20001028 	.word	0x20001028

08007c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3b04      	subs	r3, #4
 8007c48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3b04      	subs	r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 0201 	bic.w	r2, r3, #1
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3b04      	subs	r3, #4
 8007c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c68:	4a08      	ldr	r2, [pc, #32]	@ (8007c8c <pxPortInitialiseStack+0x54>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3b14      	subs	r3, #20
 8007c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3b20      	subs	r3, #32
 8007c7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	08007c91 	.word	0x08007c91

08007c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <prvTaskExitError+0x54>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d00b      	beq.n	8007cbc <prvTaskExitError+0x2c>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	60fb      	str	r3, [r7, #12]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <prvTaskExitError+0x28>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
}
 8007cce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cd0:	bf00      	nop
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0fc      	beq.n	8007cd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr
 8007ce4:	20000034 	.word	0x20000034
	...

08007cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cf0:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <pxCurrentTCBConst2>)
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cfa:	f380 8809 	msr	PSP, r0
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007d0e:	4770      	bx	lr

08007d10 <pxCurrentTCBConst2>:
 8007d10:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d18:	4806      	ldr	r0, [pc, #24]	@ (8007d34 <prvPortStartFirstTask+0x1c>)
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f380 8808 	msr	MSP, r0
 8007d22:	b662      	cpsie	i
 8007d24:	b661      	cpsie	f
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	df00      	svc	0
 8007d30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d32:	bf00      	nop
 8007d34:	e000ed08 	.word	0xe000ed08

08007d38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d3e:	4b32      	ldr	r3, [pc, #200]	@ (8007e08 <xPortStartScheduler+0xd0>)
 8007d40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22ff      	movs	r2, #255	@ 0xff
 8007d4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	4b2a      	ldr	r3, [pc, #168]	@ (8007e0c <xPortStartScheduler+0xd4>)
 8007d64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d66:	4b2a      	ldr	r3, [pc, #168]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007d68:	2207      	movs	r2, #7
 8007d6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d6c:	e009      	b.n	8007d82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d6e:	4b28      	ldr	r3, [pc, #160]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4a26      	ldr	r2, [pc, #152]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007d76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b80      	cmp	r3, #128	@ 0x80
 8007d8c:	d0ef      	beq.n	8007d6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d8e:	4b20      	ldr	r3, [pc, #128]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f1c3 0307 	rsb	r3, r3, #7
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d00b      	beq.n	8007db2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	60bb      	str	r3, [r7, #8]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007db2:	4b17      	ldr	r3, [pc, #92]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	4a15      	ldr	r2, [pc, #84]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007dba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dbc:	4b14      	ldr	r3, [pc, #80]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007dc4:	4a12      	ldr	r2, [pc, #72]	@ (8007e10 <xPortStartScheduler+0xd8>)
 8007dc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dd0:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <xPortStartScheduler+0xdc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007e14 <xPortStartScheduler+0xdc>)
 8007dd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <xPortStartScheduler+0xdc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e14 <xPortStartScheduler+0xdc>)
 8007de2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007de6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007de8:	f000 f8b8 	bl	8007f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dec:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <xPortStartScheduler+0xe0>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007df2:	f7ff ff91 	bl	8007d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007df6:	f7fe fe99 	bl	8006b2c <vTaskSwitchContext>
	prvTaskExitError();
 8007dfa:	f7ff ff49 	bl	8007c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000e400 	.word	0xe000e400
 8007e0c:	20001124 	.word	0x20001124
 8007e10:	20001128 	.word	0x20001128
 8007e14:	e000ed20 	.word	0xe000ed20
 8007e18:	20000034 	.word	0x20000034

08007e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
}
 8007e34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e36:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <vPortEnterCritical+0x58>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8007e74 <vPortEnterCritical+0x58>)
 8007e3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e40:	4b0c      	ldr	r3, [pc, #48]	@ (8007e74 <vPortEnterCritical+0x58>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d110      	bne.n	8007e6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e48:	4b0b      	ldr	r3, [pc, #44]	@ (8007e78 <vPortEnterCritical+0x5c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <vPortEnterCritical+0x4e>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	603b      	str	r3, [r7, #0]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <vPortEnterCritical+0x4a>
	}
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	20000034 	.word	0x20000034
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e82:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <vPortExitCritical+0x50>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <vPortExitCritical+0x26>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	607b      	str	r3, [r7, #4]
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	4a08      	ldr	r2, [pc, #32]	@ (8007ecc <vPortExitCritical+0x50>)
 8007eaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eac:	4b07      	ldr	r3, [pc, #28]	@ (8007ecc <vPortExitCritical+0x50>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <vPortExitCritical+0x44>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20000034 	.word	0x20000034

08007ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ed0:	f3ef 8009 	mrs	r0, PSP
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <pxCurrentTCBConst>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ee0:	6010      	str	r0, [r2, #0]
 8007ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ee6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007eea:	f380 8811 	msr	BASEPRI, r0
 8007eee:	f7fe fe1d 	bl	8006b2c <vTaskSwitchContext>
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8811 	msr	BASEPRI, r0
 8007efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007efe:	6819      	ldr	r1, [r3, #0]
 8007f00:	6808      	ldr	r0, [r1, #0]
 8007f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f06:	f380 8809 	msr	PSP, r0
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	4770      	bx	lr

08007f10 <pxCurrentTCBConst>:
 8007f10:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f32:	f7fe fd3b 	bl	80069ac <xTaskIncrementTick>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <SysTick_Handler+0x40>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <vPortSetupTimerInterrupt+0x30>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f66:	4b0a      	ldr	r3, [pc, #40]	@ (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f6c:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <vPortSetupTimerInterrupt+0x38>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a09      	ldr	r2, [pc, #36]	@ (8007f98 <vPortSetupTimerInterrupt+0x3c>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	4a08      	ldr	r2, [pc, #32]	@ (8007f9c <vPortSetupTimerInterrupt+0x40>)
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f7e:	4b03      	ldr	r3, [pc, #12]	@ (8007f8c <vPortSetupTimerInterrupt+0x30>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr
 8007f8c:	e000e010 	.word	0xe000e010
 8007f90:	e000e018 	.word	0xe000e018
 8007f94:	20000028 	.word	0x20000028
 8007f98:	10624dd3 	.word	0x10624dd3
 8007f9c:	e000e014 	.word	0xe000e014

08007fa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fa6:	f3ef 8305 	mrs	r3, IPSR
 8007faa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d915      	bls.n	8007fde <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fb2:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <vPortValidateInterruptPriority+0x70>)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fbc:	4b15      	ldr	r3, [pc, #84]	@ (8008014 <vPortValidateInterruptPriority+0x74>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	7afa      	ldrb	r2, [r7, #11]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d20b      	bcs.n	8007fde <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	607b      	str	r3, [r7, #4]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fde:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <vPortValidateInterruptPriority+0x78>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <vPortValidateInterruptPriority+0x7c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d90b      	bls.n	8008006 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	603b      	str	r3, [r7, #0]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <vPortValidateInterruptPriority+0x62>
	}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr
 8008010:	e000e3f0 	.word	0xe000e3f0
 8008014:	20001124 	.word	0x20001124
 8008018:	e000ed0c 	.word	0xe000ed0c
 800801c:	20001128 	.word	0x20001128

08008020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	@ 0x28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800802c:	f7fe fc04 	bl	8006838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008030:	4b5a      	ldr	r3, [pc, #360]	@ (800819c <pvPortMalloc+0x17c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008038:	f000 f916 	bl	8008268 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800803c:	4b58      	ldr	r3, [pc, #352]	@ (80081a0 <pvPortMalloc+0x180>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 8090 	bne.w	800816a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01e      	beq.n	800808e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008050:	2208      	movs	r2, #8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	2b00      	cmp	r3, #0
 8008060:	d015      	beq.n	800808e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f023 0307 	bic.w	r3, r3, #7
 8008068:	3308      	adds	r3, #8
 800806a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <pvPortMalloc+0x6e>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	617b      	str	r3, [r7, #20]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d06a      	beq.n	800816a <pvPortMalloc+0x14a>
 8008094:	4b43      	ldr	r3, [pc, #268]	@ (80081a4 <pvPortMalloc+0x184>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d865      	bhi.n	800816a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800809e:	4b42      	ldr	r3, [pc, #264]	@ (80081a8 <pvPortMalloc+0x188>)
 80080a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080a2:	4b41      	ldr	r3, [pc, #260]	@ (80081a8 <pvPortMalloc+0x188>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080a8:	e004      	b.n	80080b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d903      	bls.n	80080c6 <pvPortMalloc+0xa6>
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f1      	bne.n	80080aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080c6:	4b35      	ldr	r3, [pc, #212]	@ (800819c <pvPortMalloc+0x17c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d04c      	beq.n	800816a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	4413      	add	r3, r2
 80080d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	1ad2      	subs	r2, r2, r3
 80080ea:	2308      	movs	r3, #8
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d920      	bls.n	8008134 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <pvPortMalloc+0xfc>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	613b      	str	r3, [r7, #16]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	1ad2      	subs	r2, r2, r3
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800812e:	69b8      	ldr	r0, [r7, #24]
 8008130:	f000 f8fc 	bl	800832c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008134:	4b1b      	ldr	r3, [pc, #108]	@ (80081a4 <pvPortMalloc+0x184>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	4a19      	ldr	r2, [pc, #100]	@ (80081a4 <pvPortMalloc+0x184>)
 8008140:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008142:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <pvPortMalloc+0x184>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b19      	ldr	r3, [pc, #100]	@ (80081ac <pvPortMalloc+0x18c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d203      	bcs.n	8008156 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800814e:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <pvPortMalloc+0x184>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <pvPortMalloc+0x18c>)
 8008154:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	4b11      	ldr	r3, [pc, #68]	@ (80081a0 <pvPortMalloc+0x180>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	431a      	orrs	r2, r3
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800816a:	f7fe fb73 	bl	8006854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <pvPortMalloc+0x170>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60fb      	str	r3, [r7, #12]
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	e7fd      	b.n	800818c <pvPortMalloc+0x16c>
	return pvReturn;
 8008190:	69fb      	ldr	r3, [r7, #28]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	@ 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20003934 	.word	0x20003934
 80081a0:	20003940 	.word	0x20003940
 80081a4:	20003938 	.word	0x20003938
 80081a8:	2000392c 	.word	0x2000392c
 80081ac:	2000393c 	.word	0x2000393c

080081b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d04a      	beq.n	8008258 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081c2:	2308      	movs	r3, #8
 80081c4:	425b      	negs	r3, r3
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <vPortFree+0xb0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <vPortFree+0x46>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60fb      	str	r3, [r7, #12]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <vPortFree+0x66>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	60bb      	str	r3, [r7, #8]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	4b11      	ldr	r3, [pc, #68]	@ (8008260 <vPortFree+0xb0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d019      	beq.n	8008258 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d115      	bne.n	8008258 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <vPortFree+0xb0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	43db      	mvns	r3, r3
 8008236:	401a      	ands	r2, r3
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800823c:	f7fe fafc 	bl	8006838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	4b07      	ldr	r3, [pc, #28]	@ (8008264 <vPortFree+0xb4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4413      	add	r3, r2
 800824a:	4a06      	ldr	r2, [pc, #24]	@ (8008264 <vPortFree+0xb4>)
 800824c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800824e:	6938      	ldr	r0, [r7, #16]
 8008250:	f000 f86c 	bl	800832c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008254:	f7fe fafe 	bl	8006854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008258:	bf00      	nop
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20003940 	.word	0x20003940
 8008264:	20003938 	.word	0x20003938

08008268 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800826e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8008272:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008274:	4b27      	ldr	r3, [pc, #156]	@ (8008314 <prvHeapInit+0xac>)
 8008276:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00c      	beq.n	800829c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3307      	adds	r3, #7
 8008286:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	4a1f      	ldr	r2, [pc, #124]	@ (8008314 <prvHeapInit+0xac>)
 8008298:	4413      	add	r3, r2
 800829a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008318 <prvHeapInit+0xb0>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008318 <prvHeapInit+0xb0>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082b4:	2208      	movs	r2, #8
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0307 	bic.w	r3, r3, #7
 80082c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a15      	ldr	r2, [pc, #84]	@ (800831c <prvHeapInit+0xb4>)
 80082c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082ca:	4b14      	ldr	r3, [pc, #80]	@ (800831c <prvHeapInit+0xb4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082d2:	4b12      	ldr	r3, [pc, #72]	@ (800831c <prvHeapInit+0xb4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	1ad2      	subs	r2, r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082e8:	4b0c      	ldr	r3, [pc, #48]	@ (800831c <prvHeapInit+0xb4>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008320 <prvHeapInit+0xb8>)
 80082f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4a09      	ldr	r2, [pc, #36]	@ (8008324 <prvHeapInit+0xbc>)
 80082fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008300:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <prvHeapInit+0xc0>)
 8008302:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008306:	601a      	str	r2, [r3, #0]
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000112c 	.word	0x2000112c
 8008318:	2000392c 	.word	0x2000392c
 800831c:	20003934 	.word	0x20003934
 8008320:	2000393c 	.word	0x2000393c
 8008324:	20003938 	.word	0x20003938
 8008328:	20003940 	.word	0x20003940

0800832c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008334:	4b27      	ldr	r3, [pc, #156]	@ (80083d4 <prvInsertBlockIntoFreeList+0xa8>)
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e002      	b.n	8008340 <prvInsertBlockIntoFreeList+0x14>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d8f7      	bhi.n	800833a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4413      	add	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d108      	bne.n	800836e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	441a      	add	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	441a      	add	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d118      	bne.n	80083b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b14      	ldr	r3, [pc, #80]	@ (80083d8 <prvInsertBlockIntoFreeList+0xac>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d00d      	beq.n	80083aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	441a      	add	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e008      	b.n	80083bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083aa:	4b0b      	ldr	r3, [pc, #44]	@ (80083d8 <prvInsertBlockIntoFreeList+0xac>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e003      	b.n	80083bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d002      	beq.n	80083ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr
 80083d4:	2000392c 	.word	0x2000392c
 80083d8:	20003934 	.word	0x20003934

080083dc <memset>:
 80083dc:	4603      	mov	r3, r0
 80083de:	4402      	add	r2, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	2600      	movs	r6, #0
 80083f0:	4d0c      	ldr	r5, [pc, #48]	@ (8008424 <__libc_init_array+0x38>)
 80083f2:	4c0d      	ldr	r4, [pc, #52]	@ (8008428 <__libc_init_array+0x3c>)
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	f000 f828 	bl	8008450 <_init>
 8008400:	2600      	movs	r6, #0
 8008402:	4d0a      	ldr	r5, [pc, #40]	@ (800842c <__libc_init_array+0x40>)
 8008404:	4c0a      	ldr	r4, [pc, #40]	@ (8008430 <__libc_init_array+0x44>)
 8008406:	1b64      	subs	r4, r4, r5
 8008408:	10a4      	asrs	r4, r4, #2
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f855 3b04 	ldr.w	r3, [r5], #4
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f855 3b04 	ldr.w	r3, [r5], #4
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	0800866c 	.word	0x0800866c
 8008428:	0800866c 	.word	0x0800866c
 800842c:	0800866c 	.word	0x0800866c
 8008430:	08008670 	.word	0x08008670

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	4291      	cmp	r1, r2
 8008448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <_init>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr

0800845c <_fini>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr
